
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080064c8  080064c8  000074c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006508  08006508  0000820c  2**0
                  CONTENTS
  4 .ARM          00000008  08006508  08006508  00007508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006510  08006510  0000820c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006510  08006510  00007510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006514  08006514  00007514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08006518  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d8  20000210  08006724  00008210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000be8  08006724  00008be8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159fc  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b39  00000000  00000000  0001dc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00020778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d94  00000000  00000000  000218f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272ef  00000000  00000000  00022684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160d9  00000000  00000000  00049973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd05e  00000000  00000000  0005fa4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015caaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004990  00000000  00000000  0015caf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00161480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080064b0 	.word	0x080064b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	080064b0 	.word	0x080064b0

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_d2uiz>:
 800046c:	004a      	lsls	r2, r1, #1
 800046e:	d211      	bcs.n	8000494 <__aeabi_d2uiz+0x28>
 8000470:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000474:	d211      	bcs.n	800049a <__aeabi_d2uiz+0x2e>
 8000476:	d50d      	bpl.n	8000494 <__aeabi_d2uiz+0x28>
 8000478:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800047c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000480:	d40e      	bmi.n	80004a0 <__aeabi_d2uiz+0x34>
 8000482:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000486:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800048a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800048e:	fa23 f002 	lsr.w	r0, r3, r2
 8000492:	4770      	bx	lr
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	4770      	bx	lr
 800049a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800049e:	d102      	bne.n	80004a6 <__aeabi_d2uiz+0x3a>
 80004a0:	f04f 30ff 	mov.w	r0, #4294967295
 80004a4:	4770      	bx	lr
 80004a6:	f04f 0000 	mov.w	r0, #0
 80004aa:	4770      	bx	lr

080004ac <__aeabi_uldivmod>:
 80004ac:	b953      	cbnz	r3, 80004c4 <__aeabi_uldivmod+0x18>
 80004ae:	b94a      	cbnz	r2, 80004c4 <__aeabi_uldivmod+0x18>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	bf08      	it	eq
 80004b4:	2800      	cmpeq	r0, #0
 80004b6:	bf1c      	itt	ne
 80004b8:	f04f 31ff 	movne.w	r1, #4294967295
 80004bc:	f04f 30ff 	movne.w	r0, #4294967295
 80004c0:	f000 b96a 	b.w	8000798 <__aeabi_idiv0>
 80004c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80004c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004cc:	f000 f806 	bl	80004dc <__udivmoddi4>
 80004d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004d8:	b004      	add	sp, #16
 80004da:	4770      	bx	lr

080004dc <__udivmoddi4>:
 80004dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004e0:	9d08      	ldr	r5, [sp, #32]
 80004e2:	460c      	mov	r4, r1
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d14e      	bne.n	8000586 <__udivmoddi4+0xaa>
 80004e8:	4694      	mov	ip, r2
 80004ea:	458c      	cmp	ip, r1
 80004ec:	4686      	mov	lr, r0
 80004ee:	fab2 f282 	clz	r2, r2
 80004f2:	d962      	bls.n	80005ba <__udivmoddi4+0xde>
 80004f4:	b14a      	cbz	r2, 800050a <__udivmoddi4+0x2e>
 80004f6:	f1c2 0320 	rsb	r3, r2, #32
 80004fa:	4091      	lsls	r1, r2
 80004fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	4319      	orrs	r1, r3
 8000506:	fa00 fe02 	lsl.w	lr, r0, r2
 800050a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800050e:	fa1f f68c 	uxth.w	r6, ip
 8000512:	fbb1 f4f7 	udiv	r4, r1, r7
 8000516:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800051a:	fb07 1114 	mls	r1, r7, r4, r1
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb04 f106 	mul.w	r1, r4, r6
 8000526:	4299      	cmp	r1, r3
 8000528:	d90a      	bls.n	8000540 <__udivmoddi4+0x64>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000532:	f080 8112 	bcs.w	800075a <__udivmoddi4+0x27e>
 8000536:	4299      	cmp	r1, r3
 8000538:	f240 810f 	bls.w	800075a <__udivmoddi4+0x27e>
 800053c:	3c02      	subs	r4, #2
 800053e:	4463      	add	r3, ip
 8000540:	1a59      	subs	r1, r3, r1
 8000542:	fa1f f38e 	uxth.w	r3, lr
 8000546:	fbb1 f0f7 	udiv	r0, r1, r7
 800054a:	fb07 1110 	mls	r1, r7, r0, r1
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f606 	mul.w	r6, r0, r6
 8000556:	429e      	cmp	r6, r3
 8000558:	d90a      	bls.n	8000570 <__udivmoddi4+0x94>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000562:	f080 80fc 	bcs.w	800075e <__udivmoddi4+0x282>
 8000566:	429e      	cmp	r6, r3
 8000568:	f240 80f9 	bls.w	800075e <__udivmoddi4+0x282>
 800056c:	4463      	add	r3, ip
 800056e:	3802      	subs	r0, #2
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000576:	2100      	movs	r1, #0
 8000578:	b11d      	cbz	r5, 8000582 <__udivmoddi4+0xa6>
 800057a:	40d3      	lsrs	r3, r2
 800057c:	2200      	movs	r2, #0
 800057e:	e9c5 3200 	strd	r3, r2, [r5]
 8000582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000586:	428b      	cmp	r3, r1
 8000588:	d905      	bls.n	8000596 <__udivmoddi4+0xba>
 800058a:	b10d      	cbz	r5, 8000590 <__udivmoddi4+0xb4>
 800058c:	e9c5 0100 	strd	r0, r1, [r5]
 8000590:	2100      	movs	r1, #0
 8000592:	4608      	mov	r0, r1
 8000594:	e7f5      	b.n	8000582 <__udivmoddi4+0xa6>
 8000596:	fab3 f183 	clz	r1, r3
 800059a:	2900      	cmp	r1, #0
 800059c:	d146      	bne.n	800062c <__udivmoddi4+0x150>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d302      	bcc.n	80005a8 <__udivmoddi4+0xcc>
 80005a2:	4290      	cmp	r0, r2
 80005a4:	f0c0 80f0 	bcc.w	8000788 <__udivmoddi4+0x2ac>
 80005a8:	1a86      	subs	r6, r0, r2
 80005aa:	eb64 0303 	sbc.w	r3, r4, r3
 80005ae:	2001      	movs	r0, #1
 80005b0:	2d00      	cmp	r5, #0
 80005b2:	d0e6      	beq.n	8000582 <__udivmoddi4+0xa6>
 80005b4:	e9c5 6300 	strd	r6, r3, [r5]
 80005b8:	e7e3      	b.n	8000582 <__udivmoddi4+0xa6>
 80005ba:	2a00      	cmp	r2, #0
 80005bc:	f040 8090 	bne.w	80006e0 <__udivmoddi4+0x204>
 80005c0:	eba1 040c 	sub.w	r4, r1, ip
 80005c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005c8:	fa1f f78c 	uxth.w	r7, ip
 80005cc:	2101      	movs	r1, #1
 80005ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80005d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80005d6:	fb08 4416 	mls	r4, r8, r6, r4
 80005da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005de:	fb07 f006 	mul.w	r0, r7, r6
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d908      	bls.n	80005f8 <__udivmoddi4+0x11c>
 80005e6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80005ee:	d202      	bcs.n	80005f6 <__udivmoddi4+0x11a>
 80005f0:	4298      	cmp	r0, r3
 80005f2:	f200 80cd 	bhi.w	8000790 <__udivmoddi4+0x2b4>
 80005f6:	4626      	mov	r6, r4
 80005f8:	1a1c      	subs	r4, r3, r0
 80005fa:	fa1f f38e 	uxth.w	r3, lr
 80005fe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000602:	fb08 4410 	mls	r4, r8, r0, r4
 8000606:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800060a:	fb00 f707 	mul.w	r7, r0, r7
 800060e:	429f      	cmp	r7, r3
 8000610:	d908      	bls.n	8000624 <__udivmoddi4+0x148>
 8000612:	eb1c 0303 	adds.w	r3, ip, r3
 8000616:	f100 34ff 	add.w	r4, r0, #4294967295
 800061a:	d202      	bcs.n	8000622 <__udivmoddi4+0x146>
 800061c:	429f      	cmp	r7, r3
 800061e:	f200 80b0 	bhi.w	8000782 <__udivmoddi4+0x2a6>
 8000622:	4620      	mov	r0, r4
 8000624:	1bdb      	subs	r3, r3, r7
 8000626:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800062a:	e7a5      	b.n	8000578 <__udivmoddi4+0x9c>
 800062c:	f1c1 0620 	rsb	r6, r1, #32
 8000630:	408b      	lsls	r3, r1
 8000632:	fa22 f706 	lsr.w	r7, r2, r6
 8000636:	431f      	orrs	r7, r3
 8000638:	fa20 fc06 	lsr.w	ip, r0, r6
 800063c:	fa04 f301 	lsl.w	r3, r4, r1
 8000640:	ea43 030c 	orr.w	r3, r3, ip
 8000644:	40f4      	lsrs	r4, r6
 8000646:	fa00 f801 	lsl.w	r8, r0, r1
 800064a:	0c38      	lsrs	r0, r7, #16
 800064c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000650:	fbb4 fef0 	udiv	lr, r4, r0
 8000654:	fa1f fc87 	uxth.w	ip, r7
 8000658:	fb00 441e 	mls	r4, r0, lr, r4
 800065c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000660:	fb0e f90c 	mul.w	r9, lr, ip
 8000664:	45a1      	cmp	r9, r4
 8000666:	fa02 f201 	lsl.w	r2, r2, r1
 800066a:	d90a      	bls.n	8000682 <__udivmoddi4+0x1a6>
 800066c:	193c      	adds	r4, r7, r4
 800066e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000672:	f080 8084 	bcs.w	800077e <__udivmoddi4+0x2a2>
 8000676:	45a1      	cmp	r9, r4
 8000678:	f240 8081 	bls.w	800077e <__udivmoddi4+0x2a2>
 800067c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000680:	443c      	add	r4, r7
 8000682:	eba4 0409 	sub.w	r4, r4, r9
 8000686:	fa1f f983 	uxth.w	r9, r3
 800068a:	fbb4 f3f0 	udiv	r3, r4, r0
 800068e:	fb00 4413 	mls	r4, r0, r3, r4
 8000692:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000696:	fb03 fc0c 	mul.w	ip, r3, ip
 800069a:	45a4      	cmp	ip, r4
 800069c:	d907      	bls.n	80006ae <__udivmoddi4+0x1d2>
 800069e:	193c      	adds	r4, r7, r4
 80006a0:	f103 30ff 	add.w	r0, r3, #4294967295
 80006a4:	d267      	bcs.n	8000776 <__udivmoddi4+0x29a>
 80006a6:	45a4      	cmp	ip, r4
 80006a8:	d965      	bls.n	8000776 <__udivmoddi4+0x29a>
 80006aa:	3b02      	subs	r3, #2
 80006ac:	443c      	add	r4, r7
 80006ae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80006b2:	fba0 9302 	umull	r9, r3, r0, r2
 80006b6:	eba4 040c 	sub.w	r4, r4, ip
 80006ba:	429c      	cmp	r4, r3
 80006bc:	46ce      	mov	lr, r9
 80006be:	469c      	mov	ip, r3
 80006c0:	d351      	bcc.n	8000766 <__udivmoddi4+0x28a>
 80006c2:	d04e      	beq.n	8000762 <__udivmoddi4+0x286>
 80006c4:	b155      	cbz	r5, 80006dc <__udivmoddi4+0x200>
 80006c6:	ebb8 030e 	subs.w	r3, r8, lr
 80006ca:	eb64 040c 	sbc.w	r4, r4, ip
 80006ce:	fa04 f606 	lsl.w	r6, r4, r6
 80006d2:	40cb      	lsrs	r3, r1
 80006d4:	431e      	orrs	r6, r3
 80006d6:	40cc      	lsrs	r4, r1
 80006d8:	e9c5 6400 	strd	r6, r4, [r5]
 80006dc:	2100      	movs	r1, #0
 80006de:	e750      	b.n	8000582 <__udivmoddi4+0xa6>
 80006e0:	f1c2 0320 	rsb	r3, r2, #32
 80006e4:	fa20 f103 	lsr.w	r1, r0, r3
 80006e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80006ec:	fa24 f303 	lsr.w	r3, r4, r3
 80006f0:	4094      	lsls	r4, r2
 80006f2:	430c      	orrs	r4, r1
 80006f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006f8:	fa00 fe02 	lsl.w	lr, r0, r2
 80006fc:	fa1f f78c 	uxth.w	r7, ip
 8000700:	fbb3 f0f8 	udiv	r0, r3, r8
 8000704:	fb08 3110 	mls	r1, r8, r0, r3
 8000708:	0c23      	lsrs	r3, r4, #16
 800070a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800070e:	fb00 f107 	mul.w	r1, r0, r7
 8000712:	4299      	cmp	r1, r3
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x24c>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 36ff 	add.w	r6, r0, #4294967295
 800071e:	d22c      	bcs.n	800077a <__udivmoddi4+0x29e>
 8000720:	4299      	cmp	r1, r3
 8000722:	d92a      	bls.n	800077a <__udivmoddi4+0x29e>
 8000724:	3802      	subs	r0, #2
 8000726:	4463      	add	r3, ip
 8000728:	1a5b      	subs	r3, r3, r1
 800072a:	b2a4      	uxth	r4, r4
 800072c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000730:	fb08 3311 	mls	r3, r8, r1, r3
 8000734:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000738:	fb01 f307 	mul.w	r3, r1, r7
 800073c:	42a3      	cmp	r3, r4
 800073e:	d908      	bls.n	8000752 <__udivmoddi4+0x276>
 8000740:	eb1c 0404 	adds.w	r4, ip, r4
 8000744:	f101 36ff 	add.w	r6, r1, #4294967295
 8000748:	d213      	bcs.n	8000772 <__udivmoddi4+0x296>
 800074a:	42a3      	cmp	r3, r4
 800074c:	d911      	bls.n	8000772 <__udivmoddi4+0x296>
 800074e:	3902      	subs	r1, #2
 8000750:	4464      	add	r4, ip
 8000752:	1ae4      	subs	r4, r4, r3
 8000754:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000758:	e739      	b.n	80005ce <__udivmoddi4+0xf2>
 800075a:	4604      	mov	r4, r0
 800075c:	e6f0      	b.n	8000540 <__udivmoddi4+0x64>
 800075e:	4608      	mov	r0, r1
 8000760:	e706      	b.n	8000570 <__udivmoddi4+0x94>
 8000762:	45c8      	cmp	r8, r9
 8000764:	d2ae      	bcs.n	80006c4 <__udivmoddi4+0x1e8>
 8000766:	ebb9 0e02 	subs.w	lr, r9, r2
 800076a:	eb63 0c07 	sbc.w	ip, r3, r7
 800076e:	3801      	subs	r0, #1
 8000770:	e7a8      	b.n	80006c4 <__udivmoddi4+0x1e8>
 8000772:	4631      	mov	r1, r6
 8000774:	e7ed      	b.n	8000752 <__udivmoddi4+0x276>
 8000776:	4603      	mov	r3, r0
 8000778:	e799      	b.n	80006ae <__udivmoddi4+0x1d2>
 800077a:	4630      	mov	r0, r6
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0x24c>
 800077e:	46d6      	mov	lr, sl
 8000780:	e77f      	b.n	8000682 <__udivmoddi4+0x1a6>
 8000782:	4463      	add	r3, ip
 8000784:	3802      	subs	r0, #2
 8000786:	e74d      	b.n	8000624 <__udivmoddi4+0x148>
 8000788:	4606      	mov	r6, r0
 800078a:	4623      	mov	r3, r4
 800078c:	4608      	mov	r0, r1
 800078e:	e70f      	b.n	80005b0 <__udivmoddi4+0xd4>
 8000790:	3e02      	subs	r6, #2
 8000792:	4463      	add	r3, ip
 8000794:	e730      	b.n	80005f8 <__udivmoddi4+0x11c>
 8000796:	bf00      	nop

08000798 <__aeabi_idiv0>:
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop

0800079c <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <modbus_1t5_Timeout+0x3c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2201      	movs	r2, #1
 80007a6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <modbus_1t5_Timeout+0x3c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80007b4:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <modbus_1t5_Timeout+0x3c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	691b      	ldr	r3, [r3, #16]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <modbus_1t5_Timeout+0x3c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	691b      	ldr	r3, [r3, #16]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f042 0201 	orr.w	r2, r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	2000022c 	.word	0x2000022c

080007dc <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80007e4:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <modbus_3t5_Timeout+0x1c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2201      	movs	r2, #1
 80007ea:	755a      	strb	r2, [r3, #21]

}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	2000022c 	.word	0x2000022c

080007fc <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f004 fcf1 	bl	80051ec <HAL_UART_GetError>
 800080a:	4603      	mov	r3, r0
 800080c:	2b20      	cmp	r3, #32
 800080e:	d101      	bne.n	8000814 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000810:	f7ff ffc4 	bl	800079c <modbus_1t5_Timeout>

	}
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000826:	4a25      	ldr	r2, [pc, #148]	@ (80008bc <Modbus_init+0xa0>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800082c:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <Modbus_init+0xa0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	691b      	ldr	r3, [r3, #16]
 8000838:	4a21      	ldr	r2, [pc, #132]	@ (80008c0 <Modbus_init+0xa4>)
 800083a:	210e      	movs	r1, #14
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fad7 	bl	8003df0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	2110      	movs	r1, #16
 8000848:	4618      	mov	r0, r3
 800084a:	f004 fc79 	bl	8005140 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	4618      	mov	r0, r3
 8000854:	f004 fc90 	bl	8005178 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <Modbus_init+0xa8>)
 800085e:	2104      	movs	r1, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f003 ff57 	bl	8004714 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <Modbus_init+0xa0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <Modbus_init+0xa0>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <Modbus_init+0xa0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000878:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800087c:	4413      	add	r3, r2
 800087e:	3302      	adds	r3, #2
 8000880:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000884:	4619      	mov	r1, r3
 8000886:	f004 f87f 	bl	8004988 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <Modbus_init+0xa0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b01      	cmp	r3, #1
 8000898:	d10c      	bne.n	80008b4 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <Modbus_init+0xa0>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fe4d 	bl	8003540 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80008a6:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <Modbus_init+0xa0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	691b      	ldr	r3, [r3, #16]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 ff26 	bl	8003700 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000022c 	.word	0x2000022c
 80008c0:	080007dd 	.word	0x080007dd
 80008c4:	080007fd 	.word	0x080007fd

080008c8 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80008d4:	23ff      	movs	r3, #255	@ 0xff
 80008d6:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80008d8:	23ff      	movs	r3, #255	@ 0xff
 80008da:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80008dc:	e013      	b.n	8000906 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	7bbb      	ldrb	r3, [r7, #14]
 80008e8:	4053      	eors	r3, r2
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80008ee:	4a0f      	ldr	r2, [pc, #60]	@ (800092c <CRC16+0x64>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4413      	add	r3, r2
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	4053      	eors	r3, r2
 80008fa:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80008fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000930 <CRC16+0x68>)
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000906:	883b      	ldrh	r3, [r7, #0]
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	803a      	strh	r2, [r7, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1e6      	bne.n	80008de <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	b21a      	sxth	r2, r3
 8000916:	7bbb      	ldrb	r3, [r7, #14]
 8000918:	b21b      	sxth	r3, r3
 800091a:	4313      	orrs	r3, r2
 800091c:	b21b      	sxth	r3, r3
 800091e:	b29b      	uxth	r3, r3
}
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	20000100 	.word	0x20000100
 8000930:	20000000 	.word	0x20000000

08000934 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800093a:	4b7e      	ldr	r3, [pc, #504]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	7ddb      	ldrb	r3, [r3, #23]
 8000940:	3b01      	subs	r3, #1
 8000942:	2b03      	cmp	r3, #3
 8000944:	d80a      	bhi.n	800095c <Modbus_Protocal_Worker+0x28>
 8000946:	a201      	add	r2, pc, #4	@ (adr r2, 800094c <Modbus_Protocal_Worker+0x18>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	08000967 	.word	0x08000967
 8000950:	08000afb 	.word	0x08000afb
 8000954:	080009f3 	.word	0x080009f3
 8000958:	08000a37 	.word	0x08000a37
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800095c:	4b75      	ldr	r3, [pc, #468]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2201      	movs	r2, #1
 8000962:	75da      	strb	r2, [r3, #23]
		break;
 8000964:	e0e1      	b.n	8000b2a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000966:	4b73      	ldr	r3, [pc, #460]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800096e:	2b00      	cmp	r3, #0
 8000970:	d006      	beq.n	8000980 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8000972:	4b70      	ldr	r3, [pc, #448]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2202      	movs	r2, #2
 8000978:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 800097a:	f000 f9cd 	bl	8000d18 <Modbus_Emission>
 800097e:	e018      	b.n	80009b2 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8000980:	4b6c      	ldr	r3, [pc, #432]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800098a:	4b6a      	ldr	r3, [pc, #424]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000994:	b29b      	uxth	r3, r3
 8000996:	429a      	cmp	r2, r3
 8000998:	d00b      	beq.n	80009b2 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800099a:	4b66      	ldr	r3, [pc, #408]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2200      	movs	r2, #0
 80009a0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80009a2:	4b64      	ldr	r3, [pc, #400]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2200      	movs	r2, #0
 80009a8:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80009aa:	4b62      	ldr	r3, [pc, #392]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2203      	movs	r2, #3
 80009b0:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80009b2:	4b60      	ldr	r3, [pc, #384]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009bc:	2b20      	cmp	r3, #32
 80009be:	f040 80ad 	bne.w	8000b1c <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80009c2:	4b5c      	ldr	r3, [pc, #368]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80009cc:	4b59      	ldr	r3, [pc, #356]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80009d2:	4b58      	ldr	r3, [pc, #352]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4b57      	ldr	r3, [pc, #348]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80009de:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80009e2:	4413      	add	r3, r2
 80009e4:	3302      	adds	r3, #2
 80009e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80009ea:	4619      	mov	r1, r3
 80009ec:	f003 ffcc 	bl	8004988 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80009f0:	e094      	b.n	8000b1c <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80009f2:	4b50      	ldr	r3, [pc, #320]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	7d1b      	ldrb	r3, [r3, #20]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f000 8091 	beq.w	8000b20 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80009fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	22fe      	movs	r2, #254	@ 0xfe
 8000a04:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000a06:	4b4b      	ldr	r3, [pc, #300]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8000a10:	4b48      	ldr	r3, [pc, #288]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8000a20:	4b44      	ldr	r3, [pc, #272]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a22:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000a24:	1a8a      	subs	r2, r1, r2
 8000a26:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8000a28:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000a2c:	4b41      	ldr	r3, [pc, #260]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2204      	movs	r2, #4
 8000a32:	75da      	strb	r2, [r3, #23]
		}
		break;
 8000a34:	e074      	b.n	8000b20 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000a36:	4b3f      	ldr	r3, [pc, #252]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8000a3e:	f113 0f02 	cmn.w	r3, #2
 8000a42:	d150      	bne.n	8000ae6 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000a44:	4b3b      	ldr	r3, [pc, #236]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000a4c:	4b39      	ldr	r3, [pc, #228]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000a54:	4b37      	ldr	r3, [pc, #220]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000a5c:	3b02      	subs	r3, #2
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4610      	mov	r0, r2
 8000a62:	f7ff ff31 	bl	80008c8 <CRC16>
 8000a66:	4603      	mov	r3, r0
 8000a68:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000a6a:	793a      	ldrb	r2, [r7, #4]
 8000a6c:	4b31      	ldr	r3, [pc, #196]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a6e:	6819      	ldr	r1, [r3, #0]
 8000a70:	4b30      	ldr	r3, [pc, #192]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000a78:	3b02      	subs	r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d10c      	bne.n	8000a9e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000a84:	797a      	ldrb	r2, [r7, #5]
 8000a86:	4b2b      	ldr	r3, [pc, #172]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a88:	6819      	ldr	r1, [r3, #0]
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000a92:	3b01      	subs	r3, #1
 8000a94:	440b      	add	r3, r1
 8000a96:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d004      	beq.n	8000aa8 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	22ff      	movs	r2, #255	@ 0xff
 8000aa4:	759a      	strb	r2, [r3, #22]
				break;
 8000aa6:	e040      	b.n	8000b2a <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000aa8:	4b22      	ldr	r3, [pc, #136]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8000ab0:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d113      	bne.n	8000ae2 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000aba:	4b1e      	ldr	r3, [pc, #120]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000aca:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000acc:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000ad4:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f005 fcdc 	bl	8006494 <memcpy>

			//execute command
			Modbus_frame_response();
 8000adc:	f000 f904 	bl	8000ce8 <Modbus_frame_response>
 8000ae0:	e001      	b.n	8000ae6 <Modbus_Protocal_Worker+0x1b2>
				break;
 8000ae2:	bf00      	nop
					}
		break;


	}
}
 8000ae4:	e021      	b.n	8000b2a <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8000ae6:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	7d5b      	ldrb	r3, [r3, #21]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d019      	beq.n	8000b24 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8000af0:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2201      	movs	r2, #1
 8000af6:	75da      	strb	r2, [r3, #23]
		break;
 8000af8:	e014      	b.n	8000b24 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b04:	2b20      	cmp	r3, #32
 8000b06:	d10f      	bne.n	8000b28 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <Modbus_Protocal_Worker+0x200>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2201      	movs	r2, #1
 8000b18:	75da      	strb	r2, [r3, #23]
		break;
 8000b1a:	e005      	b.n	8000b28 <Modbus_Protocal_Worker+0x1f4>
		break;
 8000b1c:	bf00      	nop
 8000b1e:	e004      	b.n	8000b2a <Modbus_Protocal_Worker+0x1f6>
		break;
 8000b20:	bf00      	nop
 8000b22:	e002      	b.n	8000b2a <Modbus_Protocal_Worker+0x1f6>
		break;
 8000b24:	bf00      	nop
 8000b26:	e000      	b.n	8000b2a <Modbus_Protocal_Worker+0x1f6>
		break;
 8000b28:	bf00      	nop
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2000022c 	.word	0x2000022c

08000b38 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <modbusWrite1Register+0x7c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	7e5b      	ldrb	r3, [r3, #25]
 8000b44:	021b      	lsls	r3, r3, #8
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb4 <modbusWrite1Register+0x7c>)
 8000b4a:	6812      	ldr	r2, [r2, #0]
 8000b4c:	7e92      	ldrb	r2, [r2, #26]
 8000b4e:	4413      	add	r3, r2
 8000b50:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8000b52:	88fa      	ldrh	r2, [r7, #6]
 8000b54:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <modbusWrite1Register+0x7c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d903      	bls.n	8000b66 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f000 f8a0 	bl	8000ca4 <ModbusErrorReply>
			 return;
 8000b64:	e023      	b.n	8000bae <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8000b66:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <modbusWrite1Register+0x7c>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <modbusWrite1Register+0x7c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6859      	ldr	r1, [r3, #4]
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	440b      	add	r3, r1
 8000b76:	7ed2      	ldrb	r2, [r2, #27]
 8000b78:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <modbusWrite1Register+0x7c>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <modbusWrite1Register+0x7c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	6859      	ldr	r1, [r3, #4]
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	440b      	add	r3, r1
 8000b8a:	7f12      	ldrb	r2, [r2, #28]
 8000b8c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <modbusWrite1Register+0x7c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8000b96:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <modbusWrite1Register+0x7c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8000b9c:	2208      	movs	r2, #8
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f005 fc78 	bl	8006494 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <modbusWrite1Register+0x7c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2205      	movs	r2, #5
 8000baa:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2000022c 	.word	0x2000022c

08000bb8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000bbe:	4b38      	ldr	r3, [pc, #224]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	7edb      	ldrb	r3, [r3, #27]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	4a35      	ldr	r2, [pc, #212]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	7f12      	ldrb	r2, [r2, #28]
 8000bce:	4413      	add	r3, r2
 8000bd0:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000bd2:	4b33      	ldr	r3, [pc, #204]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	7e5b      	ldrb	r3, [r3, #25]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	4a30      	ldr	r2, [pc, #192]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000bde:	6812      	ldr	r2, [r2, #0]
 8000be0:	7e92      	ldrb	r2, [r2, #26]
 8000be2:	4413      	add	r3, r2
 8000be4:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <modbusRead1Register+0x3a>
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	2b7d      	cmp	r3, #125	@ 0x7d
 8000bf0:	d903      	bls.n	8000bfa <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 f856 	bl	8000ca4 <ModbusErrorReply>
		 return;
 8000bf8:	e04e      	b.n	8000c98 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000bfa:	88ba      	ldrh	r2, [r7, #4]
 8000bfc:	4b28      	ldr	r3, [pc, #160]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d808      	bhi.n	8000c18 <modbusRead1Register+0x60>
 8000c06:	88ba      	ldrh	r2, [r7, #4]
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b24      	ldr	r3, [pc, #144]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d903      	bls.n	8000c20 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f000 f843 	bl	8000ca4 <ModbusErrorReply>
		 return;
 8000c1e:	e03b      	b.n	8000c98 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2203      	movs	r2, #3
 8000c26:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	0052      	lsls	r2, r2, #1
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000c3a:	2400      	movs	r4, #0
 8000c3c:	e020      	b.n	8000c80 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	88bb      	ldrh	r3, [r7, #4]
 8000c46:	4423      	add	r3, r4
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	1c63      	adds	r3, r4, #1
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	7849      	ldrb	r1, [r1, #1]
 8000c56:	4413      	add	r3, r2
 8000c58:	460a      	mov	r2, r1
 8000c5a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	4423      	add	r3, r4
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	18d1      	adds	r1, r2, r3
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	0063      	lsls	r3, r4, #1
 8000c72:	3303      	adds	r3, #3
 8000c74:	7809      	ldrb	r1, [r1, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	460a      	mov	r2, r1
 8000c7a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8000c7e:	3401      	adds	r4, #1
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	429c      	cmp	r4, r3
 8000c84:	dbdb      	blt.n	8000c3e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <modbusRead1Register+0xe8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	0052      	lsls	r2, r2, #1
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000022c 	.word	0x2000022c

08000ca4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <ModbusErrorReply+0x40>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	7e1a      	ldrb	r2, [r3, #24]
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <ModbusErrorReply+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <ModbusErrorReply+0x40>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	79fa      	ldrb	r2, [r7, #7]
 8000cc8:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <ModbusErrorReply+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000022c 	.word	0x2000022c

08000ce8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <Modbus_frame_response+0x2c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	7e1b      	ldrb	r3, [r3, #24]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d004      	beq.n	8000d00 <Modbus_frame_response+0x18>
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d105      	bne.n	8000d06 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000cfa:	f7ff ff1d 	bl	8000b38 <modbusWrite1Register>
		break;
 8000cfe:	e006      	b.n	8000d0e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000d00:	f7ff ff5a 	bl	8000bb8 <modbusRead1Register>
		break;
 8000d04:	e003      	b.n	8000d0e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff ffcc 	bl	8000ca4 <ModbusErrorReply>
		break;
 8000d0c:	bf00      	nop

	}
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000022c 	.word	0x2000022c

08000d18 <Modbus_Emission>:

void Modbus_Emission()
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000d1e:	4b38      	ldr	r3, [pc, #224]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d28:	2b20      	cmp	r3, #32
 8000d2a:	d15d      	bne.n	8000de8 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000d2c:	4b34      	ldr	r3, [pc, #208]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b33      	ldr	r3, [pc, #204]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	7812      	ldrb	r2, [r2, #0]
 8000d36:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000d3a:	4b31      	ldr	r3, [pc, #196]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000d42:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000d44:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8000d54:	461a      	mov	r2, r3
 8000d56:	f005 fb9d 	bl	8006494 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000d5a:	4b29      	ldr	r3, [pc, #164]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3203      	adds	r2, #3
 8000d6a:	b292      	uxth	r2, r2
 8000d6c:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000d70:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000d78:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000d80:	3b02      	subs	r3, #2
 8000d82:	4619      	mov	r1, r3
 8000d84:	4610      	mov	r0, r2
 8000d86:	f7ff fd9f 	bl	80008c8 <CRC16>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000d9a:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000d9c:	7939      	ldrb	r1, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	460a      	mov	r2, r1
 8000da2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000da6:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000db2:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000db4:	7979      	ldrb	r1, [r7, #5]
 8000db6:	4413      	add	r3, r2
 8000db8:	460a      	mov	r2, r1
 8000dba:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc8:	2b20      	cmp	r3, #32
 8000dca:	d10d      	bne.n	8000de8 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000dde:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000de2:	461a      	mov	r2, r3
 8000de4:	f003 fd50 	bl	8004888 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <Modbus_Emission+0xe8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2200      	movs	r2, #0
 8000df6:	755a      	strb	r2, [r3, #21]

}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000022c 	.word	0x2000022c

08000e04 <sendall>:
 *  Created on: Apr 29, 2024
 *      Author: Phatt
 */
#include "globalVar.h"

void sendall(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	registerFrame[0x04].U16 = gripperMovementActualStatus;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <sendall+0x84>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <sendall+0x88>)
 8000e10:	811a      	strh	r2, [r3, #8]
	registerFrame[0x10].U16 = zMovementStatus;
 8000e12:	4b1f      	ldr	r3, [pc, #124]	@ (8000e90 <sendall+0x8c>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <sendall+0x88>)
 8000e1a:	841a      	strh	r2, [r3, #32]
	registerFrame[0x11].U16 = zPosition * 10;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <sendall+0x90>)
 8000e1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <sendall+0x94>)
 8000e28:	f7ff f9f6 	bl	8000218 <__aeabi_dmul>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	f7ff fb1a 	bl	800046c <__aeabi_d2uiz>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <sendall+0x88>)
 8000e3e:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[0x12].U16 = zSpeed;
 8000e40:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <sendall+0x98>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fb0f 	bl	800046c <__aeabi_d2uiz>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <sendall+0x88>)
 8000e54:	849a      	strh	r2, [r3, #36]	@ 0x24
	registerFrame[0x13].U16 = zAccel;
 8000e56:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <sendall+0x9c>)
 8000e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f7ff fb04 	bl	800046c <__aeabi_d2uiz>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <sendall+0x88>)
 8000e6a:	84da      	strh	r2, [r3, #38]	@ 0x26
	registerFrame[0x40].U16 = xPosition;
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <sendall+0xa0>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff faf9 	bl	800046c <__aeabi_d2uiz>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <sendall+0x88>)
 8000e80:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200003c0 	.word	0x200003c0
 8000e8c:	20000230 	.word	0x20000230
 8000e90:	200003c1 	.word	0x200003c1
 8000e94:	200003c8 	.word	0x200003c8
 8000e98:	40240000 	.word	0x40240000
 8000e9c:	200003d0 	.word	0x200003d0
 8000ea0:	200003d8 	.word	0x200003d8
 8000ea4:	200003e0 	.word	0x200003e0

08000ea8 <watch_mode>:
#include <stdio.h>
#include <math.h>
#include "globalVar.h"

void watch_mode(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 == 1){
 8000eac:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <watch_mode+0x34>)
 8000eae:	885b      	ldrh	r3, [r3, #2]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d010      	beq.n	8000ed6 <watch_mode+0x2e>

	}
	else if(registerFrame[0x01].U16 == 2){
 8000eb4:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <watch_mode+0x34>)
 8000eb6:	885b      	ldrh	r3, [r3, #2]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d102      	bne.n	8000ec2 <watch_mode+0x1a>
		do_home();
 8000ebc:	f000 f810 	bl	8000ee0 <do_home>

	}
	else if(registerFrame[0x01].U16 == 8){
		run_point_mode();
	}
}
 8000ec0:	e009      	b.n	8000ed6 <watch_mode+0x2e>
	else if(registerFrame[0x01].U16 == 4){
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <watch_mode+0x34>)
 8000ec4:	885b      	ldrh	r3, [r3, #2]
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d005      	beq.n	8000ed6 <watch_mode+0x2e>
	else if(registerFrame[0x01].U16 == 8){
 8000eca:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <watch_mode+0x34>)
 8000ecc:	885b      	ldrh	r3, [r3, #2]
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d101      	bne.n	8000ed6 <watch_mode+0x2e>
		run_point_mode();
 8000ed2:	f000 f81d 	bl	8000f10 <run_point_mode>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000230 	.word	0x20000230

08000ee0 <do_home>:

void do_home(){
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
	//set base status to 0 (default)
	registerFrame[0x01].U16 = 0;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <do_home+0x28>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	805a      	strh	r2, [r3, #2]
	//set moving status to home
	registerFrame[0x10].U16 = 2;
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <do_home+0x28>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	841a      	strh	r2, [r3, #32]
	//Homing
	if(registerFrame[0x11].U16 == 0){
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <do_home+0x28>)
 8000ef2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <do_home+0x1e>
		//when finished turn moving status to 0
		registerFrame[0x10].U16 = 0;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <do_home+0x28>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	841a      	strh	r2, [r3, #32]
	}
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	20000230 	.word	0x20000230
 8000f0c:	00000000 	.word	0x00000000

08000f10 <run_point_mode>:
//	registerFrame[0x10].U16 = 1;
////	if(button pressed) save shelves poosition;
//	registerFrame[0x10].U16 = 0;
//}
//
void run_point_mode(){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	registerFrame[0x01].U16 = 0;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <run_point_mode+0x38>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	805a      	strh	r2, [r3, #2]
	registerFrame[0x10].U16 = 16;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <run_point_mode+0x38>)
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	841a      	strh	r2, [r3, #32]
	HAL_Delay(500);
 8000f20:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f24:	f000 fc56 	bl	80017d4 <HAL_Delay>
	zPosition = 300;
 8000f28:	4908      	ldr	r1, [pc, #32]	@ (8000f4c <run_point_mode+0x3c>)
 8000f2a:	a305      	add	r3, pc, #20	@ (adr r3, 8000f40 <run_point_mode+0x30>)
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	e9c1 2300 	strd	r2, r3, [r1]
//	going to point
	registerFrame[0x10].U16 = 0;
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <run_point_mode+0x38>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	841a      	strh	r2, [r3, #32]
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	00000000 	.word	0x00000000
 8000f44:	4072c000 	.word	0x4072c000
 8000f48:	20000230 	.word	0x20000230
 8000f4c:	200003c8 	.word	0x200003c8

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f000 fbcd 	bl	80016f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f82e 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f000 f978 	bl	8001250 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f60:	f000 f944 	bl	80011ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f64:	f000 f8f4 	bl	8001150 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000f68:	f000 f8c2 	bl	80010f0 <MX_TIM16_Init>
  MX_TIM3_Init();
 8000f6c:	f000 f870 	bl	8001050 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <main+0x54>)
 8000f72:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa8 <main+0x58>)
 8000f74:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <main+0x54>)
 8000f78:	4a0c      	ldr	r2, [pc, #48]	@ (8000fac <main+0x5c>)
 8000f7a:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <main+0x54>)
 8000f7e:	2215      	movs	r2, #21
 8000f80:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 200;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <main+0x54>)
 8000f84:	22c8      	movs	r2, #200	@ 0xc8
 8000f86:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000f88:	4909      	ldr	r1, [pc, #36]	@ (8000fb0 <main+0x60>)
 8000f8a:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <main+0x54>)
 8000f8c:	f7ff fc46 	bl	800081c <Modbus_init>

  HAL_TIM_Base_Start_IT(&htim3);
 8000f90:	4808      	ldr	r0, [pc, #32]	@ (8000fb4 <main+0x64>)
 8000f92:	f002 fad5 	bl	8003540 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8000f96:	f7ff fccd 	bl	8000934 <Modbus_Protocal_Worker>
	  watch_mode();
 8000f9a:	f7ff ff85 	bl	8000ea8 <watch_mode>
  {
 8000f9e:	bf00      	nop
 8000fa0:	e7f9      	b.n	8000f96 <main+0x46>
 8000fa2:	bf00      	nop
 8000fa4:	2000070c 	.word	0x2000070c
 8000fa8:	20000580 	.word	0x20000580
 8000fac:	200004b4 	.word	0x200004b4
 8000fb0:	20000230 	.word	0x20000230
 8000fb4:	200003e8 	.word	0x200003e8

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b094      	sub	sp, #80	@ 0x50
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0318 	add.w	r3, r7, #24
 8000fc2:	2238      	movs	r2, #56	@ 0x38
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f005 fa38 	bl	800643c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f001 fa1c 	bl	8002418 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fea:	2340      	movs	r3, #64	@ 0x40
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ffa:	2355      	movs	r3, #85	@ 0x55
 8000ffc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001006:	2302      	movs	r3, #2
 8001008:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fab6 	bl	8002580 <HAL_RCC_OscConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800101a:	f000 f99d 	bl	8001358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101e:	230f      	movs	r3, #15
 8001020:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001022:	2303      	movs	r3, #3
 8001024:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2104      	movs	r1, #4
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fdb4 	bl	8002ba4 <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001042:	f000 f989 	bl	8001358 <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	3750      	adds	r7, #80	@ 0x50
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800106e:	4b1e      	ldr	r3, [pc, #120]	@ (80010e8 <MX_TIM3_Init+0x98>)
 8001070:	4a1e      	ldr	r2, [pc, #120]	@ (80010ec <MX_TIM3_Init+0x9c>)
 8001072:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1699;
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <MX_TIM3_Init+0x98>)
 8001076:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800107a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_TIM3_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <MX_TIM3_Init+0x98>)
 8001084:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001088:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <MX_TIM3_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <MX_TIM3_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001096:	4814      	ldr	r0, [pc, #80]	@ (80010e8 <MX_TIM3_Init+0x98>)
 8001098:	f002 f9ee 	bl	8003478 <HAL_TIM_Base_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80010a2:	f000 f959 	bl	8001358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <MX_TIM3_Init+0x98>)
 80010b4:	f002 fd2c 	bl	8003b10 <HAL_TIM_ConfigClockSource>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80010be:	f000 f94b 	bl	8001358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <MX_TIM3_Init+0x98>)
 80010d0:	f003 f9da 	bl	8004488 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80010da:	f000 f93d 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200003e8 	.word	0x200003e8
 80010ec:	40000400 	.word	0x40000400

080010f0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <MX_TIM16_Init+0x58>)
 80010f6:	4a15      	ldr	r2, [pc, #84]	@ (800114c <MX_TIM16_Init+0x5c>)
 80010f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <MX_TIM16_Init+0x58>)
 80010fc:	22a9      	movs	r2, #169	@ 0xa9
 80010fe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_TIM16_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <MX_TIM16_Init+0x58>)
 8001108:	f240 4279 	movw	r2, #1145	@ 0x479
 800110c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_TIM16_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_TIM16_Init+0x58>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <MX_TIM16_Init+0x58>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001120:	4809      	ldr	r0, [pc, #36]	@ (8001148 <MX_TIM16_Init+0x58>)
 8001122:	f002 f9a9 	bl	8003478 <HAL_TIM_Base_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800112c:	f000 f914 	bl	8001358 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001130:	2108      	movs	r1, #8
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <MX_TIM16_Init+0x58>)
 8001134:	f002 fa7c 	bl	8003630 <HAL_TIM_OnePulse_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800113e:	f000 f90b 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200004b4 	.word	0x200004b4
 800114c:	40014400 	.word	0x40014400

08001150 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001154:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 8001156:	4a24      	ldr	r2, [pc, #144]	@ (80011e8 <MX_USART2_UART_Init+0x98>)
 8001158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800115a:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 800115c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001160:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001162:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 8001164:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001168:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800116a:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001170:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 8001172:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119c:	4811      	ldr	r0, [pc, #68]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 800119e:	f003 fa59 	bl	8004654 <HAL_UART_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f000 f8d6 	bl	8001358 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 80011b0:	f005 f879 	bl	80062a6 <HAL_UARTEx_SetTxFifoThreshold>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 f8cd 	bl	8001358 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011be:	2100      	movs	r1, #0
 80011c0:	4808      	ldr	r0, [pc, #32]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 80011c2:	f005 f8ae 	bl	8006322 <HAL_UARTEx_SetRxFifoThreshold>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80011cc:	f000 f8c4 	bl	8001358 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <MX_USART2_UART_Init+0x94>)
 80011d2:	f005 f82f 	bl	8006234 <HAL_UARTEx_DisableFifoMode>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80011dc:	f000 f8bc 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000580 	.word	0x20000580
 80011e8:	40004400 	.word	0x40004400

080011ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011f2:	4b16      	ldr	r3, [pc, #88]	@ (800124c <MX_DMA_Init+0x60>)
 80011f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011f6:	4a15      	ldr	r2, [pc, #84]	@ (800124c <MX_DMA_Init+0x60>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80011fe:	4b13      	ldr	r3, [pc, #76]	@ (800124c <MX_DMA_Init+0x60>)
 8001200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <MX_DMA_Init+0x60>)
 800120c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800120e:	4a0f      	ldr	r2, [pc, #60]	@ (800124c <MX_DMA_Init+0x60>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6493      	str	r3, [r2, #72]	@ 0x48
 8001216:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <MX_DMA_Init+0x60>)
 8001218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	200b      	movs	r0, #11
 8001228:	f000 fbd1 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800122c:	200b      	movs	r0, #11
 800122e:	f000 fbe8 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	200c      	movs	r0, #12
 8001238:	f000 fbc9 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800123c:	200c      	movs	r0, #12
 800123e:	f000 fbe0 	bl	8001a02 <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b2f      	ldr	r3, [pc, #188]	@ (8001324 <MX_GPIO_Init+0xd4>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a2e      	ldr	r2, [pc, #184]	@ (8001324 <MX_GPIO_Init+0xd4>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b2c      	ldr	r3, [pc, #176]	@ (8001324 <MX_GPIO_Init+0xd4>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127e:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <MX_GPIO_Init+0xd4>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a28      	ldr	r2, [pc, #160]	@ (8001324 <MX_GPIO_Init+0xd4>)
 8001284:	f043 0320 	orr.w	r3, r3, #32
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b26      	ldr	r3, [pc, #152]	@ (8001324 <MX_GPIO_Init+0xd4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <MX_GPIO_Init+0xd4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a22      	ldr	r2, [pc, #136]	@ (8001324 <MX_GPIO_Init+0xd4>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <MX_GPIO_Init+0xd4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_GPIO_Init+0xd4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001324 <MX_GPIO_Init+0xd4>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_GPIO_Init+0xd4>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2120      	movs	r1, #32
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ce:	f001 f867 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	480f      	ldr	r0, [pc, #60]	@ (8001328 <MX_GPIO_Init+0xd8>)
 80012ea:	f000 fed7 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012ee:	2320      	movs	r3, #32
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001308:	f000 fec8 	bl	800209c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2028      	movs	r0, #40	@ 0x28
 8001312:	f000 fb5c 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001316:	2028      	movs	r0, #40	@ 0x28
 8001318:	f000 fb73 	bl	8001a02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	@ 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800

0800132c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    if (htim == &htim3) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d105      	bne.n	8001348 <HAL_TIM_PeriodElapsedCallback+0x1c>
        registerFrame[0x00].U16 = 22881;
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800133e:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001342:	801a      	strh	r2, [r3, #0]
        sendall();
 8001344:	f7ff fd5e 	bl	8000e04 <sendall>
    }
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200003e8 	.word	0x200003e8
 8001354:	20000230 	.word	0x20000230

08001358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135c:	b672      	cpsid	i
}
 800135e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <Error_Handler+0x8>

08001364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <HAL_MspInit+0x44>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136e:	4a0e      	ldr	r2, [pc, #56]	@ (80013a8 <HAL_MspInit+0x44>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6613      	str	r3, [r2, #96]	@ 0x60
 8001376:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <HAL_MspInit+0x44>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HAL_MspInit+0x44>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001386:	4a08      	ldr	r2, [pc, #32]	@ (80013a8 <HAL_MspInit+0x44>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138c:	6593      	str	r3, [r2, #88]	@ 0x58
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_MspInit+0x44>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800139a:	f001 f8e1 	bl	8002560 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000

080013ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001424 <HAL_TIM_Base_MspInit+0x78>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d114      	bne.n	80013e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013be:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <HAL_TIM_Base_MspInit+0x7c>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c2:	4a19      	ldr	r2, [pc, #100]	@ (8001428 <HAL_TIM_Base_MspInit+0x7c>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <HAL_TIM_Base_MspInit+0x7c>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	201d      	movs	r0, #29
 80013dc:	f000 faf7 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013e0:	201d      	movs	r0, #29
 80013e2:	f000 fb0e 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80013e6:	e018      	b.n	800141a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0f      	ldr	r2, [pc, #60]	@ (800142c <HAL_TIM_Base_MspInit+0x80>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d113      	bne.n	800141a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80013f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <HAL_TIM_Base_MspInit+0x7c>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001428 <HAL_TIM_Base_MspInit+0x7c>)
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <HAL_TIM_Base_MspInit+0x7c>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2019      	movs	r0, #25
 8001410:	f000 fadd 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001414:	2019      	movs	r0, #25
 8001416:	f000 faf4 	bl	8001a02 <HAL_NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40000400 	.word	0x40000400
 8001428:	40021000 	.word	0x40021000
 800142c:	40014400 	.word	0x40014400

08001430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b09e      	sub	sp, #120	@ 0x78
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	2254      	movs	r2, #84	@ 0x54
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f004 fff3 	bl	800643c <memset>
  if(huart->Instance==USART2)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a4d      	ldr	r2, [pc, #308]	@ (8001590 <HAL_UART_MspInit+0x160>)
 800145c:	4293      	cmp	r3, r2
 800145e:	f040 8092 	bne.w	8001586 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001462:	2302      	movs	r3, #2
 8001464:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fdb4 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800147a:	f7ff ff6d 	bl	8001358 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147e:	4b45      	ldr	r3, [pc, #276]	@ (8001594 <HAL_UART_MspInit+0x164>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001482:	4a44      	ldr	r2, [pc, #272]	@ (8001594 <HAL_UART_MspInit+0x164>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001488:	6593      	str	r3, [r2, #88]	@ 0x58
 800148a:	4b42      	ldr	r3, [pc, #264]	@ (8001594 <HAL_UART_MspInit+0x164>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b3f      	ldr	r3, [pc, #252]	@ (8001594 <HAL_UART_MspInit+0x164>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	4a3e      	ldr	r2, [pc, #248]	@ (8001594 <HAL_UART_MspInit+0x164>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001594 <HAL_UART_MspInit+0x164>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ae:	230c      	movs	r3, #12
 80014b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014be:	2307      	movs	r3, #7
 80014c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014cc:	f000 fde6 	bl	800209c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80014d0:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <HAL_UART_MspInit+0x168>)
 80014d2:	4a32      	ldr	r2, [pc, #200]	@ (800159c <HAL_UART_MspInit+0x16c>)
 80014d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80014d6:	4b30      	ldr	r3, [pc, #192]	@ (8001598 <HAL_UART_MspInit+0x168>)
 80014d8:	221b      	movs	r2, #27
 80014da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <HAL_UART_MspInit+0x168>)
 80014de:	2210      	movs	r2, #16
 80014e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001598 <HAL_UART_MspInit+0x168>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <HAL_UART_MspInit+0x168>)
 80014ea:	2280      	movs	r2, #128	@ 0x80
 80014ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <HAL_UART_MspInit+0x168>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <HAL_UART_MspInit+0x168>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014fa:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <HAL_UART_MspInit+0x168>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001500:	4b25      	ldr	r3, [pc, #148]	@ (8001598 <HAL_UART_MspInit+0x168>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001506:	4824      	ldr	r0, [pc, #144]	@ (8001598 <HAL_UART_MspInit+0x168>)
 8001508:	f000 fa96 	bl	8001a38 <HAL_DMA_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001512:	f7ff ff21 	bl	8001358 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a1f      	ldr	r2, [pc, #124]	@ (8001598 <HAL_UART_MspInit+0x168>)
 800151a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800151c:	4a1e      	ldr	r2, [pc, #120]	@ (8001598 <HAL_UART_MspInit+0x168>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <HAL_UART_MspInit+0x170>)
 8001524:	4a1f      	ldr	r2, [pc, #124]	@ (80015a4 <HAL_UART_MspInit+0x174>)
 8001526:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001528:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <HAL_UART_MspInit+0x170>)
 800152a:	221a      	movs	r2, #26
 800152c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <HAL_UART_MspInit+0x170>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <HAL_UART_MspInit+0x170>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800153a:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <HAL_UART_MspInit+0x170>)
 800153c:	2280      	movs	r2, #128	@ 0x80
 800153e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001540:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <HAL_UART_MspInit+0x170>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001546:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <HAL_UART_MspInit+0x170>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800154c:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <HAL_UART_MspInit+0x170>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001552:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <HAL_UART_MspInit+0x170>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001558:	4811      	ldr	r0, [pc, #68]	@ (80015a0 <HAL_UART_MspInit+0x170>)
 800155a:	f000 fa6d 	bl	8001a38 <HAL_DMA_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8001564:	f7ff fef8 	bl	8001358 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <HAL_UART_MspInit+0x170>)
 800156c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001570:	4a0b      	ldr	r2, [pc, #44]	@ (80015a0 <HAL_UART_MspInit+0x170>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2026      	movs	r0, #38	@ 0x26
 800157c:	f000 fa27 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001580:	2026      	movs	r0, #38	@ 0x26
 8001582:	f000 fa3e 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001586:	bf00      	nop
 8001588:	3778      	adds	r7, #120	@ 0x78
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40004400 	.word	0x40004400
 8001594:	40021000 	.word	0x40021000
 8001598:	2000064c 	.word	0x2000064c
 800159c:	40020008 	.word	0x40020008
 80015a0:	200006ac 	.word	0x200006ac
 80015a4:	4002001c 	.word	0x4002001c

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <NMI_Handler+0x4>

080015b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <MemManage_Handler+0x4>

080015c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <UsageFault_Handler+0x4>

080015d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fe:	f000 f8cb 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <DMA1_Channel1_IRQHandler+0x10>)
 800160e:	f000 fbf6 	bl	8001dfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000064c 	.word	0x2000064c

0800161c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <DMA1_Channel2_IRQHandler+0x10>)
 8001622:	f000 fbec 	bl	8001dfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200006ac 	.word	0x200006ac

08001630 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001636:	f002 f8f1 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200004b4 	.word	0x200004b4

08001644 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <TIM3_IRQHandler+0x10>)
 800164a:	f002 f8e7 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200003e8 	.word	0x200003e8

08001658 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <USART2_IRQHandler+0x10>)
 800165e:	f003 f9df 	bl	8004a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000580 	.word	0x20000580

0800166c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001670:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001674:	f000 feac 	bl	80023d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <SystemInit+0x20>)
 8001682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <SystemInit+0x20>)
 8001688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800168c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016a0:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a4:	f7ff ffea 	bl	800167c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a8:	480c      	ldr	r0, [pc, #48]	@ (80016dc <LoopForever+0x6>)
  ldr r1, =_edata
 80016aa:	490d      	ldr	r1, [pc, #52]	@ (80016e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016ac:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <LoopForever+0xe>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016c0:	4c0a      	ldr	r4, [pc, #40]	@ (80016ec <LoopForever+0x16>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ce:	f004 febd 	bl	800644c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016d2:	f7ff fc3d 	bl	8000f50 <main>

080016d6 <LoopForever>:

LoopForever:
    b LoopForever
 80016d6:	e7fe      	b.n	80016d6 <LoopForever>
  ldr   r0, =_estack
 80016d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80016e4:	08006518 	.word	0x08006518
  ldr r2, =_sbss
 80016e8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80016ec:	20000be8 	.word	0x20000be8

080016f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016f0:	e7fe      	b.n	80016f0 <ADC1_2_IRQHandler>

080016f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 f95b 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001702:	2000      	movs	r0, #0
 8001704:	f000 f80e 	bl	8001724 <HAL_InitTick>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	e001      	b.n	8001718 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001714:	f7ff fe26 	bl	8001364 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001718:	79fb      	ldrb	r3, [r7, #7]

}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001730:	4b16      	ldr	r3, [pc, #88]	@ (800178c <HAL_InitTick+0x68>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d022      	beq.n	800177e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001738:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_InitTick+0x6c>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b13      	ldr	r3, [pc, #76]	@ (800178c <HAL_InitTick+0x68>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001744:	fbb1 f3f3 	udiv	r3, r1, r3
 8001748:	fbb2 f3f3 	udiv	r3, r2, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f966 	bl	8001a1e <HAL_SYSTICK_Config>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10f      	bne.n	8001778 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b0f      	cmp	r3, #15
 800175c:	d809      	bhi.n	8001772 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175e:	2200      	movs	r2, #0
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	f04f 30ff 	mov.w	r0, #4294967295
 8001766:	f000 f932 	bl	80019ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800176a:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <HAL_InitTick+0x70>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e007      	b.n	8001782 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	e004      	b.n	8001782 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e001      	b.n	8001782 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000208 	.word	0x20000208
 8001790:	20000200 	.word	0x20000200
 8001794:	20000204 	.word	0x20000204

08001798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_IncTick+0x1c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_IncTick+0x20>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a03      	ldr	r2, [pc, #12]	@ (80017b4 <HAL_IncTick+0x1c>)
 80017a8:	6013      	str	r3, [r2, #0]
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	20000be4 	.word	0x20000be4
 80017b8:	20000208 	.word	0x20000208

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000be4 	.word	0x20000be4

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d004      	beq.n	80017f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_Delay+0x40>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4413      	add	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f8:	bf00      	nop
 80017fa:	f7ff ffdf 	bl	80017bc <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	429a      	cmp	r2, r3
 8001808:	d8f7      	bhi.n	80017fa <HAL_Delay+0x26>
  {
  }
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000208 	.word	0x20000208

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4907      	ldr	r1, [pc, #28]	@ (80018b4 <__NVIC_EnableIRQ+0x38>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	@ (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	@ (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	@ 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	@ 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff29 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff40 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff90 	bl	800190c <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5f 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff33 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa4 	bl	8001974 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e08d      	b.n	8001b66 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b47      	ldr	r3, [pc, #284]	@ (8001b70 <HAL_DMA_Init+0x138>)
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d80f      	bhi.n	8001a76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b45      	ldr	r3, [pc, #276]	@ (8001b74 <HAL_DMA_Init+0x13c>)
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a45      	ldr	r2, [pc, #276]	@ (8001b78 <HAL_DMA_Init+0x140>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	009a      	lsls	r2, r3, #2
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a42      	ldr	r2, [pc, #264]	@ (8001b7c <HAL_DMA_Init+0x144>)
 8001a72:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a74:	e00e      	b.n	8001a94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b40      	ldr	r3, [pc, #256]	@ (8001b80 <HAL_DMA_Init+0x148>)
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a3d      	ldr	r2, [pc, #244]	@ (8001b78 <HAL_DMA_Init+0x140>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	009a      	lsls	r2, r3, #2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a3c      	ldr	r2, [pc, #240]	@ (8001b84 <HAL_DMA_Init+0x14c>)
 8001a92:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001aae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fa76 	bl	8001fd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001af4:	d102      	bne.n	8001afc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b10:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d010      	beq.n	8001b3c <HAL_DMA_Init+0x104>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d80c      	bhi.n	8001b3c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fa96 	bl	8002054 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	e008      	b.n	8001b4e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40020407 	.word	0x40020407
 8001b74:	bffdfff8 	.word	0xbffdfff8
 8001b78:	cccccccd 	.word	0xcccccccd
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	bffdfbf8 	.word	0xbffdfbf8
 8001b84:	40020400 	.word	0x40020400

08001b88 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_DMA_Start_IT+0x20>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e066      	b.n	8001c76 <HAL_DMA_Start_IT+0xee>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d155      	bne.n	8001c68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f9bb 	bl	8001f5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 020e 	orr.w	r2, r2, #14
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e00f      	b.n	8001c20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0204 	bic.w	r2, r2, #4
 8001c0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 020a 	orr.w	r2, r2, #10
 8001c1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c3c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e005      	b.n	8001c74 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
 8001c72:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d005      	beq.n	8001ca2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2204      	movs	r2, #4
 8001c9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e037      	b.n	8001d12 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 020e 	bic.w	r2, r2, #14
 8001cb0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cc0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f003 021f 	and.w	r2, r3, #31
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001cee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00c      	beq.n	8001d12 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d06:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d10:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d00d      	beq.n	8001d64 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	e047      	b.n	8001df4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 020e 	bic.w	r2, r2, #14
 8001d72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f202 	lsl.w	r2, r1, r2
 8001da6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001db0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00c      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dc8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001dd2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
    }
  }
  return status;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	2204      	movs	r2, #4
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d026      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x7a>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d021      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d107      	bne.n	8001e52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0204 	bic.w	r2, r2, #4
 8001e50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	f003 021f 	and.w	r2, r3, #31
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	2104      	movs	r1, #4
 8001e60:	fa01 f202 	lsl.w	r2, r1, r2
 8001e64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d071      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e76:	e06c      	b.n	8001f52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	2202      	movs	r2, #2
 8001e82:	409a      	lsls	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d02e      	beq.n	8001eea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d029      	beq.n	8001eea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10b      	bne.n	8001ebc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 020a 	bic.w	r2, r2, #10
 8001eb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	2102      	movs	r1, #2
 8001eca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ece:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d038      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ee8:	e033      	b.n	8001f52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d02a      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d025      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 020e 	bic.w	r2, r2, #14
 8001f16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
}
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f84:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f003 021f 	and.w	r2, r3, #31
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	2101      	movs	r1, #1
 8001f94:	fa01 f202 	lsl.w	r2, r1, r2
 8001f98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d108      	bne.n	8001fbc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fba:	e007      	b.n	8001fcc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d802      	bhi.n	8001ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001fec:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e001      	b.n	8001ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ff4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3b08      	subs	r3, #8
 8002002:	4a12      	ldr	r2, [pc, #72]	@ (800204c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	009a      	lsls	r2, r3, #2
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	461a      	mov	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a0b      	ldr	r2, [pc, #44]	@ (8002050 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002022:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	2201      	movs	r2, #1
 800202c:	409a      	lsls	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002032:	bf00      	nop
 8002034:	371c      	adds	r7, #28
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40020407 	.word	0x40020407
 8002044:	40020800 	.word	0x40020800
 8002048:	40020820 	.word	0x40020820
 800204c:	cccccccd 	.word	0xcccccccd
 8002050:	40020880 	.word	0x40020880

08002054 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	461a      	mov	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a08      	ldr	r2, [pc, #32]	@ (8002098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002076:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3b01      	subs	r3, #1
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	2201      	movs	r2, #1
 8002082:	409a      	lsls	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	1000823f 	.word	0x1000823f
 8002098:	40020940 	.word	0x40020940

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020aa:	e15a      	b.n	8002362 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 814c 	beq.w	800235c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d005      	beq.n	80020dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d130      	bne.n	800213e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002112:	2201      	movs	r2, #1
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 0201 	and.w	r2, r3, #1
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	2b03      	cmp	r3, #3
 8002148:	d017      	beq.n	800217a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d123      	bne.n	80021ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	6939      	ldr	r1, [r7, #16]
 80021ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0203 	and.w	r2, r3, #3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80a6 	beq.w	800235c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002210:	4b5b      	ldr	r3, [pc, #364]	@ (8002380 <HAL_GPIO_Init+0x2e4>)
 8002212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002214:	4a5a      	ldr	r2, [pc, #360]	@ (8002380 <HAL_GPIO_Init+0x2e4>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6613      	str	r3, [r2, #96]	@ 0x60
 800221c:	4b58      	ldr	r3, [pc, #352]	@ (8002380 <HAL_GPIO_Init+0x2e4>)
 800221e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002228:	4a56      	ldr	r2, [pc, #344]	@ (8002384 <HAL_GPIO_Init+0x2e8>)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3302      	adds	r3, #2
 8002230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002252:	d01f      	beq.n	8002294 <HAL_GPIO_Init+0x1f8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a4c      	ldr	r2, [pc, #304]	@ (8002388 <HAL_GPIO_Init+0x2ec>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d019      	beq.n	8002290 <HAL_GPIO_Init+0x1f4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a4b      	ldr	r2, [pc, #300]	@ (800238c <HAL_GPIO_Init+0x2f0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d013      	beq.n	800228c <HAL_GPIO_Init+0x1f0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a4a      	ldr	r2, [pc, #296]	@ (8002390 <HAL_GPIO_Init+0x2f4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00d      	beq.n	8002288 <HAL_GPIO_Init+0x1ec>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a49      	ldr	r2, [pc, #292]	@ (8002394 <HAL_GPIO_Init+0x2f8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d007      	beq.n	8002284 <HAL_GPIO_Init+0x1e8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a48      	ldr	r2, [pc, #288]	@ (8002398 <HAL_GPIO_Init+0x2fc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d101      	bne.n	8002280 <HAL_GPIO_Init+0x1e4>
 800227c:	2305      	movs	r3, #5
 800227e:	e00a      	b.n	8002296 <HAL_GPIO_Init+0x1fa>
 8002280:	2306      	movs	r3, #6
 8002282:	e008      	b.n	8002296 <HAL_GPIO_Init+0x1fa>
 8002284:	2304      	movs	r3, #4
 8002286:	e006      	b.n	8002296 <HAL_GPIO_Init+0x1fa>
 8002288:	2303      	movs	r3, #3
 800228a:	e004      	b.n	8002296 <HAL_GPIO_Init+0x1fa>
 800228c:	2302      	movs	r3, #2
 800228e:	e002      	b.n	8002296 <HAL_GPIO_Init+0x1fa>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_GPIO_Init+0x1fa>
 8002294:	2300      	movs	r3, #0
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	f002 0203 	and.w	r2, r2, #3
 800229c:	0092      	lsls	r2, r2, #2
 800229e:	4093      	lsls	r3, r2
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a6:	4937      	ldr	r1, [pc, #220]	@ (8002384 <HAL_GPIO_Init+0x2e8>)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022b4:	4b39      	ldr	r3, [pc, #228]	@ (800239c <HAL_GPIO_Init+0x300>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022d8:	4a30      	ldr	r2, [pc, #192]	@ (800239c <HAL_GPIO_Init+0x300>)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022de:	4b2f      	ldr	r3, [pc, #188]	@ (800239c <HAL_GPIO_Init+0x300>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002302:	4a26      	ldr	r2, [pc, #152]	@ (800239c <HAL_GPIO_Init+0x300>)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002308:	4b24      	ldr	r3, [pc, #144]	@ (800239c <HAL_GPIO_Init+0x300>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800232c:	4a1b      	ldr	r2, [pc, #108]	@ (800239c <HAL_GPIO_Init+0x300>)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002332:	4b1a      	ldr	r3, [pc, #104]	@ (800239c <HAL_GPIO_Init+0x300>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002356:	4a11      	ldr	r2, [pc, #68]	@ (800239c <HAL_GPIO_Init+0x300>)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3301      	adds	r3, #1
 8002360:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	f47f ae9d 	bne.w	80020ac <HAL_GPIO_Init+0x10>
  }
}
 8002372:	bf00      	nop
 8002374:	bf00      	nop
 8002376:	371c      	adds	r7, #28
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	40021000 	.word	0x40021000
 8002384:	40010000 	.word	0x40010000
 8002388:	48000400 	.word	0x48000400
 800238c:	48000800 	.word	0x48000800
 8002390:	48000c00 	.word	0x48000c00
 8002394:	48001000 	.word	0x48001000
 8002398:	48001400 	.word	0x48001400
 800239c:	40010400 	.word	0x40010400

080023a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
 80023ac:	4613      	mov	r3, r2
 80023ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023b0:	787b      	ldrb	r3, [r7, #1]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023bc:	e002      	b.n	80023c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023da:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023e6:	4a05      	ldr	r2, [pc, #20]	@ (80023fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f806 	bl	8002400 <HAL_GPIO_EXTI_Callback>
  }
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d141      	bne.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002426:	4b4b      	ldr	r3, [pc, #300]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800242e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002432:	d131      	bne.n	8002498 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002434:	4b47      	ldr	r3, [pc, #284]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800243a:	4a46      	ldr	r2, [pc, #280]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002444:	4b43      	ldr	r3, [pc, #268]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800244c:	4a41      	ldr	r2, [pc, #260]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002452:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002454:	4b40      	ldr	r3, [pc, #256]	@ (8002558 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2232      	movs	r2, #50	@ 0x32
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	4a3f      	ldr	r2, [pc, #252]	@ (800255c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	0c9b      	lsrs	r3, r3, #18
 8002466:	3301      	adds	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800246a:	e002      	b.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3b01      	subs	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002472:	4b38      	ldr	r3, [pc, #224]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800247e:	d102      	bne.n	8002486 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f2      	bne.n	800246c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002486:	4b33      	ldr	r3, [pc, #204]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002492:	d158      	bne.n	8002546 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e057      	b.n	8002548 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002498:	4b2e      	ldr	r3, [pc, #184]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800249e:	4a2d      	ldr	r2, [pc, #180]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024a8:	e04d      	b.n	8002546 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024b0:	d141      	bne.n	8002536 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024b2:	4b28      	ldr	r3, [pc, #160]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024be:	d131      	bne.n	8002524 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024c0:	4b24      	ldr	r3, [pc, #144]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024c6:	4a23      	ldr	r2, [pc, #140]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024d0:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002558 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2232      	movs	r2, #50	@ 0x32
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	4a1c      	ldr	r2, [pc, #112]	@ (800255c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024ec:	fba2 2303 	umull	r2, r3, r2, r3
 80024f0:	0c9b      	lsrs	r3, r3, #18
 80024f2:	3301      	adds	r3, #1
 80024f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024f6:	e002      	b.n	80024fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024fe:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800250a:	d102      	bne.n	8002512 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f2      	bne.n	80024f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002512:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800251e:	d112      	bne.n	8002546 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e011      	b.n	8002548 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002524:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800252a:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002530:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002534:	e007      	b.n	8002546 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002536:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800253e:	4a05      	ldr	r2, [pc, #20]	@ (8002554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002540:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002544:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	40007000 	.word	0x40007000
 8002558:	20000200 	.word	0x20000200
 800255c:	431bde83 	.word	0x431bde83

08002560 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a04      	ldr	r2, [pc, #16]	@ (800257c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800256a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800256e:	6093      	str	r3, [r2, #8]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40007000 	.word	0x40007000

08002580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e2fe      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d075      	beq.n	800268a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259e:	4b97      	ldr	r3, [pc, #604]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a8:	4b94      	ldr	r3, [pc, #592]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	d102      	bne.n	80025be <HAL_RCC_OscConfig+0x3e>
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d002      	beq.n	80025c4 <HAL_RCC_OscConfig+0x44>
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d10b      	bne.n	80025dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	4b8d      	ldr	r3, [pc, #564]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d05b      	beq.n	8002688 <HAL_RCC_OscConfig+0x108>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d157      	bne.n	8002688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e2d9      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e4:	d106      	bne.n	80025f4 <HAL_RCC_OscConfig+0x74>
 80025e6:	4b85      	ldr	r3, [pc, #532]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a84      	ldr	r2, [pc, #528]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e01d      	b.n	8002630 <HAL_RCC_OscConfig+0xb0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x98>
 80025fe:	4b7f      	ldr	r3, [pc, #508]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a7e      	ldr	r2, [pc, #504]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 8002604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b7c      	ldr	r3, [pc, #496]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a7b      	ldr	r2, [pc, #492]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0xb0>
 8002618:	4b78      	ldr	r3, [pc, #480]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a77      	ldr	r2, [pc, #476]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 800261e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b75      	ldr	r3, [pc, #468]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a74      	ldr	r2, [pc, #464]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 800262a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800262e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7ff f8c0 	bl	80017bc <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002640:	f7ff f8bc 	bl	80017bc <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	@ 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e29e      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002652:	4b6a      	ldr	r3, [pc, #424]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0xc0>
 800265e:	e014      	b.n	800268a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7ff f8ac 	bl	80017bc <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7ff f8a8 	bl	80017bc <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	@ 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e28a      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800267a:	4b60      	ldr	r3, [pc, #384]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0xe8>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d075      	beq.n	8002782 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002696:	4b59      	ldr	r3, [pc, #356]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a0:	4b56      	ldr	r3, [pc, #344]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b0c      	cmp	r3, #12
 80026ae:	d102      	bne.n	80026b6 <HAL_RCC_OscConfig+0x136>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d002      	beq.n	80026bc <HAL_RCC_OscConfig+0x13c>
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d11f      	bne.n	80026fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026bc:	4b4f      	ldr	r3, [pc, #316]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_OscConfig+0x154>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e25d      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d4:	4b49      	ldr	r3, [pc, #292]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	4946      	ldr	r1, [pc, #280]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026e8:	4b45      	ldr	r3, [pc, #276]	@ (8002800 <HAL_RCC_OscConfig+0x280>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff f819 	bl	8001724 <HAL_InitTick>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d043      	beq.n	8002780 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e249      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d023      	beq.n	800274c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002704:	4b3d      	ldr	r3, [pc, #244]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a3c      	ldr	r2, [pc, #240]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800270e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7ff f854 	bl	80017bc <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002718:	f7ff f850 	bl	80017bc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e232      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800272a:	4b34      	ldr	r3, [pc, #208]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4b31      	ldr	r3, [pc, #196]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	061b      	lsls	r3, r3, #24
 8002744:	492d      	ldr	r1, [pc, #180]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
 800274a:	e01a      	b.n	8002782 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274c:	4b2b      	ldr	r3, [pc, #172]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2a      	ldr	r2, [pc, #168]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 8002752:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7ff f830 	bl	80017bc <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002760:	f7ff f82c 	bl	80017bc <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e20e      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002772:	4b22      	ldr	r3, [pc, #136]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x1e0>
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002780:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d041      	beq.n	8002812 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002796:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 8002798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800279c:	4a17      	ldr	r2, [pc, #92]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7ff f809 	bl	80017bc <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ae:	f7ff f805 	bl	80017bc <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1e7      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027c0:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0ef      	beq.n	80027ae <HAL_RCC_OscConfig+0x22e>
 80027ce:	e020      	b.n	8002812 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d0:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80027d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d6:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <HAL_RCC_OscConfig+0x27c>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7fe ffec 	bl	80017bc <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e6:	e00d      	b.n	8002804 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e8:	f7fe ffe8 	bl	80017bc <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d906      	bls.n	8002804 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1ca      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002804:	4b8c      	ldr	r3, [pc, #560]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 8002806:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ea      	bne.n	80027e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 80a6 	beq.w	800296c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002824:	4b84      	ldr	r3, [pc, #528]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_OscConfig+0x2b4>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x2b6>
 8002834:	2300      	movs	r3, #0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002844:	6593      	str	r3, [r2, #88]	@ 0x58
 8002846:	4b7c      	ldr	r3, [pc, #496]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002852:	2301      	movs	r3, #1
 8002854:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002856:	4b79      	ldr	r3, [pc, #484]	@ (8002a3c <HAL_RCC_OscConfig+0x4bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d118      	bne.n	8002894 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002862:	4b76      	ldr	r3, [pc, #472]	@ (8002a3c <HAL_RCC_OscConfig+0x4bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a75      	ldr	r2, [pc, #468]	@ (8002a3c <HAL_RCC_OscConfig+0x4bc>)
 8002868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800286c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286e:	f7fe ffa5 	bl	80017bc <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002876:	f7fe ffa1 	bl	80017bc <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e183      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002888:	4b6c      	ldr	r3, [pc, #432]	@ (8002a3c <HAL_RCC_OscConfig+0x4bc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d108      	bne.n	80028ae <HAL_RCC_OscConfig+0x32e>
 800289c:	4b66      	ldr	r3, [pc, #408]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a2:	4a65      	ldr	r2, [pc, #404]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ac:	e024      	b.n	80028f8 <HAL_RCC_OscConfig+0x378>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d110      	bne.n	80028d8 <HAL_RCC_OscConfig+0x358>
 80028b6:	4b60      	ldr	r3, [pc, #384]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028d6:	e00f      	b.n	80028f8 <HAL_RCC_OscConfig+0x378>
 80028d8:	4b57      	ldr	r3, [pc, #348]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028de:	4a56      	ldr	r2, [pc, #344]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028e8:	4b53      	ldr	r3, [pc, #332]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ee:	4a52      	ldr	r2, [pc, #328]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80028f0:	f023 0304 	bic.w	r3, r3, #4
 80028f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d016      	beq.n	800292e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe ff5c 	bl	80017bc <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002906:	e00a      	b.n	800291e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f7fe ff58 	bl	80017bc <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e138      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291e:	4b46      	ldr	r3, [pc, #280]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ed      	beq.n	8002908 <HAL_RCC_OscConfig+0x388>
 800292c:	e015      	b.n	800295a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe ff45 	bl	80017bc <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe ff41 	bl	80017bc <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e121      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800294c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ed      	bne.n	8002936 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800295a:	7ffb      	ldrb	r3, [r7, #31]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002960:	4b35      	ldr	r3, [pc, #212]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002964:	4a34      	ldr	r2, [pc, #208]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 8002966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800296a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d03c      	beq.n	80029f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01c      	beq.n	80029ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002980:	4b2d      	ldr	r3, [pc, #180]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 8002982:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002986:	4a2c      	ldr	r2, [pc, #176]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe ff14 	bl	80017bc <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002998:	f7fe ff10 	bl	80017bc <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0f2      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029aa:	4b23      	ldr	r3, [pc, #140]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80029ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0ef      	beq.n	8002998 <HAL_RCC_OscConfig+0x418>
 80029b8:	e01b      	b.n	80029f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80029bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7fe fef7 	bl	80017bc <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029d2:	f7fe fef3 	bl	80017bc <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e0d5      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029e4:	4b14      	ldr	r3, [pc, #80]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80029e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1ef      	bne.n	80029d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80c9 	beq.w	8002b8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b0c      	cmp	r3, #12
 8002a06:	f000 8083 	beq.w	8002b10 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d15e      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a08      	ldr	r2, [pc, #32]	@ (8002a38 <HAL_RCC_OscConfig+0x4b8>)
 8002a18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fecd 	bl	80017bc <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a24:	e00c      	b.n	8002a40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fe fec9 	bl	80017bc <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d905      	bls.n	8002a40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0ab      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a40:	4b55      	ldr	r3, [pc, #340]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ec      	bne.n	8002a26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4c:	4b52      	ldr	r3, [pc, #328]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	4b52      	ldr	r3, [pc, #328]	@ (8002b9c <HAL_RCC_OscConfig+0x61c>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6a11      	ldr	r1, [r2, #32]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	4311      	orrs	r1, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002a66:	0212      	lsls	r2, r2, #8
 8002a68:	4311      	orrs	r1, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a6e:	0852      	lsrs	r2, r2, #1
 8002a70:	3a01      	subs	r2, #1
 8002a72:	0552      	lsls	r2, r2, #21
 8002a74:	4311      	orrs	r1, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a7a:	0852      	lsrs	r2, r2, #1
 8002a7c:	3a01      	subs	r2, #1
 8002a7e:	0652      	lsls	r2, r2, #25
 8002a80:	4311      	orrs	r1, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a86:	06d2      	lsls	r2, r2, #27
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	4943      	ldr	r1, [pc, #268]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a90:	4b41      	ldr	r3, [pc, #260]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a40      	ldr	r2, [pc, #256]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a3d      	ldr	r2, [pc, #244]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aa6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fe88 	bl	80017bc <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fe84 	bl	80017bc <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e066      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac2:	4b35      	ldr	r3, [pc, #212]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x530>
 8002ace:	e05e      	b.n	8002b8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a30      	ldr	r2, [pc, #192]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fe6e 	bl	80017bc <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fe6a 	bl	80017bc <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e04c      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af6:	4b28      	ldr	r3, [pc, #160]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002b02:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	4924      	ldr	r1, [pc, #144]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002b08:	4b25      	ldr	r3, [pc, #148]	@ (8002ba0 <HAL_RCC_OscConfig+0x620>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	60cb      	str	r3, [r1, #12]
 8002b0e:	e03e      	b.n	8002b8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e039      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 0203 	and.w	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d12c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d123      	bne.n	8002b8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d11b      	bne.n	8002b8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d113      	bne.n	8002b8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	085b      	lsrs	r3, r3, #1
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d109      	bne.n	8002b8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	3b01      	subs	r3, #1
 8002b84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	019f800c 	.word	0x019f800c
 8002ba0:	feeefffc 	.word	0xfeeefffc

08002ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e11e      	b.n	8002dfa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b91      	ldr	r3, [pc, #580]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d910      	bls.n	8002bec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b8e      	ldr	r3, [pc, #568]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 020f 	bic.w	r2, r3, #15
 8002bd2:	498c      	ldr	r1, [pc, #560]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b8a      	ldr	r3, [pc, #552]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e106      	b.n	8002dfa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d073      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d129      	bne.n	8002c54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c00:	4b81      	ldr	r3, [pc, #516]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0f4      	b.n	8002dfa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002c10:	f000 f99e 	bl	8002f50 <RCC_GetSysClockFreqFromPLLSource>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4a7c      	ldr	r2, [pc, #496]	@ (8002e0c <HAL_RCC_ClockConfig+0x268>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d93f      	bls.n	8002c9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d033      	beq.n	8002c9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d12f      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c3e:	4b72      	ldr	r3, [pc, #456]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c46:	4a70      	ldr	r2, [pc, #448]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e024      	b.n	8002c9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0c6      	b.n	8002dfa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c6c:	4b66      	ldr	r3, [pc, #408]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0be      	b.n	8002dfa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c7c:	f000 f8ce 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4a61      	ldr	r2, [pc, #388]	@ (8002e0c <HAL_RCC_ClockConfig+0x268>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d909      	bls.n	8002c9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c92:	4a5d      	ldr	r2, [pc, #372]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c9a:	2380      	movs	r3, #128	@ 0x80
 8002c9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f023 0203 	bic.w	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4957      	ldr	r1, [pc, #348]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb0:	f7fe fd84 	bl	80017bc <HAL_GetTick>
 8002cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb8:	f7fe fd80 	bl	80017bc <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e095      	b.n	8002dfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	4b4e      	ldr	r3, [pc, #312]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 020c 	and.w	r2, r3, #12
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d1eb      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d023      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf8:	4b43      	ldr	r3, [pc, #268]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a42      	ldr	r2, [pc, #264]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002cfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002d10:	4b3d      	ldr	r3, [pc, #244]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d18:	4a3b      	ldr	r2, [pc, #236]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002d1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d20:	4b39      	ldr	r3, [pc, #228]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4936      	ldr	r1, [pc, #216]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b80      	cmp	r3, #128	@ 0x80
 8002d38:	d105      	bne.n	8002d46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d3a:	4b33      	ldr	r3, [pc, #204]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	4a32      	ldr	r2, [pc, #200]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002d40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d46:	4b2f      	ldr	r3, [pc, #188]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d21d      	bcs.n	8002d90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d54:	4b2b      	ldr	r3, [pc, #172]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 020f 	bic.w	r2, r3, #15
 8002d5c:	4929      	ldr	r1, [pc, #164]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d64:	f7fe fd2a 	bl	80017bc <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7fe fd26 	bl	80017bc <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e03b      	b.n	8002dfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b20      	ldr	r3, [pc, #128]	@ (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d1ed      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4917      	ldr	r1, [pc, #92]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dba:	4b13      	ldr	r3, [pc, #76]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	490f      	ldr	r1, [pc, #60]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dce:	f000 f825 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	490c      	ldr	r1, [pc, #48]	@ (8002e10 <HAL_RCC_ClockConfig+0x26c>)
 8002de0:	5ccb      	ldrb	r3, [r1, r3]
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dea:	4a0a      	ldr	r2, [pc, #40]	@ (8002e14 <HAL_RCC_ClockConfig+0x270>)
 8002dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dee:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <HAL_RCC_ClockConfig+0x274>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe fc96 	bl	8001724 <HAL_InitTick>
 8002df8:	4603      	mov	r3, r0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40022000 	.word	0x40022000
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	04c4b400 	.word	0x04c4b400
 8002e10:	080064c8 	.word	0x080064c8
 8002e14:	20000200 	.word	0x20000200
 8002e18:	20000204 	.word	0x20000204

08002e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e22:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d102      	bne.n	8002e34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	e047      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e34:	4b27      	ldr	r3, [pc, #156]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d102      	bne.n	8002e46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e40:	4b26      	ldr	r3, [pc, #152]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	e03e      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002e46:	4b23      	ldr	r3, [pc, #140]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d136      	bne.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e52:	4b20      	ldr	r3, [pc, #128]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3301      	adds	r3, #1
 8002e68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d10c      	bne.n	8002e8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e70:	4a1a      	ldr	r2, [pc, #104]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	4a16      	ldr	r2, [pc, #88]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e7a:	68d2      	ldr	r2, [r2, #12]
 8002e7c:	0a12      	lsrs	r2, r2, #8
 8002e7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	617b      	str	r3, [r7, #20]
      break;
 8002e88:	e00c      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e8a:	4a13      	ldr	r2, [pc, #76]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	4a10      	ldr	r2, [pc, #64]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e94:	68d2      	ldr	r2, [r2, #12]
 8002e96:	0a12      	lsrs	r2, r2, #8
 8002e98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]
      break;
 8002ea2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0e5b      	lsrs	r3, r3, #25
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	e001      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ec4:	693b      	ldr	r3, [r7, #16]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	00f42400 	.word	0x00f42400
 8002edc:	016e3600 	.word	0x016e3600

08002ee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	@ (8002ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000200 	.word	0x20000200

08002ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002efc:	f7ff fff0 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4904      	ldr	r1, [pc, #16]	@ (8002f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	080064d8 	.word	0x080064d8

08002f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f28:	f7ff ffda 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0adb      	lsrs	r3, r3, #11
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4904      	ldr	r1, [pc, #16]	@ (8002f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	080064d8 	.word	0x080064d8

08002f50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f56:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f60:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d10c      	bne.n	8002f8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f74:	4a17      	ldr	r2, [pc, #92]	@ (8002fd4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	4a14      	ldr	r2, [pc, #80]	@ (8002fd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f7e:	68d2      	ldr	r2, [r2, #12]
 8002f80:	0a12      	lsrs	r2, r2, #8
 8002f82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	617b      	str	r3, [r7, #20]
    break;
 8002f8c:	e00c      	b.n	8002fa8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f8e:	4a12      	ldr	r2, [pc, #72]	@ (8002fd8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	4a0e      	ldr	r2, [pc, #56]	@ (8002fd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f98:	68d2      	ldr	r2, [r2, #12]
 8002f9a:	0a12      	lsrs	r2, r2, #8
 8002f9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fa0:	fb02 f303 	mul.w	r3, r2, r3
 8002fa4:	617b      	str	r3, [r7, #20]
    break;
 8002fa6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fa8:	4b09      	ldr	r3, [pc, #36]	@ (8002fd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	0e5b      	lsrs	r3, r3, #25
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002fc2:	687b      	ldr	r3, [r7, #4]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	016e3600 	.word	0x016e3600
 8002fd8:	00f42400 	.word	0x00f42400

08002fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8098 	beq.w	800312a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffe:	4b43      	ldr	r3, [pc, #268]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10d      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	4b40      	ldr	r3, [pc, #256]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300e:	4a3f      	ldr	r2, [pc, #252]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003014:	6593      	str	r3, [r2, #88]	@ 0x58
 8003016:	4b3d      	ldr	r3, [pc, #244]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003022:	2301      	movs	r3, #1
 8003024:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003026:	4b3a      	ldr	r3, [pc, #232]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a39      	ldr	r2, [pc, #228]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003030:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003032:	f7fe fbc3 	bl	80017bc <HAL_GetTick>
 8003036:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003038:	e009      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303a:	f7fe fbbf 	bl	80017bc <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d902      	bls.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	74fb      	strb	r3, [r7, #19]
        break;
 800304c:	e005      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800304e:	4b30      	ldr	r3, [pc, #192]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0ef      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d159      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003060:	4b2a      	ldr	r3, [pc, #168]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800306a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01e      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	429a      	cmp	r2, r3
 800307a:	d019      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800307c:	4b23      	ldr	r3, [pc, #140]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003086:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003088:	4b20      	ldr	r3, [pc, #128]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308e:	4a1f      	ldr	r2, [pc, #124]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003098:	4b1c      	ldr	r3, [pc, #112]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309e:	4a1b      	ldr	r2, [pc, #108]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030a8:	4a18      	ldr	r2, [pc, #96]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fe fb7f 	bl	80017bc <HAL_GetTick>
 80030be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c0:	e00b      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fe fb7b 	bl	80017bc <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d902      	bls.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	74fb      	strb	r3, [r7, #19]
            break;
 80030d8:	e006      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030da:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0ec      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10b      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ee:	4b07      	ldr	r3, [pc, #28]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fc:	4903      	ldr	r1, [pc, #12]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003104:	e008      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003106:	7cfb      	ldrb	r3, [r7, #19]
 8003108:	74bb      	strb	r3, [r7, #18]
 800310a:	e005      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800310c:	40021000 	.word	0x40021000
 8003110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003118:	7c7b      	ldrb	r3, [r7, #17]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4ba7      	ldr	r3, [pc, #668]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003122:	4aa6      	ldr	r2, [pc, #664]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003128:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003136:	4ba1      	ldr	r3, [pc, #644]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313c:	f023 0203 	bic.w	r2, r3, #3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	499d      	ldr	r1, [pc, #628]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003158:	4b98      	ldr	r3, [pc, #608]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315e:	f023 020c 	bic.w	r2, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4995      	ldr	r1, [pc, #596]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800317a:	4b90      	ldr	r3, [pc, #576]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003180:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	498c      	ldr	r1, [pc, #560]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800319c:	4b87      	ldr	r3, [pc, #540]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	4984      	ldr	r1, [pc, #528]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031be:	4b7f      	ldr	r3, [pc, #508]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	497b      	ldr	r1, [pc, #492]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031e0:	4b76      	ldr	r3, [pc, #472]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	4973      	ldr	r1, [pc, #460]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003202:	4b6e      	ldr	r3, [pc, #440]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003208:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	496a      	ldr	r1, [pc, #424]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003224:	4b65      	ldr	r3, [pc, #404]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4962      	ldr	r1, [pc, #392]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003246:	4b5d      	ldr	r3, [pc, #372]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	4959      	ldr	r1, [pc, #356]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003268:	4b54      	ldr	r3, [pc, #336]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003276:	4951      	ldr	r1, [pc, #324]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800328a:	4b4c      	ldr	r3, [pc, #304]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003290:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	4948      	ldr	r1, [pc, #288]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d015      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ac:	4b43      	ldr	r3, [pc, #268]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	4940      	ldr	r1, [pc, #256]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ca:	d105      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032cc:	4b3b      	ldr	r3, [pc, #236]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a3a      	ldr	r2, [pc, #232]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d015      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032e4:	4b35      	ldr	r3, [pc, #212]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f2:	4932      	ldr	r1, [pc, #200]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003302:	d105      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003304:	4b2d      	ldr	r3, [pc, #180]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4a2c      	ldr	r2, [pc, #176]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800330e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d015      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800331c:	4b27      	ldr	r3, [pc, #156]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003322:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332a:	4924      	ldr	r1, [pc, #144]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800333a:	d105      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800333c:	4b1f      	ldr	r3, [pc, #124]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a1e      	ldr	r2, [pc, #120]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003346:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d015      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003354:	4b19      	ldr	r3, [pc, #100]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003362:	4916      	ldr	r1, [pc, #88]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800336e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003372:	d105      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003374:	4b11      	ldr	r3, [pc, #68]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a10      	ldr	r2, [pc, #64]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800337e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d019      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003392:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	4908      	ldr	r1, [pc, #32]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033aa:	d109      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ac:	4b03      	ldr	r3, [pc, #12]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4a02      	ldr	r2, [pc, #8]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033b6:	60d3      	str	r3, [r2, #12]
 80033b8:	e002      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d015      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033cc:	4b29      	ldr	r3, [pc, #164]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	4926      	ldr	r1, [pc, #152]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033ea:	d105      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033ec:	4b21      	ldr	r3, [pc, #132]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4a20      	ldr	r2, [pc, #128]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003404:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003412:	4918      	ldr	r1, [pc, #96]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800341e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003422:	d105      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003424:	4b13      	ldr	r3, [pc, #76]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a12      	ldr	r2, [pc, #72]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800342a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800342e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d015      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800343c:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800343e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003442:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344a:	490a      	ldr	r1, [pc, #40]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003456:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800345a:	d105      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a04      	ldr	r2, [pc, #16]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003466:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003468:	7cbb      	ldrb	r3, [r7, #18]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000

08003478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e054      	b.n	8003534 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d111      	bne.n	80034ba <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 ff7c 	bl	800439c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a23      	ldr	r2, [pc, #140]	@ (800353c <HAL_TIM_Base_Init+0xc4>)
 80034b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3304      	adds	r3, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f000 fdef 	bl	80040b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	080013ad 	.word	0x080013ad

08003540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d001      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e054      	b.n	8003602 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a26      	ldr	r2, [pc, #152]	@ (8003610 <HAL_TIM_Base_Start_IT+0xd0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d022      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003582:	d01d      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a22      	ldr	r2, [pc, #136]	@ (8003614 <HAL_TIM_Base_Start_IT+0xd4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d018      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a21      	ldr	r2, [pc, #132]	@ (8003618 <HAL_TIM_Base_Start_IT+0xd8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1f      	ldr	r2, [pc, #124]	@ (800361c <HAL_TIM_Base_Start_IT+0xdc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00e      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003620 <HAL_TIM_Base_Start_IT+0xe0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d009      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003624 <HAL_TIM_Base_Start_IT+0xe4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003628 <HAL_TIM_Base_Start_IT+0xe8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d115      	bne.n	80035ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	4b19      	ldr	r3, [pc, #100]	@ (800362c <HAL_TIM_Base_Start_IT+0xec>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d015      	beq.n	80035fe <HAL_TIM_Base_Start_IT+0xbe>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d8:	d011      	beq.n	80035fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ea:	e008      	b.n	80035fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e000      	b.n	8003600 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40013400 	.word	0x40013400
 8003624:	40014000 	.word	0x40014000
 8003628:	40015000 	.word	0x40015000
 800362c:	00010007 	.word	0x00010007

08003630 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e04c      	b.n	80036de <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d111      	bne.n	8003674 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fe9f 	bl	800439c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a1f      	ldr	r2, [pc, #124]	@ (80036e8 <HAL_TIM_OnePulse_Init+0xb8>)
 800366a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f000 fd12 	bl	80040b0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0208 	bic.w	r2, r2, #8
 800369a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6819      	ldr	r1, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	080036ed 	.word	0x080036ed

080036ec <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003710:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003718:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003720:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003728:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d108      	bne.n	8003742 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003730:	7bbb      	ldrb	r3, [r7, #14]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003736:	7b7b      	ldrb	r3, [r7, #13]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d102      	bne.n	8003742 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800373c:	7b3b      	ldrb	r3, [r7, #12]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d001      	beq.n	8003746 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e059      	b.n	80037fa <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2202      	movs	r2, #2
 800374a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2202      	movs	r2, #2
 8003762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0202 	orr.w	r2, r2, #2
 8003774:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0204 	orr.w	r2, r2, #4
 8003784:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2201      	movs	r2, #1
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fdde 	bl	8004350 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2201      	movs	r2, #1
 800379a:	2104      	movs	r1, #4
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fdd7 	bl	8004350 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a17      	ldr	r2, [pc, #92]	@ (8003804 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d018      	beq.n	80037de <HAL_TIM_OnePulse_Start_IT+0xde>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a15      	ldr	r2, [pc, #84]	@ (8003808 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_TIM_OnePulse_Start_IT+0xde>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a14      	ldr	r2, [pc, #80]	@ (800380c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_TIM_OnePulse_Start_IT+0xde>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a12      	ldr	r2, [pc, #72]	@ (8003810 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_TIM_OnePulse_Start_IT+0xde>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a11      	ldr	r2, [pc, #68]	@ (8003814 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_TIM_OnePulse_Start_IT+0xde>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003818 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80037e2:	2300      	movs	r3, #0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40013400 	.word	0x40013400
 800380c:	40014000 	.word	0x40014000
 8003810:	40014400 	.word	0x40014400
 8003814:	40014800 	.word	0x40014800
 8003818:	40015000 	.word	0x40015000

0800381c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d026      	beq.n	800388c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d021      	beq.n	800388c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0202 	mvn.w	r2, #2
 8003850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e009      	b.n	8003886 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d026      	beq.n	80038e4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d021      	beq.n	80038e4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0204 	mvn.w	r2, #4
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2202      	movs	r2, #2
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
 80038c8:	e009      	b.n	80038de <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d026      	beq.n	800393c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d021      	beq.n	800393c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0208 	mvn.w	r2, #8
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2204      	movs	r2, #4
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
 8003920:	e009      	b.n	8003936 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	d026      	beq.n	8003994 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b00      	cmp	r3, #0
 800394e:	d021      	beq.n	8003994 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0210 	mvn.w	r2, #16
 8003958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2208      	movs	r2, #8
 800395e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
 8003978:	e009      	b.n	800398e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00e      	beq.n	80039bc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0201 	mvn.w	r2, #1
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00e      	beq.n	80039ee <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80039e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00e      	beq.n	8003a16 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00e      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f06f 0220 	mvn.w	r2, #32
 8003a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00e      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00e      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00e      	beq.n	8003ade <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00e      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_TIM_ConfigClockSource+0x1c>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e0f6      	b.n	8003d1a <HAL_TIM_ConfigClockSource+0x20a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003b4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a6f      	ldr	r2, [pc, #444]	@ (8003d24 <HAL_TIM_ConfigClockSource+0x214>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	f000 80c1 	beq.w	8003cee <HAL_TIM_ConfigClockSource+0x1de>
 8003b6c:	4a6d      	ldr	r2, [pc, #436]	@ (8003d24 <HAL_TIM_ConfigClockSource+0x214>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	f200 80c6 	bhi.w	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b74:	4a6c      	ldr	r2, [pc, #432]	@ (8003d28 <HAL_TIM_ConfigClockSource+0x218>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	f000 80b9 	beq.w	8003cee <HAL_TIM_ConfigClockSource+0x1de>
 8003b7c:	4a6a      	ldr	r2, [pc, #424]	@ (8003d28 <HAL_TIM_ConfigClockSource+0x218>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	f200 80be 	bhi.w	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b84:	4a69      	ldr	r2, [pc, #420]	@ (8003d2c <HAL_TIM_ConfigClockSource+0x21c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	f000 80b1 	beq.w	8003cee <HAL_TIM_ConfigClockSource+0x1de>
 8003b8c:	4a67      	ldr	r2, [pc, #412]	@ (8003d2c <HAL_TIM_ConfigClockSource+0x21c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	f200 80b6 	bhi.w	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b94:	4a66      	ldr	r2, [pc, #408]	@ (8003d30 <HAL_TIM_ConfigClockSource+0x220>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f000 80a9 	beq.w	8003cee <HAL_TIM_ConfigClockSource+0x1de>
 8003b9c:	4a64      	ldr	r2, [pc, #400]	@ (8003d30 <HAL_TIM_ConfigClockSource+0x220>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	f200 80ae 	bhi.w	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ba4:	4a63      	ldr	r2, [pc, #396]	@ (8003d34 <HAL_TIM_ConfigClockSource+0x224>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	f000 80a1 	beq.w	8003cee <HAL_TIM_ConfigClockSource+0x1de>
 8003bac:	4a61      	ldr	r2, [pc, #388]	@ (8003d34 <HAL_TIM_ConfigClockSource+0x224>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	f200 80a6 	bhi.w	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003bb4:	4a60      	ldr	r2, [pc, #384]	@ (8003d38 <HAL_TIM_ConfigClockSource+0x228>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	f000 8099 	beq.w	8003cee <HAL_TIM_ConfigClockSource+0x1de>
 8003bbc:	4a5e      	ldr	r2, [pc, #376]	@ (8003d38 <HAL_TIM_ConfigClockSource+0x228>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	f200 809e 	bhi.w	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003bc4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003bc8:	f000 8091 	beq.w	8003cee <HAL_TIM_ConfigClockSource+0x1de>
 8003bcc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003bd0:	f200 8096 	bhi.w	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003bd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bd8:	f000 8089 	beq.w	8003cee <HAL_TIM_ConfigClockSource+0x1de>
 8003bdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003be0:	f200 808e 	bhi.w	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be8:	d03e      	beq.n	8003c68 <HAL_TIM_ConfigClockSource+0x158>
 8003bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bee:	f200 8087 	bhi.w	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf6:	f000 8086 	beq.w	8003d06 <HAL_TIM_ConfigClockSource+0x1f6>
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bfe:	d87f      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c00:	2b70      	cmp	r3, #112	@ 0x70
 8003c02:	d01a      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x12a>
 8003c04:	2b70      	cmp	r3, #112	@ 0x70
 8003c06:	d87b      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c08:	2b60      	cmp	r3, #96	@ 0x60
 8003c0a:	d050      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x19e>
 8003c0c:	2b60      	cmp	r3, #96	@ 0x60
 8003c0e:	d877      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c10:	2b50      	cmp	r3, #80	@ 0x50
 8003c12:	d03c      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x17e>
 8003c14:	2b50      	cmp	r3, #80	@ 0x50
 8003c16:	d873      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c18:	2b40      	cmp	r3, #64	@ 0x40
 8003c1a:	d058      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x1be>
 8003c1c:	2b40      	cmp	r3, #64	@ 0x40
 8003c1e:	d86f      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c20:	2b30      	cmp	r3, #48	@ 0x30
 8003c22:	d064      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x1de>
 8003c24:	2b30      	cmp	r3, #48	@ 0x30
 8003c26:	d86b      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d060      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x1de>
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d867      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d05c      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x1de>
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d05a      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x1de>
 8003c38:	e062      	b.n	8003d00 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c4a:	f000 fb61 	bl	8004310 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	609a      	str	r2, [r3, #8]
      break;
 8003c66:	e04f      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c78:	f000 fb4a 	bl	8004310 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c8a:	609a      	str	r2, [r3, #8]
      break;
 8003c8c:	e03c      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f000 fabc 	bl	8004218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2150      	movs	r1, #80	@ 0x50
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fb15 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 8003cac:	e02c      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f000 fadb 	bl	8004276 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2160      	movs	r1, #96	@ 0x60
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fb05 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 8003ccc:	e01c      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f000 fa9c 	bl	8004218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2140      	movs	r1, #64	@ 0x40
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 faf5 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 8003cec:	e00c      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	f000 faec 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 8003cfe:	e003      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      break;
 8003d04:	e000      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	00100070 	.word	0x00100070
 8003d28:	00100060 	.word	0x00100060
 8003d2c:	00100050 	.word	0x00100050
 8003d30:	00100040 	.word	0x00100040
 8003d34:	00100030 	.word	0x00100030
 8003d38:	00100020 	.word	0x00100020

08003d3c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e14a      	b.n	80040a2 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	f040 80dd 	bne.w	8003fd4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8003e1a:	7afb      	ldrb	r3, [r7, #11]
 8003e1c:	2b1f      	cmp	r3, #31
 8003e1e:	f200 80d6 	bhi.w	8003fce <HAL_TIM_RegisterCallback+0x1de>
 8003e22:	a201      	add	r2, pc, #4	@ (adr r2, 8003e28 <HAL_TIM_RegisterCallback+0x38>)
 8003e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e28:	08003ea9 	.word	0x08003ea9
 8003e2c:	08003eb1 	.word	0x08003eb1
 8003e30:	08003eb9 	.word	0x08003eb9
 8003e34:	08003ec1 	.word	0x08003ec1
 8003e38:	08003ec9 	.word	0x08003ec9
 8003e3c:	08003ed1 	.word	0x08003ed1
 8003e40:	08003ed9 	.word	0x08003ed9
 8003e44:	08003ee1 	.word	0x08003ee1
 8003e48:	08003ee9 	.word	0x08003ee9
 8003e4c:	08003ef1 	.word	0x08003ef1
 8003e50:	08003ef9 	.word	0x08003ef9
 8003e54:	08003f01 	.word	0x08003f01
 8003e58:	08003f09 	.word	0x08003f09
 8003e5c:	08003f11 	.word	0x08003f11
 8003e60:	08003f1b 	.word	0x08003f1b
 8003e64:	08003f25 	.word	0x08003f25
 8003e68:	08003f2f 	.word	0x08003f2f
 8003e6c:	08003f39 	.word	0x08003f39
 8003e70:	08003f43 	.word	0x08003f43
 8003e74:	08003f4d 	.word	0x08003f4d
 8003e78:	08003f57 	.word	0x08003f57
 8003e7c:	08003f61 	.word	0x08003f61
 8003e80:	08003f6b 	.word	0x08003f6b
 8003e84:	08003f75 	.word	0x08003f75
 8003e88:	08003f7f 	.word	0x08003f7f
 8003e8c:	08003f89 	.word	0x08003f89
 8003e90:	08003f93 	.word	0x08003f93
 8003e94:	08003f9d 	.word	0x08003f9d
 8003e98:	08003fa7 	.word	0x08003fa7
 8003e9c:	08003fb1 	.word	0x08003fb1
 8003ea0:	08003fbb 	.word	0x08003fbb
 8003ea4:	08003fc5 	.word	0x08003fc5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003eae:	e0f7      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003eb6:	e0f3      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003ebe:	e0ef      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003ec6:	e0eb      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003ece:	e0e7      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003ed6:	e0e3      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003ede:	e0df      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003ee6:	e0db      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003eee:	e0d7      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003ef6:	e0d3      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003efe:	e0cf      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003f06:	e0cb      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003f0e:	e0c7      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003f18:	e0c2      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8003f22:	e0bd      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8003f2c:	e0b8      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8003f36:	e0b3      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8003f40:	e0ae      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8003f4a:	e0a9      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8003f54:	e0a4      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8003f5e:	e09f      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8003f68:	e09a      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8003f72:	e095      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8003f7c:	e090      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8003f86:	e08b      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8003f90:	e086      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8003f9a:	e081      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8003fa4:	e07c      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8003fae:	e077      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8003fb8:	e072      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8003fc2:	e06d      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8003fcc:	e068      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
        break;
 8003fd2:	e065      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d15d      	bne.n	800409c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8003fe0:	7afb      	ldrb	r3, [r7, #11]
 8003fe2:	2b0d      	cmp	r3, #13
 8003fe4:	d857      	bhi.n	8004096 <HAL_TIM_RegisterCallback+0x2a6>
 8003fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <HAL_TIM_RegisterCallback+0x1fc>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	08004025 	.word	0x08004025
 8003ff0:	0800402d 	.word	0x0800402d
 8003ff4:	08004035 	.word	0x08004035
 8003ff8:	0800403d 	.word	0x0800403d
 8003ffc:	08004045 	.word	0x08004045
 8004000:	0800404d 	.word	0x0800404d
 8004004:	08004055 	.word	0x08004055
 8004008:	0800405d 	.word	0x0800405d
 800400c:	08004065 	.word	0x08004065
 8004010:	0800406d 	.word	0x0800406d
 8004014:	08004075 	.word	0x08004075
 8004018:	0800407d 	.word	0x0800407d
 800401c:	08004085 	.word	0x08004085
 8004020:	0800408d 	.word	0x0800408d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800402a:	e039      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004032:	e035      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800403a:	e031      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004042:	e02d      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800404a:	e029      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004052:	e025      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800405a:	e021      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8004062:	e01d      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800406a:	e019      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004072:	e015      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800407a:	e011      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8004082:	e00d      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800408a:	e009      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8004094:	e004      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	75fb      	strb	r3, [r7, #23]
        break;
 800409a:	e001      	b.n	80040a0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop

080040b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a4c      	ldr	r2, [pc, #304]	@ (80041f4 <TIM_Base_SetConfig+0x144>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d017      	beq.n	80040f8 <TIM_Base_SetConfig+0x48>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ce:	d013      	beq.n	80040f8 <TIM_Base_SetConfig+0x48>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a49      	ldr	r2, [pc, #292]	@ (80041f8 <TIM_Base_SetConfig+0x148>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00f      	beq.n	80040f8 <TIM_Base_SetConfig+0x48>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a48      	ldr	r2, [pc, #288]	@ (80041fc <TIM_Base_SetConfig+0x14c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00b      	beq.n	80040f8 <TIM_Base_SetConfig+0x48>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a47      	ldr	r2, [pc, #284]	@ (8004200 <TIM_Base_SetConfig+0x150>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d007      	beq.n	80040f8 <TIM_Base_SetConfig+0x48>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a46      	ldr	r2, [pc, #280]	@ (8004204 <TIM_Base_SetConfig+0x154>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_Base_SetConfig+0x48>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a45      	ldr	r2, [pc, #276]	@ (8004208 <TIM_Base_SetConfig+0x158>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d108      	bne.n	800410a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a39      	ldr	r2, [pc, #228]	@ (80041f4 <TIM_Base_SetConfig+0x144>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d023      	beq.n	800415a <TIM_Base_SetConfig+0xaa>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004118:	d01f      	beq.n	800415a <TIM_Base_SetConfig+0xaa>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a36      	ldr	r2, [pc, #216]	@ (80041f8 <TIM_Base_SetConfig+0x148>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01b      	beq.n	800415a <TIM_Base_SetConfig+0xaa>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a35      	ldr	r2, [pc, #212]	@ (80041fc <TIM_Base_SetConfig+0x14c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d017      	beq.n	800415a <TIM_Base_SetConfig+0xaa>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a34      	ldr	r2, [pc, #208]	@ (8004200 <TIM_Base_SetConfig+0x150>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <TIM_Base_SetConfig+0xaa>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a33      	ldr	r2, [pc, #204]	@ (8004204 <TIM_Base_SetConfig+0x154>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00f      	beq.n	800415a <TIM_Base_SetConfig+0xaa>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a33      	ldr	r2, [pc, #204]	@ (800420c <TIM_Base_SetConfig+0x15c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00b      	beq.n	800415a <TIM_Base_SetConfig+0xaa>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a32      	ldr	r2, [pc, #200]	@ (8004210 <TIM_Base_SetConfig+0x160>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <TIM_Base_SetConfig+0xaa>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a31      	ldr	r2, [pc, #196]	@ (8004214 <TIM_Base_SetConfig+0x164>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d003      	beq.n	800415a <TIM_Base_SetConfig+0xaa>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a2c      	ldr	r2, [pc, #176]	@ (8004208 <TIM_Base_SetConfig+0x158>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d108      	bne.n	800416c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <TIM_Base_SetConfig+0x144>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d013      	beq.n	80041c0 <TIM_Base_SetConfig+0x110>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a1a      	ldr	r2, [pc, #104]	@ (8004204 <TIM_Base_SetConfig+0x154>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00f      	beq.n	80041c0 <TIM_Base_SetConfig+0x110>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a1a      	ldr	r2, [pc, #104]	@ (800420c <TIM_Base_SetConfig+0x15c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00b      	beq.n	80041c0 <TIM_Base_SetConfig+0x110>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a19      	ldr	r2, [pc, #100]	@ (8004210 <TIM_Base_SetConfig+0x160>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d007      	beq.n	80041c0 <TIM_Base_SetConfig+0x110>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a18      	ldr	r2, [pc, #96]	@ (8004214 <TIM_Base_SetConfig+0x164>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_Base_SetConfig+0x110>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a13      	ldr	r2, [pc, #76]	@ (8004208 <TIM_Base_SetConfig+0x158>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d103      	bne.n	80041c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f023 0201 	bic.w	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	611a      	str	r2, [r3, #16]
  }
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00
 8004204:	40013400 	.word	0x40013400
 8004208:	40015000 	.word	0x40015000
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800

08004218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 030a 	bic.w	r3, r3, #10
 8004254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f023 0210 	bic.w	r2, r3, #16
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	031b      	lsls	r3, r3, #12
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	621a      	str	r2, [r3, #32]
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80042ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f043 0307 	orr.w	r3, r3, #7
 80042fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	609a      	str	r2, [r3, #8]
}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800432a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	021a      	lsls	r2, r3, #8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	431a      	orrs	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4313      	orrs	r3, r2
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	609a      	str	r2, [r3, #8]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	2201      	movs	r2, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a1a      	ldr	r2, [r3, #32]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	43db      	mvns	r3, r3
 8004372:	401a      	ands	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a1a      	ldr	r2, [r3, #32]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	fa01 f303 	lsl.w	r3, r1, r3
 8004388:	431a      	orrs	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a26      	ldr	r2, [pc, #152]	@ (8004440 <TIM_ResetCallback+0xa4>)
 80043a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a25      	ldr	r2, [pc, #148]	@ (8004444 <TIM_ResetCallback+0xa8>)
 80043b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a24      	ldr	r2, [pc, #144]	@ (8004448 <TIM_ResetCallback+0xac>)
 80043b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a23      	ldr	r2, [pc, #140]	@ (800444c <TIM_ResetCallback+0xb0>)
 80043c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a22      	ldr	r2, [pc, #136]	@ (8004450 <TIM_ResetCallback+0xb4>)
 80043c8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a21      	ldr	r2, [pc, #132]	@ (8004454 <TIM_ResetCallback+0xb8>)
 80043d0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a20      	ldr	r2, [pc, #128]	@ (8004458 <TIM_ResetCallback+0xbc>)
 80043d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a1f      	ldr	r2, [pc, #124]	@ (800445c <TIM_ResetCallback+0xc0>)
 80043e0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004460 <TIM_ResetCallback+0xc4>)
 80043e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004464 <TIM_ResetCallback+0xc8>)
 80043f0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004468 <TIM_ResetCallback+0xcc>)
 80043f8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a1b      	ldr	r2, [pc, #108]	@ (800446c <TIM_ResetCallback+0xd0>)
 8004400:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a1a      	ldr	r2, [pc, #104]	@ (8004470 <TIM_ResetCallback+0xd4>)
 8004408:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a19      	ldr	r2, [pc, #100]	@ (8004474 <TIM_ResetCallback+0xd8>)
 8004410:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a18      	ldr	r2, [pc, #96]	@ (8004478 <TIM_ResetCallback+0xdc>)
 8004418:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a17      	ldr	r2, [pc, #92]	@ (800447c <TIM_ResetCallback+0xe0>)
 8004420:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a16      	ldr	r2, [pc, #88]	@ (8004480 <TIM_ResetCallback+0xe4>)
 8004428:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <TIM_ResetCallback+0xe8>)
 8004430:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	0800132d 	.word	0x0800132d
 8004444:	08003d3d 	.word	0x08003d3d
 8004448:	08003db5 	.word	0x08003db5
 800444c:	08003dc9 	.word	0x08003dc9
 8004450:	08003d65 	.word	0x08003d65
 8004454:	08003d79 	.word	0x08003d79
 8004458:	08003d51 	.word	0x08003d51
 800445c:	08003d8d 	.word	0x08003d8d
 8004460:	08003da1 	.word	0x08003da1
 8004464:	08003ddd 	.word	0x08003ddd
 8004468:	080045b5 	.word	0x080045b5
 800446c:	080045c9 	.word	0x080045c9
 8004470:	080045dd 	.word	0x080045dd
 8004474:	080045f1 	.word	0x080045f1
 8004478:	08004605 	.word	0x08004605
 800447c:	08004619 	.word	0x08004619
 8004480:	0800462d 	.word	0x0800462d
 8004484:	08004641 	.word	0x08004641

08004488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800449c:	2302      	movs	r3, #2
 800449e:	e074      	b.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a34      	ldr	r2, [pc, #208]	@ (8004598 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a33      	ldr	r2, [pc, #204]	@ (800459c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a31      	ldr	r2, [pc, #196]	@ (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80044f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a21      	ldr	r2, [pc, #132]	@ (8004598 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004520:	d01d      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1f      	ldr	r2, [pc, #124]	@ (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d018      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1d      	ldr	r2, [pc, #116]	@ (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1c      	ldr	r2, [pc, #112]	@ (80045ac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a15      	ldr	r2, [pc, #84]	@ (800459c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a18      	ldr	r2, [pc, #96]	@ (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a11      	ldr	r2, [pc, #68]	@ (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d10c      	bne.n	8004578 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	4313      	orrs	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40013400 	.word	0x40013400
 80045a0:	40015000 	.word	0x40015000
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800
 80045ac:	40000c00 	.word	0x40000c00
 80045b0:	40014000 	.word	0x40014000

080045b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e050      	b.n	8004708 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466c:	2b00      	cmp	r3, #0
 800466e:	d114      	bne.n	800469a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fdc5 	bl	8005208 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d103      	bne.n	8004690 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a21      	ldr	r2, [pc, #132]	@ (8004710 <HAL_UART_Init+0xbc>)
 800468c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2224      	movs	r2, #36	@ 0x24
 800469e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f001 f8f2 	bl	80058a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fdf3 	bl	80052ac <UART_SetConfig>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e01b      	b.n	8004708 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f001 f971 	bl	80059e8 <UART_CheckIdleState>
 8004706:	4603      	mov	r3, r0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	08001431 	.word	0x08001431

08004714 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	460b      	mov	r3, r1
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004732:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e09c      	b.n	800487a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004746:	2b20      	cmp	r3, #32
 8004748:	d16c      	bne.n	8004824 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800474a:	7afb      	ldrb	r3, [r7, #11]
 800474c:	2b0c      	cmp	r3, #12
 800474e:	d85e      	bhi.n	800480e <HAL_UART_RegisterCallback+0xfa>
 8004750:	a201      	add	r2, pc, #4	@ (adr r2, 8004758 <HAL_UART_RegisterCallback+0x44>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	0800478d 	.word	0x0800478d
 800475c:	08004797 	.word	0x08004797
 8004760:	080047a1 	.word	0x080047a1
 8004764:	080047ab 	.word	0x080047ab
 8004768:	080047b5 	.word	0x080047b5
 800476c:	080047bf 	.word	0x080047bf
 8004770:	080047c9 	.word	0x080047c9
 8004774:	080047d3 	.word	0x080047d3
 8004778:	080047dd 	.word	0x080047dd
 800477c:	080047e7 	.word	0x080047e7
 8004780:	080047f1 	.word	0x080047f1
 8004784:	080047fb 	.word	0x080047fb
 8004788:	08004805 	.word	0x08004805
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8004794:	e070      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800479e:	e06b      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80047a8:	e066      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80047b2:	e061      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80047bc:	e05c      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80047c6:	e057      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80047d0:	e052      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80047da:	e04d      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80047e4:	e048      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80047ee:	e043      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80047f8:	e03e      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8004802:	e039      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800480c:	e034      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004814:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	75fb      	strb	r3, [r7, #23]
        break;
 8004822:	e029      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11a      	bne.n	8004864 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800482e:	7afb      	ldrb	r3, [r7, #11]
 8004830:	2b0b      	cmp	r3, #11
 8004832:	d002      	beq.n	800483a <HAL_UART_RegisterCallback+0x126>
 8004834:	2b0c      	cmp	r3, #12
 8004836:	d005      	beq.n	8004844 <HAL_UART_RegisterCallback+0x130>
 8004838:	e009      	b.n	800484e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8004842:	e019      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800484c:	e014      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004854:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	75fb      	strb	r3, [r7, #23]
        break;
 8004862:	e009      	b.n	8004878 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004878:	7dfb      	ldrb	r3, [r7, #23]
}
 800487a:	4618      	mov	r0, r3
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop

08004888 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	@ 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	4613      	mov	r3, r2
 8004894:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489c:	2b20      	cmp	r3, #32
 800489e:	d167      	bne.n	8004970 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_UART_Transmit_DMA+0x24>
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e060      	b.n	8004972 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	88fa      	ldrh	r2, [r7, #6]
 80048ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2221      	movs	r2, #33	@ 0x21
 80048d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d028      	beq.n	8004930 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048e2:	4a26      	ldr	r2, [pc, #152]	@ (800497c <HAL_UART_Transmit_DMA+0xf4>)
 80048e4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048ea:	4a25      	ldr	r2, [pc, #148]	@ (8004980 <HAL_UART_Transmit_DMA+0xf8>)
 80048ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048f2:	4a24      	ldr	r2, [pc, #144]	@ (8004984 <HAL_UART_Transmit_DMA+0xfc>)
 80048f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048fa:	2200      	movs	r2, #0
 80048fc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004906:	4619      	mov	r1, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3328      	adds	r3, #40	@ 0x28
 800490e:	461a      	mov	r2, r3
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	f7fd f939 	bl	8001b88 <HAL_DMA_Start_IT>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d009      	beq.n	8004930 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2210      	movs	r2, #16
 8004920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e020      	b.n	8004972 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2240      	movs	r2, #64	@ 0x40
 8004936:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3308      	adds	r3, #8
 800493e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	613b      	str	r3, [r7, #16]
   return(result);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3308      	adds	r3, #8
 8004956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004958:	623a      	str	r2, [r7, #32]
 800495a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	69f9      	ldr	r1, [r7, #28]
 800495e:	6a3a      	ldr	r2, [r7, #32]
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	61bb      	str	r3, [r7, #24]
   return(result);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e5      	bne.n	8004938 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	e000      	b.n	8004972 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
  }
}
 8004972:	4618      	mov	r0, r3
 8004974:	3728      	adds	r7, #40	@ 0x28
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	08005eb3 	.word	0x08005eb3
 8004980:	08005f51 	.word	0x08005f51
 8004984:	080060eb 	.word	0x080060eb

08004988 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	@ 0x28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800499c:	2b20      	cmp	r3, #32
 800499e:	d137      	bne.n	8004a10 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_UART_Receive_DMA+0x24>
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e030      	b.n	8004a12 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a18      	ldr	r2, [pc, #96]	@ (8004a1c <HAL_UART_Receive_DMA+0x94>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d01f      	beq.n	8004a00 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d018      	beq.n	8004a00 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	613b      	str	r3, [r7, #16]
   return(result);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	623b      	str	r3, [r7, #32]
 80049ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	69f9      	ldr	r1, [r7, #28]
 80049f2:	6a3a      	ldr	r2, [r7, #32]
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e6      	bne.n	80049ce <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	461a      	mov	r2, r3
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f001 f906 	bl	8005c18 <UART_Start_Receive_DMA>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	e000      	b.n	8004a12 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
  }
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3728      	adds	r7, #40	@ 0x28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40008000 	.word	0x40008000

08004a20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b0ba      	sub	sp, #232	@ 0xe8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004a4a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004a4e:	4013      	ands	r3, r2
 8004a50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d11b      	bne.n	8004a94 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d015      	beq.n	8004a94 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d105      	bne.n	8004a80 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 82f3 	beq.w	8005070 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
      }
      return;
 8004a92:	e2ed      	b.n	8005070 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8129 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004aa2:	4b90      	ldr	r3, [pc, #576]	@ (8004ce4 <HAL_UART_IRQHandler+0x2c4>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004aaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004aae:	4b8e      	ldr	r3, [pc, #568]	@ (8004ce8 <HAL_UART_IRQHandler+0x2c8>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 811c 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d011      	beq.n	8004ae8 <HAL_UART_IRQHandler+0xc8>
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00b      	beq.n	8004ae8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ade:	f043 0201 	orr.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d011      	beq.n	8004b18 <HAL_UART_IRQHandler+0xf8>
 8004af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00b      	beq.n	8004b18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2202      	movs	r2, #2
 8004b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b0e:	f043 0204 	orr.w	r2, r3, #4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d011      	beq.n	8004b48 <HAL_UART_IRQHandler+0x128>
 8004b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2204      	movs	r2, #4
 8004b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b3e:	f043 0202 	orr.w	r2, r3, #2
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d017      	beq.n	8004b84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004b60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004b64:	4b5f      	ldr	r3, [pc, #380]	@ (8004ce4 <HAL_UART_IRQHandler+0x2c4>)
 8004b66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00b      	beq.n	8004b84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2208      	movs	r2, #8
 8004b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7a:	f043 0208 	orr.w	r2, r3, #8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d012      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x196>
 8004b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00c      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ba4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bac:	f043 0220 	orr.w	r2, r3, #32
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8259 	beq.w	8005074 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d013      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0a:	2b40      	cmp	r3, #64	@ 0x40
 8004c0c:	d005      	beq.n	8004c1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d058      	beq.n	8004ccc <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f001 f8e3 	bl	8005de6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2a:	2b40      	cmp	r3, #64	@ 0x40
 8004c2c:	d148      	bne.n	8004cc0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3308      	adds	r3, #8
 8004c34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1d9      	bne.n	8004c2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d017      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c8a:	4a18      	ldr	r2, [pc, #96]	@ (8004cec <HAL_UART_IRQHandler+0x2cc>)
 8004c8c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fd f84b 	bl	8001d30 <HAL_DMA_Abort_IT>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01f      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb2:	e015      	b.n	8004ce0 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbe:	e00f      	b.n	8004ce0 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cca:	e009      	b.n	8004ce0 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004cde:	e1c9      	b.n	8005074 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	bf00      	nop
    return;
 8004ce2:	e1c7      	b.n	8005074 <HAL_UART_IRQHandler+0x654>
 8004ce4:	10000001 	.word	0x10000001
 8004ce8:	04000120 	.word	0x04000120
 8004cec:	0800616f 	.word	0x0800616f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	f040 8157 	bne.w	8004fa8 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8150 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8149 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2210      	movs	r2, #16
 8004d1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d28:	2b40      	cmp	r3, #64	@ 0x40
 8004d2a:	f040 80bd 	bne.w	8004ea8 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8199 	beq.w	8005078 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d50:	429a      	cmp	r2, r3
 8004d52:	f080 8191 	bcs.w	8005078 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f040 8087 	bne.w	8004e82 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004da2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004daa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1da      	bne.n	8004d74 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dd0:	f023 0301 	bic.w	r3, r3, #1
 8004dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004de2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004de6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004dea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e1      	bne.n	8004dbe <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3308      	adds	r3, #8
 8004e00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e3      	bne.n	8004dfa <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e50:	f023 0310 	bic.w	r3, r3, #16
 8004e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e4      	bne.n	8004e40 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fc fefe 	bl	8001c7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	1a8a      	subs	r2, r1, r2
 8004e9e:	b292      	uxth	r2, r2
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ea6:	e0e7      	b.n	8005078 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80d9 	beq.w	800507c <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8004eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80d4 	beq.w	800507c <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ef8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004efc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e4      	bne.n	8004ed4 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	623b      	str	r3, [r7, #32]
   return(result);
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f32:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e1      	bne.n	8004f0a <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0310 	bic.w	r3, r3, #16
 8004f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	69b9      	ldr	r1, [r7, #24]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	617b      	str	r3, [r7, #20]
   return(result);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e4      	bne.n	8004f5a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f9c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fa6:	e069      	b.n	800507c <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d010      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x5b6>
 8004fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004fc8:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fd4:	e055      	b.n	8005082 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d014      	beq.n	800500c <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d105      	bne.n	8004ffa <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d03e      	beq.n	8005080 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
    }
    return;
 800500a:	e039      	b.n	8005080 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800500c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d009      	beq.n	800502c <HAL_UART_IRQHandler+0x60c>
 8005018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800501c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f001 f8ba 	bl	800619e <UART_EndTransmit_IT>
    return;
 800502a:	e02a      	b.n	8005082 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800502c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005030:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_UART_IRQHandler+0x630>
 8005038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800503c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800504e:	e018      	b.n	8005082 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005054:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d012      	beq.n	8005082 <HAL_UART_IRQHandler+0x662>
 800505c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005060:	2b00      	cmp	r3, #0
 8005062:	da0e      	bge.n	8005082 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800506e:	e008      	b.n	8005082 <HAL_UART_IRQHandler+0x662>
      return;
 8005070:	bf00      	nop
 8005072:	e006      	b.n	8005082 <HAL_UART_IRQHandler+0x662>
    return;
 8005074:	bf00      	nop
 8005076:	e004      	b.n	8005082 <HAL_UART_IRQHandler+0x662>
      return;
 8005078:	bf00      	nop
 800507a:	e002      	b.n	8005082 <HAL_UART_IRQHandler+0x662>
      return;
 800507c:	bf00      	nop
 800507e:	e000      	b.n	8005082 <HAL_UART_IRQHandler+0x662>
    return;
 8005080:	bf00      	nop
  }
}
 8005082:	37e8      	adds	r7, #232	@ 0xe8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a09      	ldr	r2, [pc, #36]	@ (8005174 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	615a      	str	r2, [r3, #20]
  }
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	40008000 	.word	0x40008000

08005178 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a18      	ldr	r2, [pc, #96]	@ (80051e8 <HAL_UART_EnableReceiverTimeout+0x70>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d027      	beq.n	80051da <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005190:	2b20      	cmp	r3, #32
 8005192:	d120      	bne.n	80051d6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_UART_EnableReceiverTimeout+0x2a>
 800519e:	2302      	movs	r3, #2
 80051a0:	e01c      	b.n	80051dc <HAL_UART_EnableReceiverTimeout+0x64>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2224      	movs	r2, #36	@ 0x24
 80051ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80051c0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e002      	b.n	80051dc <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
 80051d8:	e000      	b.n	80051dc <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40008000 	.word	0x40008000

080051ec <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a1a      	ldr	r2, [pc, #104]	@ (800527c <UART_InitCallbacksToDefault+0x74>)
 8005214:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a19      	ldr	r2, [pc, #100]	@ (8005280 <UART_InitCallbacksToDefault+0x78>)
 800521c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a18      	ldr	r2, [pc, #96]	@ (8005284 <UART_InitCallbacksToDefault+0x7c>)
 8005224:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a17      	ldr	r2, [pc, #92]	@ (8005288 <UART_InitCallbacksToDefault+0x80>)
 800522c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a16      	ldr	r2, [pc, #88]	@ (800528c <UART_InitCallbacksToDefault+0x84>)
 8005234:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a15      	ldr	r2, [pc, #84]	@ (8005290 <UART_InitCallbacksToDefault+0x88>)
 800523c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a14      	ldr	r2, [pc, #80]	@ (8005294 <UART_InitCallbacksToDefault+0x8c>)
 8005244:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a13      	ldr	r2, [pc, #76]	@ (8005298 <UART_InitCallbacksToDefault+0x90>)
 800524c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a12      	ldr	r2, [pc, #72]	@ (800529c <UART_InitCallbacksToDefault+0x94>)
 8005254:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a11      	ldr	r2, [pc, #68]	@ (80052a0 <UART_InitCallbacksToDefault+0x98>)
 800525c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a10      	ldr	r2, [pc, #64]	@ (80052a4 <UART_InitCallbacksToDefault+0x9c>)
 8005264:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a0f      	ldr	r2, [pc, #60]	@ (80052a8 <UART_InitCallbacksToDefault+0xa0>)
 800526c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	0800509d 	.word	0x0800509d
 8005280:	08005089 	.word	0x08005089
 8005284:	080050c5 	.word	0x080050c5
 8005288:	080050b1 	.word	0x080050b1
 800528c:	080050d9 	.word	0x080050d9
 8005290:	080050ed 	.word	0x080050ed
 8005294:	08005101 	.word	0x08005101
 8005298:	08005115 	.word	0x08005115
 800529c:	080061f9 	.word	0x080061f9
 80052a0:	0800620d 	.word	0x0800620d
 80052a4:	08006221 	.word	0x08006221
 80052a8:	08005129 	.word	0x08005129

080052ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b0:	b08c      	sub	sp, #48	@ 0x30
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	4baa      	ldr	r3, [pc, #680]	@ (8005584 <UART_SetConfig+0x2d8>)
 80052dc:	4013      	ands	r3, r2
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052e4:	430b      	orrs	r3, r1
 80052e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a9f      	ldr	r2, [pc, #636]	@ (8005588 <UART_SetConfig+0x2dc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d004      	beq.n	8005318 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005314:	4313      	orrs	r3, r2
 8005316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005322:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800532c:	430b      	orrs	r3, r1
 800532e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005336:	f023 010f 	bic.w	r1, r3, #15
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a90      	ldr	r2, [pc, #576]	@ (800558c <UART_SetConfig+0x2e0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d125      	bne.n	800539c <UART_SetConfig+0xf0>
 8005350:	4b8f      	ldr	r3, [pc, #572]	@ (8005590 <UART_SetConfig+0x2e4>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b03      	cmp	r3, #3
 800535c:	d81a      	bhi.n	8005394 <UART_SetConfig+0xe8>
 800535e:	a201      	add	r2, pc, #4	@ (adr r2, 8005364 <UART_SetConfig+0xb8>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005375 	.word	0x08005375
 8005368:	08005385 	.word	0x08005385
 800536c:	0800537d 	.word	0x0800537d
 8005370:	0800538d 	.word	0x0800538d
 8005374:	2301      	movs	r3, #1
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537a:	e116      	b.n	80055aa <UART_SetConfig+0x2fe>
 800537c:	2302      	movs	r3, #2
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005382:	e112      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005384:	2304      	movs	r3, #4
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538a:	e10e      	b.n	80055aa <UART_SetConfig+0x2fe>
 800538c:	2308      	movs	r3, #8
 800538e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005392:	e10a      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005394:	2310      	movs	r3, #16
 8005396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800539a:	e106      	b.n	80055aa <UART_SetConfig+0x2fe>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a7c      	ldr	r2, [pc, #496]	@ (8005594 <UART_SetConfig+0x2e8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d138      	bne.n	8005418 <UART_SetConfig+0x16c>
 80053a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005590 <UART_SetConfig+0x2e4>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ac:	f003 030c 	and.w	r3, r3, #12
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	d82d      	bhi.n	8005410 <UART_SetConfig+0x164>
 80053b4:	a201      	add	r2, pc, #4	@ (adr r2, 80053bc <UART_SetConfig+0x110>)
 80053b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ba:	bf00      	nop
 80053bc:	080053f1 	.word	0x080053f1
 80053c0:	08005411 	.word	0x08005411
 80053c4:	08005411 	.word	0x08005411
 80053c8:	08005411 	.word	0x08005411
 80053cc:	08005401 	.word	0x08005401
 80053d0:	08005411 	.word	0x08005411
 80053d4:	08005411 	.word	0x08005411
 80053d8:	08005411 	.word	0x08005411
 80053dc:	080053f9 	.word	0x080053f9
 80053e0:	08005411 	.word	0x08005411
 80053e4:	08005411 	.word	0x08005411
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005409 	.word	0x08005409
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053f6:	e0d8      	b.n	80055aa <UART_SetConfig+0x2fe>
 80053f8:	2302      	movs	r3, #2
 80053fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fe:	e0d4      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005400:	2304      	movs	r3, #4
 8005402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005406:	e0d0      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005408:	2308      	movs	r3, #8
 800540a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800540e:	e0cc      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005410:	2310      	movs	r3, #16
 8005412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005416:	e0c8      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a5e      	ldr	r2, [pc, #376]	@ (8005598 <UART_SetConfig+0x2ec>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d125      	bne.n	800546e <UART_SetConfig+0x1c2>
 8005422:	4b5b      	ldr	r3, [pc, #364]	@ (8005590 <UART_SetConfig+0x2e4>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005428:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800542c:	2b30      	cmp	r3, #48	@ 0x30
 800542e:	d016      	beq.n	800545e <UART_SetConfig+0x1b2>
 8005430:	2b30      	cmp	r3, #48	@ 0x30
 8005432:	d818      	bhi.n	8005466 <UART_SetConfig+0x1ba>
 8005434:	2b20      	cmp	r3, #32
 8005436:	d00a      	beq.n	800544e <UART_SetConfig+0x1a2>
 8005438:	2b20      	cmp	r3, #32
 800543a:	d814      	bhi.n	8005466 <UART_SetConfig+0x1ba>
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <UART_SetConfig+0x19a>
 8005440:	2b10      	cmp	r3, #16
 8005442:	d008      	beq.n	8005456 <UART_SetConfig+0x1aa>
 8005444:	e00f      	b.n	8005466 <UART_SetConfig+0x1ba>
 8005446:	2300      	movs	r3, #0
 8005448:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544c:	e0ad      	b.n	80055aa <UART_SetConfig+0x2fe>
 800544e:	2302      	movs	r3, #2
 8005450:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005454:	e0a9      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005456:	2304      	movs	r3, #4
 8005458:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545c:	e0a5      	b.n	80055aa <UART_SetConfig+0x2fe>
 800545e:	2308      	movs	r3, #8
 8005460:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005464:	e0a1      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005466:	2310      	movs	r3, #16
 8005468:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546c:	e09d      	b.n	80055aa <UART_SetConfig+0x2fe>
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a4a      	ldr	r2, [pc, #296]	@ (800559c <UART_SetConfig+0x2f0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d125      	bne.n	80054c4 <UART_SetConfig+0x218>
 8005478:	4b45      	ldr	r3, [pc, #276]	@ (8005590 <UART_SetConfig+0x2e4>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005482:	2bc0      	cmp	r3, #192	@ 0xc0
 8005484:	d016      	beq.n	80054b4 <UART_SetConfig+0x208>
 8005486:	2bc0      	cmp	r3, #192	@ 0xc0
 8005488:	d818      	bhi.n	80054bc <UART_SetConfig+0x210>
 800548a:	2b80      	cmp	r3, #128	@ 0x80
 800548c:	d00a      	beq.n	80054a4 <UART_SetConfig+0x1f8>
 800548e:	2b80      	cmp	r3, #128	@ 0x80
 8005490:	d814      	bhi.n	80054bc <UART_SetConfig+0x210>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <UART_SetConfig+0x1f0>
 8005496:	2b40      	cmp	r3, #64	@ 0x40
 8005498:	d008      	beq.n	80054ac <UART_SetConfig+0x200>
 800549a:	e00f      	b.n	80054bc <UART_SetConfig+0x210>
 800549c:	2300      	movs	r3, #0
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054a2:	e082      	b.n	80055aa <UART_SetConfig+0x2fe>
 80054a4:	2302      	movs	r3, #2
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054aa:	e07e      	b.n	80055aa <UART_SetConfig+0x2fe>
 80054ac:	2304      	movs	r3, #4
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b2:	e07a      	b.n	80055aa <UART_SetConfig+0x2fe>
 80054b4:	2308      	movs	r3, #8
 80054b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ba:	e076      	b.n	80055aa <UART_SetConfig+0x2fe>
 80054bc:	2310      	movs	r3, #16
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c2:	e072      	b.n	80055aa <UART_SetConfig+0x2fe>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a35      	ldr	r2, [pc, #212]	@ (80055a0 <UART_SetConfig+0x2f4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d12a      	bne.n	8005524 <UART_SetConfig+0x278>
 80054ce:	4b30      	ldr	r3, [pc, #192]	@ (8005590 <UART_SetConfig+0x2e4>)
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054dc:	d01a      	beq.n	8005514 <UART_SetConfig+0x268>
 80054de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054e2:	d81b      	bhi.n	800551c <UART_SetConfig+0x270>
 80054e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e8:	d00c      	beq.n	8005504 <UART_SetConfig+0x258>
 80054ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ee:	d815      	bhi.n	800551c <UART_SetConfig+0x270>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <UART_SetConfig+0x250>
 80054f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054f8:	d008      	beq.n	800550c <UART_SetConfig+0x260>
 80054fa:	e00f      	b.n	800551c <UART_SetConfig+0x270>
 80054fc:	2300      	movs	r3, #0
 80054fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005502:	e052      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005504:	2302      	movs	r3, #2
 8005506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800550a:	e04e      	b.n	80055aa <UART_SetConfig+0x2fe>
 800550c:	2304      	movs	r3, #4
 800550e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005512:	e04a      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005514:	2308      	movs	r3, #8
 8005516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800551a:	e046      	b.n	80055aa <UART_SetConfig+0x2fe>
 800551c:	2310      	movs	r3, #16
 800551e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005522:	e042      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a17      	ldr	r2, [pc, #92]	@ (8005588 <UART_SetConfig+0x2dc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d13a      	bne.n	80055a4 <UART_SetConfig+0x2f8>
 800552e:	4b18      	ldr	r3, [pc, #96]	@ (8005590 <UART_SetConfig+0x2e4>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005534:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005538:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800553c:	d01a      	beq.n	8005574 <UART_SetConfig+0x2c8>
 800553e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005542:	d81b      	bhi.n	800557c <UART_SetConfig+0x2d0>
 8005544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005548:	d00c      	beq.n	8005564 <UART_SetConfig+0x2b8>
 800554a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800554e:	d815      	bhi.n	800557c <UART_SetConfig+0x2d0>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <UART_SetConfig+0x2b0>
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005558:	d008      	beq.n	800556c <UART_SetConfig+0x2c0>
 800555a:	e00f      	b.n	800557c <UART_SetConfig+0x2d0>
 800555c:	2300      	movs	r3, #0
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005562:	e022      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005564:	2302      	movs	r3, #2
 8005566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556a:	e01e      	b.n	80055aa <UART_SetConfig+0x2fe>
 800556c:	2304      	movs	r3, #4
 800556e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005572:	e01a      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005574:	2308      	movs	r3, #8
 8005576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800557a:	e016      	b.n	80055aa <UART_SetConfig+0x2fe>
 800557c:	2310      	movs	r3, #16
 800557e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005582:	e012      	b.n	80055aa <UART_SetConfig+0x2fe>
 8005584:	cfff69f3 	.word	0xcfff69f3
 8005588:	40008000 	.word	0x40008000
 800558c:	40013800 	.word	0x40013800
 8005590:	40021000 	.word	0x40021000
 8005594:	40004400 	.word	0x40004400
 8005598:	40004800 	.word	0x40004800
 800559c:	40004c00 	.word	0x40004c00
 80055a0:	40005000 	.word	0x40005000
 80055a4:	2310      	movs	r3, #16
 80055a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4aae      	ldr	r2, [pc, #696]	@ (8005868 <UART_SetConfig+0x5bc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	f040 8097 	bne.w	80056e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d823      	bhi.n	8005606 <UART_SetConfig+0x35a>
 80055be:	a201      	add	r2, pc, #4	@ (adr r2, 80055c4 <UART_SetConfig+0x318>)
 80055c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c4:	080055e9 	.word	0x080055e9
 80055c8:	08005607 	.word	0x08005607
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	08005607 	.word	0x08005607
 80055d4:	080055f7 	.word	0x080055f7
 80055d8:	08005607 	.word	0x08005607
 80055dc:	08005607 	.word	0x08005607
 80055e0:	08005607 	.word	0x08005607
 80055e4:	080055ff 	.word	0x080055ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e8:	f7fd fc86 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 80055ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055ee:	e010      	b.n	8005612 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f0:	4b9e      	ldr	r3, [pc, #632]	@ (800586c <UART_SetConfig+0x5c0>)
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055f4:	e00d      	b.n	8005612 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f6:	f7fd fc11 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 80055fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055fc:	e009      	b.n	8005612 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005604:	e005      	b.n	8005612 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005610:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8130 	beq.w	800587a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561e:	4a94      	ldr	r2, [pc, #592]	@ (8005870 <UART_SetConfig+0x5c4>)
 8005620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005624:	461a      	mov	r2, r3
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	fbb3 f3f2 	udiv	r3, r3, r2
 800562c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	4413      	add	r3, r2
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	429a      	cmp	r2, r3
 800563c:	d305      	bcc.n	800564a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	429a      	cmp	r2, r3
 8005648:	d903      	bls.n	8005652 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005650:	e113      	b.n	800587a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	2200      	movs	r2, #0
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	60fa      	str	r2, [r7, #12]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	4a84      	ldr	r2, [pc, #528]	@ (8005870 <UART_SetConfig+0x5c4>)
 8005660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005664:	b29b      	uxth	r3, r3
 8005666:	2200      	movs	r2, #0
 8005668:	603b      	str	r3, [r7, #0]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005670:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005674:	f7fa ff1a 	bl	80004ac <__aeabi_uldivmod>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4610      	mov	r0, r2
 800567e:	4619      	mov	r1, r3
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	020b      	lsls	r3, r1, #8
 800568a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800568e:	0202      	lsls	r2, r0, #8
 8005690:	6979      	ldr	r1, [r7, #20]
 8005692:	6849      	ldr	r1, [r1, #4]
 8005694:	0849      	lsrs	r1, r1, #1
 8005696:	2000      	movs	r0, #0
 8005698:	460c      	mov	r4, r1
 800569a:	4605      	mov	r5, r0
 800569c:	eb12 0804 	adds.w	r8, r2, r4
 80056a0:	eb43 0905 	adc.w	r9, r3, r5
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	469a      	mov	sl, r3
 80056ac:	4693      	mov	fp, r2
 80056ae:	4652      	mov	r2, sl
 80056b0:	465b      	mov	r3, fp
 80056b2:	4640      	mov	r0, r8
 80056b4:	4649      	mov	r1, r9
 80056b6:	f7fa fef9 	bl	80004ac <__aeabi_uldivmod>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4613      	mov	r3, r2
 80056c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c8:	d308      	bcc.n	80056dc <UART_SetConfig+0x430>
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056d0:	d204      	bcs.n	80056dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6a3a      	ldr	r2, [r7, #32]
 80056d8:	60da      	str	r2, [r3, #12]
 80056da:	e0ce      	b.n	800587a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056e2:	e0ca      	b.n	800587a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ec:	d166      	bne.n	80057bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80056ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d827      	bhi.n	8005746 <UART_SetConfig+0x49a>
 80056f6:	a201      	add	r2, pc, #4	@ (adr r2, 80056fc <UART_SetConfig+0x450>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	08005721 	.word	0x08005721
 8005700:	08005729 	.word	0x08005729
 8005704:	08005731 	.word	0x08005731
 8005708:	08005747 	.word	0x08005747
 800570c:	08005737 	.word	0x08005737
 8005710:	08005747 	.word	0x08005747
 8005714:	08005747 	.word	0x08005747
 8005718:	08005747 	.word	0x08005747
 800571c:	0800573f 	.word	0x0800573f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005720:	f7fd fbea 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 8005724:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005726:	e014      	b.n	8005752 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005728:	f7fd fbfc 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 800572c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800572e:	e010      	b.n	8005752 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005730:	4b4e      	ldr	r3, [pc, #312]	@ (800586c <UART_SetConfig+0x5c0>)
 8005732:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005734:	e00d      	b.n	8005752 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005736:	f7fd fb71 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 800573a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800573c:	e009      	b.n	8005752 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800573e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005744:	e005      	b.n	8005752 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005750:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8090 	beq.w	800587a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	4a44      	ldr	r2, [pc, #272]	@ (8005870 <UART_SetConfig+0x5c4>)
 8005760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005764:	461a      	mov	r2, r3
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	fbb3 f3f2 	udiv	r3, r3, r2
 800576c:	005a      	lsls	r2, r3, #1
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	441a      	add	r2, r3
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	2b0f      	cmp	r3, #15
 8005784:	d916      	bls.n	80057b4 <UART_SetConfig+0x508>
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800578c:	d212      	bcs.n	80057b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f023 030f 	bic.w	r3, r3, #15
 8005796:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	b29b      	uxth	r3, r3
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	8bfb      	ldrh	r3, [r7, #30]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	8bfa      	ldrh	r2, [r7, #30]
 80057b0:	60da      	str	r2, [r3, #12]
 80057b2:	e062      	b.n	800587a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057ba:	e05e      	b.n	800587a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d828      	bhi.n	8005816 <UART_SetConfig+0x56a>
 80057c4:	a201      	add	r2, pc, #4	@ (adr r2, 80057cc <UART_SetConfig+0x520>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	080057f1 	.word	0x080057f1
 80057d0:	080057f9 	.word	0x080057f9
 80057d4:	08005801 	.word	0x08005801
 80057d8:	08005817 	.word	0x08005817
 80057dc:	08005807 	.word	0x08005807
 80057e0:	08005817 	.word	0x08005817
 80057e4:	08005817 	.word	0x08005817
 80057e8:	08005817 	.word	0x08005817
 80057ec:	0800580f 	.word	0x0800580f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f0:	f7fd fb82 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 80057f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057f6:	e014      	b.n	8005822 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f8:	f7fd fb94 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 80057fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057fe:	e010      	b.n	8005822 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005800:	4b1a      	ldr	r3, [pc, #104]	@ (800586c <UART_SetConfig+0x5c0>)
 8005802:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005804:	e00d      	b.n	8005822 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005806:	f7fd fb09 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 800580a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800580c:	e009      	b.n	8005822 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005814:	e005      	b.n	8005822 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005820:	bf00      	nop
    }

    if (pclk != 0U)
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d028      	beq.n	800587a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582c:	4a10      	ldr	r2, [pc, #64]	@ (8005870 <UART_SetConfig+0x5c4>)
 800582e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005832:	461a      	mov	r2, r3
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	fbb3 f2f2 	udiv	r2, r3, r2
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	441a      	add	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	fbb2 f3f3 	udiv	r3, r2, r3
 800584a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	2b0f      	cmp	r3, #15
 8005850:	d910      	bls.n	8005874 <UART_SetConfig+0x5c8>
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005858:	d20c      	bcs.n	8005874 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	b29a      	uxth	r2, r3
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60da      	str	r2, [r3, #12]
 8005864:	e009      	b.n	800587a <UART_SetConfig+0x5ce>
 8005866:	bf00      	nop
 8005868:	40008000 	.word	0x40008000
 800586c:	00f42400 	.word	0x00f42400
 8005870:	080064e0 	.word	0x080064e0
      }
      else
      {
        ret = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2201      	movs	r2, #1
 800587e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2201      	movs	r2, #1
 8005886:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2200      	movs	r2, #0
 800588e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2200      	movs	r2, #0
 8005894:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005896:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800589a:	4618      	mov	r0, r3
 800589c:	3730      	adds	r7, #48	@ 0x30
 800589e:	46bd      	mov	sp, r7
 80058a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080058a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01a      	beq.n	80059ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059a2:	d10a      	bne.n	80059ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	605a      	str	r2, [r3, #4]
  }
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b098      	sub	sp, #96	@ 0x60
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059f8:	f7fb fee0 	bl	80017bc <HAL_GetTick>
 80059fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d12f      	bne.n	8005a6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a14:	2200      	movs	r2, #0
 8005a16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f88e 	bl	8005b3c <UART_WaitOnFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d022      	beq.n	8005a6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e6      	bne.n	8005a26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e063      	b.n	8005b34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d149      	bne.n	8005b0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a82:	2200      	movs	r2, #0
 8005a84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f857 	bl	8005b3c <UART_WaitOnFlagUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d03c      	beq.n	8005b0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ab4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e6      	bne.n	8005a94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3308      	adds	r3, #8
 8005acc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f023 0301 	bic.w	r3, r3, #1
 8005adc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ae6:	61fa      	str	r2, [r7, #28]
 8005ae8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	69b9      	ldr	r1, [r7, #24]
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	617b      	str	r3, [r7, #20]
   return(result);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e5      	bne.n	8005ac6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e012      	b.n	8005b34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3758      	adds	r7, #88	@ 0x58
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b4c:	e04f      	b.n	8005bee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b54:	d04b      	beq.n	8005bee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b56:	f7fb fe31 	bl	80017bc <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d302      	bcc.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e04e      	b.n	8005c0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d037      	beq.n	8005bee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b80      	cmp	r3, #128	@ 0x80
 8005b82:	d034      	beq.n	8005bee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b40      	cmp	r3, #64	@ 0x40
 8005b88:	d031      	beq.n	8005bee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d110      	bne.n	8005bba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f920 	bl	8005de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2208      	movs	r2, #8
 8005baa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e029      	b.n	8005c0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bc8:	d111      	bne.n	8005bee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f906 	bl	8005de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e00f      	b.n	8005c0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	bf0c      	ite	eq
 8005bfe:	2301      	moveq	r3, #1
 8005c00:	2300      	movne	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d0a0      	beq.n	8005b4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b096      	sub	sp, #88	@ 0x58
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	88fa      	ldrh	r2, [r7, #6]
 8005c30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2222      	movs	r2, #34	@ 0x22
 8005c40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d02d      	beq.n	8005caa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c54:	4a40      	ldr	r2, [pc, #256]	@ (8005d58 <UART_Start_Receive_DMA+0x140>)
 8005c56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c5e:	4a3f      	ldr	r2, [pc, #252]	@ (8005d5c <UART_Start_Receive_DMA+0x144>)
 8005c60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c68:	4a3d      	ldr	r2, [pc, #244]	@ (8005d60 <UART_Start_Receive_DMA+0x148>)
 8005c6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c72:	2200      	movs	r2, #0
 8005c74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3324      	adds	r3, #36	@ 0x24
 8005c82:	4619      	mov	r1, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c88:	461a      	mov	r2, r3
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	f7fb ff7c 	bl	8001b88 <HAL_DMA_Start_IT>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2210      	movs	r2, #16
 8005c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e051      	b.n	8005d4e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d018      	beq.n	8005ce4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cd2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e6      	bne.n	8005cb2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3308      	adds	r3, #8
 8005cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3308      	adds	r3, #8
 8005d02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d04:	637a      	str	r2, [r7, #52]	@ 0x34
 8005d06:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e5      	bne.n	8005ce4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	613b      	str	r3, [r7, #16]
   return(result);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d38:	623a      	str	r2, [r7, #32]
 8005d3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	69f9      	ldr	r1, [r7, #28]
 8005d3e:	6a3a      	ldr	r2, [r7, #32]
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e5      	bne.n	8005d18 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3758      	adds	r7, #88	@ 0x58
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	08005f71 	.word	0x08005f71
 8005d5c:	080060a5 	.word	0x080060a5
 8005d60:	080060eb 	.word	0x080060eb

08005d64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b08f      	sub	sp, #60	@ 0x3c
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d8c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e6      	bne.n	8005d6c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dbe:	61ba      	str	r2, [r7, #24]
 8005dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	6979      	ldr	r1, [r7, #20]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	613b      	str	r3, [r7, #16]
   return(result);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e5      	bne.n	8005d9e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005dda:	bf00      	nop
 8005ddc:	373c      	adds	r7, #60	@ 0x3c
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b095      	sub	sp, #84	@ 0x54
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e6      	bne.n	8005dee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3308      	adds	r3, #8
 8005e42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e3      	bne.n	8005e20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d118      	bne.n	8005e92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f023 0310 	bic.w	r3, r3, #16
 8005e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6979      	ldr	r1, [r7, #20]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e6      	bne.n	8005e60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ea6:	bf00      	nop
 8005ea8:	3754      	adds	r7, #84	@ 0x54
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b090      	sub	sp, #64	@ 0x40
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d137      	bne.n	8005f3e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3308      	adds	r3, #8
 8005edc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ef6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e5      	bne.n	8005ed6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f28:	61fb      	str	r3, [r7, #28]
 8005f2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	69b9      	ldr	r1, [r7, #24]
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	617b      	str	r3, [r7, #20]
   return(result);
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e6      	bne.n	8005f0a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f3c:	e004      	b.n	8005f48 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8005f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f44:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005f46:	4798      	blx	r3
}
 8005f48:	bf00      	nop
 8005f4a:	3740      	adds	r7, #64	@ 0x40
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b09c      	sub	sp, #112	@ 0x70
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d171      	bne.n	8006070 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e6      	bne.n	8005f94 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005fe6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005fe8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e5      	bne.n	8005fc6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3308      	adds	r3, #8
 8006000:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	623b      	str	r3, [r7, #32]
   return(result);
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006010:	663b      	str	r3, [r7, #96]	@ 0x60
 8006012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3308      	adds	r3, #8
 8006018:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800601a:	633a      	str	r2, [r7, #48]	@ 0x30
 800601c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e5      	bne.n	8005ffa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800602e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800603a:	2b01      	cmp	r3, #1
 800603c:	d118      	bne.n	8006070 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	60fb      	str	r3, [r7, #12]
   return(result);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0310 	bic.w	r3, r3, #16
 8006052:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	617b      	str	r3, [r7, #20]
   return(result);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e6      	bne.n	800603e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006072:	2200      	movs	r2, #0
 8006074:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800607a:	2b01      	cmp	r3, #1
 800607c:	d109      	bne.n	8006092 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800607e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006080:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006084:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006086:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800608a:	4611      	mov	r1, r2
 800608c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800608e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006090:	e004      	b.n	800609c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8006092:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006094:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006098:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800609a:	4798      	blx	r3
}
 800609c:	bf00      	nop
 800609e:	3770      	adds	r7, #112	@ 0x70
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d10b      	bne.n	80060d8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80060cc:	0852      	lsrs	r2, r2, #1
 80060ce:	b292      	uxth	r2, r2
 80060d0:	4611      	mov	r1, r2
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060d6:	e004      	b.n	80060e2 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	4798      	blx	r3
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b086      	sub	sp, #24
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006106:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006112:	2b80      	cmp	r3, #128	@ 0x80
 8006114:	d109      	bne.n	800612a <UART_DMAError+0x40>
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2b21      	cmp	r3, #33	@ 0x21
 800611a:	d106      	bne.n	800612a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2200      	movs	r2, #0
 8006120:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006124:	6978      	ldr	r0, [r7, #20]
 8006126:	f7ff fe1d 	bl	8005d64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006134:	2b40      	cmp	r3, #64	@ 0x40
 8006136:	d109      	bne.n	800614c <UART_DMAError+0x62>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b22      	cmp	r3, #34	@ 0x22
 800613c:	d106      	bne.n	800614c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2200      	movs	r2, #0
 8006142:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006146:	6978      	ldr	r0, [r7, #20]
 8006148:	f7ff fe4d 	bl	8005de6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006152:	f043 0210 	orr.w	r2, r3, #16
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006162:	6978      	ldr	r0, [r7, #20]
 8006164:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006166:	bf00      	nop
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006196:	bf00      	nop
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b088      	sub	sp, #32
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	61bb      	str	r3, [r7, #24]
 80061c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6979      	ldr	r1, [r7, #20]
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	613b      	str	r3, [r7, #16]
   return(result);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e6      	bne.n	80061a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f0:	bf00      	nop
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_UARTEx_DisableFifoMode+0x16>
 8006246:	2302      	movs	r3, #2
 8006248:	e027      	b.n	800629a <HAL_UARTEx_DisableFifoMode+0x66>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2224      	movs	r2, #36	@ 0x24
 8006256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0201 	bic.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006278:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e02d      	b.n	800631a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2224      	movs	r2, #36	@ 0x24
 80062ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0201 	bic.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f850 	bl	80063a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006332:	2b01      	cmp	r3, #1
 8006334:	d101      	bne.n	800633a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006336:	2302      	movs	r3, #2
 8006338:	e02d      	b.n	8006396 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2224      	movs	r2, #36	@ 0x24
 8006346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0201 	bic.w	r2, r2, #1
 8006360:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f812 	bl	80063a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d108      	bne.n	80063c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063c0:	e031      	b.n	8006426 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063c2:	2308      	movs	r3, #8
 80063c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063c6:	2308      	movs	r3, #8
 80063c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	0e5b      	lsrs	r3, r3, #25
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	0f5b      	lsrs	r3, r3, #29
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ea:	7bbb      	ldrb	r3, [r7, #14]
 80063ec:	7b3a      	ldrb	r2, [r7, #12]
 80063ee:	4911      	ldr	r1, [pc, #68]	@ (8006434 <UARTEx_SetNbDataToProcess+0x94>)
 80063f0:	5c8a      	ldrb	r2, [r1, r2]
 80063f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063f6:	7b3a      	ldrb	r2, [r7, #12]
 80063f8:	490f      	ldr	r1, [pc, #60]	@ (8006438 <UARTEx_SetNbDataToProcess+0x98>)
 80063fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006400:	b29a      	uxth	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	7b7a      	ldrb	r2, [r7, #13]
 800640c:	4909      	ldr	r1, [pc, #36]	@ (8006434 <UARTEx_SetNbDataToProcess+0x94>)
 800640e:	5c8a      	ldrb	r2, [r1, r2]
 8006410:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006414:	7b7a      	ldrb	r2, [r7, #13]
 8006416:	4908      	ldr	r1, [pc, #32]	@ (8006438 <UARTEx_SetNbDataToProcess+0x98>)
 8006418:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800641a:	fb93 f3f2 	sdiv	r3, r3, r2
 800641e:	b29a      	uxth	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	080064f8 	.word	0x080064f8
 8006438:	08006500 	.word	0x08006500

0800643c <memset>:
 800643c:	4402      	add	r2, r0
 800643e:	4603      	mov	r3, r0
 8006440:	4293      	cmp	r3, r2
 8006442:	d100      	bne.n	8006446 <memset+0xa>
 8006444:	4770      	bx	lr
 8006446:	f803 1b01 	strb.w	r1, [r3], #1
 800644a:	e7f9      	b.n	8006440 <memset+0x4>

0800644c <__libc_init_array>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	4d0d      	ldr	r5, [pc, #52]	@ (8006484 <__libc_init_array+0x38>)
 8006450:	4c0d      	ldr	r4, [pc, #52]	@ (8006488 <__libc_init_array+0x3c>)
 8006452:	1b64      	subs	r4, r4, r5
 8006454:	10a4      	asrs	r4, r4, #2
 8006456:	2600      	movs	r6, #0
 8006458:	42a6      	cmp	r6, r4
 800645a:	d109      	bne.n	8006470 <__libc_init_array+0x24>
 800645c:	4d0b      	ldr	r5, [pc, #44]	@ (800648c <__libc_init_array+0x40>)
 800645e:	4c0c      	ldr	r4, [pc, #48]	@ (8006490 <__libc_init_array+0x44>)
 8006460:	f000 f826 	bl	80064b0 <_init>
 8006464:	1b64      	subs	r4, r4, r5
 8006466:	10a4      	asrs	r4, r4, #2
 8006468:	2600      	movs	r6, #0
 800646a:	42a6      	cmp	r6, r4
 800646c:	d105      	bne.n	800647a <__libc_init_array+0x2e>
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	f855 3b04 	ldr.w	r3, [r5], #4
 8006474:	4798      	blx	r3
 8006476:	3601      	adds	r6, #1
 8006478:	e7ee      	b.n	8006458 <__libc_init_array+0xc>
 800647a:	f855 3b04 	ldr.w	r3, [r5], #4
 800647e:	4798      	blx	r3
 8006480:	3601      	adds	r6, #1
 8006482:	e7f2      	b.n	800646a <__libc_init_array+0x1e>
 8006484:	08006510 	.word	0x08006510
 8006488:	08006510 	.word	0x08006510
 800648c:	08006510 	.word	0x08006510
 8006490:	08006514 	.word	0x08006514

08006494 <memcpy>:
 8006494:	440a      	add	r2, r1
 8006496:	4291      	cmp	r1, r2
 8006498:	f100 33ff 	add.w	r3, r0, #4294967295
 800649c:	d100      	bne.n	80064a0 <memcpy+0xc>
 800649e:	4770      	bx	lr
 80064a0:	b510      	push	{r4, lr}
 80064a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064aa:	4291      	cmp	r1, r2
 80064ac:	d1f9      	bne.n	80064a2 <memcpy+0xe>
 80064ae:	bd10      	pop	{r4, pc}

080064b0 <_init>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr

080064bc <_fini>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr
