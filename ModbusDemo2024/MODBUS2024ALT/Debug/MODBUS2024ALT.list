
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf90  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c168  0800c168  0000d168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1a8  0800c1a8  0000e288  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1a8  0800c1a8  0000d1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1b0  0800c1b0  0000e288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1b0  0800c1b0  0000d1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1b4  0800c1b4  0000d1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800c1b8  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011dc  20000288  0800c440  0000e288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001464  0800c440  0000e464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018317  00000000  00000000  0000e2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003136  00000000  00000000  000265cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00029708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea7  00000000  00000000  0002a9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282df  00000000  00000000  0002b887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019734  00000000  00000000  00053b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff958  00000000  00000000  0006d29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016cbf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005304  00000000  00000000  0016cc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00171f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000288 	.word	0x20000288
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c150 	.word	0x0800c150

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000028c 	.word	0x2000028c
 8000214:	0800c150 	.word	0x0800c150

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b98a 	b.w	8001118 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f826 	bl	8000e5c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_f2ulz>:
 8000e1c:	b5d0      	push	{r4, r6, r7, lr}
 8000e1e:	f7ff fb5f 	bl	80004e0 <__aeabi_f2d>
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <__aeabi_f2ulz+0x38>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	4606      	mov	r6, r0
 8000e28:	460f      	mov	r7, r1
 8000e2a:	f7ff fbb1 	bl	8000590 <__aeabi_dmul>
 8000e2e:	f7ff fe5f 	bl	8000af0 <__aeabi_d2uiz>
 8000e32:	4604      	mov	r4, r0
 8000e34:	f7ff fb32 	bl	800049c <__aeabi_ui2d>
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <__aeabi_f2ulz+0x3c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f7ff fba8 	bl	8000590 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4630      	mov	r0, r6
 8000e46:	4639      	mov	r1, r7
 8000e48:	f7ff f9ea 	bl	8000220 <__aeabi_dsub>
 8000e4c:	f7ff fe50 	bl	8000af0 <__aeabi_d2uiz>
 8000e50:	4621      	mov	r1, r4
 8000e52:	bdd0      	pop	{r4, r6, r7, pc}
 8000e54:	3df00000 	.word	0x3df00000
 8000e58:	41f00000 	.word	0x41f00000

08000e5c <__udivmoddi4>:
 8000e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e60:	9d08      	ldr	r5, [sp, #32]
 8000e62:	460c      	mov	r4, r1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d14e      	bne.n	8000f06 <__udivmoddi4+0xaa>
 8000e68:	4694      	mov	ip, r2
 8000e6a:	458c      	cmp	ip, r1
 8000e6c:	4686      	mov	lr, r0
 8000e6e:	fab2 f282 	clz	r2, r2
 8000e72:	d962      	bls.n	8000f3a <__udivmoddi4+0xde>
 8000e74:	b14a      	cbz	r2, 8000e8a <__udivmoddi4+0x2e>
 8000e76:	f1c2 0320 	rsb	r3, r2, #32
 8000e7a:	4091      	lsls	r1, r2
 8000e7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e84:	4319      	orrs	r1, r3
 8000e86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f f68c 	uxth.w	r6, ip
 8000e92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea2:	fb04 f106 	mul.w	r1, r4, r6
 8000ea6:	4299      	cmp	r1, r3
 8000ea8:	d90a      	bls.n	8000ec0 <__udivmoddi4+0x64>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000eb2:	f080 8112 	bcs.w	80010da <__udivmoddi4+0x27e>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 810f 	bls.w	80010da <__udivmoddi4+0x27e>
 8000ebc:	3c02      	subs	r4, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	1a59      	subs	r1, r3, r1
 8000ec2:	fa1f f38e 	uxth.w	r3, lr
 8000ec6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eca:	fb07 1110 	mls	r1, r7, r0, r1
 8000ece:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed2:	fb00 f606 	mul.w	r6, r0, r6
 8000ed6:	429e      	cmp	r6, r3
 8000ed8:	d90a      	bls.n	8000ef0 <__udivmoddi4+0x94>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee2:	f080 80fc 	bcs.w	80010de <__udivmoddi4+0x282>
 8000ee6:	429e      	cmp	r6, r3
 8000ee8:	f240 80f9 	bls.w	80010de <__udivmoddi4+0x282>
 8000eec:	4463      	add	r3, ip
 8000eee:	3802      	subs	r0, #2
 8000ef0:	1b9b      	subs	r3, r3, r6
 8000ef2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	b11d      	cbz	r5, 8000f02 <__udivmoddi4+0xa6>
 8000efa:	40d3      	lsrs	r3, r2
 8000efc:	2200      	movs	r2, #0
 8000efe:	e9c5 3200 	strd	r3, r2, [r5]
 8000f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d905      	bls.n	8000f16 <__udivmoddi4+0xba>
 8000f0a:	b10d      	cbz	r5, 8000f10 <__udivmoddi4+0xb4>
 8000f0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000f10:	2100      	movs	r1, #0
 8000f12:	4608      	mov	r0, r1
 8000f14:	e7f5      	b.n	8000f02 <__udivmoddi4+0xa6>
 8000f16:	fab3 f183 	clz	r1, r3
 8000f1a:	2900      	cmp	r1, #0
 8000f1c:	d146      	bne.n	8000fac <__udivmoddi4+0x150>
 8000f1e:	42a3      	cmp	r3, r4
 8000f20:	d302      	bcc.n	8000f28 <__udivmoddi4+0xcc>
 8000f22:	4290      	cmp	r0, r2
 8000f24:	f0c0 80f0 	bcc.w	8001108 <__udivmoddi4+0x2ac>
 8000f28:	1a86      	subs	r6, r0, r2
 8000f2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000f2e:	2001      	movs	r0, #1
 8000f30:	2d00      	cmp	r5, #0
 8000f32:	d0e6      	beq.n	8000f02 <__udivmoddi4+0xa6>
 8000f34:	e9c5 6300 	strd	r6, r3, [r5]
 8000f38:	e7e3      	b.n	8000f02 <__udivmoddi4+0xa6>
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	f040 8090 	bne.w	8001060 <__udivmoddi4+0x204>
 8000f40:	eba1 040c 	sub.w	r4, r1, ip
 8000f44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f56:	fb08 4416 	mls	r4, r8, r6, r4
 8000f5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f5e:	fb07 f006 	mul.w	r0, r7, r6
 8000f62:	4298      	cmp	r0, r3
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x11c>
 8000f66:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f6e:	d202      	bcs.n	8000f76 <__udivmoddi4+0x11a>
 8000f70:	4298      	cmp	r0, r3
 8000f72:	f200 80cd 	bhi.w	8001110 <__udivmoddi4+0x2b4>
 8000f76:	4626      	mov	r6, r4
 8000f78:	1a1c      	subs	r4, r3, r0
 8000f7a:	fa1f f38e 	uxth.w	r3, lr
 8000f7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f82:	fb08 4410 	mls	r4, r8, r0, r4
 8000f86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f8a:	fb00 f707 	mul.w	r7, r0, r7
 8000f8e:	429f      	cmp	r7, r3
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x148>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9a:	d202      	bcs.n	8000fa2 <__udivmoddi4+0x146>
 8000f9c:	429f      	cmp	r7, r3
 8000f9e:	f200 80b0 	bhi.w	8001102 <__udivmoddi4+0x2a6>
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	1bdb      	subs	r3, r3, r7
 8000fa6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000faa:	e7a5      	b.n	8000ef8 <__udivmoddi4+0x9c>
 8000fac:	f1c1 0620 	rsb	r6, r1, #32
 8000fb0:	408b      	lsls	r3, r1
 8000fb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000fb6:	431f      	orrs	r7, r3
 8000fb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000fc0:	ea43 030c 	orr.w	r3, r3, ip
 8000fc4:	40f4      	lsrs	r4, r6
 8000fc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000fca:	0c38      	lsrs	r0, r7, #16
 8000fcc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000fd4:	fa1f fc87 	uxth.w	ip, r7
 8000fd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000fdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fe0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fe4:	45a1      	cmp	r9, r4
 8000fe6:	fa02 f201 	lsl.w	r2, r2, r1
 8000fea:	d90a      	bls.n	8001002 <__udivmoddi4+0x1a6>
 8000fec:	193c      	adds	r4, r7, r4
 8000fee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ff2:	f080 8084 	bcs.w	80010fe <__udivmoddi4+0x2a2>
 8000ff6:	45a1      	cmp	r9, r4
 8000ff8:	f240 8081 	bls.w	80010fe <__udivmoddi4+0x2a2>
 8000ffc:	f1ae 0e02 	sub.w	lr, lr, #2
 8001000:	443c      	add	r4, r7
 8001002:	eba4 0409 	sub.w	r4, r4, r9
 8001006:	fa1f f983 	uxth.w	r9, r3
 800100a:	fbb4 f3f0 	udiv	r3, r4, r0
 800100e:	fb00 4413 	mls	r4, r0, r3, r4
 8001012:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001016:	fb03 fc0c 	mul.w	ip, r3, ip
 800101a:	45a4      	cmp	ip, r4
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x1d2>
 800101e:	193c      	adds	r4, r7, r4
 8001020:	f103 30ff 	add.w	r0, r3, #4294967295
 8001024:	d267      	bcs.n	80010f6 <__udivmoddi4+0x29a>
 8001026:	45a4      	cmp	ip, r4
 8001028:	d965      	bls.n	80010f6 <__udivmoddi4+0x29a>
 800102a:	3b02      	subs	r3, #2
 800102c:	443c      	add	r4, r7
 800102e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001032:	fba0 9302 	umull	r9, r3, r0, r2
 8001036:	eba4 040c 	sub.w	r4, r4, ip
 800103a:	429c      	cmp	r4, r3
 800103c:	46ce      	mov	lr, r9
 800103e:	469c      	mov	ip, r3
 8001040:	d351      	bcc.n	80010e6 <__udivmoddi4+0x28a>
 8001042:	d04e      	beq.n	80010e2 <__udivmoddi4+0x286>
 8001044:	b155      	cbz	r5, 800105c <__udivmoddi4+0x200>
 8001046:	ebb8 030e 	subs.w	r3, r8, lr
 800104a:	eb64 040c 	sbc.w	r4, r4, ip
 800104e:	fa04 f606 	lsl.w	r6, r4, r6
 8001052:	40cb      	lsrs	r3, r1
 8001054:	431e      	orrs	r6, r3
 8001056:	40cc      	lsrs	r4, r1
 8001058:	e9c5 6400 	strd	r6, r4, [r5]
 800105c:	2100      	movs	r1, #0
 800105e:	e750      	b.n	8000f02 <__udivmoddi4+0xa6>
 8001060:	f1c2 0320 	rsb	r3, r2, #32
 8001064:	fa20 f103 	lsr.w	r1, r0, r3
 8001068:	fa0c fc02 	lsl.w	ip, ip, r2
 800106c:	fa24 f303 	lsr.w	r3, r4, r3
 8001070:	4094      	lsls	r4, r2
 8001072:	430c      	orrs	r4, r1
 8001074:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001078:	fa00 fe02 	lsl.w	lr, r0, r2
 800107c:	fa1f f78c 	uxth.w	r7, ip
 8001080:	fbb3 f0f8 	udiv	r0, r3, r8
 8001084:	fb08 3110 	mls	r1, r8, r0, r3
 8001088:	0c23      	lsrs	r3, r4, #16
 800108a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800108e:	fb00 f107 	mul.w	r1, r0, r7
 8001092:	4299      	cmp	r1, r3
 8001094:	d908      	bls.n	80010a8 <__udivmoddi4+0x24c>
 8001096:	eb1c 0303 	adds.w	r3, ip, r3
 800109a:	f100 36ff 	add.w	r6, r0, #4294967295
 800109e:	d22c      	bcs.n	80010fa <__udivmoddi4+0x29e>
 80010a0:	4299      	cmp	r1, r3
 80010a2:	d92a      	bls.n	80010fa <__udivmoddi4+0x29e>
 80010a4:	3802      	subs	r0, #2
 80010a6:	4463      	add	r3, ip
 80010a8:	1a5b      	subs	r3, r3, r1
 80010aa:	b2a4      	uxth	r4, r4
 80010ac:	fbb3 f1f8 	udiv	r1, r3, r8
 80010b0:	fb08 3311 	mls	r3, r8, r1, r3
 80010b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010b8:	fb01 f307 	mul.w	r3, r1, r7
 80010bc:	42a3      	cmp	r3, r4
 80010be:	d908      	bls.n	80010d2 <__udivmoddi4+0x276>
 80010c0:	eb1c 0404 	adds.w	r4, ip, r4
 80010c4:	f101 36ff 	add.w	r6, r1, #4294967295
 80010c8:	d213      	bcs.n	80010f2 <__udivmoddi4+0x296>
 80010ca:	42a3      	cmp	r3, r4
 80010cc:	d911      	bls.n	80010f2 <__udivmoddi4+0x296>
 80010ce:	3902      	subs	r1, #2
 80010d0:	4464      	add	r4, ip
 80010d2:	1ae4      	subs	r4, r4, r3
 80010d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010d8:	e739      	b.n	8000f4e <__udivmoddi4+0xf2>
 80010da:	4604      	mov	r4, r0
 80010dc:	e6f0      	b.n	8000ec0 <__udivmoddi4+0x64>
 80010de:	4608      	mov	r0, r1
 80010e0:	e706      	b.n	8000ef0 <__udivmoddi4+0x94>
 80010e2:	45c8      	cmp	r8, r9
 80010e4:	d2ae      	bcs.n	8001044 <__udivmoddi4+0x1e8>
 80010e6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ea:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ee:	3801      	subs	r0, #1
 80010f0:	e7a8      	b.n	8001044 <__udivmoddi4+0x1e8>
 80010f2:	4631      	mov	r1, r6
 80010f4:	e7ed      	b.n	80010d2 <__udivmoddi4+0x276>
 80010f6:	4603      	mov	r3, r0
 80010f8:	e799      	b.n	800102e <__udivmoddi4+0x1d2>
 80010fa:	4630      	mov	r0, r6
 80010fc:	e7d4      	b.n	80010a8 <__udivmoddi4+0x24c>
 80010fe:	46d6      	mov	lr, sl
 8001100:	e77f      	b.n	8001002 <__udivmoddi4+0x1a6>
 8001102:	4463      	add	r3, ip
 8001104:	3802      	subs	r0, #2
 8001106:	e74d      	b.n	8000fa4 <__udivmoddi4+0x148>
 8001108:	4606      	mov	r6, r0
 800110a:	4623      	mov	r3, r4
 800110c:	4608      	mov	r0, r1
 800110e:	e70f      	b.n	8000f30 <__udivmoddi4+0xd4>
 8001110:	3e02      	subs	r6, #2
 8001112:	4463      	add	r3, ip
 8001114:	e730      	b.n	8000f78 <__udivmoddi4+0x11c>
 8001116:	bf00      	nop

08001118 <__aeabi_idiv0>:
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001120:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <modbus_1t5_Timeout+0x3c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2201      	movs	r2, #1
 8001126:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001128:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <modbus_1t5_Timeout+0x3c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <modbus_1t5_Timeout+0x3c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <modbus_1t5_Timeout+0x3c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	200002a4 	.word	0x200002a4

0800115c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <modbus_3t5_Timeout+0x1c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2201      	movs	r2, #1
 800116a:	755a      	strb	r2, [r3, #21]

}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	200002a4 	.word	0x200002a4

0800117c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f009 fcc3 	bl	800ab10 <HAL_UART_GetError>
 800118a:	4603      	mov	r3, r0
 800118c:	2b20      	cmp	r3, #32
 800118e:	d101      	bne.n	8001194 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001190:	f7ff ffc4 	bl	800111c <modbus_1t5_Timeout>

	}
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80011a6:	4a25      	ldr	r2, [pc, #148]	@ (800123c <Modbus_init+0xa0>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <Modbus_init+0xa0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <Modbus_init+0xa4>)
 80011ba:	210e      	movs	r1, #14
 80011bc:	4618      	mov	r0, r3
 80011be:	f007 fd75 	bl	8008cac <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2110      	movs	r1, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f009 fc4b 	bl	800aa64 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f009 fc62 	bl	800aa9c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <Modbus_init+0xa8>)
 80011de:	2104      	movs	r1, #4
 80011e0:	4618      	mov	r0, r3
 80011e2:	f008 ff29 	bl	800a038 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <Modbus_init+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011ec:	4b13      	ldr	r3, [pc, #76]	@ (800123c <Modbus_init+0xa0>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <Modbus_init+0xa0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011f8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011fc:	4413      	add	r3, r2
 80011fe:	3302      	adds	r3, #2
 8001200:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001204:	4619      	mov	r1, r3
 8001206:	f009 f851 	bl	800a2ac <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800120a:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <Modbus_init+0xa0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10c      	bne.n	8001234 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <Modbus_init+0xa0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	4618      	mov	r0, r3
 8001222:	f006 fabb 	bl	800779c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001226:	4b05      	ldr	r3, [pc, #20]	@ (800123c <Modbus_init+0xa0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f006 fe86 	bl	8007f40 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200002a4 	.word	0x200002a4
 8001240:	0800115d 	.word	0x0800115d
 8001244:	0800117d 	.word	0x0800117d

08001248 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001254:	23ff      	movs	r3, #255	@ 0xff
 8001256:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001258:	23ff      	movs	r3, #255	@ 0xff
 800125a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800125c:	e013      	b.n	8001286 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	4053      	eors	r3, r2
 800126a:	b2db      	uxtb	r3, r3
 800126c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800126e:	4a0f      	ldr	r2, [pc, #60]	@ (80012ac <CRC16+0x64>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4413      	add	r3, r2
 8001274:	781a      	ldrb	r2, [r3, #0]
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	4053      	eors	r3, r2
 800127a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800127c:	4a0c      	ldr	r2, [pc, #48]	@ (80012b0 <CRC16+0x68>)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001286:	883b      	ldrh	r3, [r7, #0]
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	803a      	strh	r2, [r7, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e6      	bne.n	800125e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21a      	sxth	r2, r3
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21b      	sxth	r3, r3
 800129e:	b29b      	uxth	r3, r3
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20000100 	.word	0x20000100
 80012b0:	20000000 	.word	0x20000000

080012b4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80012ba:	4b7e      	ldr	r3, [pc, #504]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	7ddb      	ldrb	r3, [r3, #23]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d80a      	bhi.n	80012dc <Modbus_Protocal_Worker+0x28>
 80012c6:	a201      	add	r2, pc, #4	@ (adr r2, 80012cc <Modbus_Protocal_Worker+0x18>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	080012e7 	.word	0x080012e7
 80012d0:	0800147b 	.word	0x0800147b
 80012d4:	08001373 	.word	0x08001373
 80012d8:	080013b7 	.word	0x080013b7
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80012dc:	4b75      	ldr	r3, [pc, #468]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	75da      	strb	r2, [r3, #23]
		break;
 80012e4:	e0e1      	b.n	80014aa <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012e6:	4b73      	ldr	r3, [pc, #460]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80012f2:	4b70      	ldr	r3, [pc, #448]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2202      	movs	r2, #2
 80012f8:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80012fa:	f000 f9cd 	bl	8001698 <Modbus_Emission>
 80012fe:	e018      	b.n	8001332 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001300:	4b6c      	ldr	r3, [pc, #432]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800130a:	4b6a      	ldr	r3, [pc, #424]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001314:	b29b      	uxth	r3, r3
 8001316:	429a      	cmp	r2, r3
 8001318:	d00b      	beq.n	8001332 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800131a:	4b66      	ldr	r3, [pc, #408]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2200      	movs	r2, #0
 8001320:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001322:	4b64      	ldr	r3, [pc, #400]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800132a:	4b62      	ldr	r3, [pc, #392]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2203      	movs	r2, #3
 8001330:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001332:	4b60      	ldr	r3, [pc, #384]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133c:	2b20      	cmp	r3, #32
 800133e:	f040 80ad 	bne.w	800149c <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001342:	4b5c      	ldr	r3, [pc, #368]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800134c:	4b59      	ldr	r3, [pc, #356]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001352:	4b58      	ldr	r3, [pc, #352]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b57      	ldr	r3, [pc, #348]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800135e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001362:	4413      	add	r3, r2
 8001364:	3302      	adds	r3, #2
 8001366:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800136a:	4619      	mov	r1, r3
 800136c:	f008 ff9e 	bl	800a2ac <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001370:	e094      	b.n	800149c <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001372:	4b50      	ldr	r3, [pc, #320]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	7d1b      	ldrb	r3, [r3, #20]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8091 	beq.w	80014a0 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800137e:	4b4d      	ldr	r3, [pc, #308]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	22fe      	movs	r2, #254	@ 0xfe
 8001384:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001386:	4b4b      	ldr	r3, [pc, #300]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001390:	4b48      	ldr	r3, [pc, #288]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80013a0:	4b44      	ldr	r3, [pc, #272]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013a2:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80013a4:	1a8a      	subs	r2, r1, r2
 80013a6:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80013a8:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80013ac:	4b41      	ldr	r3, [pc, #260]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2204      	movs	r2, #4
 80013b2:	75da      	strb	r2, [r3, #23]
		}
		break;
 80013b4:	e074      	b.n	80014a0 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80013b6:	4b3f      	ldr	r3, [pc, #252]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80013be:	f113 0f02 	cmn.w	r3, #2
 80013c2:	d150      	bne.n	8001466 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80013c4:	4b3b      	ldr	r3, [pc, #236]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2200      	movs	r2, #0
 80013ca:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80013cc:	4b39      	ldr	r3, [pc, #228]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80013d4:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013dc:	3b02      	subs	r3, #2
 80013de:	4619      	mov	r1, r3
 80013e0:	4610      	mov	r0, r2
 80013e2:	f7ff ff31 	bl	8001248 <CRC16>
 80013e6:	4603      	mov	r3, r0
 80013e8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013ea:	793a      	ldrb	r2, [r7, #4]
 80013ec:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013ee:	6819      	ldr	r1, [r3, #0]
 80013f0:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013f8:	3b02      	subs	r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001400:	429a      	cmp	r2, r3
 8001402:	d10c      	bne.n	800141e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001404:	797a      	ldrb	r2, [r7, #5]
 8001406:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001408:	6819      	ldr	r1, [r3, #0]
 800140a:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001412:	3b01      	subs	r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800141a:	429a      	cmp	r2, r3
 800141c:	d004      	beq.n	8001428 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800141e:	4b25      	ldr	r3, [pc, #148]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	22ff      	movs	r2, #255	@ 0xff
 8001424:	759a      	strb	r2, [r3, #22]
				break;
 8001426:	e040      	b.n	80014aa <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001428:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001430:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d113      	bne.n	8001462 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800143a:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800144a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001454:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001456:	461a      	mov	r2, r3
 8001458:	f00a fcea 	bl	800be30 <memcpy>

			//execute command
			Modbus_frame_response();
 800145c:	f000 f904 	bl	8001668 <Modbus_frame_response>
 8001460:	e001      	b.n	8001466 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001462:	bf00      	nop
					}
		break;


	}
}
 8001464:	e021      	b.n	80014aa <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001466:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	7d5b      	ldrb	r3, [r3, #21]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d019      	beq.n	80014a4 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001470:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2201      	movs	r2, #1
 8001476:	75da      	strb	r2, [r3, #23]
		break;
 8001478:	e014      	b.n	80014a4 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001484:	2b20      	cmp	r3, #32
 8001486:	d10f      	bne.n	80014a8 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001488:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2201      	movs	r2, #1
 8001498:	75da      	strb	r2, [r3, #23]
		break;
 800149a:	e005      	b.n	80014a8 <Modbus_Protocal_Worker+0x1f4>
		break;
 800149c:	bf00      	nop
 800149e:	e004      	b.n	80014aa <Modbus_Protocal_Worker+0x1f6>
		break;
 80014a0:	bf00      	nop
 80014a2:	e002      	b.n	80014aa <Modbus_Protocal_Worker+0x1f6>
		break;
 80014a4:	bf00      	nop
 80014a6:	e000      	b.n	80014aa <Modbus_Protocal_Worker+0x1f6>
		break;
 80014a8:	bf00      	nop
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200002a4 	.word	0x200002a4

080014b8 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80014be:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <modbusWrite1Register+0x7c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	7e5b      	ldrb	r3, [r3, #25]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001534 <modbusWrite1Register+0x7c>)
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	7e92      	ldrb	r2, [r2, #26]
 80014ce:	4413      	add	r3, r2
 80014d0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80014d2:	88fa      	ldrh	r2, [r7, #6]
 80014d4:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <modbusWrite1Register+0x7c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d903      	bls.n	80014e6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014de:	2002      	movs	r0, #2
 80014e0:	f000 f8a0 	bl	8001624 <ModbusErrorReply>
			 return;
 80014e4:	e023      	b.n	800152e <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <modbusWrite1Register+0x7c>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <modbusWrite1Register+0x7c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	440b      	add	r3, r1
 80014f6:	7ed2      	ldrb	r2, [r2, #27]
 80014f8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <modbusWrite1Register+0x7c>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <modbusWrite1Register+0x7c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	440b      	add	r3, r1
 800150a:	7f12      	ldrb	r2, [r2, #28]
 800150c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <modbusWrite1Register+0x7c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <modbusWrite1Register+0x7c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 800151c:	2208      	movs	r2, #8
 800151e:	4619      	mov	r1, r3
 8001520:	f00a fc86 	bl	800be30 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001524:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <modbusWrite1Register+0x7c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2205      	movs	r2, #5
 800152a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200002a4 	.word	0x200002a4

08001538 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800153e:	4b38      	ldr	r3, [pc, #224]	@ (8001620 <modbusRead1Register+0xe8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	7edb      	ldrb	r3, [r3, #27]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	4a35      	ldr	r2, [pc, #212]	@ (8001620 <modbusRead1Register+0xe8>)
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	7f12      	ldrb	r2, [r2, #28]
 800154e:	4413      	add	r3, r2
 8001550:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001552:	4b33      	ldr	r3, [pc, #204]	@ (8001620 <modbusRead1Register+0xe8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	7e5b      	ldrb	r3, [r3, #25]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b29b      	uxth	r3, r3
 800155c:	4a30      	ldr	r2, [pc, #192]	@ (8001620 <modbusRead1Register+0xe8>)
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	7e92      	ldrb	r2, [r2, #26]
 8001562:	4413      	add	r3, r2
 8001564:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <modbusRead1Register+0x3a>
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001570:	d903      	bls.n	800157a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001572:	2003      	movs	r0, #3
 8001574:	f000 f856 	bl	8001624 <ModbusErrorReply>
		 return;
 8001578:	e04e      	b.n	8001618 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800157a:	88ba      	ldrh	r2, [r7, #4]
 800157c:	4b28      	ldr	r3, [pc, #160]	@ (8001620 <modbusRead1Register+0xe8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	429a      	cmp	r2, r3
 8001584:	d808      	bhi.n	8001598 <modbusRead1Register+0x60>
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	4413      	add	r3, r2
 800158c:	461a      	mov	r2, r3
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <modbusRead1Register+0xe8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	429a      	cmp	r2, r3
 8001596:	d903      	bls.n	80015a0 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001598:	2002      	movs	r0, #2
 800159a:	f000 f843 	bl	8001624 <ModbusErrorReply>
		 return;
 800159e:	e03b      	b.n	8001618 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <modbusRead1Register+0xe8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2203      	movs	r2, #3
 80015a6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <modbusRead1Register+0xe8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	0052      	lsls	r2, r2, #1
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80015ba:	2400      	movs	r4, #0
 80015bc:	e020      	b.n	8001600 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <modbusRead1Register+0xe8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	88bb      	ldrh	r3, [r7, #4]
 80015c6:	4423      	add	r3, r4
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	18d1      	adds	r1, r2, r3
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <modbusRead1Register+0xe8>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	1c63      	adds	r3, r4, #1
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	7849      	ldrb	r1, [r1, #1]
 80015d6:	4413      	add	r3, r2
 80015d8:	460a      	mov	r2, r1
 80015da:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <modbusRead1Register+0xe8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	88bb      	ldrh	r3, [r7, #4]
 80015e6:	4423      	add	r3, r4
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	18d1      	adds	r1, r2, r3
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <modbusRead1Register+0xe8>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	0063      	lsls	r3, r4, #1
 80015f2:	3303      	adds	r3, #3
 80015f4:	7809      	ldrb	r1, [r1, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	460a      	mov	r2, r1
 80015fa:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80015fe:	3401      	adds	r4, #1
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	429c      	cmp	r4, r3
 8001604:	dbdb      	blt.n	80015be <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	3301      	adds	r3, #1
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <modbusRead1Register+0xe8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0052      	lsls	r2, r2, #1
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	200002a4 	.word	0x200002a4

08001624 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800162e:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <ModbusErrorReply+0x40>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	7e1a      	ldrb	r2, [r3, #24]
 8001634:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <ModbusErrorReply+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <ModbusErrorReply+0x40>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	79fa      	ldrb	r2, [r7, #7]
 8001648:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <ModbusErrorReply+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2202      	movs	r2, #2
 8001652:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200002a4 	.word	0x200002a4

08001668 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <Modbus_frame_response+0x2c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	7e1b      	ldrb	r3, [r3, #24]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d004      	beq.n	8001680 <Modbus_frame_response+0x18>
 8001676:	2b06      	cmp	r3, #6
 8001678:	d105      	bne.n	8001686 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800167a:	f7ff ff1d 	bl	80014b8 <modbusWrite1Register>
		break;
 800167e:	e006      	b.n	800168e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001680:	f7ff ff5a 	bl	8001538 <modbusRead1Register>
		break;
 8001684:	e003      	b.n	800168e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001686:	2001      	movs	r0, #1
 8001688:	f7ff ffcc 	bl	8001624 <ModbusErrorReply>
		break;
 800168c:	bf00      	nop

	}
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200002a4 	.word	0x200002a4

08001698 <Modbus_Emission>:

void Modbus_Emission()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800169e:	4b38      	ldr	r3, [pc, #224]	@ (8001780 <Modbus_Emission+0xe8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	d15d      	bne.n	8001768 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80016ac:	4b34      	ldr	r3, [pc, #208]	@ (8001780 <Modbus_Emission+0xe8>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b33      	ldr	r3, [pc, #204]	@ (8001780 <Modbus_Emission+0xe8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	7812      	ldrb	r2, [r2, #0]
 80016b6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80016ba:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <Modbus_Emission+0xe8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80016c2:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80016c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001780 <Modbus_Emission+0xe8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80016cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <Modbus_Emission+0xe8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80016d4:	461a      	mov	r2, r3
 80016d6:	f00a fbab 	bl	800be30 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80016da:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <Modbus_Emission+0xe8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <Modbus_Emission+0xe8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3203      	adds	r2, #3
 80016ea:	b292      	uxth	r2, r2
 80016ec:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016f0:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <Modbus_Emission+0xe8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016f8:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <Modbus_Emission+0xe8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001700:	3b02      	subs	r3, #2
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f7ff fd9f 	bl	8001248 <CRC16>
 800170a:	4603      	mov	r3, r0
 800170c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800170e:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <Modbus_Emission+0xe8>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <Modbus_Emission+0xe8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800171a:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800171c:	7939      	ldrb	r1, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	460a      	mov	r2, r1
 8001722:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001726:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <Modbus_Emission+0xe8>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <Modbus_Emission+0xe8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001732:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001734:	7979      	ldrb	r1, [r7, #5]
 8001736:	4413      	add	r3, r2
 8001738:	460a      	mov	r2, r1
 800173a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <Modbus_Emission+0xe8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001748:	2b20      	cmp	r3, #32
 800174a:	d10d      	bne.n	8001768 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <Modbus_Emission+0xe8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001752:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <Modbus_Emission+0xe8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <Modbus_Emission+0xe8>)
 800175c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800175e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001762:	461a      	mov	r2, r3
 8001764:	f008 fd22 	bl	800a1ac <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <Modbus_Emission+0xe8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001770:	4b03      	ldr	r3, [pc, #12]	@ (8001780 <Modbus_Emission+0xe8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2200      	movs	r2, #0
 8001776:	755a      	strb	r2, [r3, #21]

}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200002a4 	.word	0x200002a4
 8001784:	00000000 	.word	0x00000000

08001788 <sendall>:
 *      Author: Phatt
 */
#include "globalVar.h"
#include "math.h"

void sendall(){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	// Vacuum Status
//	registerFrame[0x02].U16 = 0;
	// Movement Status
//	registerFrame[0x03].U16 = 0;
	// Movement Actual Status
	registerFrame[0x04].U16 = movementActualStatus;
 800178c:	4b3a      	ldr	r3, [pc, #232]	@ (8001878 <sendall+0xf0>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b3a      	ldr	r3, [pc, #232]	@ (800187c <sendall+0xf4>)
 8001794:	811a      	strh	r2, [r3, #8]
	// z-axis Moving Status
	registerFrame[0x10].U16 = zMovingStatus;
 8001796:	4b3a      	ldr	r3, [pc, #232]	@ (8001880 <sendall+0xf8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b37      	ldr	r3, [pc, #220]	@ (800187c <sendall+0xf4>)
 800179e:	841a      	strh	r2, [r3, #32]
	// z-axis Actual Position
	registerFrame[0x11].U16 = (floor((linearPos * 1000000))/100000) + 800;
 80017a0:	4b38      	ldr	r3, [pc, #224]	@ (8001884 <sendall+0xfc>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001888 <sendall+0x100>
 80017aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ae:	ee17 0a90 	vmov	r0, s15
 80017b2:	f7fe fe95 	bl	80004e0 <__aeabi_f2d>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	ec43 2b10 	vmov	d0, r2, r3
 80017be:	f00a fc4b 	bl	800c058 <floor>
 80017c2:	ec51 0b10 	vmov	r0, r1, d0
 80017c6:	a32a      	add	r3, pc, #168	@ (adr r3, 8001870 <sendall+0xe8>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7ff f80a 	bl	80007e4 <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <sendall+0x104>)
 80017de:	f7fe fd21 	bl	8000224 <__adddf3>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f981 	bl	8000af0 <__aeabi_d2uiz>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4b22      	ldr	r3, [pc, #136]	@ (800187c <sendall+0xf4>)
 80017f4:	845a      	strh	r2, [r3, #34]	@ 0x22
	// z-axis Actual Speed
	registerFrame[0x12].U16 = (floor((zActualSpeed * 1000000))/100000);
 80017f6:	4b26      	ldr	r3, [pc, #152]	@ (8001890 <sendall+0x108>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a26      	ldr	r2, [pc, #152]	@ (8001894 <sendall+0x10c>)
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fe4b 	bl	800049c <__aeabi_ui2d>
 8001806:	a31a      	add	r3, pc, #104	@ (adr r3, 8001870 <sendall+0xe8>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe ffea 	bl	80007e4 <__aeabi_ddiv>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f96a 	bl	8000af0 <__aeabi_d2uiz>
 800181c:	4603      	mov	r3, r0
 800181e:	b29a      	uxth	r2, r3
 8001820:	4b16      	ldr	r3, [pc, #88]	@ (800187c <sendall+0xf4>)
 8001822:	849a      	strh	r2, [r3, #36]	@ 0x24
	// z-axis Actual Acceleration
	registerFrame[0x13].U16 = (floor((zAccel * 1000000))/100000);
 8001824:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <sendall+0x110>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1a      	ldr	r2, [pc, #104]	@ (8001894 <sendall+0x10c>)
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe34 	bl	800049c <__aeabi_ui2d>
 8001834:	a30e      	add	r3, pc, #56	@ (adr r3, 8001870 <sendall+0xe8>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe ffd3 	bl	80007e4 <__aeabi_ddiv>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f953 	bl	8000af0 <__aeabi_d2uiz>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <sendall+0xf4>)
 8001850:	84da      	strh	r2, [r3, #38]	@ 0x26
	// 5th shelves position
//	registerFrame[0x27].U16 = 0;
	// Goal point z
//	registerFrame[0x30].U16 = 0;
	//x-axis Actual position
	registerFrame[0x40].U16 = (xAxisPosition * 10);
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <sendall+0x114>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	0092      	lsls	r2, r2, #2
 800185c:	4413      	add	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <sendall+0xf4>)
 8001864:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	f3af 8000 	nop.w
 8001870:	00000000 	.word	0x00000000
 8001874:	40f86a00 	.word	0x40f86a00
 8001878:	20000439 	.word	0x20000439
 800187c:	200002a8 	.word	0x200002a8
 8001880:	2000043c 	.word	0x2000043c
 8001884:	20000494 	.word	0x20000494
 8001888:	49742400 	.word	0x49742400
 800188c:	40890000 	.word	0x40890000
 8001890:	20000440 	.word	0x20000440
 8001894:	000f4240 	.word	0x000f4240
 8001898:	20000444 	.word	0x20000444
 800189c:	2000048c 	.word	0x2000048c

080018a0 <watch_mode>:
//void call_all_mode(){
//	do_home();
//}
//

void watch_mode(){
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 == 1){
 80018a4:	4b38      	ldr	r3, [pc, #224]	@ (8001988 <watch_mode+0xe8>)
 80018a6:	885b      	ldrh	r3, [r3, #2]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d103      	bne.n	80018b4 <watch_mode+0x14>
		modeSelection = 4;
 80018ac:	4b37      	ldr	r3, [pc, #220]	@ (800198c <watch_mode+0xec>)
 80018ae:	2204      	movs	r2, #4
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	e043      	b.n	800193c <watch_mode+0x9c>
	}
	else if(registerFrame[0x01].U16 == 2){
 80018b4:	4b34      	ldr	r3, [pc, #208]	@ (8001988 <watch_mode+0xe8>)
 80018b6:	885b      	ldrh	r3, [r3, #2]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d112      	bne.n	80018e2 <watch_mode+0x42>
		modeSelection = 1;
 80018bc:	4b33      	ldr	r3, [pc, #204]	@ (800198c <watch_mode+0xec>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
		if(!limitMin) home_select = 1;
 80018c2:	4b33      	ldr	r3, [pc, #204]	@ (8001990 <watch_mode+0xf0>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d103      	bne.n	80018d2 <watch_mode+0x32>
 80018ca:	4b32      	ldr	r3, [pc, #200]	@ (8001994 <watch_mode+0xf4>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e034      	b.n	800193c <watch_mode+0x9c>
		else if(limitMin) home_select = 2;
 80018d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <watch_mode+0xf0>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d030      	beq.n	800193c <watch_mode+0x9c>
 80018da:	4b2e      	ldr	r3, [pc, #184]	@ (8001994 <watch_mode+0xf4>)
 80018dc:	2202      	movs	r2, #2
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e02c      	b.n	800193c <watch_mode+0x9c>
	}
	else if(registerFrame[0x01].U16 == 4){
 80018e2:	4b29      	ldr	r3, [pc, #164]	@ (8001988 <watch_mode+0xe8>)
 80018e4:	885b      	ldrh	r3, [r3, #2]
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d117      	bne.n	800191a <watch_mode+0x7a>
		currentOrder = 0;
 80018ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <watch_mode+0xf8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	801a      	strh	r2, [r3, #0]
		jogModeState = goPick;
 80018f0:	492a      	ldr	r1, [pc, #168]	@ (800199c <watch_mode+0xfc>)
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9c1 2300 	strd	r2, r3, [r1]
		modeSelection = 3;
 80018fe:	4b23      	ldr	r3, [pc, #140]	@ (800198c <watch_mode+0xec>)
 8001900:	2203      	movs	r2, #3
 8001902:	701a      	strb	r2, [r3, #0]
		jogMode_timeStamp = tickk + 2000;
 8001904:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <watch_mode+0x100>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f512 64fa 	adds.w	r4, r2, #2000	@ 0x7d0
 800190e:	f143 0500 	adc.w	r5, r3, #0
 8001912:	4b24      	ldr	r3, [pc, #144]	@ (80019a4 <watch_mode+0x104>)
 8001914:	e9c3 4500 	strd	r4, r5, [r3]
 8001918:	e010      	b.n	800193c <watch_mode+0x9c>
	}
	else if(registerFrame[0x01].U16 == 8){
 800191a:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <watch_mode+0xe8>)
 800191c:	885b      	ldrh	r3, [r3, #2]
 800191e:	2b08      	cmp	r3, #8
 8001920:	d10c      	bne.n	800193c <watch_mode+0x9c>
		modeSelection = 2;
 8001922:	4b1a      	ldr	r3, [pc, #104]	@ (800198c <watch_mode+0xec>)
 8001924:	2202      	movs	r2, #2
 8001926:	701a      	strb	r2, [r3, #0]
		pointMode_timeStamp = tickk + 2000;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <watch_mode+0x100>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f512 60fa 	adds.w	r0, r2, #2000	@ 0x7d0
 8001932:	f143 0100 	adc.w	r1, r3, #0
 8001936:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <watch_mode+0x108>)
 8001938:	e9c3 0100 	strd	r0, r1, [r3]
	}

	if(modeSelection == 1){
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <watch_mode+0xec>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d106      	bne.n	8001952 <watch_mode+0xb2>
		do_home();
 8001944:	f000 f832 	bl	80019ac <do_home>
		p1Blink();
 8001948:	f000 fd4e 	bl	80023e8 <p1Blink>
		p2Blink();
 800194c:	f000 fd10 	bl	8002370 <p2Blink>
		p2On();
	}
	else if(modeSelection == 4){
		set_shelves();
	}
}
 8001950:	e017      	b.n	8001982 <watch_mode+0xe2>
	else if(modeSelection == 2){
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <watch_mode+0xec>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d102      	bne.n	8001960 <watch_mode+0xc0>
		run_point_mode();
 800195a:	f000 f983 	bl	8001c64 <run_point_mode>
}
 800195e:	e010      	b.n	8001982 <watch_mode+0xe2>
	else if(modeSelection == 3){
 8001960:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <watch_mode+0xec>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d106      	bne.n	8001976 <watch_mode+0xd6>
		run_jog_mode();
 8001968:	f000 f9dc 	bl	8001d24 <run_jog_mode>
		p1On();
 800196c:	f000 fcde 	bl	800232c <p1On>
		p2On();
 8001970:	f000 fcd2 	bl	8002318 <p2On>
}
 8001974:	e005      	b.n	8001982 <watch_mode+0xe2>
	else if(modeSelection == 4){
 8001976:	4b05      	ldr	r3, [pc, #20]	@ (800198c <watch_mode+0xec>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d101      	bne.n	8001982 <watch_mode+0xe2>
		set_shelves();
 800197e:	f000 f853 	bl	8001a28 <set_shelves>
}
 8001982:	bf00      	nop
 8001984:	bdb0      	pop	{r4, r5, r7, pc}
 8001986:	bf00      	nop
 8001988:	200002a8 	.word	0x200002a8
 800198c:	20000438 	.word	0x20000438
 8001990:	20000574 	.word	0x20000574
 8001994:	200004ab 	.word	0x200004ab
 8001998:	2000045e 	.word	0x2000045e
 800199c:	20000510 	.word	0x20000510
 80019a0:	200004b0 	.word	0x200004b0
 80019a4:	20000518 	.word	0x20000518
 80019a8:	200004c8 	.word	0x200004c8

080019ac <do_home>:

void do_home(){
 80019ac:	b5b0      	push	{r4, r5, r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	registerFrame[0x01].U16 = 0;
 80019b0:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <do_home+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	805a      	strh	r2, [r3, #2]
	registerFrame[0x10].U16 = 2;
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <do_home+0x64>)
 80019b8:	2202      	movs	r2, #2
 80019ba:	841a      	strh	r2, [r3, #32]

	if(!limitMin){
 80019bc:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <do_home+0x68>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <do_home+0x24>
		motor_run(7000, 2);
 80019c4:	2102      	movs	r1, #2
 80019c6:	f641 3058 	movw	r0, #7000	@ 0x1b58
 80019ca:	f001 fd47 	bl	800345c <motor_run>
		motor_run(0, 3);
		home_trigger = 1;
//		registerFrame[0x10].U16 = 0;
		modeSelection = 0;
	}
}
 80019ce:	e01c      	b.n	8001a0a <do_home+0x5e>
	else if(limitMin){
 80019d0:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <do_home+0x68>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d018      	beq.n	8001a0a <do_home+0x5e>
		home_timeStamp = HAL_GetTick() + 1000;
 80019d8:	f003 ffb8 	bl	800594c <HAL_GetTick>
 80019dc:	4603      	mov	r3, r0
 80019de:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80019e2:	2200      	movs	r2, #0
 80019e4:	461c      	mov	r4, r3
 80019e6:	4615      	mov	r5, r2
 80019e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <do_home+0x6c>)
 80019ea:	e9c3 4500 	strd	r4, r5, [r3]
		motor_run(0, 3);
 80019ee:	2103      	movs	r1, #3
 80019f0:	2000      	movs	r0, #0
 80019f2:	f001 fd33 	bl	800345c <motor_run>
		home_trigger = 1;
 80019f6:	4909      	ldr	r1, [pc, #36]	@ (8001a1c <do_home+0x70>)
 80019f8:	f04f 0201 	mov.w	r2, #1
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9c1 2300 	strd	r2, r3, [r1]
		modeSelection = 0;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <do_home+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200002a8 	.word	0x200002a8
 8001a14:	20000574 	.word	0x20000574
 8001a18:	200004b8 	.word	0x200004b8
 8001a1c:	200004c0 	.word	0x200004c0
 8001a20:	20000438 	.word	0x20000438
 8001a24:	00000000 	.word	0x00000000

08001a28 <set_shelves>:

void set_shelves(){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	//set base status to 0 (default)
	registerFrame[0x01].U16 = 0;
 8001a2c:	4b82      	ldr	r3, [pc, #520]	@ (8001c38 <set_shelves+0x210>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	805a      	strh	r2, [r3, #2]
	registerFrame[0x10].U16 = 1;
 8001a32:	4b81      	ldr	r3, [pc, #516]	@ (8001c38 <set_shelves+0x210>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	841a      	strh	r2, [r3, #32]
	if(joySave > 39000){
 8001a38:	4b80      	ldr	r3, [pc, #512]	@ (8001c3c <set_shelves+0x214>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f649 0258 	movw	r2, #39000	@ 0x9858
 8001a40:	4293      	cmp	r3, r2
 8001a42:	f340 80e5 	ble.w	8001c10 <set_shelves+0x1e8>
		if(ShelvesSelect == 1){
 8001a46:	4b7e      	ldr	r3, [pc, #504]	@ (8001c40 <set_shelves+0x218>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d129      	bne.n	8001aa2 <set_shelves+0x7a>
//			firstShelvesPosition = floor((linearPos * 1000000))/100000;
			registerFrame[0x23].U16 = floor((linearPos * 1000000))/100000;
 8001a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c44 <set_shelves+0x21c>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8001c48 <set_shelves+0x220>
 8001a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5c:	ee17 0a90 	vmov	r0, s15
 8001a60:	f7fe fd3e 	bl	80004e0 <__aeabi_f2d>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	ec43 2b10 	vmov	d0, r2, r3
 8001a6c:	f00a faf4 	bl	800c058 <floor>
 8001a70:	ec51 0b10 	vmov	r0, r1, d0
 8001a74:	a36e      	add	r3, pc, #440	@ (adr r3, 8001c30 <set_shelves+0x208>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe feb3 	bl	80007e4 <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7ff f833 	bl	8000af0 <__aeabi_d2uiz>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c38 <set_shelves+0x210>)
 8001a90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
			firstShelvesPosition = registerFrame[0x23].U16;
 8001a94:	4b68      	ldr	r3, [pc, #416]	@ (8001c38 <set_shelves+0x210>)
 8001a96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8001c4c <set_shelves+0x224>)
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e0b6      	b.n	8001c10 <set_shelves+0x1e8>
		}
		else if(ShelvesSelect == 2){
 8001aa2:	4b67      	ldr	r3, [pc, #412]	@ (8001c40 <set_shelves+0x218>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d129      	bne.n	8001afe <set_shelves+0xd6>
//			secondShelvesPosition = floor((linearPos * 1000000))/100000;
			registerFrame[0x24].U16 = floor((linearPos * 1000000))/100000;
 8001aaa:	4b66      	ldr	r3, [pc, #408]	@ (8001c44 <set_shelves+0x21c>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001c48 <set_shelves+0x220>
 8001ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab8:	ee17 0a90 	vmov	r0, s15
 8001abc:	f7fe fd10 	bl	80004e0 <__aeabi_f2d>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	ec43 2b10 	vmov	d0, r2, r3
 8001ac8:	f00a fac6 	bl	800c058 <floor>
 8001acc:	ec51 0b10 	vmov	r0, r1, d0
 8001ad0:	a357      	add	r3, pc, #348	@ (adr r3, 8001c30 <set_shelves+0x208>)
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	f7fe fe85 	bl	80007e4 <__aeabi_ddiv>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7ff f805 	bl	8000af0 <__aeabi_d2uiz>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	4b53      	ldr	r3, [pc, #332]	@ (8001c38 <set_shelves+0x210>)
 8001aec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
			secondShelvesPosition = registerFrame[0x24].U16;
 8001af0:	4b51      	ldr	r3, [pc, #324]	@ (8001c38 <set_shelves+0x210>)
 8001af2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b55      	ldr	r3, [pc, #340]	@ (8001c50 <set_shelves+0x228>)
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e088      	b.n	8001c10 <set_shelves+0x1e8>
		}
		else if(ShelvesSelect == 3){
 8001afe:	4b50      	ldr	r3, [pc, #320]	@ (8001c40 <set_shelves+0x218>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d129      	bne.n	8001b5a <set_shelves+0x132>
//			thirdsecondShelvesPosition = floor((linearPos * 1000000))/100000;
			registerFrame[0x25].U16 = floor((linearPos * 1000000))/100000;
 8001b06:	4b4f      	ldr	r3, [pc, #316]	@ (8001c44 <set_shelves+0x21c>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001c48 <set_shelves+0x220>
 8001b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b14:	ee17 0a90 	vmov	r0, s15
 8001b18:	f7fe fce2 	bl	80004e0 <__aeabi_f2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	ec43 2b10 	vmov	d0, r2, r3
 8001b24:	f00a fa98 	bl	800c058 <floor>
 8001b28:	ec51 0b10 	vmov	r0, r1, d0
 8001b2c:	a340      	add	r3, pc, #256	@ (adr r3, 8001c30 <set_shelves+0x208>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	f7fe fe57 	bl	80007e4 <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7fe ffd7 	bl	8000af0 <__aeabi_d2uiz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	4b3c      	ldr	r3, [pc, #240]	@ (8001c38 <set_shelves+0x210>)
 8001b48:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			thirdShelvesPosition = registerFrame[0x25].U16;
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c38 <set_shelves+0x210>)
 8001b4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b3f      	ldr	r3, [pc, #252]	@ (8001c54 <set_shelves+0x22c>)
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e05a      	b.n	8001c10 <set_shelves+0x1e8>
		}
		else if(ShelvesSelect == 4){
 8001b5a:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <set_shelves+0x218>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d129      	bne.n	8001bb6 <set_shelves+0x18e>
//			fourthsecondShelvesPosition = floor((linearPos * 1000000))/100000;
			registerFrame[0x26].U16 = floor((linearPos * 1000000))/100000;
 8001b62:	4b38      	ldr	r3, [pc, #224]	@ (8001c44 <set_shelves+0x21c>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001c48 <set_shelves+0x220>
 8001b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b70:	ee17 0a90 	vmov	r0, s15
 8001b74:	f7fe fcb4 	bl	80004e0 <__aeabi_f2d>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	ec43 2b10 	vmov	d0, r2, r3
 8001b80:	f00a fa6a 	bl	800c058 <floor>
 8001b84:	ec51 0b10 	vmov	r0, r1, d0
 8001b88:	a329      	add	r3, pc, #164	@ (adr r3, 8001c30 <set_shelves+0x208>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f7fe fe29 	bl	80007e4 <__aeabi_ddiv>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7fe ffa9 	bl	8000af0 <__aeabi_d2uiz>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b25      	ldr	r3, [pc, #148]	@ (8001c38 <set_shelves+0x210>)
 8001ba4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			fourthShelvesPosition = registerFrame[0x26].U16;
 8001ba8:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <set_shelves+0x210>)
 8001baa:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <set_shelves+0x230>)
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e02c      	b.n	8001c10 <set_shelves+0x1e8>
		}
		else if(ShelvesSelect == 5){
 8001bb6:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <set_shelves+0x218>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b05      	cmp	r3, #5
 8001bbc:	d128      	bne.n	8001c10 <set_shelves+0x1e8>
//			fifthsecondShelvesPosition = floor((linearPos * 1000000))/100000;
			registerFrame[0x27].U16 = floor((linearPos * 1000000))/100000;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <set_shelves+0x21c>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001c48 <set_shelves+0x220>
 8001bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bcc:	ee17 0a90 	vmov	r0, s15
 8001bd0:	f7fe fc86 	bl	80004e0 <__aeabi_f2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	ec43 2b10 	vmov	d0, r2, r3
 8001bdc:	f00a fa3c 	bl	800c058 <floor>
 8001be0:	ec51 0b10 	vmov	r0, r1, d0
 8001be4:	a312      	add	r3, pc, #72	@ (adr r3, 8001c30 <set_shelves+0x208>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	f7fe fdfb 	bl	80007e4 <__aeabi_ddiv>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7fe ff7b 	bl	8000af0 <__aeabi_d2uiz>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <set_shelves+0x210>)
 8001c00:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			fifthShelvesPosition = registerFrame[0x27].U16;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <set_shelves+0x210>)
 8001c06:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <set_shelves+0x234>)
 8001c0e:	601a      	str	r2, [r3, #0]
		}
	}
	if(ShelvesSelect == 6 && fifthShelvesPosition != 0){
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <set_shelves+0x218>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b06      	cmp	r3, #6
 8001c16:	d109      	bne.n	8001c2c <set_shelves+0x204>
 8001c18:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <set_shelves+0x234>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <set_shelves+0x204>
		registerFrame[0x10].U16 = 0;
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <set_shelves+0x210>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	841a      	strh	r2, [r3, #32]
		modeSelection = 0;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <set_shelves+0x238>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
	}
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	00000000 	.word	0x00000000
 8001c34:	40f86a00 	.word	0x40f86a00
 8001c38:	200002a8 	.word	0x200002a8
 8001c3c:	20000558 	.word	0x20000558
 8001c40:	20000564 	.word	0x20000564
 8001c44:	20000494 	.word	0x20000494
 8001c48:	49742400 	.word	0x49742400
 8001c4c:	20000474 	.word	0x20000474
 8001c50:	20000478 	.word	0x20000478
 8001c54:	2000047c 	.word	0x2000047c
 8001c58:	20000480 	.word	0x20000480
 8001c5c:	20000484 	.word	0x20000484
 8001c60:	20000438 	.word	0x20000438

08001c64 <run_point_mode>:
//
void run_point_mode(){
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
	remoteCheck = 5;
 8001c68:	4b25      	ldr	r3, [pc, #148]	@ (8001d00 <run_point_mode+0x9c>)
 8001c6a:	2205      	movs	r2, #5
 8001c6c:	601a      	str	r2, [r3, #0]
	registerFrame[0x01].U16 = 0;
 8001c6e:	4b25      	ldr	r3, [pc, #148]	@ (8001d04 <run_point_mode+0xa0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	805a      	strh	r2, [r3, #2]
	registerFrame[0x10].U16 = 16;
 8001c74:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <run_point_mode+0xa0>)
 8001c76:	2210      	movs	r2, #16
 8001c78:	841a      	strh	r2, [r3, #32]
	if(point_traj_trig == 0){
 8001c7a:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <run_point_mode+0xa4>)
 8001c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	d117      	bne.n	8001cb4 <run_point_mode+0x50>
		trajec_target = (registerFrame[0x30].U16 / 10) - 80;
 8001c84:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <run_point_mode+0xa0>)
 8001c86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8001c8a:	4a20      	ldr	r2, [pc, #128]	@ (8001d0c <run_point_mode+0xa8>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	08db      	lsrs	r3, r3, #3
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b50      	subs	r3, #80	@ 0x50
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <run_point_mode+0xac>)
 8001ca0:	edc3 7a00 	vstr	s15, [r3]
		point_traj_trig = 1;
 8001ca4:	4918      	ldr	r1, [pc, #96]	@ (8001d08 <run_point_mode+0xa4>)
 8001ca6:	f04f 0201 	mov.w	r2, #1
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	e9c1 2300 	strd	r2, r3, [r1]
	else if(finish_state == 1 && point_traj_trig == 1 && pointMode_timeStamp < tickk){
		registerFrame[0x10].U16 = 0;
		point_traj_trig = 0;
		modeSelection = 0 ;
	}
}
 8001cb2:	e020      	b.n	8001cf6 <run_point_mode+0x92>
	else if(finish_state == 1 && point_traj_trig == 1 && pointMode_timeStamp < tickk){
 8001cb4:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <run_point_mode+0xb0>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d11c      	bne.n	8001cf6 <run_point_mode+0x92>
 8001cbc:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <run_point_mode+0xa4>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	1e51      	subs	r1, r2, #1
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	d116      	bne.n	8001cf6 <run_point_mode+0x92>
 8001cc8:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <run_point_mode+0xb4>)
 8001cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cce:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <run_point_mode+0xb8>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	4290      	cmp	r0, r2
 8001cd6:	eb71 0303 	sbcs.w	r3, r1, r3
 8001cda:	d20c      	bcs.n	8001cf6 <run_point_mode+0x92>
		registerFrame[0x10].U16 = 0;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <run_point_mode+0xa0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	841a      	strh	r2, [r3, #32]
		point_traj_trig = 0;
 8001ce2:	4909      	ldr	r1, [pc, #36]	@ (8001d08 <run_point_mode+0xa4>)
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	e9c1 2300 	strd	r2, r3, [r1]
		modeSelection = 0 ;
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <run_point_mode+0xbc>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	2000049c 	.word	0x2000049c
 8001d04:	200002a8 	.word	0x200002a8
 8001d08:	20000500 	.word	0x20000500
 8001d0c:	cccccccd 	.word	0xcccccccd
 8001d10:	2000057c 	.word	0x2000057c
 8001d14:	20000598 	.word	0x20000598
 8001d18:	200004c8 	.word	0x200004c8
 8001d1c:	200004b0 	.word	0x200004b0
 8001d20:	20000438 	.word	0x20000438

08001d24 <run_jog_mode>:

void run_jog_mode(){
 8001d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d28:	b090      	sub	sp, #64	@ 0x40
 8001d2a:	af00      	add	r7, sp, #0
	registerFrame[0x01].U16 = 0;
 8001d2c:	4a9b      	ldr	r2, [pc, #620]	@ (8001f9c <run_jog_mode+0x278>)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	8053      	strh	r3, [r2, #2]
	uint16_t pickall = registerFrame[0x21].U16, placeall = registerFrame[0x22].U16;
 8001d32:	4b9a      	ldr	r3, [pc, #616]	@ (8001f9c <run_jog_mode+0x278>)
 8001d34:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001d38:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001d3a:	4b98      	ldr	r3, [pc, #608]	@ (8001f9c <run_jog_mode+0x278>)
 8001d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d40:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	posOrder[0] = firstShelvesPosition/10;
 8001d42:	4b97      	ldr	r3, [pc, #604]	@ (8001fa0 <run_jog_mode+0x27c>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b97      	ldr	r3, [pc, #604]	@ (8001fa4 <run_jog_mode+0x280>)
 8001d48:	fba3 2302 	umull	r2, r3, r3, r2
 8001d4c:	08db      	lsrs	r3, r3, #3
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d56:	4b94      	ldr	r3, [pc, #592]	@ (8001fa8 <run_jog_mode+0x284>)
 8001d58:	edc3 7a00 	vstr	s15, [r3]
	posOrder[1] = secondShelvesPosition/10;
 8001d5c:	4b93      	ldr	r3, [pc, #588]	@ (8001fac <run_jog_mode+0x288>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b90      	ldr	r3, [pc, #576]	@ (8001fa4 <run_jog_mode+0x280>)
 8001d62:	fba3 2302 	umull	r2, r3, r3, r2
 8001d66:	08db      	lsrs	r3, r3, #3
 8001d68:	ee07 3a90 	vmov	s15, r3
 8001d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d70:	4b8d      	ldr	r3, [pc, #564]	@ (8001fa8 <run_jog_mode+0x284>)
 8001d72:	edc3 7a01 	vstr	s15, [r3, #4]
	posOrder[2] = thirdShelvesPosition/10;
 8001d76:	4b8e      	ldr	r3, [pc, #568]	@ (8001fb0 <run_jog_mode+0x28c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b8a      	ldr	r3, [pc, #552]	@ (8001fa4 <run_jog_mode+0x280>)
 8001d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8001d80:	08db      	lsrs	r3, r3, #3
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d8a:	4b87      	ldr	r3, [pc, #540]	@ (8001fa8 <run_jog_mode+0x284>)
 8001d8c:	edc3 7a02 	vstr	s15, [r3, #8]
	posOrder[3] = fourthShelvesPosition/10;
 8001d90:	4b88      	ldr	r3, [pc, #544]	@ (8001fb4 <run_jog_mode+0x290>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b83      	ldr	r3, [pc, #524]	@ (8001fa4 <run_jog_mode+0x280>)
 8001d96:	fba3 2302 	umull	r2, r3, r3, r2
 8001d9a:	08db      	lsrs	r3, r3, #3
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da4:	4b80      	ldr	r3, [pc, #512]	@ (8001fa8 <run_jog_mode+0x284>)
 8001da6:	edc3 7a03 	vstr	s15, [r3, #12]
	posOrder[4] = fifthShelvesPosition/10;
 8001daa:	4b83      	ldr	r3, [pc, #524]	@ (8001fb8 <run_jog_mode+0x294>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b7d      	ldr	r3, [pc, #500]	@ (8001fa4 <run_jog_mode+0x280>)
 8001db0:	fba3 2302 	umull	r2, r3, r3, r2
 8001db4:	08db      	lsrs	r3, r3, #3
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8001fa8 <run_jog_mode+0x284>)
 8001dc0:	edc3 7a04 	vstr	s15, [r3, #16]
	pickOrder[0] = pickall/10000;
 8001dc4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001dc6:	4b7d      	ldr	r3, [pc, #500]	@ (8001fbc <run_jog_mode+0x298>)
 8001dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8001dcc:	0b5b      	lsrs	r3, r3, #13
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4a7b      	ldr	r2, [pc, #492]	@ (8001fc0 <run_jog_mode+0x29c>)
 8001dd2:	8013      	strh	r3, [r2, #0]
	pickOrder[1] = (pickall/1000)%10;
 8001dd4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001dd6:	4b7b      	ldr	r3, [pc, #492]	@ (8001fc4 <run_jog_mode+0x2a0>)
 8001dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	b299      	uxth	r1, r3
 8001de0:	4b70      	ldr	r3, [pc, #448]	@ (8001fa4 <run_jog_mode+0x280>)
 8001de2:	fba3 2301 	umull	r2, r3, r3, r1
 8001de6:	08da      	lsrs	r2, r3, #3
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	1acb      	subs	r3, r1, r3
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4a72      	ldr	r2, [pc, #456]	@ (8001fc0 <run_jog_mode+0x29c>)
 8001df6:	8053      	strh	r3, [r2, #2]
	pickOrder[2] = (pickall/100)%10;
 8001df8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001dfa:	4b73      	ldr	r3, [pc, #460]	@ (8001fc8 <run_jog_mode+0x2a4>)
 8001dfc:	fba3 2302 	umull	r2, r3, r3, r2
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	b299      	uxth	r1, r3
 8001e04:	4b67      	ldr	r3, [pc, #412]	@ (8001fa4 <run_jog_mode+0x280>)
 8001e06:	fba3 2301 	umull	r2, r3, r3, r1
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	1acb      	subs	r3, r1, r3
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4a69      	ldr	r2, [pc, #420]	@ (8001fc0 <run_jog_mode+0x29c>)
 8001e1a:	8093      	strh	r3, [r2, #4]
	pickOrder[3] = (pickall/10)%10;
 8001e1c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001e1e:	4b61      	ldr	r3, [pc, #388]	@ (8001fa4 <run_jog_mode+0x280>)
 8001e20:	fba3 2302 	umull	r2, r3, r3, r2
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	b299      	uxth	r1, r3
 8001e28:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa4 <run_jog_mode+0x280>)
 8001e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	1acb      	subs	r3, r1, r3
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4a60      	ldr	r2, [pc, #384]	@ (8001fc0 <run_jog_mode+0x29c>)
 8001e3e:	80d3      	strh	r3, [r2, #6]
	pickOrder[4] = pickall%10;
 8001e40:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8001e42:	4b58      	ldr	r3, [pc, #352]	@ (8001fa4 <run_jog_mode+0x280>)
 8001e44:	fba3 2301 	umull	r2, r3, r3, r1
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	1acb      	subs	r3, r1, r3
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	4a5a      	ldr	r2, [pc, #360]	@ (8001fc0 <run_jog_mode+0x29c>)
 8001e58:	8113      	strh	r3, [r2, #8]
	placeOrder[0] = placeall/10000;
 8001e5a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001e5c:	4b57      	ldr	r3, [pc, #348]	@ (8001fbc <run_jog_mode+0x298>)
 8001e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001e62:	0b5b      	lsrs	r3, r3, #13
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4a59      	ldr	r2, [pc, #356]	@ (8001fcc <run_jog_mode+0x2a8>)
 8001e68:	8013      	strh	r3, [r2, #0]
	placeOrder[1] = (placeall/1000)%10;
 8001e6a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001e6c:	4b55      	ldr	r3, [pc, #340]	@ (8001fc4 <run_jog_mode+0x2a0>)
 8001e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8001e72:	099b      	lsrs	r3, r3, #6
 8001e74:	b299      	uxth	r1, r3
 8001e76:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa4 <run_jog_mode+0x280>)
 8001e78:	fba3 2301 	umull	r2, r3, r3, r1
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	1acb      	subs	r3, r1, r3
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4a50      	ldr	r2, [pc, #320]	@ (8001fcc <run_jog_mode+0x2a8>)
 8001e8c:	8053      	strh	r3, [r2, #2]
	placeOrder[2] = (placeall/100)%10;
 8001e8e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001e90:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc8 <run_jog_mode+0x2a4>)
 8001e92:	fba3 2302 	umull	r2, r3, r3, r2
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	b299      	uxth	r1, r3
 8001e9a:	4b42      	ldr	r3, [pc, #264]	@ (8001fa4 <run_jog_mode+0x280>)
 8001e9c:	fba3 2301 	umull	r2, r3, r3, r1
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	1acb      	subs	r3, r1, r3
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	4a47      	ldr	r2, [pc, #284]	@ (8001fcc <run_jog_mode+0x2a8>)
 8001eb0:	8093      	strh	r3, [r2, #4]
	placeOrder[3] = (placeall/10)%10;
 8001eb2:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa4 <run_jog_mode+0x280>)
 8001eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eba:	08db      	lsrs	r3, r3, #3
 8001ebc:	b299      	uxth	r1, r3
 8001ebe:	4b39      	ldr	r3, [pc, #228]	@ (8001fa4 <run_jog_mode+0x280>)
 8001ec0:	fba3 2301 	umull	r2, r3, r3, r1
 8001ec4:	08da      	lsrs	r2, r3, #3
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	1acb      	subs	r3, r1, r3
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	4a3e      	ldr	r2, [pc, #248]	@ (8001fcc <run_jog_mode+0x2a8>)
 8001ed4:	80d3      	strh	r3, [r2, #6]
	placeOrder[4] = placeall%10;
 8001ed6:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8001ed8:	4b32      	ldr	r3, [pc, #200]	@ (8001fa4 <run_jog_mode+0x280>)
 8001eda:	fba3 2301 	umull	r2, r3, r3, r1
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	1acb      	subs	r3, r1, r3
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4a37      	ldr	r2, [pc, #220]	@ (8001fcc <run_jog_mode+0x2a8>)
 8001eee:	8113      	strh	r3, [r2, #8]

	if(jogModeState == goPick){
 8001ef0:	4b37      	ldr	r3, [pc, #220]	@ (8001fd0 <run_jog_mode+0x2ac>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	d178      	bne.n	8001fec <run_jog_mode+0x2c8>
		registerFrame[0x10].U16 = 4;
 8001efa:	4b28      	ldr	r3, [pc, #160]	@ (8001f9c <run_jog_mode+0x278>)
 8001efc:	2204      	movs	r2, #4
 8001efe:	841a      	strh	r2, [r3, #32]
		if(jogMode_trig == 0){
 8001f00:	4b34      	ldr	r3, [pc, #208]	@ (8001fd4 <run_jog_mode+0x2b0>)
 8001f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	d119      	bne.n	8001f3e <run_jog_mode+0x21a>
			trajec_target = posOrder[pickOrder[currentOrder] - 1] - 3;
 8001f0a:	4b33      	ldr	r3, [pc, #204]	@ (8001fd8 <run_jog_mode+0x2b4>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc0 <run_jog_mode+0x29c>)
 8001f12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	4a23      	ldr	r2, [pc, #140]	@ (8001fa8 <run_jog_mode+0x284>)
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001f26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fdc <run_jog_mode+0x2b8>)
 8001f2c:	edc3 7a00 	vstr	s15, [r3]
			jogMode_trig = 1;
 8001f30:	4928      	ldr	r1, [pc, #160]	@ (8001fd4 <run_jog_mode+0x2b0>)
 8001f32:	f04f 0201 	mov.w	r2, #1
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(finish_state == 1 && jogMode_timeStamp < tickk){
 8001f3e:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <run_jog_mode+0x2bc>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	f040 81bd 	bne.w	80022c2 <run_jog_mode+0x59e>
 8001f48:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <run_jog_mode+0x2c0>)
 8001f4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f4e:	4b26      	ldr	r3, [pc, #152]	@ (8001fe8 <run_jog_mode+0x2c4>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	4290      	cmp	r0, r2
 8001f56:	eb71 0303 	sbcs.w	r3, r1, r3
 8001f5a:	f080 81b2 	bcs.w	80022c2 <run_jog_mode+0x59e>
			jogModeState = Grap;
 8001f5e:	491c      	ldr	r1, [pc, #112]	@ (8001fd0 <run_jog_mode+0x2ac>)
 8001f60:	f04f 0202 	mov.w	r2, #2
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	e9c1 2300 	strd	r2, r3, [r1]
			jogMode_timeStamp = tickk + 1500;
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <run_jog_mode+0x2c4>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001f76:	1851      	adds	r1, r2, r1
 8001f78:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f7a:	f143 0300 	adc.w	r3, r3, #0
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f80:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <run_jog_mode+0x2c0>)
 8001f82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8001f86:	e9c3 1200 	strd	r1, r2, [r3]
			jogMode_trig = 0;
 8001f8a:	4912      	ldr	r1, [pc, #72]	@ (8001fd4 <run_jog_mode+0x2b0>)
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9c1 2300 	strd	r2, r3, [r1]
 8001f98:	e193      	b.n	80022c2 <run_jog_mode+0x59e>
 8001f9a:	bf00      	nop
 8001f9c:	200002a8 	.word	0x200002a8
 8001fa0:	20000474 	.word	0x20000474
 8001fa4:	cccccccd 	.word	0xcccccccd
 8001fa8:	20000460 	.word	0x20000460
 8001fac:	20000478 	.word	0x20000478
 8001fb0:	2000047c 	.word	0x2000047c
 8001fb4:	20000480 	.word	0x20000480
 8001fb8:	20000484 	.word	0x20000484
 8001fbc:	d1b71759 	.word	0xd1b71759
 8001fc0:	20000448 	.word	0x20000448
 8001fc4:	10624dd3 	.word	0x10624dd3
 8001fc8:	51eb851f 	.word	0x51eb851f
 8001fcc:	20000454 	.word	0x20000454
 8001fd0:	20000510 	.word	0x20000510
 8001fd4:	20000508 	.word	0x20000508
 8001fd8:	2000045e 	.word	0x2000045e
 8001fdc:	2000057c 	.word	0x2000057c
 8001fe0:	20000598 	.word	0x20000598
 8001fe4:	20000518 	.word	0x20000518
 8001fe8:	200004b0 	.word	0x200004b0
		}
	}
	else if(jogModeState == Grap){
 8001fec:	4bbe      	ldr	r3, [pc, #760]	@ (80022e8 <run_jog_mode+0x5c4>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	1e91      	subs	r1, r2, #2
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	d158      	bne.n	80020aa <run_jog_mode+0x386>
//		else if(jogMode_subState == 3 && !leadMin){
//			jogMode_subState = 4;
//			jogMode_timeStamp = tickk + 200;
//		}

		if(jogMode_timeStamp - 1000 < tickk){
 8001ff8:	4bbc      	ldr	r3, [pc, #752]	@ (80022ec <run_jog_mode+0x5c8>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	f5b2 787a 	subs.w	r8, r2, #1000	@ 0x3e8
 8002002:	f143 39ff 	adc.w	r9, r3, #4294967295
 8002006:	4bba      	ldr	r3, [pc, #744]	@ (80022f0 <run_jog_mode+0x5cc>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	4590      	cmp	r8, r2
 800200e:	eb79 0303 	sbcs.w	r3, r9, r3
 8002012:	d209      	bcs.n	8002028 <run_jog_mode+0x304>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2101      	movs	r1, #1
 8002018:	48b6      	ldr	r0, [pc, #728]	@ (80022f4 <run_jog_mode+0x5d0>)
 800201a:	f004 fa7f 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2102      	movs	r1, #2
 8002022:	48b4      	ldr	r0, [pc, #720]	@ (80022f4 <run_jog_mode+0x5d0>)
 8002024:	f004 fa7a 	bl	800651c <HAL_GPIO_WritePin>
		}
		if(jogMode_timeStamp - 350 < tickk){
 8002028:	4bb0      	ldr	r3, [pc, #704]	@ (80022ec <run_jog_mode+0x5c8>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f5b2 74af 	subs.w	r4, r2, #350	@ 0x15e
 8002032:	f143 35ff 	adc.w	r5, r3, #4294967295
 8002036:	4bae      	ldr	r3, [pc, #696]	@ (80022f0 <run_jog_mode+0x5cc>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	4294      	cmp	r4, r2
 800203e:	eb75 0303 	sbcs.w	r3, r5, r3
 8002042:	d209      	bcs.n	8002058 <run_jog_mode+0x334>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8002044:	2201      	movs	r2, #1
 8002046:	2101      	movs	r1, #1
 8002048:	48aa      	ldr	r0, [pc, #680]	@ (80022f4 <run_jog_mode+0x5d0>)
 800204a:	f004 fa67 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2102      	movs	r1, #2
 8002052:	48a8      	ldr	r0, [pc, #672]	@ (80022f4 <run_jog_mode+0x5d0>)
 8002054:	f004 fa62 	bl	800651c <HAL_GPIO_WritePin>
		}
		if(jogMode_timeStamp < tickk){
 8002058:	4ba4      	ldr	r3, [pc, #656]	@ (80022ec <run_jog_mode+0x5c8>)
 800205a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800205e:	4ba4      	ldr	r3, [pc, #656]	@ (80022f0 <run_jog_mode+0x5cc>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	4290      	cmp	r0, r2
 8002066:	eb71 0303 	sbcs.w	r3, r1, r3
 800206a:	f080 812a 	bcs.w	80022c2 <run_jog_mode+0x59e>
			jogModeState = goPlace;
 800206e:	499e      	ldr	r1, [pc, #632]	@ (80022e8 <run_jog_mode+0x5c4>)
 8002070:	f04f 0201 	mov.w	r2, #1
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9c1 2300 	strd	r2, r3, [r1]
			jogMode_trig = 0;
 800207c:	499e      	ldr	r1, [pc, #632]	@ (80022f8 <run_jog_mode+0x5d4>)
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9c1 2300 	strd	r2, r3, [r1]
			jogMode_timeStamp = tickk + 2500;
 800208a:	4b99      	ldr	r3, [pc, #612]	@ (80022f0 <run_jog_mode+0x5cc>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8002094:	1851      	adds	r1, r2, r1
 8002096:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002098:	f143 0300 	adc.w	r3, r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800209e:	4b93      	ldr	r3, [pc, #588]	@ (80022ec <run_jog_mode+0x5c8>)
 80020a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80020a4:	e9c3 1200 	strd	r1, r2, [r3]
 80020a8:	e10b      	b.n	80022c2 <run_jog_mode+0x59e>
		}
	}
	else if(jogModeState == goPlace){
 80020aa:	4b8f      	ldr	r3, [pc, #572]	@ (80022e8 <run_jog_mode+0x5c4>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	1e51      	subs	r1, r2, #1
 80020b2:	430b      	orrs	r3, r1
 80020b4:	d154      	bne.n	8002160 <run_jog_mode+0x43c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2102      	movs	r1, #2
 80020ba:	488e      	ldr	r0, [pc, #568]	@ (80022f4 <run_jog_mode+0x5d0>)
 80020bc:	f004 fa2e 	bl	800651c <HAL_GPIO_WritePin>
		registerFrame[0x10].U16 = 8;
 80020c0:	4b8e      	ldr	r3, [pc, #568]	@ (80022fc <run_jog_mode+0x5d8>)
 80020c2:	2208      	movs	r2, #8
 80020c4:	841a      	strh	r2, [r3, #32]
		if(jogMode_trig == 0){
 80020c6:	4b8c      	ldr	r3, [pc, #560]	@ (80022f8 <run_jog_mode+0x5d4>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	d119      	bne.n	8002104 <run_jog_mode+0x3e0>
			trajec_target = posOrder[placeOrder[currentOrder] - 1] + 10;
 80020d0:	4b8b      	ldr	r3, [pc, #556]	@ (8002300 <run_jog_mode+0x5dc>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002304 <run_jog_mode+0x5e0>)
 80020d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020dc:	3b01      	subs	r3, #1
 80020de:	4a8a      	ldr	r2, [pc, #552]	@ (8002308 <run_jog_mode+0x5e4>)
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80020ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020f0:	4b86      	ldr	r3, [pc, #536]	@ (800230c <run_jog_mode+0x5e8>)
 80020f2:	edc3 7a00 	vstr	s15, [r3]
			jogMode_trig = 1;
 80020f6:	4980      	ldr	r1, [pc, #512]	@ (80022f8 <run_jog_mode+0x5d4>)
 80020f8:	f04f 0201 	mov.w	r2, #1
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(finish_state == 1 && jogMode_timeStamp < tickk){
 8002104:	4b82      	ldr	r3, [pc, #520]	@ (8002310 <run_jog_mode+0x5ec>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	f040 80da 	bne.w	80022c2 <run_jog_mode+0x59e>
 800210e:	4b77      	ldr	r3, [pc, #476]	@ (80022ec <run_jog_mode+0x5c8>)
 8002110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002114:	4b76      	ldr	r3, [pc, #472]	@ (80022f0 <run_jog_mode+0x5cc>)
 8002116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211a:	4290      	cmp	r0, r2
 800211c:	eb71 0303 	sbcs.w	r3, r1, r3
 8002120:	f080 80cf 	bcs.w	80022c2 <run_jog_mode+0x59e>
			jogModeState = Place;
 8002124:	4970      	ldr	r1, [pc, #448]	@ (80022e8 <run_jog_mode+0x5c4>)
 8002126:	f04f 0203 	mov.w	r2, #3
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	e9c1 2300 	strd	r2, r3, [r1]
			jogMode_timeStamp = tickk + 1500;
 8002132:	4b6f      	ldr	r3, [pc, #444]	@ (80022f0 <run_jog_mode+0x5cc>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800213c:	1851      	adds	r1, r2, r1
 800213e:	6239      	str	r1, [r7, #32]
 8002140:	f143 0300 	adc.w	r3, r3, #0
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
 8002146:	4b69      	ldr	r3, [pc, #420]	@ (80022ec <run_jog_mode+0x5c8>)
 8002148:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800214c:	e9c3 1200 	strd	r1, r2, [r3]
			jogMode_trig = 0;
 8002150:	4969      	ldr	r1, [pc, #420]	@ (80022f8 <run_jog_mode+0x5d4>)
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	e9c1 2300 	strd	r2, r3, [r1]
 800215e:	e0b0      	b.n	80022c2 <run_jog_mode+0x59e>
//			currentOrder += 1;
		}
	}
	else if(jogModeState == Place){
 8002160:	4b61      	ldr	r3, [pc, #388]	@ (80022e8 <run_jog_mode+0x5c4>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	1ed1      	subs	r1, r2, #3
 8002168:	430b      	orrs	r3, r1
 800216a:	f040 80aa 	bne.w	80022c2 <run_jog_mode+0x59e>
		if(jogMode_timeStamp -1200 < tickk){
 800216e:	4b5f      	ldr	r3, [pc, #380]	@ (80022ec <run_jog_mode+0x5c8>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f5b2 6196 	subs.w	r1, r2, #1200	@ 0x4b0
 8002178:	61b9      	str	r1, [r7, #24]
 800217a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	4b5b      	ldr	r3, [pc, #364]	@ (80022f0 <run_jog_mode+0x5cc>)
 8002182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002186:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800218a:	4621      	mov	r1, r4
 800218c:	4291      	cmp	r1, r2
 800218e:	4629      	mov	r1, r5
 8002190:	4199      	sbcs	r1, r3
 8002192:	d20a      	bcs.n	80021aa <run_jog_mode+0x486>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2101      	movs	r1, #1
 8002198:	4856      	ldr	r0, [pc, #344]	@ (80022f4 <run_jog_mode+0x5d0>)
 800219a:	f004 f9bf 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2102      	movs	r1, #2
 80021a2:	4854      	ldr	r0, [pc, #336]	@ (80022f4 <run_jog_mode+0x5d0>)
 80021a4:	f004 f9ba 	bl	800651c <HAL_GPIO_WritePin>
 80021a8:	e05e      	b.n	8002268 <run_jog_mode+0x544>
		}
		else if(jogMode_timeStamp - 900 < tickk){
 80021aa:	4b50      	ldr	r3, [pc, #320]	@ (80022ec <run_jog_mode+0x5c8>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f5b2 7161 	subs.w	r1, r2, #900	@ 0x384
 80021b4:	6139      	str	r1, [r7, #16]
 80021b6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	4b4c      	ldr	r3, [pc, #304]	@ (80022f0 <run_jog_mode+0x5cc>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80021c6:	4621      	mov	r1, r4
 80021c8:	4291      	cmp	r1, r2
 80021ca:	4629      	mov	r1, r5
 80021cc:	4199      	sbcs	r1, r3
 80021ce:	d20a      	bcs.n	80021e6 <run_jog_mode+0x4c2>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80021d0:	2201      	movs	r2, #1
 80021d2:	2101      	movs	r1, #1
 80021d4:	4847      	ldr	r0, [pc, #284]	@ (80022f4 <run_jog_mode+0x5d0>)
 80021d6:	f004 f9a1 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2102      	movs	r1, #2
 80021de:	4845      	ldr	r0, [pc, #276]	@ (80022f4 <run_jog_mode+0x5d0>)
 80021e0:	f004 f99c 	bl	800651c <HAL_GPIO_WritePin>
 80021e4:	e040      	b.n	8002268 <run_jog_mode+0x544>
		}
		else if(jogMode_timeStamp - 700 < tickk){
 80021e6:	4b41      	ldr	r3, [pc, #260]	@ (80022ec <run_jog_mode+0x5c8>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f5b2 712f 	subs.w	r1, r2, #700	@ 0x2bc
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	4b3d      	ldr	r3, [pc, #244]	@ (80022f0 <run_jog_mode+0x5cc>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002202:	4621      	mov	r1, r4
 8002204:	4291      	cmp	r1, r2
 8002206:	4629      	mov	r1, r5
 8002208:	4199      	sbcs	r1, r3
 800220a:	d20a      	bcs.n	8002222 <run_jog_mode+0x4fe>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 800220c:	2201      	movs	r2, #1
 800220e:	2102      	movs	r1, #2
 8002210:	4838      	ldr	r0, [pc, #224]	@ (80022f4 <run_jog_mode+0x5d0>)
 8002212:	f004 f983 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8002216:	2201      	movs	r2, #1
 8002218:	2101      	movs	r1, #1
 800221a:	4836      	ldr	r0, [pc, #216]	@ (80022f4 <run_jog_mode+0x5d0>)
 800221c:	f004 f97e 	bl	800651c <HAL_GPIO_WritePin>
 8002220:	e022      	b.n	8002268 <run_jog_mode+0x544>
		}
		else if(jogMode_timeStamp - 500 < tickk){
 8002222:	4b32      	ldr	r3, [pc, #200]	@ (80022ec <run_jog_mode+0x5c8>)
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	f5b2 7afa 	subs.w	sl, r2, #500	@ 0x1f4
 800222c:	f143 3bff 	adc.w	fp, r3, #4294967295
 8002230:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <run_jog_mode+0x5cc>)
 8002232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002236:	4592      	cmp	sl, r2
 8002238:	eb7b 0303 	sbcs.w	r3, fp, r3
 800223c:	d205      	bcs.n	800224a <run_jog_mode+0x526>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2101      	movs	r1, #1
 8002242:	482c      	ldr	r0, [pc, #176]	@ (80022f4 <run_jog_mode+0x5d0>)
 8002244:	f004 f96a 	bl	800651c <HAL_GPIO_WritePin>
 8002248:	e00e      	b.n	8002268 <run_jog_mode+0x544>
		}
		else if(jogMode_timeStamp > tickk){
 800224a:	4b28      	ldr	r3, [pc, #160]	@ (80022ec <run_jog_mode+0x5c8>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	4927      	ldr	r1, [pc, #156]	@ (80022f0 <run_jog_mode+0x5cc>)
 8002252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002256:	4290      	cmp	r0, r2
 8002258:	eb71 0303 	sbcs.w	r3, r1, r3
 800225c:	d204      	bcs.n	8002268 <run_jog_mode+0x544>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2102      	movs	r1, #2
 8002262:	4824      	ldr	r0, [pc, #144]	@ (80022f4 <run_jog_mode+0x5d0>)
 8002264:	f004 f95a 	bl	800651c <HAL_GPIO_WritePin>
		}
		if(jogMode_timeStamp < tickk){
 8002268:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <run_jog_mode+0x5c8>)
 800226a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800226e:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <run_jog_mode+0x5cc>)
 8002270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002274:	4290      	cmp	r0, r2
 8002276:	eb71 0303 	sbcs.w	r3, r1, r3
 800227a:	d222      	bcs.n	80022c2 <run_jog_mode+0x59e>
			jogModeState = goPick;
 800227c:	491a      	ldr	r1, [pc, #104]	@ (80022e8 <run_jog_mode+0x5c4>)
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	e9c1 2300 	strd	r2, r3, [r1]
			jogMode_trig = 0;
 800228a:	491b      	ldr	r1, [pc, #108]	@ (80022f8 <run_jog_mode+0x5d4>)
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9c1 2300 	strd	r2, r3, [r1]
			jogMode_timeStamp = tickk + 2500;
 8002298:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <run_jog_mode+0x5cc>)
 800229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229e:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80022a2:	1851      	adds	r1, r2, r1
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	f143 0300 	adc.w	r3, r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <run_jog_mode+0x5c8>)
 80022ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80022b2:	e9c3 1200 	strd	r1, r2, [r3]
			currentOrder += 1;
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <run_jog_mode+0x5dc>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <run_jog_mode+0x5dc>)
 80022c0:	801a      	strh	r2, [r3, #0]
		}
	}

	if(currentOrder == 5){
 80022c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <run_jog_mode+0x5dc>)
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	d108      	bne.n	80022dc <run_jog_mode+0x5b8>
		registerFrame[0x10].U16 = 0;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <run_jog_mode+0x5d8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	841a      	strh	r2, [r3, #32]
		modeSelection = 0;
 80022d0:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <run_jog_mode+0x5f0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
		currentOrder = 0;
 80022d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <run_jog_mode+0x5dc>)
 80022d8:	2200      	movs	r2, #0
 80022da:	801a      	strh	r2, [r3, #0]
	}

}
 80022dc:	bf00      	nop
 80022de:	3740      	adds	r7, #64	@ 0x40
 80022e0:	46bd      	mov	sp, r7
 80022e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022e6:	bf00      	nop
 80022e8:	20000510 	.word	0x20000510
 80022ec:	20000518 	.word	0x20000518
 80022f0:	200004b0 	.word	0x200004b0
 80022f4:	48000800 	.word	0x48000800
 80022f8:	20000508 	.word	0x20000508
 80022fc:	200002a8 	.word	0x200002a8
 8002300:	2000045e 	.word	0x2000045e
 8002304:	20000454 	.word	0x20000454
 8002308:	20000460 	.word	0x20000460
 800230c:	2000057c 	.word	0x2000057c
 8002310:	20000598 	.word	0x20000598
 8002314:	20000438 	.word	0x20000438

08002318 <p2On>:

void p2On(){
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2110      	movs	r1, #16
 8002320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002324:	f004 f8fa 	bl	800651c <HAL_GPIO_WritePin>
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <p1On>:

void p1On(){
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2101      	movs	r1, #1
 8002334:	4802      	ldr	r0, [pc, #8]	@ (8002340 <p1On+0x14>)
 8002336:	f004 f8f1 	bl	800651c <HAL_GPIO_WritePin>
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	48000400 	.word	0x48000400

08002344 <p2Off>:

void p2Off(){
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002348:	2201      	movs	r2, #1
 800234a:	2110      	movs	r1, #16
 800234c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002350:	f004 f8e4 	bl	800651c <HAL_GPIO_WritePin>
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <p1Off>:

void p1Off(){
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800235c:	2201      	movs	r2, #1
 800235e:	2101      	movs	r1, #1
 8002360:	4802      	ldr	r0, [pc, #8]	@ (800236c <p1Off+0x14>)
 8002362:	f004 f8db 	bl	800651c <HAL_GPIO_WritePin>
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	48000400 	.word	0x48000400

08002370 <p2Blink>:

void p2Blink(){
 8002370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002374:	af00      	add	r7, sp, #0
	if(p2_timeStamp <= tickk){
 8002376:	4b19      	ldr	r3, [pc, #100]	@ (80023dc <p2Blink+0x6c>)
 8002378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237c:	4e18      	ldr	r6, [pc, #96]	@ (80023e0 <p2Blink+0x70>)
 800237e:	e9d6 8900 	ldrd	r8, r9, [r6]
 8002382:	4590      	cmp	r8, r2
 8002384:	eb79 0303 	sbcs.w	r3, r9, r3
 8002388:	d325      	bcc.n	80023d6 <p2Blink+0x66>
		p2_trig = (p2_trig + 1) %2;
 800238a:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <p2Blink+0x74>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	1c50      	adds	r0, r2, #1
 8002392:	f143 0100 	adc.w	r1, r3, #0
 8002396:	f000 0a01 	and.w	sl, r0, #1
 800239a:	f04f 0b00 	mov.w	fp, #0
 800239e:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <p2Blink+0x74>)
 80023a0:	e9c3 ab00 	strd	sl, fp, [r3]
		if(p2_trig) p2On();
 80023a4:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <p2Blink+0x74>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	d002      	beq.n	80023b4 <p2Blink+0x44>
 80023ae:	f7ff ffb3 	bl	8002318 <p2On>
 80023b2:	e006      	b.n	80023c2 <p2Blink+0x52>
		else if(!p2_trig) p2Off();
 80023b4:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <p2Blink+0x74>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	d101      	bne.n	80023c2 <p2Blink+0x52>
 80023be:	f7ff ffc1 	bl	8002344 <p2Off>
		p2_timeStamp = tickk + 500;
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <p2Blink+0x70>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f512 74fa 	adds.w	r4, r2, #500	@ 0x1f4
 80023cc:	f143 0500 	adc.w	r5, r3, #0
 80023d0:	4b02      	ldr	r3, [pc, #8]	@ (80023dc <p2Blink+0x6c>)
 80023d2:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80023d6:	bf00      	nop
 80023d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023dc:	20000208 	.word	0x20000208
 80023e0:	200004b0 	.word	0x200004b0
 80023e4:	20000590 	.word	0x20000590

080023e8 <p1Blink>:

void p1Blink(){
 80023e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ec:	af00      	add	r7, sp, #0
	if(p1_timeStamp <= tickk){
 80023ee:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <p1Blink+0x6c>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	4e18      	ldr	r6, [pc, #96]	@ (8002458 <p1Blink+0x70>)
 80023f6:	e9d6 8900 	ldrd	r8, r9, [r6]
 80023fa:	4590      	cmp	r8, r2
 80023fc:	eb79 0303 	sbcs.w	r3, r9, r3
 8002400:	d325      	bcc.n	800244e <p1Blink+0x66>
		p1_trig = (p1_trig + 1) %2;
 8002402:	4b16      	ldr	r3, [pc, #88]	@ (800245c <p1Blink+0x74>)
 8002404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002408:	1c50      	adds	r0, r2, #1
 800240a:	f143 0100 	adc.w	r1, r3, #0
 800240e:	f000 0a01 	and.w	sl, r0, #1
 8002412:	f04f 0b00 	mov.w	fp, #0
 8002416:	4b11      	ldr	r3, [pc, #68]	@ (800245c <p1Blink+0x74>)
 8002418:	e9c3 ab00 	strd	sl, fp, [r3]
		if(p1_trig) p1On();
 800241c:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <p1Blink+0x74>)
 800241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002422:	4313      	orrs	r3, r2
 8002424:	d002      	beq.n	800242c <p1Blink+0x44>
 8002426:	f7ff ff81 	bl	800232c <p1On>
 800242a:	e006      	b.n	800243a <p1Blink+0x52>
		else if(!p1_trig) p1Off();
 800242c:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <p1Blink+0x74>)
 800242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002432:	4313      	orrs	r3, r2
 8002434:	d101      	bne.n	800243a <p1Blink+0x52>
 8002436:	f7ff ff8f 	bl	8002358 <p1Off>
		p1_timeStamp = tickk + 500;
 800243a:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <p1Blink+0x70>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f512 74fa 	adds.w	r4, r2, #500	@ 0x1f4
 8002444:	f143 0500 	adc.w	r5, r3, #0
 8002448:	4b02      	ldr	r3, [pc, #8]	@ (8002454 <p1Blink+0x6c>)
 800244a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800244e:	bf00      	nop
 8002450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002454:	20000200 	.word	0x20000200
 8002458:	200004b0 	.word	0x200004b0
 800245c:	20000588 	.word	0x20000588

08002460 <readLead>:
 */
#include <stdio.h>
#include <math.h>
#include "globalVar.h"

void readLead(){
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
	leadMin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8002464:	2180      	movs	r1, #128	@ 0x80
 8002466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800246a:	f004 f83f 	bl	80064ec <HAL_GPIO_ReadPin>
 800246e:	4603      	mov	r3, r0
 8002470:	461a      	mov	r2, r3
 8002472:	4b27      	ldr	r3, [pc, #156]	@ (8002510 <readLead+0xb0>)
 8002474:	701a      	strb	r2, [r3, #0]
	leadMax = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8002476:	2140      	movs	r1, #64	@ 0x40
 8002478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800247c:	f004 f836 	bl	80064ec <HAL_GPIO_ReadPin>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	4b23      	ldr	r3, [pc, #140]	@ (8002514 <readLead+0xb4>)
 8002486:	701a      	strb	r2, [r3, #0]
	if(leadMin == 1 && leadMax == 0){
 8002488:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <readLead+0xb0>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d107      	bne.n	80024a0 <readLead+0x40>
 8002490:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <readLead+0xb4>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <readLead+0x40>
		movementActualStatus = 1;
 8002498:	4b1f      	ldr	r3, [pc, #124]	@ (8002518 <readLead+0xb8>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	e00e      	b.n	80024be <readLead+0x5e>
	}
	else if(leadMin == 0 && leadMax == 1){
 80024a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <readLead+0xb0>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d107      	bne.n	80024b8 <readLead+0x58>
 80024a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <readLead+0xb4>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d103      	bne.n	80024b8 <readLead+0x58>
		movementActualStatus = 2;
 80024b0:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <readLead+0xb8>)
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e002      	b.n	80024be <readLead+0x5e>
	}
	else{
		movementActualStatus = 0;
 80024b8:	4b17      	ldr	r3, [pc, #92]	@ (8002518 <readLead+0xb8>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
	}

	if(registerFrame[0x02].U16 == 1){
 80024be:	4b17      	ldr	r3, [pc, #92]	@ (800251c <readLead+0xbc>)
 80024c0:	889b      	ldrh	r3, [r3, #4]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d105      	bne.n	80024d2 <readLead+0x72>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2102      	movs	r1, #2
 80024ca:	4815      	ldr	r0, [pc, #84]	@ (8002520 <readLead+0xc0>)
 80024cc:	f004 f826 	bl	800651c <HAL_GPIO_WritePin>
 80024d0:	e008      	b.n	80024e4 <readLead+0x84>
	}
	else if(registerFrame[0x02].U16 == 0){
 80024d2:	4b12      	ldr	r3, [pc, #72]	@ (800251c <readLead+0xbc>)
 80024d4:	889b      	ldrh	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <readLead+0x84>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80024da:	2201      	movs	r2, #1
 80024dc:	2102      	movs	r1, #2
 80024de:	4810      	ldr	r0, [pc, #64]	@ (8002520 <readLead+0xc0>)
 80024e0:	f004 f81c 	bl	800651c <HAL_GPIO_WritePin>
	}

	if(registerFrame[0x03].U16 == 1){
 80024e4:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <readLead+0xbc>)
 80024e6:	88db      	ldrh	r3, [r3, #6]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d105      	bne.n	80024f8 <readLead+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2101      	movs	r1, #1
 80024f0:	480b      	ldr	r0, [pc, #44]	@ (8002520 <readLead+0xc0>)
 80024f2:	f004 f813 	bl	800651c <HAL_GPIO_WritePin>
	}
	else if(registerFrame[0x03].U16 == 0){
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
	}
}
 80024f6:	e008      	b.n	800250a <readLead+0xaa>
	else if(registerFrame[0x03].U16 == 0){
 80024f8:	4b08      	ldr	r3, [pc, #32]	@ (800251c <readLead+0xbc>)
 80024fa:	88db      	ldrh	r3, [r3, #6]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <readLead+0xaa>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8002500:	2201      	movs	r2, #1
 8002502:	2101      	movs	r1, #1
 8002504:	4806      	ldr	r0, [pc, #24]	@ (8002520 <readLead+0xc0>)
 8002506:	f004 f809 	bl	800651c <HAL_GPIO_WritePin>
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000578 	.word	0x20000578
 8002514:	20000579 	.word	0x20000579
 8002518:	20000439 	.word	0x20000439
 800251c:	200002a8 	.word	0x200002a8
 8002520:	48000800 	.word	0x48000800

08002524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002528:	b092      	sub	sp, #72	@ 0x48
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800252c:	f003 f9a9 	bl	8005882 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002530:	f000 fa06 	bl	8002940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002534:	f000 fed4 	bl	80032e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002538:	f000 fea0 	bl	800327c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800253c:	f000 fe50 	bl	80031e0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8002540:	f000 fd60 	bl	8003004 <MX_TIM16_Init>
  MX_TIM2_Init();
 8002544:	f000 faa2 	bl	8002a8c <MX_TIM2_Init>
  MX_TIM1_Init();
 8002548:	f000 fa46 	bl	80029d8 <MX_TIM1_Init>
  MX_TIM8_Init();
 800254c:	f000 fc9c 	bl	8002e88 <MX_TIM8_Init>
  MX_TIM20_Init();
 8002550:	f000 fd88 	bl	8003064 <MX_TIM20_Init>
  MX_TIM5_Init();
 8002554:	f000 fc20 	bl	8002d98 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002558:	f000 fb82 	bl	8002c60 <MX_TIM4_Init>
  MX_TIM3_Init();
 800255c:	f000 fae4 	bl	8002b28 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8002560:	4a72      	ldr	r2, [pc, #456]	@ (800272c <main+0x208>)
 8002562:	4b73      	ldr	r3, [pc, #460]	@ (8002730 <main+0x20c>)
 8002564:	60d3      	str	r3, [r2, #12]
  hmodbus.htim = &htim16;
 8002566:	4a71      	ldr	r2, [pc, #452]	@ (800272c <main+0x208>)
 8002568:	4b72      	ldr	r3, [pc, #456]	@ (8002734 <main+0x210>)
 800256a:	6113      	str	r3, [r2, #16]
  hmodbus.slaveAddress = 0x15;
 800256c:	4a6f      	ldr	r2, [pc, #444]	@ (800272c <main+0x208>)
 800256e:	2315      	movs	r3, #21
 8002570:	7013      	strb	r3, [r2, #0]
  hmodbus.RegisterSize = 200;
 8002572:	4a6e      	ldr	r2, [pc, #440]	@ (800272c <main+0x208>)
 8002574:	23c8      	movs	r3, #200	@ 0xc8
 8002576:	6093      	str	r3, [r2, #8]
  Modbus_init(&hmodbus, registerFrame);
 8002578:	496f      	ldr	r1, [pc, #444]	@ (8002738 <main+0x214>)
 800257a:	486c      	ldr	r0, [pc, #432]	@ (800272c <main+0x208>)
 800257c:	f7fe fe0e 	bl	800119c <Modbus_init>

  HAL_TIM_Base_Start_IT(&htim2);
 8002580:	486e      	ldr	r0, [pc, #440]	@ (800273c <main+0x218>)
 8002582:	f005 f90b 	bl	800779c <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8002586:	213c      	movs	r1, #60	@ 0x3c
 8002588:	486d      	ldr	r0, [pc, #436]	@ (8002740 <main+0x21c>)
 800258a:	f005 fe1b 	bl	80081c4 <HAL_TIM_Encoder_Start>
//
  HAL_TIM_Base_Start(&htim5);
 800258e:	486d      	ldr	r0, [pc, #436]	@ (8002744 <main+0x220>)
 8002590:	f005 f894 	bl	80076bc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002594:	2104      	movs	r1, #4
 8002596:	486b      	ldr	r0, [pc, #428]	@ (8002744 <main+0x220>)
 8002598:	f005 f9e6 	bl	8007968 <HAL_TIM_PWM_Start>

  trajec_target = -10;
 800259c:	4a6a      	ldr	r2, [pc, #424]	@ (8002748 <main+0x224>)
 800259e:	4b6b      	ldr	r3, [pc, #428]	@ (800274c <main+0x228>)
 80025a0:	6013      	str	r3, [r2, #0]
//
//  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);

  arm_pid_instance_f32 PID = {0};
 80025a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80025a6:	2324      	movs	r3, #36	@ 0x24
 80025a8:	461a      	mov	r2, r3
 80025aa:	2100      	movs	r1, #0
 80025ac:	f009 fc0e 	bl	800bdcc <memset>
  PID.Kp = 0.4;
 80025b0:	4b67      	ldr	r3, [pc, #412]	@ (8002750 <main+0x22c>)
 80025b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PID.Ki = 0.0001;
 80025b4:	4b67      	ldr	r3, [pc, #412]	@ (8002754 <main+0x230>)
 80025b6:	643b      	str	r3, [r7, #64]	@ 0x40
  PID.Kd = 0;
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	647b      	str	r3, [r7, #68]	@ 0x44
  arm_pid_init_f32(&PID, 0);
 80025be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f009 fbcb 	bl	800bd60 <arm_pid_init_f32>

//  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_3);
//  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_4);
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 80025ca:	2100      	movs	r1, #0
 80025cc:	4862      	ldr	r0, [pc, #392]	@ (8002758 <main+0x234>)
 80025ce:	f005 fb4b 	bl	8007c68 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 80025d2:	2104      	movs	r1, #4
 80025d4:	4860      	ldr	r0, [pc, #384]	@ (8002758 <main+0x234>)
 80025d6:	f005 fb47 	bl	8007c68 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 80025da:	2100      	movs	r1, #0
 80025dc:	485f      	ldr	r0, [pc, #380]	@ (800275c <main+0x238>)
 80025de:	f005 fb43 	bl	8007c68 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 80025e2:	2104      	movs	r1, #4
 80025e4:	485d      	ldr	r0, [pc, #372]	@ (800275c <main+0x238>)
 80025e6:	f005 fb3f 	bl	8007c68 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 80025ea:	2100      	movs	r1, #0
 80025ec:	485c      	ldr	r0, [pc, #368]	@ (8002760 <main+0x23c>)
 80025ee:	f005 fb3b 	bl	8007c68 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 80025f2:	2104      	movs	r1, #4
 80025f4:	485a      	ldr	r0, [pc, #360]	@ (8002760 <main+0x23c>)
 80025f6:	f005 fb37 	bl	8007c68 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_3);
 80025fa:	2108      	movs	r1, #8
 80025fc:	4858      	ldr	r0, [pc, #352]	@ (8002760 <main+0x23c>)
 80025fe:	f005 fb33 	bl	8007c68 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_4);
 8002602:	210c      	movs	r1, #12
 8002604:	4856      	ldr	r0, [pc, #344]	@ (8002760 <main+0x23c>)
 8002606:	f005 fb2f 	bl	8007c68 <HAL_TIM_IC_Start>
//  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_1);
//  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_2);
  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_1);
 800260a:	2100      	movs	r1, #0
 800260c:	4855      	ldr	r0, [pc, #340]	@ (8002764 <main+0x240>)
 800260e:	f005 fb2b 	bl	8007c68 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_2);
 8002612:	2104      	movs	r1, #4
 8002614:	4853      	ldr	r0, [pc, #332]	@ (8002764 <main+0x240>)
 8002616:	f005 fb27 	bl	8007c68 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_3);
 800261a:	2108      	movs	r1, #8
 800261c:	4851      	ldr	r0, [pc, #324]	@ (8002764 <main+0x240>)
 800261e:	f005 fb23 	bl	8007c68 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_4);
 8002622:	210c      	movs	r1, #12
 8002624:	484f      	ldr	r0, [pc, #316]	@ (8002764 <main+0x240>)
 8002626:	f005 fb1f 	bl	8007c68 <HAL_TIM_IC_Start>
//
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 2);
  p1_timeStamp = HAL_GetTick();
 800262a:	f003 f98f 	bl	800594c <HAL_GetTick>
 800262e:	4603      	mov	r3, r0
 8002630:	2200      	movs	r2, #0
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	61fa      	str	r2, [r7, #28]
 8002636:	4b4c      	ldr	r3, [pc, #304]	@ (8002768 <main+0x244>)
 8002638:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800263c:	e9c3 1200 	strd	r1, r2, [r3]
  p2_timeStamp = HAL_GetTick();
 8002640:	f003 f984 	bl	800594c <HAL_GetTick>
 8002644:	4603      	mov	r3, r0
 8002646:	2200      	movs	r2, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	617a      	str	r2, [r7, #20]
 800264c:	4b47      	ldr	r3, [pc, #284]	@ (800276c <main+0x248>)
 800264e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002652:	e9c3 1200 	strd	r1, r2, [r3]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(modBusTimeStamp < HAL_GetTick()){
 8002656:	f003 f979 	bl	800594c <HAL_GetTick>
 800265a:	4603      	mov	r3, r0
 800265c:	2200      	movs	r2, #0
 800265e:	461c      	mov	r4, r3
 8002660:	4615      	mov	r5, r2
 8002662:	4b43      	ldr	r3, [pc, #268]	@ (8002770 <main+0x24c>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	42a2      	cmp	r2, r4
 800266a:	41ab      	sbcs	r3, r5
 800266c:	d213      	bcs.n	8002696 <main+0x172>
		  registerFrame[0x00].U16 = 22881;
 800266e:	4b32      	ldr	r3, [pc, #200]	@ (8002738 <main+0x214>)
 8002670:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002674:	801a      	strh	r2, [r3, #0]
		  sendall();
 8002676:	f7ff f887 	bl	8001788 <sendall>
		  modBusTimeStamp += 200;
 800267a:	4b3d      	ldr	r3, [pc, #244]	@ (8002770 <main+0x24c>)
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	f143 0300 	adc.w	r3, r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	4b38      	ldr	r3, [pc, #224]	@ (8002770 <main+0x24c>)
 800268e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002692:	e9c3 1200 	strd	r1, r2, [r3]
	  }


	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim1);
 8002696:	4b2a      	ldr	r3, [pc, #168]	@ (8002740 <main+0x21c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	4a35      	ldr	r2, [pc, #212]	@ (8002774 <main+0x250>)
 800269e:	6013      	str	r3, [r2, #0]
	  QEI_raw = QEIReadRaw;
 80026a0:	4b34      	ldr	r3, [pc, #208]	@ (8002774 <main+0x250>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a34      	ldr	r2, [pc, #208]	@ (8002778 <main+0x254>)
 80026a6:	6013      	str	r3, [r2, #0]
	  QEIdata.QEIRead[0] = QEIReadRaw;
 80026a8:	4b32      	ldr	r3, [pc, #200]	@ (8002774 <main+0x250>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a33      	ldr	r2, [pc, #204]	@ (800277c <main+0x258>)
 80026ae:	6013      	str	r3, [r2, #0]

	  Modbus_Protocal_Worker();
 80026b0:	f7fe fe00 	bl	80012b4 <Modbus_Protocal_Worker>
	  is_motor_should_run();
 80026b4:	f002 fd28 	bl	8005108 <is_motor_should_run>
	  readLimit();
 80026b8:	f002 fd6a 	bl	8005190 <readLimit>
	  changeUnit();
 80026bc:	f001 fb9c 	bl	8003df8 <changeUnit>

	  linearPos = QEI_mm;
 80026c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002780 <main+0x25c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002784 <main+0x260>)
 80026c6:	6013      	str	r3, [r2, #0]

	  Emer = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 80026c8:	2180      	movs	r1, #128	@ 0x80
 80026ca:	482f      	ldr	r0, [pc, #188]	@ (8002788 <main+0x264>)
 80026cc:	f003 ff0e 	bl	80064ec <HAL_GPIO_ReadPin>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b2d      	ldr	r3, [pc, #180]	@ (800278c <main+0x268>)
 80026d6:	801a      	strh	r2, [r3, #0]
	  tickk = HAL_GetTick();
 80026d8:	f003 f938 	bl	800594c <HAL_GetTick>
 80026dc:	4603      	mov	r3, r0
 80026de:	2200      	movs	r2, #0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002790 <main+0x26c>)
 80026e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80026ea:	e9c3 1200 	strd	r1, r2, [r3]

	  if(Emer == 0){
 80026ee:	4b27      	ldr	r3, [pc, #156]	@ (800278c <main+0x268>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d154      	bne.n	80027a0 <main+0x27c>
		  readLead();
 80026f6:	f7ff feb3 	bl	8002460 <readLead>
		  motor_run(0, 3);
 80026fa:	2203      	movs	r2, #3
 80026fc:	f04f 0000 	mov.w	r0, #0
 8002700:	f04f 0100 	mov.w	r1, #0
 8002704:	f000 feaa 	bl	800345c <motor_run>
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
		  registerFrame[0x10].U16 = 0;
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <main+0x214>)
 800270a:	2200      	movs	r2, #0
 800270c:	841a      	strh	r2, [r3, #32]
		  modeSelection = 0;
 800270e:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <main+0x270>)
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
		  jogModeState = goPick;
 8002714:	4920      	ldr	r1, [pc, #128]	@ (8002798 <main+0x274>)
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9c1 2300 	strd	r2, r3, [r1]
		  currentOrder = 0;
 8002722:	4b1e      	ldr	r3, [pc, #120]	@ (800279c <main+0x278>)
 8002724:	2200      	movs	r2, #0
 8002726:	801a      	strh	r2, [r3, #0]
 8002728:	e0ba      	b.n	80028a0 <main+0x37c>
 800272a:	bf00      	nop
 800272c:	20000d88 	.word	0x20000d88
 8002730:	20000bfc 	.word	0x20000bfc
 8002734:	20000a64 	.word	0x20000a64
 8002738:	200002a8 	.word	0x200002a8
 800273c:	20000668 	.word	0x20000668
 8002740:	2000059c 	.word	0x2000059c
 8002744:	200008cc 	.word	0x200008cc
 8002748:	2000057c 	.word	0x2000057c
 800274c:	c1200000 	.word	0xc1200000
 8002750:	3ecccccd 	.word	0x3ecccccd
 8002754:	38d1b717 	.word	0x38d1b717
 8002758:	20000734 	.word	0x20000734
 800275c:	20000800 	.word	0x20000800
 8002760:	20000998 	.word	0x20000998
 8002764:	20000b30 	.word	0x20000b30
 8002768:	20000200 	.word	0x20000200
 800276c:	20000208 	.word	0x20000208
 8002770:	20000580 	.word	0x20000580
 8002774:	20000490 	.word	0x20000490
 8002778:	2000126c 	.word	0x2000126c
 800277c:	20001260 	.word	0x20001260
 8002780:	20001270 	.word	0x20001270
 8002784:	20000494 	.word	0x20000494
 8002788:	48000800 	.word	0x48000800
 800278c:	2000057a 	.word	0x2000057a
 8002790:	200004b0 	.word	0x200004b0
 8002794:	20000438 	.word	0x20000438
 8002798:	20000510 	.word	0x20000510
 800279c:	2000045e 	.word	0x2000045e
	  }
	  else{
		  readLead();
 80027a0:	f7ff fe5e 	bl	8002460 <readLead>
		  remote_recieve();
 80027a4:	f000 ff2c 	bl	8003600 <remote_recieve>
		  watch_mode();
 80027a8:	f7ff f87a 	bl	80018a0 <watch_mode>
		  go_point();
 80027ac:	f001 f9a4 	bl	8003af8 <go_point>
//		  z_axis_control_by_remote();

		  if(home_trigger == 1){
 80027b0:	4b4f      	ldr	r3, [pc, #316]	@ (80028f0 <main+0x3cc>)
 80027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b6:	1e51      	subs	r1, r2, #1
 80027b8:	430b      	orrs	r3, r1
 80027ba:	d127      	bne.n	800280c <main+0x2e8>
			  if(home_timeStamp < HAL_GetTick()){
 80027bc:	f003 f8c6 	bl	800594c <HAL_GetTick>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2200      	movs	r2, #0
 80027c4:	4698      	mov	r8, r3
 80027c6:	4691      	mov	r9, r2
 80027c8:	4b4a      	ldr	r3, [pc, #296]	@ (80028f4 <main+0x3d0>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	4542      	cmp	r2, r8
 80027d0:	eb73 0309 	sbcs.w	r3, r3, r9
 80027d4:	d21a      	bcs.n	800280c <main+0x2e8>
		  		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80027d6:	4b48      	ldr	r3, [pc, #288]	@ (80028f8 <main+0x3d4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2200      	movs	r2, #0
 80027dc:	625a      	str	r2, [r3, #36]	@ 0x24
		  		QEIReadRaw = 0;
 80027de:	4b47      	ldr	r3, [pc, #284]	@ (80028fc <main+0x3d8>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
		  		home_trigger = 0;
 80027e4:	4942      	ldr	r1, [pc, #264]	@ (80028f0 <main+0x3cc>)
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9c1 2300 	strd	r2, r3, [r1]
		  		xAxisPosition = 0;
 80027f2:	4b43      	ldr	r3, [pc, #268]	@ (8002900 <main+0x3dc>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
		  		zMovingStatus = 0;
 80027f8:	4b42      	ldr	r3, [pc, #264]	@ (8002904 <main+0x3e0>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
		  		home_trig = 0;
 80027fe:	4b42      	ldr	r3, [pc, #264]	@ (8002908 <main+0x3e4>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]

		  		p1Off();
 8002804:	f7ff fda8 	bl	8002358 <p1Off>
		  		p2Off();
 8002808:	f7ff fd9c 	bl	8002344 <p2Off>
			  }
		  }
		  if(pointMode_timeTrig == 1){
 800280c:	4b3f      	ldr	r3, [pc, #252]	@ (800290c <main+0x3e8>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	1e51      	subs	r1, r2, #1
 8002814:	430b      	orrs	r3, r1
 8002816:	d119      	bne.n	800284c <main+0x328>
			  if(pointMode_timeStamp < HAL_GetTick()){
 8002818:	f003 f898 	bl	800594c <HAL_GetTick>
 800281c:	4603      	mov	r3, r0
 800281e:	2200      	movs	r2, #0
 8002820:	469a      	mov	sl, r3
 8002822:	4693      	mov	fp, r2
 8002824:	4b3a      	ldr	r3, [pc, #232]	@ (8002910 <main+0x3ec>)
 8002826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282a:	4552      	cmp	r2, sl
 800282c:	eb73 030b 	sbcs.w	r3, r3, fp
 8002830:	d20c      	bcs.n	800284c <main+0x328>
				  pointMode_timeTrig = 0;
 8002832:	4936      	ldr	r1, [pc, #216]	@ (800290c <main+0x3e8>)
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9c1 2300 	strd	r2, r3, [r1]
				  zMovingStatus = 0;
 8002840:	4b30      	ldr	r3, [pc, #192]	@ (8002904 <main+0x3e0>)
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
				  goalPointZ = 0;
 8002846:	4b33      	ldr	r3, [pc, #204]	@ (8002914 <main+0x3f0>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
			  }
		  }

		  if(trajec_target >= 0 && trajec_state == 0){
 800284c:	4b32      	ldr	r3, [pc, #200]	@ (8002918 <main+0x3f4>)
 800284e:	edd3 7a00 	vldr	s15, [r3]
 8002852:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285a:	db07      	blt.n	800286c <main+0x348>
 800285c:	4b2f      	ldr	r3, [pc, #188]	@ (800291c <main+0x3f8>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d103      	bne.n	800286c <main+0x348>
		  		QEI_start = QEI_mm;
 8002864:	4b2e      	ldr	r3, [pc, #184]	@ (8002920 <main+0x3fc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2e      	ldr	r2, [pc, #184]	@ (8002924 <main+0x400>)
 800286a:	6013      	str	r3, [r2, #0]
		  }
		  Trajectory();
 800286c:	f001 fdd6 	bl	800441c <Trajectory>
		  HomemadePID();
 8002870:	f001 fafe 	bl	8003e70 <HomemadePID>
		  speedread();
 8002874:	f001 f9fe 	bl	8003c74 <speedread>
		  accelread();
 8002878:	f001 fa5e 	bl	8003d38 <accelread>
//		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
//		  	}



		  zActualSpeed = speed;
 800287c:	4b2a      	ldr	r3, [pc, #168]	@ (8002928 <main+0x404>)
 800287e:	edd3 7a00 	vldr	s15, [r3]
 8002882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002886:	ee17 2a90 	vmov	r2, s15
 800288a:	4b28      	ldr	r3, [pc, #160]	@ (800292c <main+0x408>)
 800288c:	601a      	str	r2, [r3, #0]
		  zAccel = acc;
 800288e:	4b28      	ldr	r3, [pc, #160]	@ (8002930 <main+0x40c>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002898:	ee17 2a90 	vmov	r2, s15
 800289c:	4b25      	ldr	r3, [pc, #148]	@ (8002934 <main+0x410>)
 800289e:	601a      	str	r2, [r3, #0]

	  }
//	  init_motor_cal();
//	  remote_recieve();
//	  watch_mode();
	  abbs = QEIdata.QEIRead[0] - QEIdata.QEIRead[1];
 80028a0:	4b25      	ldr	r3, [pc, #148]	@ (8002938 <main+0x414>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b24      	ldr	r3, [pc, #144]	@ (8002938 <main+0x414>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b23      	ldr	r3, [pc, #140]	@ (800293c <main+0x418>)
 80028ae:	601a      	str	r2, [r3, #0]
	  if(abbs > 32767)
 80028b0:	4b22      	ldr	r3, [pc, #136]	@ (800293c <main+0x418>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028b8:	db07      	blt.n	80028ca <main+0x3a6>
//		  abbs -= 65535;
	  	  __HAL_TIM_SET_COUNTER(&htim1, QEIReadRaw - 65535);
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <main+0x3d8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a0e      	ldr	r2, [pc, #56]	@ (80028f8 <main+0x3d4>)
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 80028c6:	3bff      	subs	r3, #255	@ 0xff
 80028c8:	6253      	str	r3, [r2, #36]	@ 0x24
	  if(abbs < -32767)
 80028ca:	4b1c      	ldr	r3, [pc, #112]	@ (800293c <main+0x418>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80028d2:	dc07      	bgt.n	80028e4 <main+0x3c0>
//		  abbs += 65535;
	  	  __HAL_TIM_SET_COUNTER(&htim1, QEIReadRaw - 65535);
 80028d4:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <main+0x3d8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a07      	ldr	r2, [pc, #28]	@ (80028f8 <main+0x3d4>)
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 80028e0:	3bff      	subs	r3, #255	@ 0xff
 80028e2:	6253      	str	r3, [r2, #36]	@ 0x24

	  QEIdata.QEIRead[1] = QEIdata.QEIRead[0];
 80028e4:	4b14      	ldr	r3, [pc, #80]	@ (8002938 <main+0x414>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a13      	ldr	r2, [pc, #76]	@ (8002938 <main+0x414>)
 80028ea:	6053      	str	r3, [r2, #4]
  {
 80028ec:	e6b3      	b.n	8002656 <main+0x132>
 80028ee:	bf00      	nop
 80028f0:	200004c0 	.word	0x200004c0
 80028f4:	200004b8 	.word	0x200004b8
 80028f8:	2000059c 	.word	0x2000059c
 80028fc:	20000490 	.word	0x20000490
 8002900:	2000048c 	.word	0x2000048c
 8002904:	2000043c 	.word	0x2000043c
 8002908:	200004aa 	.word	0x200004aa
 800290c:	200004d0 	.word	0x200004d0
 8002910:	200004c8 	.word	0x200004c8
 8002914:	20000488 	.word	0x20000488
 8002918:	2000057c 	.word	0x2000057c
 800291c:	20001318 	.word	0x20001318
 8002920:	20001270 	.word	0x20001270
 8002924:	20001314 	.word	0x20001314
 8002928:	200012a8 	.word	0x200012a8
 800292c:	20000440 	.word	0x20000440
 8002930:	200012d0 	.word	0x200012d0
 8002934:	20000444 	.word	0x20000444
 8002938:	20001260 	.word	0x20001260
 800293c:	20001268 	.word	0x20001268

08002940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b094      	sub	sp, #80	@ 0x50
 8002944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002946:	f107 0318 	add.w	r3, r7, #24
 800294a:	2238      	movs	r2, #56	@ 0x38
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f009 fa3c 	bl	800bdcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]
 8002960:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002962:	2000      	movs	r0, #0
 8002964:	f003 fe16 	bl	8006594 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002968:	2302      	movs	r3, #2
 800296a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800296c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002972:	2340      	movs	r3, #64	@ 0x40
 8002974:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002976:	2302      	movs	r3, #2
 8002978:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800297a:	2302      	movs	r3, #2
 800297c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800297e:	2304      	movs	r3, #4
 8002980:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002982:	2355      	movs	r3, #85	@ 0x55
 8002984:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002986:	2302      	movs	r3, #2
 8002988:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800298a:	2302      	movs	r3, #2
 800298c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800298e:	2302      	movs	r3, #2
 8002990:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002992:	f107 0318 	add.w	r3, r7, #24
 8002996:	4618      	mov	r0, r3
 8002998:	f003 feb0 	bl	80066fc <HAL_RCC_OscConfig>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80029a2:	f002 fbab 	bl	80050fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029a6:	230f      	movs	r3, #15
 80029a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029aa:	2303      	movs	r3, #3
 80029ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	2104      	movs	r1, #4
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 f9ae 	bl	8006d20 <HAL_RCC_ClockConfig>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80029ca:	f002 fb97 	bl	80050fc <Error_Handler>
  }
}
 80029ce:	bf00      	nop
 80029d0:	3750      	adds	r7, #80	@ 0x50
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	@ 0x30
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	2224      	movs	r2, #36	@ 0x24
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f009 f9f0 	bl	800bdcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ec:	463b      	mov	r3, r7
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029f6:	4b23      	ldr	r3, [pc, #140]	@ (8002a84 <MX_TIM1_Init+0xac>)
 80029f8:	4a23      	ldr	r2, [pc, #140]	@ (8002a88 <MX_TIM1_Init+0xb0>)
 80029fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029fc:	4b21      	ldr	r3, [pc, #132]	@ (8002a84 <MX_TIM1_Init+0xac>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a02:	4b20      	ldr	r3, [pc, #128]	@ (8002a84 <MX_TIM1_Init+0xac>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a08:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <MX_TIM1_Init+0xac>)
 8002a0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a10:	4b1c      	ldr	r3, [pc, #112]	@ (8002a84 <MX_TIM1_Init+0xac>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a16:	4b1b      	ldr	r3, [pc, #108]	@ (8002a84 <MX_TIM1_Init+0xac>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1c:	4b19      	ldr	r3, [pc, #100]	@ (8002a84 <MX_TIM1_Init+0xac>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a22:	2303      	movs	r3, #3
 8002a24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8002a32:	2302      	movs	r3, #2
 8002a34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 8002a42:	2302      	movs	r3, #2
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002a46:	f107 030c 	add.w	r3, r7, #12
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	480d      	ldr	r0, [pc, #52]	@ (8002a84 <MX_TIM1_Init+0xac>)
 8002a4e:	f005 fb05 	bl	800805c <HAL_TIM_Encoder_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002a58:	f002 fb50 	bl	80050fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a60:	2300      	movs	r3, #0
 8002a62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a68:	463b      	mov	r3, r7
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	@ (8002a84 <MX_TIM1_Init+0xac>)
 8002a6e:	f007 f99d 	bl	8009dac <HAL_TIMEx_MasterConfigSynchronization>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002a78:	f002 fb40 	bl	80050fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	3730      	adds	r7, #48	@ 0x30
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	2000059c 	.word	0x2000059c
 8002a88:	40012c00 	.word	0x40012c00

08002a8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a92:	f107 0310 	add.w	r3, r7, #16
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
 8002aa8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <MX_TIM2_Init+0x98>)
 8002aac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ab0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b24 <MX_TIM2_Init+0x98>)
 8002ab4:	22a9      	movs	r2, #169	@ 0xa9
 8002ab6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <MX_TIM2_Init+0x98>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002abe:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <MX_TIM2_Init+0x98>)
 8002ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac6:	4b17      	ldr	r3, [pc, #92]	@ (8002b24 <MX_TIM2_Init+0x98>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002acc:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <MX_TIM2_Init+0x98>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ad2:	4814      	ldr	r0, [pc, #80]	@ (8002b24 <MX_TIM2_Init+0x98>)
 8002ad4:	f004 fd8e 	bl	80075f4 <HAL_TIM_Base_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002ade:	f002 fb0d 	bl	80050fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ae6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	4619      	mov	r1, r3
 8002aee:	480d      	ldr	r0, [pc, #52]	@ (8002b24 <MX_TIM2_Init+0x98>)
 8002af0:	f005 ff20 	bl	8008934 <HAL_TIM_ConfigClockSource>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002afa:	f002 faff 	bl	80050fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4806      	ldr	r0, [pc, #24]	@ (8002b24 <MX_TIM2_Init+0x98>)
 8002b0c:	f007 f94e 	bl	8009dac <HAL_TIMEx_MasterConfigSynchronization>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b16:	f002 faf1 	bl	80050fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b1a:	bf00      	nop
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000668 	.word	0x20000668

08002b28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b090      	sub	sp, #64	@ 0x40
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002b3c:	f107 031c 	add.w	r3, r7, #28
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4c:	f107 0310 	add.w	r3, r7, #16
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b58:	463b      	mov	r3, r7
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b64:	4b3c      	ldr	r3, [pc, #240]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002b66:	4a3d      	ldr	r2, [pc, #244]	@ (8002c5c <MX_TIM3_Init+0x134>)
 8002b68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8002b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002b6c:	22a9      	movs	r2, #169	@ 0xa9
 8002b6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b70:	4b39      	ldr	r3, [pc, #228]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b76:	4b38      	ldr	r3, [pc, #224]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002b78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7e:	4b36      	ldr	r3, [pc, #216]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b84:	4b34      	ldr	r3, [pc, #208]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b8a:	4833      	ldr	r0, [pc, #204]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002b8c:	f004 fd32 	bl	80075f4 <HAL_TIM_Base_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002b96:	f002 fab1 	bl	80050fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ba0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	482c      	ldr	r0, [pc, #176]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002ba8:	f005 fec4 	bl	8008934 <HAL_TIM_ConfigClockSource>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002bb2:	f002 faa3 	bl	80050fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002bb6:	4828      	ldr	r0, [pc, #160]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002bb8:	f004 ffe8 	bl	8007b8c <HAL_TIM_IC_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002bc2:	f002 fa9b 	bl	80050fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002bca:	2350      	movs	r3, #80	@ 0x50
 8002bcc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	4619      	mov	r1, r3
 8002bdc:	481e      	ldr	r0, [pc, #120]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002bde:	f005 ffbf 	bl	8008b60 <HAL_TIM_SlaveConfigSynchro>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8002be8:	f002 fa88 	bl	80050fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bf4:	f107 0310 	add.w	r3, r7, #16
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4817      	ldr	r0, [pc, #92]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002bfc:	f007 f8d6 	bl	8009dac <HAL_TIMEx_MasterConfigSynchronization>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8002c06:	f002 fa79 	bl	80050fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c1a:	463b      	mov	r3, r7
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	4619      	mov	r1, r3
 8002c20:	480d      	ldr	r0, [pc, #52]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002c22:	f005 fcd6 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8002c2c:	f002 fa66 	bl	80050fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002c30:	2302      	movs	r3, #2
 8002c32:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002c34:	2302      	movs	r3, #2
 8002c36:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002c38:	463b      	mov	r3, r7
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4806      	ldr	r0, [pc, #24]	@ (8002c58 <MX_TIM3_Init+0x130>)
 8002c40:	f005 fcc7 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM3_Init+0x126>
  {
    Error_Handler();
 8002c4a:	f002 fa57 	bl	80050fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c4e:	bf00      	nop
 8002c50:	3740      	adds	r7, #64	@ 0x40
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000734 	.word	0x20000734
 8002c5c:	40000400 	.word	0x40000400

08002c60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b090      	sub	sp, #64	@ 0x40
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002c74:	f107 031c 	add.w	r3, r7, #28
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c84:	f107 0310 	add.w	r3, r7, #16
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c90:	463b      	mov	r3, r7
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002c9e:	4a3d      	ldr	r2, [pc, #244]	@ (8002d94 <MX_TIM4_Init+0x134>)
 8002ca0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002ca4:	22a9      	movs	r2, #169	@ 0xa9
 8002ca6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca8:	4b39      	ldr	r3, [pc, #228]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002cae:	4b38      	ldr	r3, [pc, #224]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002cb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb6:	4b36      	ldr	r3, [pc, #216]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cbc:	4b34      	ldr	r3, [pc, #208]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cc2:	4833      	ldr	r0, [pc, #204]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002cc4:	f004 fc96 	bl	80075f4 <HAL_TIM_Base_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002cce:	f002 fa15 	bl	80050fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002cd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002cdc:	4619      	mov	r1, r3
 8002cde:	482c      	ldr	r0, [pc, #176]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002ce0:	f005 fe28 	bl	8008934 <HAL_TIM_ConfigClockSource>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002cea:	f002 fa07 	bl	80050fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002cee:	4828      	ldr	r0, [pc, #160]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002cf0:	f004 ff4c 	bl	8007b8c <HAL_TIM_IC_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002cfa:	f002 f9ff 	bl	80050fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002d02:	2350      	movs	r3, #80	@ 0x50
 8002d04:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002d0e:	f107 031c 	add.w	r3, r7, #28
 8002d12:	4619      	mov	r1, r3
 8002d14:	481e      	ldr	r0, [pc, #120]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002d16:	f005 ff23 	bl	8008b60 <HAL_TIM_SlaveConfigSynchro>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 8002d20:	f002 f9ec 	bl	80050fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d2c:	f107 0310 	add.w	r3, r7, #16
 8002d30:	4619      	mov	r1, r3
 8002d32:	4817      	ldr	r0, [pc, #92]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002d34:	f007 f83a 	bl	8009dac <HAL_TIMEx_MasterConfigSynchronization>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002d3e:	f002 f9dd 	bl	80050fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d42:	2300      	movs	r3, #0
 8002d44:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d46:	2301      	movs	r3, #1
 8002d48:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d52:	463b      	mov	r3, r7
 8002d54:	2200      	movs	r2, #0
 8002d56:	4619      	mov	r1, r3
 8002d58:	480d      	ldr	r0, [pc, #52]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002d5a:	f005 fc3a 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8002d64:	f002 f9ca 	bl	80050fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d70:	463b      	mov	r3, r7
 8002d72:	2204      	movs	r2, #4
 8002d74:	4619      	mov	r1, r3
 8002d76:	4806      	ldr	r0, [pc, #24]	@ (8002d90 <MX_TIM4_Init+0x130>)
 8002d78:	f005 fc2b 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM4_Init+0x126>
  {
    Error_Handler();
 8002d82:	f002 f9bb 	bl	80050fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	3740      	adds	r7, #64	@ 0x40
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000800 	.word	0x20000800
 8002d94:	40000800 	.word	0x40000800

08002d98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08e      	sub	sp, #56	@ 0x38
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db8:	463b      	mov	r3, r7
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	611a      	str	r2, [r3, #16]
 8002dc6:	615a      	str	r2, [r3, #20]
 8002dc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002dca:	4b2d      	ldr	r3, [pc, #180]	@ (8002e80 <MX_TIM5_Init+0xe8>)
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002e84 <MX_TIM5_Init+0xec>)
 8002dce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3;
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e80 <MX_TIM5_Init+0xe8>)
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e80 <MX_TIM5_Init+0xe8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 29999;
 8002ddc:	4b28      	ldr	r3, [pc, #160]	@ (8002e80 <MX_TIM5_Init+0xe8>)
 8002dde:	f247 522f 	movw	r2, #29999	@ 0x752f
 8002de2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de4:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <MX_TIM5_Init+0xe8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dea:	4b25      	ldr	r3, [pc, #148]	@ (8002e80 <MX_TIM5_Init+0xe8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002df0:	4823      	ldr	r0, [pc, #140]	@ (8002e80 <MX_TIM5_Init+0xe8>)
 8002df2:	f004 fbff 	bl	80075f4 <HAL_TIM_Base_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002dfc:	f002 f97e 	bl	80050fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	481c      	ldr	r0, [pc, #112]	@ (8002e80 <MX_TIM5_Init+0xe8>)
 8002e0e:	f005 fd91 	bl	8008934 <HAL_TIM_ConfigClockSource>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002e18:	f002 f970 	bl	80050fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002e1c:	4818      	ldr	r0, [pc, #96]	@ (8002e80 <MX_TIM5_Init+0xe8>)
 8002e1e:	f004 fd35 	bl	800788c <HAL_TIM_PWM_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002e28:	f002 f968 	bl	80050fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4811      	ldr	r0, [pc, #68]	@ (8002e80 <MX_TIM5_Init+0xe8>)
 8002e3c:	f006 ffb6 	bl	8009dac <HAL_TIMEx_MasterConfigSynchronization>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002e46:	f002 f959 	bl	80050fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e4a:	2360      	movs	r3, #96	@ 0x60
 8002e4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4807      	ldr	r0, [pc, #28]	@ (8002e80 <MX_TIM5_Init+0xe8>)
 8002e62:	f005 fc53 	bl	800870c <HAL_TIM_PWM_ConfigChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002e6c:	f002 f946 	bl	80050fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002e70:	4803      	ldr	r0, [pc, #12]	@ (8002e80 <MX_TIM5_Init+0xe8>)
 8002e72:	f002 fb69 	bl	8005548 <HAL_TIM_MspPostInit>

}
 8002e76:	bf00      	nop
 8002e78:	3738      	adds	r7, #56	@ 0x38
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200008cc 	.word	0x200008cc
 8002e84:	40000c00 	.word	0x40000c00

08002e88 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b090      	sub	sp, #64	@ 0x40
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	609a      	str	r2, [r3, #8]
 8002e9a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002e9c:	f107 031c 	add.w	r3, r7, #28
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eac:	f107 0310 	add.w	r3, r7, #16
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002eb8:	463b      	mov	r3, r7
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002ec6:	4a4e      	ldr	r2, [pc, #312]	@ (8003000 <MX_TIM8_Init+0x178>)
 8002ec8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8002eca:	4b4c      	ldr	r3, [pc, #304]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002ecc:	22a9      	movs	r2, #169	@ 0xa9
 8002ece:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002ed6:	4b49      	ldr	r3, [pc, #292]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002ed8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002edc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ede:	4b47      	ldr	r3, [pc, #284]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ee4:	4b45      	ldr	r3, [pc, #276]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eea:	4b44      	ldr	r3, [pc, #272]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002ef0:	4842      	ldr	r0, [pc, #264]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002ef2:	f004 fb7f 	bl	80075f4 <HAL_TIM_Base_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002efc:	f002 f8fe 	bl	80050fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f04:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002f06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	483b      	ldr	r0, [pc, #236]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002f0e:	f005 fd11 	bl	8008934 <HAL_TIM_ConfigClockSource>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002f18:	f002 f8f0 	bl	80050fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002f1c:	4837      	ldr	r0, [pc, #220]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002f1e:	f004 fe35 	bl	8007b8c <HAL_TIM_IC_Init>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002f28:	f002 f8e8 	bl	80050fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002f30:	2350      	movs	r3, #80	@ 0x50
 8002f32:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8002f3c:	f107 031c 	add.w	r3, r7, #28
 8002f40:	4619      	mov	r1, r3
 8002f42:	482e      	ldr	r0, [pc, #184]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002f44:	f005 fe0c 	bl	8008b60 <HAL_TIM_SlaveConfigSynchro>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8002f4e:	f002 f8d5 	bl	80050fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f5e:	f107 0310 	add.w	r3, r7, #16
 8002f62:	4619      	mov	r1, r3
 8002f64:	4825      	ldr	r0, [pc, #148]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002f66:	f006 ff21 	bl	8009dac <HAL_TIMEx_MasterConfigSynchronization>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8002f70:	f002 f8c4 	bl	80050fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f74:	2300      	movs	r3, #0
 8002f76:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f84:	463b      	mov	r3, r7
 8002f86:	2200      	movs	r2, #0
 8002f88:	4619      	mov	r1, r3
 8002f8a:	481c      	ldr	r0, [pc, #112]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002f8c:	f005 fb21 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8002f96:	f002 f8b1 	bl	80050fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002fa2:	463b      	mov	r3, r7
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4814      	ldr	r0, [pc, #80]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002faa:	f005 fb12 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8002fb4:	f002 f8a2 	bl	80050fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002fc0:	463b      	mov	r3, r7
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	480d      	ldr	r0, [pc, #52]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002fc8:	f005 fb03 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_TIM8_Init+0x14e>
  {
    Error_Handler();
 8002fd2:	f002 f893 	bl	80050fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002fde:	463b      	mov	r3, r7
 8002fe0:	220c      	movs	r2, #12
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4805      	ldr	r0, [pc, #20]	@ (8002ffc <MX_TIM8_Init+0x174>)
 8002fe6:	f005 faf4 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_TIM8_Init+0x16c>
  {
    Error_Handler();
 8002ff0:	f002 f884 	bl	80050fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002ff4:	bf00      	nop
 8002ff6:	3740      	adds	r7, #64	@ 0x40
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000998 	.word	0x20000998
 8003000:	40013400 	.word	0x40013400

08003004 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003008:	4b14      	ldr	r3, [pc, #80]	@ (800305c <MX_TIM16_Init+0x58>)
 800300a:	4a15      	ldr	r2, [pc, #84]	@ (8003060 <MX_TIM16_Init+0x5c>)
 800300c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800300e:	4b13      	ldr	r3, [pc, #76]	@ (800305c <MX_TIM16_Init+0x58>)
 8003010:	22a9      	movs	r2, #169	@ 0xa9
 8003012:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003014:	4b11      	ldr	r3, [pc, #68]	@ (800305c <MX_TIM16_Init+0x58>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800301a:	4b10      	ldr	r3, [pc, #64]	@ (800305c <MX_TIM16_Init+0x58>)
 800301c:	f240 4279 	movw	r2, #1145	@ 0x479
 8003020:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003022:	4b0e      	ldr	r3, [pc, #56]	@ (800305c <MX_TIM16_Init+0x58>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <MX_TIM16_Init+0x58>)
 800302a:	2200      	movs	r2, #0
 800302c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800302e:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <MX_TIM16_Init+0x58>)
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003034:	4809      	ldr	r0, [pc, #36]	@ (800305c <MX_TIM16_Init+0x58>)
 8003036:	f004 fadd 	bl	80075f4 <HAL_TIM_Base_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003040:	f002 f85c 	bl	80050fc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003044:	2108      	movs	r1, #8
 8003046:	4805      	ldr	r0, [pc, #20]	@ (800305c <MX_TIM16_Init+0x58>)
 8003048:	f004 ff12 	bl	8007e70 <HAL_TIM_OnePulse_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003052:	f002 f853 	bl	80050fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000a64 	.word	0x20000a64
 8003060:	40014400 	.word	0x40014400

08003064 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b090      	sub	sp, #64	@ 0x40
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800306a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003078:	f107 031c 	add.w	r3, r7, #28
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003094:	463b      	mov	r3, r7
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80030a0:	4b4d      	ldr	r3, [pc, #308]	@ (80031d8 <MX_TIM20_Init+0x174>)
 80030a2:	4a4e      	ldr	r2, [pc, #312]	@ (80031dc <MX_TIM20_Init+0x178>)
 80030a4:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 169;
 80030a6:	4b4c      	ldr	r3, [pc, #304]	@ (80031d8 <MX_TIM20_Init+0x174>)
 80030a8:	22a9      	movs	r2, #169	@ 0xa9
 80030aa:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ac:	4b4a      	ldr	r3, [pc, #296]	@ (80031d8 <MX_TIM20_Init+0x174>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80030b2:	4b49      	ldr	r3, [pc, #292]	@ (80031d8 <MX_TIM20_Init+0x174>)
 80030b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030b8:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ba:	4b47      	ldr	r3, [pc, #284]	@ (80031d8 <MX_TIM20_Init+0x174>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80030c0:	4b45      	ldr	r3, [pc, #276]	@ (80031d8 <MX_TIM20_Init+0x174>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c6:	4b44      	ldr	r3, [pc, #272]	@ (80031d8 <MX_TIM20_Init+0x174>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80030cc:	4842      	ldr	r0, [pc, #264]	@ (80031d8 <MX_TIM20_Init+0x174>)
 80030ce:	f004 fa91 	bl	80075f4 <HAL_TIM_Base_Init>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 80030d8:	f002 f810 	bl	80050fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030e0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80030e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80030e6:	4619      	mov	r1, r3
 80030e8:	483b      	ldr	r0, [pc, #236]	@ (80031d8 <MX_TIM20_Init+0x174>)
 80030ea:	f005 fc23 	bl	8008934 <HAL_TIM_ConfigClockSource>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_TIM20_Init+0x94>
  {
    Error_Handler();
 80030f4:	f002 f802 	bl	80050fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim20) != HAL_OK)
 80030f8:	4837      	ldr	r0, [pc, #220]	@ (80031d8 <MX_TIM20_Init+0x174>)
 80030fa:	f004 fd47 	bl	8007b8c <HAL_TIM_IC_Init>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8003104:	f001 fffa 	bl	80050fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003108:	2304      	movs	r3, #4
 800310a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800310c:	2350      	movs	r3, #80	@ 0x50
 800310e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8003118:	f107 031c 	add.w	r3, r7, #28
 800311c:	4619      	mov	r1, r3
 800311e:	482e      	ldr	r0, [pc, #184]	@ (80031d8 <MX_TIM20_Init+0x174>)
 8003120:	f005 fd1e 	bl	8008b60 <HAL_TIM_SlaveConfigSynchro>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 800312a:	f001 ffe7 	bl	80050fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800313a:	f107 0310 	add.w	r3, r7, #16
 800313e:	4619      	mov	r1, r3
 8003140:	4825      	ldr	r0, [pc, #148]	@ (80031d8 <MX_TIM20_Init+0x174>)
 8003142:	f006 fe33 	bl	8009dac <HAL_TIMEx_MasterConfigSynchronization>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_TIM20_Init+0xec>
  {
    Error_Handler();
 800314c:	f001 ffd6 	bl	80050fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003150:	2300      	movs	r3, #0
 8003152:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003154:	2301      	movs	r3, #1
 8003156:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003160:	463b      	mov	r3, r7
 8003162:	2200      	movs	r2, #0
 8003164:	4619      	mov	r1, r3
 8003166:	481c      	ldr	r0, [pc, #112]	@ (80031d8 <MX_TIM20_Init+0x174>)
 8003168:	f005 fa33 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_TIM20_Init+0x112>
  {
    Error_Handler();
 8003172:	f001 ffc3 	bl	80050fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003176:	2302      	movs	r3, #2
 8003178:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800317a:	2302      	movs	r3, #2
 800317c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800317e:	463b      	mov	r3, r7
 8003180:	2204      	movs	r2, #4
 8003182:	4619      	mov	r1, r3
 8003184:	4814      	ldr	r0, [pc, #80]	@ (80031d8 <MX_TIM20_Init+0x174>)
 8003186:	f005 fa24 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_TIM20_Init+0x130>
  {
    Error_Handler();
 8003190:	f001 ffb4 	bl	80050fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003194:	2300      	movs	r3, #0
 8003196:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003198:	2301      	movs	r3, #1
 800319a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800319c:	463b      	mov	r3, r7
 800319e:	2208      	movs	r2, #8
 80031a0:	4619      	mov	r1, r3
 80031a2:	480d      	ldr	r0, [pc, #52]	@ (80031d8 <MX_TIM20_Init+0x174>)
 80031a4:	f005 fa15 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM20_Init+0x14e>
  {
    Error_Handler();
 80031ae:	f001 ffa5 	bl	80050fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80031b2:	2302      	movs	r3, #2
 80031b4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80031b6:	2302      	movs	r3, #2
 80031b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80031ba:	463b      	mov	r3, r7
 80031bc:	220c      	movs	r2, #12
 80031be:	4619      	mov	r1, r3
 80031c0:	4805      	ldr	r0, [pc, #20]	@ (80031d8 <MX_TIM20_Init+0x174>)
 80031c2:	f005 fa06 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM20_Init+0x16c>
  {
    Error_Handler();
 80031cc:	f001 ff96 	bl	80050fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 80031d0:	bf00      	nop
 80031d2:	3740      	adds	r7, #64	@ 0x40
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000b30 	.word	0x20000b30
 80031dc:	40015000 	.word	0x40015000

080031e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031e4:	4b23      	ldr	r3, [pc, #140]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 80031e6:	4a24      	ldr	r2, [pc, #144]	@ (8003278 <MX_USART2_UART_Init+0x98>)
 80031e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80031ea:	4b22      	ldr	r3, [pc, #136]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 80031ec:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80031f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80031f2:	4b20      	ldr	r3, [pc, #128]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 80031f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031f8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003200:	4b1c      	ldr	r3, [pc, #112]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 8003202:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003208:	4b1a      	ldr	r3, [pc, #104]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 800320a:	220c      	movs	r2, #12
 800320c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800320e:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 8003210:	2200      	movs	r2, #0
 8003212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003214:	4b17      	ldr	r3, [pc, #92]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 8003216:	2200      	movs	r2, #0
 8003218:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800321a:	4b16      	ldr	r3, [pc, #88]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003220:	4b14      	ldr	r3, [pc, #80]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003226:	4b13      	ldr	r3, [pc, #76]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 8003228:	2200      	movs	r2, #0
 800322a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800322c:	4811      	ldr	r0, [pc, #68]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 800322e:	f006 fea3 	bl	8009f78 <HAL_UART_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003238:	f001 ff60 	bl	80050fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800323c:	2100      	movs	r1, #0
 800323e:	480d      	ldr	r0, [pc, #52]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 8003240:	f008 fcc3 	bl	800bbca <HAL_UARTEx_SetTxFifoThreshold>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800324a:	f001 ff57 	bl	80050fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800324e:	2100      	movs	r1, #0
 8003250:	4808      	ldr	r0, [pc, #32]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 8003252:	f008 fcf8 	bl	800bc46 <HAL_UARTEx_SetRxFifoThreshold>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800325c:	f001 ff4e 	bl	80050fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003260:	4804      	ldr	r0, [pc, #16]	@ (8003274 <MX_USART2_UART_Init+0x94>)
 8003262:	f008 fc79 	bl	800bb58 <HAL_UARTEx_DisableFifoMode>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800326c:	f001 ff46 	bl	80050fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003270:	bf00      	nop
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20000bfc 	.word	0x20000bfc
 8003278:	40004400 	.word	0x40004400

0800327c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003282:	4b16      	ldr	r3, [pc, #88]	@ (80032dc <MX_DMA_Init+0x60>)
 8003284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003286:	4a15      	ldr	r2, [pc, #84]	@ (80032dc <MX_DMA_Init+0x60>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	6493      	str	r3, [r2, #72]	@ 0x48
 800328e:	4b13      	ldr	r3, [pc, #76]	@ (80032dc <MX_DMA_Init+0x60>)
 8003290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800329a:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <MX_DMA_Init+0x60>)
 800329c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800329e:	4a0f      	ldr	r2, [pc, #60]	@ (80032dc <MX_DMA_Init+0x60>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80032a6:	4b0d      	ldr	r3, [pc, #52]	@ (80032dc <MX_DMA_Init+0x60>)
 80032a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80032b2:	2200      	movs	r2, #0
 80032b4:	2100      	movs	r1, #0
 80032b6:	200b      	movs	r0, #11
 80032b8:	f002 fc2f 	bl	8005b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80032bc:	200b      	movs	r0, #11
 80032be:	f002 fc46 	bl	8005b4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2100      	movs	r1, #0
 80032c6:	200c      	movs	r0, #12
 80032c8:	f002 fc27 	bl	8005b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80032cc:	200c      	movs	r0, #12
 80032ce:	f002 fc3e 	bl	8005b4e <HAL_NVIC_EnableIRQ>

}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000

080032e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	@ 0x28
 80032e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e6:	f107 0314 	add.w	r3, r7, #20
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	609a      	str	r2, [r3, #8]
 80032f2:	60da      	str	r2, [r3, #12]
 80032f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f6:	4b56      	ldr	r3, [pc, #344]	@ (8003450 <MX_GPIO_Init+0x170>)
 80032f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fa:	4a55      	ldr	r2, [pc, #340]	@ (8003450 <MX_GPIO_Init+0x170>)
 80032fc:	f043 0304 	orr.w	r3, r3, #4
 8003300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003302:	4b53      	ldr	r3, [pc, #332]	@ (8003450 <MX_GPIO_Init+0x170>)
 8003304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800330e:	4b50      	ldr	r3, [pc, #320]	@ (8003450 <MX_GPIO_Init+0x170>)
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	4a4f      	ldr	r2, [pc, #316]	@ (8003450 <MX_GPIO_Init+0x170>)
 8003314:	f043 0320 	orr.w	r3, r3, #32
 8003318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800331a:	4b4d      	ldr	r3, [pc, #308]	@ (8003450 <MX_GPIO_Init+0x170>)
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003326:	4b4a      	ldr	r3, [pc, #296]	@ (8003450 <MX_GPIO_Init+0x170>)
 8003328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332a:	4a49      	ldr	r2, [pc, #292]	@ (8003450 <MX_GPIO_Init+0x170>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003332:	4b47      	ldr	r3, [pc, #284]	@ (8003450 <MX_GPIO_Init+0x170>)
 8003334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800333e:	4b44      	ldr	r3, [pc, #272]	@ (8003450 <MX_GPIO_Init+0x170>)
 8003340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003342:	4a43      	ldr	r2, [pc, #268]	@ (8003450 <MX_GPIO_Init+0x170>)
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800334a:	4b41      	ldr	r3, [pc, #260]	@ (8003450 <MX_GPIO_Init+0x170>)
 800334c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIOUT_PushPull_Pin|GPIOUT_Vacuum_Pin, GPIO_PIN_SET);
 8003356:	2201      	movs	r2, #1
 8003358:	2103      	movs	r1, #3
 800335a:	483e      	ldr	r0, [pc, #248]	@ (8003454 <MX_GPIO_Init+0x174>)
 800335c:	f003 f8de 	bl	800651c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIOUT_Pilot2_Pin|GPIOUT_DrivINA_Pin, GPIO_PIN_SET);
 8003360:	2201      	movs	r2, #1
 8003362:	f248 0110 	movw	r1, #32784	@ 0x8010
 8003366:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800336a:	f003 f8d7 	bl	800651c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIOUT_Pilot1_Pin|GPIOUT_DrivINB_Pin, GPIO_PIN_SET);
 800336e:	2201      	movs	r2, #1
 8003370:	2181      	movs	r1, #129	@ 0x81
 8003372:	4839      	ldr	r0, [pc, #228]	@ (8003458 <MX_GPIO_Init+0x178>)
 8003374:	f003 f8d2 	bl	800651c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800337c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800337e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	4619      	mov	r1, r3
 800338e:	4831      	ldr	r0, [pc, #196]	@ (8003454 <MX_GPIO_Init+0x174>)
 8003390:	f002 ff2a 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOUT_PushPull_Pin GPIOUT_Vacuum_Pin */
  GPIO_InitStruct.Pin = GPIOUT_PushPull_Pin|GPIOUT_Vacuum_Pin;
 8003394:	2303      	movs	r3, #3
 8003396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003398:	2301      	movs	r3, #1
 800339a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800339c:	2301      	movs	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	4619      	mov	r1, r3
 80033aa:	482a      	ldr	r0, [pc, #168]	@ (8003454 <MX_GPIO_Init+0x174>)
 80033ac:	f002 ff1c 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOUT_Pilot2_Pin GPIOUT_DrivINA_Pin */
  GPIO_InitStruct.Pin = GPIOUT_Pilot2_Pin|GPIOUT_DrivINA_Pin;
 80033b0:	f248 0310 	movw	r3, #32784	@ 0x8010
 80033b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ba:	2301      	movs	r3, #1
 80033bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c2:	f107 0314 	add.w	r3, r7, #20
 80033c6:	4619      	mov	r1, r3
 80033c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033cc:	f002 ff0c 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOIN_LeadMax_Pin GPIOIN_LeadMin_Pin */
  GPIO_InitStruct.Pin = GPIOIN_LeadMax_Pin|GPIOIN_LeadMin_Pin;
 80033d0:	23c0      	movs	r3, #192	@ 0xc0
 80033d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	4619      	mov	r1, r3
 80033e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033e6:	f002 feff 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOUT_Pilot1_Pin GPIOUT_DrivINB_Pin */
  GPIO_InitStruct.Pin = GPIOUT_Pilot1_Pin|GPIOUT_DrivINB_Pin;
 80033ea:	2381      	movs	r3, #129	@ 0x81
 80033ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ee:	2301      	movs	r3, #1
 80033f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f6:	2300      	movs	r3, #0
 80033f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	4619      	mov	r1, r3
 8003400:	4815      	ldr	r0, [pc, #84]	@ (8003458 <MX_GPIO_Init+0x178>)
 8003402:	f002 fef1 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOIN_LimitMin_Pin GPIOIN_LimitMax_Pin */
  GPIO_InitStruct.Pin = GPIOIN_LimitMin_Pin|GPIOIN_LimitMax_Pin;
 8003406:	f244 0302 	movw	r3, #16386	@ 0x4002
 800340a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800340c:	2300      	movs	r3, #0
 800340e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	4619      	mov	r1, r3
 800341a:	480f      	ldr	r0, [pc, #60]	@ (8003458 <MX_GPIO_Init+0x178>)
 800341c:	f002 fee4 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIOIN_Emer_Pin */
  GPIO_InitStruct.Pin = GPIOIN_Emer_Pin;
 8003420:	2380      	movs	r3, #128	@ 0x80
 8003422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOIN_Emer_GPIO_Port, &GPIO_InitStruct);
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	4619      	mov	r1, r3
 8003432:	4808      	ldr	r0, [pc, #32]	@ (8003454 <MX_GPIO_Init+0x174>)
 8003434:	f002 fed8 	bl	80061e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003438:	2200      	movs	r2, #0
 800343a:	2100      	movs	r1, #0
 800343c:	2028      	movs	r0, #40	@ 0x28
 800343e:	f002 fb6c 	bl	8005b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003442:	2028      	movs	r0, #40	@ 0x28
 8003444:	f002 fb83 	bl	8005b4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003448:	bf00      	nop
 800344a:	3728      	adds	r7, #40	@ 0x28
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	48000800 	.word	0x48000800
 8003458:	48000400 	.word	0x48000400

0800345c <motor_run>:
//        registerFrame[0x00].U16 = 22881;
//        sendall();
//    }
//}

void motor_run(uint64_t pwm, uint8_t dir){
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	71fb      	strb	r3, [r7, #7]
	is_motor_should_run();
 800346a:	f001 fe4d 	bl	8005108 <is_motor_should_run>
	if(dir == 1){
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d141      	bne.n	80034f8 <motor_run+0x9c>
		if(isMotorCanMoveUp == 1){
 8003474:	4b5a      	ldr	r3, [pc, #360]	@ (80035e0 <motor_run+0x184>)
 8003476:	f993 3000 	ldrsb.w	r3, [r3]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d11b      	bne.n	80034b6 <motor_run+0x5a>
			usePWM = pwm;
 800347e:	4959      	ldr	r1, [pc, #356]	@ (80035e4 <motor_run+0x188>)
 8003480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003484:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, usePWM);
 8003488:	4b56      	ldr	r3, [pc, #344]	@ (80035e4 <motor_run+0x188>)
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	4956      	ldr	r1, [pc, #344]	@ (80035e8 <motor_run+0x18c>)
 8003490:	6809      	ldr	r1, [r1, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	638b      	str	r3, [r1, #56]	@ 0x38
			motoring = 1;
 8003496:	4b55      	ldr	r3, [pc, #340]	@ (80035ec <motor_run+0x190>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]
//			motor_moveup();
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,GPIO_PIN_RESET);
 800349c:	2200      	movs	r2, #0
 800349e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034a6:	f003 f839 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);
 80034aa:	2201      	movs	r2, #1
 80034ac:	2180      	movs	r1, #128	@ 0x80
 80034ae:	4850      	ldr	r0, [pc, #320]	@ (80035f0 <motor_run+0x194>)
 80034b0:	f003 f834 	bl	800651c <HAL_GPIO_WritePin>
//	else{
//		usePWM = 0;
//		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, usePWM);
//		motoring = 0;
//	}
}
 80034b4:	e08f      	b.n	80035d6 <motor_run+0x17a>
		else if(isMotorCanMoveUp == 0){
 80034b6:	4b4a      	ldr	r3, [pc, #296]	@ (80035e0 <motor_run+0x184>)
 80034b8:	f993 3000 	ldrsb.w	r3, [r3]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 808a 	bne.w	80035d6 <motor_run+0x17a>
			gopoint_act = 0;
 80034c2:	494c      	ldr	r1, [pc, #304]	@ (80035f4 <motor_run+0x198>)
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, usePWM);
 80034d0:	4b44      	ldr	r3, [pc, #272]	@ (80035e4 <motor_run+0x188>)
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	4944      	ldr	r1, [pc, #272]	@ (80035e8 <motor_run+0x18c>)
 80034d8:	6809      	ldr	r1, [r1, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	638b      	str	r3, [r1, #56]	@ 0x38
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,GPIO_PIN_RESET);
 80034de:	2200      	movs	r2, #0
 80034e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034e8:	f003 f818 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 80034ec:	2200      	movs	r2, #0
 80034ee:	2180      	movs	r1, #128	@ 0x80
 80034f0:	483f      	ldr	r0, [pc, #252]	@ (80035f0 <motor_run+0x194>)
 80034f2:	f003 f813 	bl	800651c <HAL_GPIO_WritePin>
}
 80034f6:	e06e      	b.n	80035d6 <motor_run+0x17a>
	else if(dir == 2){
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d139      	bne.n	8003572 <motor_run+0x116>
		if(isMotorCanMoveDown == 1){
 80034fe:	4b3e      	ldr	r3, [pc, #248]	@ (80035f8 <motor_run+0x19c>)
 8003500:	f993 3000 	ldrsb.w	r3, [r3]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d11b      	bne.n	8003540 <motor_run+0xe4>
			usePWM = pwm;
 8003508:	4936      	ldr	r1, [pc, #216]	@ (80035e4 <motor_run+0x188>)
 800350a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800350e:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, usePWM);
 8003512:	4b34      	ldr	r3, [pc, #208]	@ (80035e4 <motor_run+0x188>)
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	4933      	ldr	r1, [pc, #204]	@ (80035e8 <motor_run+0x18c>)
 800351a:	6809      	ldr	r1, [r1, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	638b      	str	r3, [r1, #56]	@ 0x38
			motoring = 2;
 8003520:	4b32      	ldr	r3, [pc, #200]	@ (80035ec <motor_run+0x190>)
 8003522:	2202      	movs	r2, #2
 8003524:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,GPIO_PIN_SET);
 8003526:	2201      	movs	r2, #1
 8003528:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800352c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003530:	f002 fff4 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	@ 0x80
 8003538:	482d      	ldr	r0, [pc, #180]	@ (80035f0 <motor_run+0x194>)
 800353a:	f002 ffef 	bl	800651c <HAL_GPIO_WritePin>
}
 800353e:	e04a      	b.n	80035d6 <motor_run+0x17a>
		else if(isMotorCanMoveDown == 0){
 8003540:	4b2d      	ldr	r3, [pc, #180]	@ (80035f8 <motor_run+0x19c>)
 8003542:	f993 3000 	ldrsb.w	r3, [r3]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d145      	bne.n	80035d6 <motor_run+0x17a>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, usePWM);
 800354a:	4b26      	ldr	r3, [pc, #152]	@ (80035e4 <motor_run+0x188>)
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	4925      	ldr	r1, [pc, #148]	@ (80035e8 <motor_run+0x18c>)
 8003552:	6809      	ldr	r1, [r1, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	638b      	str	r3, [r1, #56]	@ 0x38
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,GPIO_PIN_RESET);
 8003558:	2200      	movs	r2, #0
 800355a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800355e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003562:	f002 ffdb 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 8003566:	2200      	movs	r2, #0
 8003568:	2180      	movs	r1, #128	@ 0x80
 800356a:	4821      	ldr	r0, [pc, #132]	@ (80035f0 <motor_run+0x194>)
 800356c:	f002 ffd6 	bl	800651c <HAL_GPIO_WritePin>
}
 8003570:	e031      	b.n	80035d6 <motor_run+0x17a>
	else if(dir == 3){
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d12e      	bne.n	80035d6 <motor_run+0x17a>
		if(modeSelection != 2){
 8003578:	4b20      	ldr	r3, [pc, #128]	@ (80035fc <motor_run+0x1a0>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d01c      	beq.n	80035ba <motor_run+0x15e>
			usePWM = 30000;
 8003580:	4918      	ldr	r1, [pc, #96]	@ (80035e4 <motor_run+0x188>)
 8003582:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, usePWM);
 800358e:	4b15      	ldr	r3, [pc, #84]	@ (80035e4 <motor_run+0x188>)
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	4914      	ldr	r1, [pc, #80]	@ (80035e8 <motor_run+0x18c>)
 8003596:	6809      	ldr	r1, [r1, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	638b      	str	r3, [r1, #56]	@ 0x38
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,GPIO_PIN_RESET);
 800359c:	2200      	movs	r2, #0
 800359e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035a6:	f002 ffb9 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 80035aa:	2200      	movs	r2, #0
 80035ac:	2180      	movs	r1, #128	@ 0x80
 80035ae:	4810      	ldr	r0, [pc, #64]	@ (80035f0 <motor_run+0x194>)
 80035b0:	f002 ffb4 	bl	800651c <HAL_GPIO_WritePin>
			motoring = 3;
 80035b4:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <motor_run+0x190>)
 80035b6:	2203      	movs	r2, #3
 80035b8:	601a      	str	r2, [r3, #0]
		if(modeSelection == 2){
 80035ba:	4b10      	ldr	r3, [pc, #64]	@ (80035fc <motor_run+0x1a0>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d109      	bne.n	80035d6 <motor_run+0x17a>
			usePWM = 0;
 80035c2:	4908      	ldr	r1, [pc, #32]	@ (80035e4 <motor_run+0x188>)
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9c1 2300 	strd	r2, r3, [r1]
			motoring = 4;
 80035d0:	4b06      	ldr	r3, [pc, #24]	@ (80035ec <motor_run+0x190>)
 80035d2:	2204      	movs	r2, #4
 80035d4:	601a      	str	r2, [r3, #0]
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200004a8 	.word	0x200004a8
 80035e4:	200004a0 	.word	0x200004a0
 80035e8:	200008cc 	.word	0x200008cc
 80035ec:	20000498 	.word	0x20000498
 80035f0:	48000400 	.word	0x48000400
 80035f4:	200004e0 	.word	0x200004e0
 80035f8:	200004a9 	.word	0x200004a9
 80035fc:	20000438 	.word	0x20000438

08003600 <remote_recieve>:

void remote_recieve(){
 8003600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
	JoyxPosition_Rise = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_1);
 8003608:	4b6f      	ldr	r3, [pc, #444]	@ (80037c8 <remote_recieve+0x1c8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800360e:	b29b      	uxth	r3, r3
 8003610:	4a6e      	ldr	r2, [pc, #440]	@ (80037cc <remote_recieve+0x1cc>)
 8003612:	8013      	strh	r3, [r2, #0]
	JoyxPosition_Fall = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_2);
 8003614:	4b6c      	ldr	r3, [pc, #432]	@ (80037c8 <remote_recieve+0x1c8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361a:	b29b      	uxth	r3, r3
 800361c:	4a6c      	ldr	r2, [pc, #432]	@ (80037d0 <remote_recieve+0x1d0>)
 800361e:	8013      	strh	r3, [r2, #0]
	JoyxPosition_dt = JoyxPosition_Rise - JoyxPosition_Fall;
 8003620:	4b6a      	ldr	r3, [pc, #424]	@ (80037cc <remote_recieve+0x1cc>)
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	4b6a      	ldr	r3, [pc, #424]	@ (80037d0 <remote_recieve+0x1d0>)
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	4a69      	ldr	r2, [pc, #420]	@ (80037d4 <remote_recieve+0x1d4>)
 800362e:	6013      	str	r3, [r2, #0]
	if(JoyxPosition_Rise > JoyxPosition_Fall)
 8003630:	4b66      	ldr	r3, [pc, #408]	@ (80037cc <remote_recieve+0x1cc>)
 8003632:	881a      	ldrh	r2, [r3, #0]
 8003634:	4b66      	ldr	r3, [pc, #408]	@ (80037d0 <remote_recieve+0x1d0>)
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d907      	bls.n	800364c <remote_recieve+0x4c>
		JoyxPosition = JoyxPosition_dt + 19999 ;
 800363c:	4b65      	ldr	r3, [pc, #404]	@ (80037d4 <remote_recieve+0x1d4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8003644:	331f      	adds	r3, #31
 8003646:	4a64      	ldr	r2, [pc, #400]	@ (80037d8 <remote_recieve+0x1d8>)
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e003      	b.n	8003654 <remote_recieve+0x54>
	else
		JoyxPosition = JoyxPosition_dt;
 800364c:	4b61      	ldr	r3, [pc, #388]	@ (80037d4 <remote_recieve+0x1d4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a61      	ldr	r2, [pc, #388]	@ (80037d8 <remote_recieve+0x1d8>)
 8003652:	6013      	str	r3, [r2, #0]

	zUp_Rise = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_3);
 8003654:	4b5c      	ldr	r3, [pc, #368]	@ (80037c8 <remote_recieve+0x1c8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365a:	b29b      	uxth	r3, r3
 800365c:	4a5f      	ldr	r2, [pc, #380]	@ (80037dc <remote_recieve+0x1dc>)
 800365e:	8013      	strh	r3, [r2, #0]
	zUp_Fall = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_4);
 8003660:	4b59      	ldr	r3, [pc, #356]	@ (80037c8 <remote_recieve+0x1c8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	b29b      	uxth	r3, r3
 8003668:	4a5d      	ldr	r2, [pc, #372]	@ (80037e0 <remote_recieve+0x1e0>)
 800366a:	8013      	strh	r3, [r2, #0]
	zUp_dt = zUp_Rise - zUp_Fall;
 800366c:	4b5b      	ldr	r3, [pc, #364]	@ (80037dc <remote_recieve+0x1dc>)
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	4b5b      	ldr	r3, [pc, #364]	@ (80037e0 <remote_recieve+0x1e0>)
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	4a5a      	ldr	r2, [pc, #360]	@ (80037e4 <remote_recieve+0x1e4>)
 800367a:	6013      	str	r3, [r2, #0]
	if(zUp_Rise>zUp_Fall)
 800367c:	4b57      	ldr	r3, [pc, #348]	@ (80037dc <remote_recieve+0x1dc>)
 800367e:	881a      	ldrh	r2, [r3, #0]
 8003680:	4b57      	ldr	r3, [pc, #348]	@ (80037e0 <remote_recieve+0x1e0>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d907      	bls.n	8003698 <remote_recieve+0x98>
		zUp = zUp_dt + 19999 ;
 8003688:	4b56      	ldr	r3, [pc, #344]	@ (80037e4 <remote_recieve+0x1e4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8003690:	331f      	adds	r3, #31
 8003692:	4a55      	ldr	r2, [pc, #340]	@ (80037e8 <remote_recieve+0x1e8>)
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e003      	b.n	80036a0 <remote_recieve+0xa0>
	else
		zUp = zUp_dt;
 8003698:	4b52      	ldr	r3, [pc, #328]	@ (80037e4 <remote_recieve+0x1e4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a52      	ldr	r2, [pc, #328]	@ (80037e8 <remote_recieve+0x1e8>)
 800369e:	6013      	str	r3, [r2, #0]

	zDown_Rise = __HAL_TIM_GET_COMPARE(&htim20,TIM_CHANNEL_3);
 80036a0:	4b52      	ldr	r3, [pc, #328]	@ (80037ec <remote_recieve+0x1ec>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	4a51      	ldr	r2, [pc, #324]	@ (80037f0 <remote_recieve+0x1f0>)
 80036aa:	8013      	strh	r3, [r2, #0]
	zDown_Fall = __HAL_TIM_GET_COMPARE(&htim20,TIM_CHANNEL_4);
 80036ac:	4b4f      	ldr	r3, [pc, #316]	@ (80037ec <remote_recieve+0x1ec>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	4a4f      	ldr	r2, [pc, #316]	@ (80037f4 <remote_recieve+0x1f4>)
 80036b6:	8013      	strh	r3, [r2, #0]
	zDown_dt = zDown_Rise - zDown_Fall;
 80036b8:	4b4d      	ldr	r3, [pc, #308]	@ (80037f0 <remote_recieve+0x1f0>)
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	4b4d      	ldr	r3, [pc, #308]	@ (80037f4 <remote_recieve+0x1f4>)
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	4a4c      	ldr	r2, [pc, #304]	@ (80037f8 <remote_recieve+0x1f8>)
 80036c6:	6013      	str	r3, [r2, #0]
	if(zDown_Rise>zDown_Fall)
 80036c8:	4b49      	ldr	r3, [pc, #292]	@ (80037f0 <remote_recieve+0x1f0>)
 80036ca:	881a      	ldrh	r2, [r3, #0]
 80036cc:	4b49      	ldr	r3, [pc, #292]	@ (80037f4 <remote_recieve+0x1f4>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d907      	bls.n	80036e4 <remote_recieve+0xe4>
		zDown = zDown_dt + 19999 ;
 80036d4:	4b48      	ldr	r3, [pc, #288]	@ (80037f8 <remote_recieve+0x1f8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80036dc:	331f      	adds	r3, #31
 80036de:	4a47      	ldr	r2, [pc, #284]	@ (80037fc <remote_recieve+0x1fc>)
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e003      	b.n	80036ec <remote_recieve+0xec>
	else
		zDown = zDown_dt;
 80036e4:	4b44      	ldr	r3, [pc, #272]	@ (80037f8 <remote_recieve+0x1f8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a44      	ldr	r2, [pc, #272]	@ (80037fc <remote_recieve+0x1fc>)
 80036ea:	6013      	str	r3, [r2, #0]


	joySel1_Rise = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_1);
 80036ec:	4b44      	ldr	r3, [pc, #272]	@ (8003800 <remote_recieve+0x200>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	4a43      	ldr	r2, [pc, #268]	@ (8003804 <remote_recieve+0x204>)
 80036f6:	8013      	strh	r3, [r2, #0]
	joySel1_Fall = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_2);
 80036f8:	4b41      	ldr	r3, [pc, #260]	@ (8003800 <remote_recieve+0x200>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fe:	b29b      	uxth	r3, r3
 8003700:	4a41      	ldr	r2, [pc, #260]	@ (8003808 <remote_recieve+0x208>)
 8003702:	8013      	strh	r3, [r2, #0]
	joySel1_dt = joySel1_Rise - joySel1_Fall;
 8003704:	4b3f      	ldr	r3, [pc, #252]	@ (8003804 <remote_recieve+0x204>)
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	4b3f      	ldr	r3, [pc, #252]	@ (8003808 <remote_recieve+0x208>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	4a3e      	ldr	r2, [pc, #248]	@ (800380c <remote_recieve+0x20c>)
 8003712:	6013      	str	r3, [r2, #0]
	if(joySel1_Rise > joySel1_Fall)
 8003714:	4b3b      	ldr	r3, [pc, #236]	@ (8003804 <remote_recieve+0x204>)
 8003716:	881a      	ldrh	r2, [r3, #0]
 8003718:	4b3b      	ldr	r3, [pc, #236]	@ (8003808 <remote_recieve+0x208>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d907      	bls.n	8003730 <remote_recieve+0x130>
		joySel1 = joySel1_dt + 19999 ;
 8003720:	4b3a      	ldr	r3, [pc, #232]	@ (800380c <remote_recieve+0x20c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8003728:	331f      	adds	r3, #31
 800372a:	4a39      	ldr	r2, [pc, #228]	@ (8003810 <remote_recieve+0x210>)
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e003      	b.n	8003738 <remote_recieve+0x138>
	else
		joySel1 = joySel1_dt;
 8003730:	4b36      	ldr	r3, [pc, #216]	@ (800380c <remote_recieve+0x20c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a36      	ldr	r2, [pc, #216]	@ (8003810 <remote_recieve+0x210>)
 8003736:	6013      	str	r3, [r2, #0]

	joySel2_Rise = __HAL_TIM_GET_COMPARE(&htim20,TIM_CHANNEL_1);
 8003738:	4b2c      	ldr	r3, [pc, #176]	@ (80037ec <remote_recieve+0x1ec>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373e:	b29b      	uxth	r3, r3
 8003740:	4a34      	ldr	r2, [pc, #208]	@ (8003814 <remote_recieve+0x214>)
 8003742:	8013      	strh	r3, [r2, #0]
	joySel2_Fall = __HAL_TIM_GET_COMPARE(&htim20,TIM_CHANNEL_2);
 8003744:	4b29      	ldr	r3, [pc, #164]	@ (80037ec <remote_recieve+0x1ec>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374a:	b29b      	uxth	r3, r3
 800374c:	4a32      	ldr	r2, [pc, #200]	@ (8003818 <remote_recieve+0x218>)
 800374e:	8013      	strh	r3, [r2, #0]
	joySel2_dt = joySel2_Rise - joySel2_Fall;
 8003750:	4b30      	ldr	r3, [pc, #192]	@ (8003814 <remote_recieve+0x214>)
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	4b30      	ldr	r3, [pc, #192]	@ (8003818 <remote_recieve+0x218>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	4a2f      	ldr	r2, [pc, #188]	@ (800381c <remote_recieve+0x21c>)
 800375e:	6013      	str	r3, [r2, #0]
	if(joySel2_Rise > joySel2_Fall)
 8003760:	4b2c      	ldr	r3, [pc, #176]	@ (8003814 <remote_recieve+0x214>)
 8003762:	881a      	ldrh	r2, [r3, #0]
 8003764:	4b2c      	ldr	r3, [pc, #176]	@ (8003818 <remote_recieve+0x218>)
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d907      	bls.n	800377c <remote_recieve+0x17c>
		joySel2 = joySel2_dt + 19999 ;
 800376c:	4b2b      	ldr	r3, [pc, #172]	@ (800381c <remote_recieve+0x21c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8003774:	331f      	adds	r3, #31
 8003776:	4a2a      	ldr	r2, [pc, #168]	@ (8003820 <remote_recieve+0x220>)
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e003      	b.n	8003784 <remote_recieve+0x184>
	else
		joySel2 = joySel2_dt;
 800377c:	4b27      	ldr	r3, [pc, #156]	@ (800381c <remote_recieve+0x21c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a27      	ldr	r2, [pc, #156]	@ (8003820 <remote_recieve+0x220>)
 8003782:	6013      	str	r3, [r2, #0]

	joySave_Rise = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
 8003784:	4b27      	ldr	r3, [pc, #156]	@ (8003824 <remote_recieve+0x224>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378a:	b29b      	uxth	r3, r3
 800378c:	4a26      	ldr	r2, [pc, #152]	@ (8003828 <remote_recieve+0x228>)
 800378e:	8013      	strh	r3, [r2, #0]
	joySave_Fall = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2);
 8003790:	4b24      	ldr	r3, [pc, #144]	@ (8003824 <remote_recieve+0x224>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	b29b      	uxth	r3, r3
 8003798:	4a24      	ldr	r2, [pc, #144]	@ (800382c <remote_recieve+0x22c>)
 800379a:	8013      	strh	r3, [r2, #0]
	joySave_dt = joySave_Rise - joySave_Fall;
 800379c:	4b22      	ldr	r3, [pc, #136]	@ (8003828 <remote_recieve+0x228>)
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b22      	ldr	r3, [pc, #136]	@ (800382c <remote_recieve+0x22c>)
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	4a21      	ldr	r2, [pc, #132]	@ (8003830 <remote_recieve+0x230>)
 80037aa:	6013      	str	r3, [r2, #0]
	if(joySave_Rise > joySave_Fall)
 80037ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003828 <remote_recieve+0x228>)
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	4b1e      	ldr	r3, [pc, #120]	@ (800382c <remote_recieve+0x22c>)
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d93f      	bls.n	8003838 <remote_recieve+0x238>
		joySave = joySave_dt + 19999 ;
 80037b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003830 <remote_recieve+0x230>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80037c0:	331f      	adds	r3, #31
 80037c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003834 <remote_recieve+0x234>)
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e03b      	b.n	8003840 <remote_recieve+0x240>
 80037c8:	20000998 	.word	0x20000998
 80037cc:	20000570 	.word	0x20000570
 80037d0:	20000572 	.word	0x20000572
 80037d4:	2000056c 	.word	0x2000056c
 80037d8:	20000568 	.word	0x20000568
 80037dc:	20000538 	.word	0x20000538
 80037e0:	2000053a 	.word	0x2000053a
 80037e4:	2000052c 	.word	0x2000052c
 80037e8:	20000528 	.word	0x20000528
 80037ec:	20000b30 	.word	0x20000b30
 80037f0:	2000053c 	.word	0x2000053c
 80037f4:	2000053e 	.word	0x2000053e
 80037f8:	20000534 	.word	0x20000534
 80037fc:	20000530 	.word	0x20000530
 8003800:	20000800 	.word	0x20000800
 8003804:	20000550 	.word	0x20000550
 8003808:	20000552 	.word	0x20000552
 800380c:	20000548 	.word	0x20000548
 8003810:	20000540 	.word	0x20000540
 8003814:	20000554 	.word	0x20000554
 8003818:	20000556 	.word	0x20000556
 800381c:	2000054c 	.word	0x2000054c
 8003820:	20000544 	.word	0x20000544
 8003824:	20000734 	.word	0x20000734
 8003828:	20000560 	.word	0x20000560
 800382c:	20000562 	.word	0x20000562
 8003830:	2000055c 	.word	0x2000055c
 8003834:	20000558 	.word	0x20000558
	else
		joySave = joySave_dt;
 8003838:	4b9f      	ldr	r3, [pc, #636]	@ (8003ab8 <remote_recieve+0x4b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a9f      	ldr	r2, [pc, #636]	@ (8003abc <remote_recieve+0x4bc>)
 800383e:	6013      	str	r3, [r2, #0]



	if(modeSelection  == 0 || modeSelection == 4){
 8003840:	4b9f      	ldr	r3, [pc, #636]	@ (8003ac0 <remote_recieve+0x4c0>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <remote_recieve+0x252>
 8003848:	4b9d      	ldr	r3, [pc, #628]	@ (8003ac0 <remote_recieve+0x4c0>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b04      	cmp	r3, #4
 800384e:	f040 80c0 	bne.w	80039d2 <remote_recieve+0x3d2>
		if(zUp < -2000 && zUp > -2010){
 8003852:	4b9c      	ldr	r3, [pc, #624]	@ (8003ac4 <remote_recieve+0x4c4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 800385a:	da43      	bge.n	80038e4 <remote_recieve+0x2e4>
 800385c:	4b99      	ldr	r3, [pc, #612]	@ (8003ac4 <remote_recieve+0x4c4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f46f 62fb 	mvn.w	r2, #2008	@ 0x7d8
 8003864:	4293      	cmp	r3, r2
 8003866:	db3d      	blt.n	80038e4 <remote_recieve+0x2e4>
			p1Blink();
 8003868:	f7fe fdbe 	bl	80023e8 <p1Blink>
			p2Off();
 800386c:	f7fe fd6a 	bl	8002344 <p2Off>
			remoteCheck = 1;
 8003870:	4b95      	ldr	r3, [pc, #596]	@ (8003ac8 <remote_recieve+0x4c8>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
			motor_run(9000, 1);
 8003876:	2201      	movs	r2, #1
 8003878:	f242 3028 	movw	r0, #9000	@ 0x2328
 800387c:	f04f 0100 	mov.w	r1, #0
 8003880:	f7ff fdec 	bl	800345c <motor_run>
			if(goPoint_times  < HAL_GetTick()){
 8003884:	f002 f862 	bl	800594c <HAL_GetTick>
 8003888:	4603      	mov	r3, r0
 800388a:	2200      	movs	r2, #0
 800388c:	461c      	mov	r4, r3
 800388e:	4615      	mov	r5, r2
 8003890:	4b8e      	ldr	r3, [pc, #568]	@ (8003acc <remote_recieve+0x4cc>)
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	42a2      	cmp	r2, r4
 8003898:	41ab      	sbcs	r3, r5
 800389a:	d21b      	bcs.n	80038d4 <remote_recieve+0x2d4>
				goPointgoal = linearPos + 1;
 800389c:	4b8c      	ldr	r3, [pc, #560]	@ (8003ad0 <remote_recieve+0x4d0>)
 800389e:	edd3 7a00 	vldr	s15, [r3]
 80038a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038aa:	ee17 0a90 	vmov	r0, s15
 80038ae:	f7fd fab5 	bl	8000e1c <__aeabi_f2ulz>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4987      	ldr	r1, [pc, #540]	@ (8003ad4 <remote_recieve+0x4d4>)
 80038b8:	e9c1 2300 	strd	r2, r3, [r1]
				goPoint_times = HAL_GetTick() + 10;
 80038bc:	f002 f846 	bl	800594c <HAL_GetTick>
 80038c0:	4603      	mov	r3, r0
 80038c2:	330a      	adds	r3, #10
 80038c4:	2200      	movs	r2, #0
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	617a      	str	r2, [r7, #20]
 80038ca:	4b80      	ldr	r3, [pc, #512]	@ (8003acc <remote_recieve+0x4cc>)
 80038cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038d0:	e9c3 1200 	strd	r1, r2, [r3]
			}
			gopoint_act = 1;
 80038d4:	4980      	ldr	r1, [pc, #512]	@ (8003ad8 <remote_recieve+0x4d8>)
 80038d6:	f04f 0201 	mov.w	r2, #1
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9c1 2300 	strd	r2, r3, [r1]
		if(zUp < -2000 && zUp > -2010){
 80038e2:	e024      	b.n	800392e <remote_recieve+0x32e>
//			trajec_target = linearPos + 10;
		}
		else if(zDown > 38000 && zDown < 38800){
 80038e4:	4b7d      	ldr	r3, [pc, #500]	@ (8003adc <remote_recieve+0x4dc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f249 4270 	movw	r2, #38000	@ 0x9470
 80038ec:	4293      	cmp	r3, r2
 80038ee:	dd14      	ble.n	800391a <remote_recieve+0x31a>
 80038f0:	4b7a      	ldr	r3, [pc, #488]	@ (8003adc <remote_recieve+0x4dc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f249 728f 	movw	r2, #38799	@ 0x978f
 80038f8:	4293      	cmp	r3, r2
 80038fa:	dc0e      	bgt.n	800391a <remote_recieve+0x31a>
			p2Blink();
 80038fc:	f7fe fd38 	bl	8002370 <p2Blink>
			p1Off();
 8003900:	f7fe fd2a 	bl	8002358 <p1Off>
			remoteCheck = 2;
 8003904:	4b70      	ldr	r3, [pc, #448]	@ (8003ac8 <remote_recieve+0x4c8>)
 8003906:	2202      	movs	r2, #2
 8003908:	601a      	str	r2, [r3, #0]
			motor_run(7500, 2);
 800390a:	2202      	movs	r2, #2
 800390c:	f641 504c 	movw	r0, #7500	@ 0x1d4c
 8003910:	f04f 0100 	mov.w	r1, #0
 8003914:	f7ff fda2 	bl	800345c <motor_run>
		else if(zDown > 38000 && zDown < 38800){
 8003918:	e009      	b.n	800392e <remote_recieve+0x32e>
		}
		else{
			motor_run(0, 3);
 800391a:	2203      	movs	r2, #3
 800391c:	f04f 0000 	mov.w	r0, #0
 8003920:	f04f 0100 	mov.w	r1, #0
 8003924:	f7ff fd9a 	bl	800345c <motor_run>
			remoteCheck = 0;
 8003928:	4b67      	ldr	r3, [pc, #412]	@ (8003ac8 <remote_recieve+0x4c8>)
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
		}

		if(JoyxPosition < 38100){
 800392e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ae0 <remote_recieve+0x4e0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f249 42d3 	movw	r2, #38099	@ 0x94d3
 8003936:	4293      	cmp	r3, r2
 8003938:	dc22      	bgt.n	8003980 <remote_recieve+0x380>
			if(JoyxPosition_timestamp < HAL_GetTick() && xAxisPosition < 100){
 800393a:	f002 f807 	bl	800594c <HAL_GetTick>
 800393e:	4603      	mov	r3, r0
 8003940:	2200      	movs	r2, #0
 8003942:	469a      	mov	sl, r3
 8003944:	4693      	mov	fp, r2
 8003946:	4b67      	ldr	r3, [pc, #412]	@ (8003ae4 <remote_recieve+0x4e4>)
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	4552      	cmp	r2, sl
 800394e:	eb73 030b 	sbcs.w	r3, r3, fp
 8003952:	d23e      	bcs.n	80039d2 <remote_recieve+0x3d2>
 8003954:	4b64      	ldr	r3, [pc, #400]	@ (8003ae8 <remote_recieve+0x4e8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b63      	cmp	r3, #99	@ 0x63
 800395a:	dc3a      	bgt.n	80039d2 <remote_recieve+0x3d2>
				xAxisPosition += 1;
 800395c:	4b62      	ldr	r3, [pc, #392]	@ (8003ae8 <remote_recieve+0x4e8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	4a61      	ldr	r2, [pc, #388]	@ (8003ae8 <remote_recieve+0x4e8>)
 8003964:	6013      	str	r3, [r2, #0]
				JoyxPosition_timestamp = HAL_GetTick() + 20;
 8003966:	f001 fff1 	bl	800594c <HAL_GetTick>
 800396a:	4603      	mov	r3, r0
 800396c:	3314      	adds	r3, #20
 800396e:	2200      	movs	r2, #0
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	60fa      	str	r2, [r7, #12]
 8003974:	4b5b      	ldr	r3, [pc, #364]	@ (8003ae4 <remote_recieve+0x4e4>)
 8003976:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800397a:	e9c3 1200 	strd	r1, r2, [r3]
 800397e:	e028      	b.n	80039d2 <remote_recieve+0x3d2>
			}
		}
		else if(JoyxPosition > 39000 && xAxisPosition > -100){
 8003980:	4b57      	ldr	r3, [pc, #348]	@ (8003ae0 <remote_recieve+0x4e0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f649 0258 	movw	r2, #39000	@ 0x9858
 8003988:	4293      	cmp	r3, r2
 800398a:	dd22      	ble.n	80039d2 <remote_recieve+0x3d2>
 800398c:	4b56      	ldr	r3, [pc, #344]	@ (8003ae8 <remote_recieve+0x4e8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8003994:	db1d      	blt.n	80039d2 <remote_recieve+0x3d2>
			if(JoyxPosition_timestamp < HAL_GetTick()){
 8003996:	f001 ffd9 	bl	800594c <HAL_GetTick>
 800399a:	4603      	mov	r3, r0
 800399c:	2200      	movs	r2, #0
 800399e:	4698      	mov	r8, r3
 80039a0:	4691      	mov	r9, r2
 80039a2:	4b50      	ldr	r3, [pc, #320]	@ (8003ae4 <remote_recieve+0x4e4>)
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	4542      	cmp	r2, r8
 80039aa:	eb73 0309 	sbcs.w	r3, r3, r9
 80039ae:	d210      	bcs.n	80039d2 <remote_recieve+0x3d2>
				xAxisPosition -= 1;
 80039b0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae8 <remote_recieve+0x4e8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	4a4c      	ldr	r2, [pc, #304]	@ (8003ae8 <remote_recieve+0x4e8>)
 80039b8:	6013      	str	r3, [r2, #0]
				JoyxPosition_timestamp = HAL_GetTick() + 20;
 80039ba:	f001 ffc7 	bl	800594c <HAL_GetTick>
 80039be:	4603      	mov	r3, r0
 80039c0:	3314      	adds	r3, #20
 80039c2:	2200      	movs	r2, #0
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	4b46      	ldr	r3, [pc, #280]	@ (8003ae4 <remote_recieve+0x4e4>)
 80039ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039ce:	e9c3 1200 	strd	r1, r2, [r3]
			}
		}
	}

	if(joySel1 > 39000 && joySel1 < 40000){
 80039d2:	4b46      	ldr	r3, [pc, #280]	@ (8003aec <remote_recieve+0x4ec>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f649 0258 	movw	r2, #39000	@ 0x9858
 80039da:	4293      	cmp	r3, r2
 80039dc:	dd2f      	ble.n	8003a3e <remote_recieve+0x43e>
 80039de:	4b43      	ldr	r3, [pc, #268]	@ (8003aec <remote_recieve+0x4ec>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80039e6:	4293      	cmp	r3, r2
 80039e8:	dc29      	bgt.n	8003a3e <remote_recieve+0x43e>
		if(joySel2 > 39000) ShelvesSelect = 1;
 80039ea:	4b41      	ldr	r3, [pc, #260]	@ (8003af0 <remote_recieve+0x4f0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f649 0258 	movw	r2, #39000	@ 0x9858
 80039f2:	4293      	cmp	r3, r2
 80039f4:	dd03      	ble.n	80039fe <remote_recieve+0x3fe>
 80039f6:	4b3f      	ldr	r3, [pc, #252]	@ (8003af4 <remote_recieve+0x4f4>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	e055      	b.n	8003aaa <remote_recieve+0x4aa>
		else  if(joySel2 > 38500 && joySel2 < 39000) ShelvesSelect = 2;
 80039fe:	4b3c      	ldr	r3, [pc, #240]	@ (8003af0 <remote_recieve+0x4f0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f249 6264 	movw	r2, #38500	@ 0x9664
 8003a06:	4293      	cmp	r3, r2
 8003a08:	dd09      	ble.n	8003a1e <remote_recieve+0x41e>
 8003a0a:	4b39      	ldr	r3, [pc, #228]	@ (8003af0 <remote_recieve+0x4f0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003a12:	4293      	cmp	r3, r2
 8003a14:	dc03      	bgt.n	8003a1e <remote_recieve+0x41e>
 8003a16:	4b37      	ldr	r3, [pc, #220]	@ (8003af4 <remote_recieve+0x4f4>)
 8003a18:	2202      	movs	r2, #2
 8003a1a:	701a      	strb	r2, [r3, #0]
		if(joySel2 > 39000) ShelvesSelect = 1;
 8003a1c:	e045      	b.n	8003aaa <remote_recieve+0x4aa>
		else if(joySel2 > 38000 && joySel2 < 38100) ShelvesSelect = 3;
 8003a1e:	4b34      	ldr	r3, [pc, #208]	@ (8003af0 <remote_recieve+0x4f0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f249 4270 	movw	r2, #38000	@ 0x9470
 8003a26:	4293      	cmp	r3, r2
 8003a28:	dd3f      	ble.n	8003aaa <remote_recieve+0x4aa>
 8003a2a:	4b31      	ldr	r3, [pc, #196]	@ (8003af0 <remote_recieve+0x4f0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f249 42d3 	movw	r2, #38099	@ 0x94d3
 8003a32:	4293      	cmp	r3, r2
 8003a34:	dc39      	bgt.n	8003aaa <remote_recieve+0x4aa>
 8003a36:	4b2f      	ldr	r3, [pc, #188]	@ (8003af4 <remote_recieve+0x4f4>)
 8003a38:	2203      	movs	r2, #3
 8003a3a:	701a      	strb	r2, [r3, #0]
		if(joySel2 > 39000) ShelvesSelect = 1;
 8003a3c:	e035      	b.n	8003aaa <remote_recieve+0x4aa>
	}
	else if(joySel1 > 38000 && joySel1 < 39000){
 8003a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003aec <remote_recieve+0x4ec>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f249 4270 	movw	r2, #38000	@ 0x9470
 8003a46:	4293      	cmp	r3, r2
 8003a48:	dd30      	ble.n	8003aac <remote_recieve+0x4ac>
 8003a4a:	4b28      	ldr	r3, [pc, #160]	@ (8003aec <remote_recieve+0x4ec>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003a52:	4293      	cmp	r3, r2
 8003a54:	dc2a      	bgt.n	8003aac <remote_recieve+0x4ac>
		if(joySel2 > 38000 && joySel2 < 38100) ShelvesSelect = 4;
 8003a56:	4b26      	ldr	r3, [pc, #152]	@ (8003af0 <remote_recieve+0x4f0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f249 4270 	movw	r2, #38000	@ 0x9470
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	dd09      	ble.n	8003a76 <remote_recieve+0x476>
 8003a62:	4b23      	ldr	r3, [pc, #140]	@ (8003af0 <remote_recieve+0x4f0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f249 42d3 	movw	r2, #38099	@ 0x94d3
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	dc03      	bgt.n	8003a76 <remote_recieve+0x476>
 8003a6e:	4b21      	ldr	r3, [pc, #132]	@ (8003af4 <remote_recieve+0x4f4>)
 8003a70:	2204      	movs	r2, #4
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e01a      	b.n	8003aac <remote_recieve+0x4ac>
		else  if(joySel2 > 38500 && joySel2 < 39000) ShelvesSelect = 5;
 8003a76:	4b1e      	ldr	r3, [pc, #120]	@ (8003af0 <remote_recieve+0x4f0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f249 6264 	movw	r2, #38500	@ 0x9664
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	dd09      	ble.n	8003a96 <remote_recieve+0x496>
 8003a82:	4b1b      	ldr	r3, [pc, #108]	@ (8003af0 <remote_recieve+0x4f0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	dc03      	bgt.n	8003a96 <remote_recieve+0x496>
 8003a8e:	4b19      	ldr	r3, [pc, #100]	@ (8003af4 <remote_recieve+0x4f4>)
 8003a90:	2205      	movs	r2, #5
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	e00a      	b.n	8003aac <remote_recieve+0x4ac>
		else if(joySel2 > 39000) ShelvesSelect = 6;
 8003a96:	4b16      	ldr	r3, [pc, #88]	@ (8003af0 <remote_recieve+0x4f0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f649 0258 	movw	r2, #39000	@ 0x9858
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	dd04      	ble.n	8003aac <remote_recieve+0x4ac>
 8003aa2:	4b14      	ldr	r3, [pc, #80]	@ (8003af4 <remote_recieve+0x4f4>)
 8003aa4:	2206      	movs	r2, #6
 8003aa6:	701a      	strb	r2, [r3, #0]
	}
}
 8003aa8:	e000      	b.n	8003aac <remote_recieve+0x4ac>
		if(joySel2 > 39000) ShelvesSelect = 1;
 8003aaa:	bf00      	nop
}
 8003aac:	bf00      	nop
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000055c 	.word	0x2000055c
 8003abc:	20000558 	.word	0x20000558
 8003ac0:	20000438 	.word	0x20000438
 8003ac4:	20000528 	.word	0x20000528
 8003ac8:	2000049c 	.word	0x2000049c
 8003acc:	200004f0 	.word	0x200004f0
 8003ad0:	20000494 	.word	0x20000494
 8003ad4:	200004e8 	.word	0x200004e8
 8003ad8:	200004e0 	.word	0x200004e0
 8003adc:	20000530 	.word	0x20000530
 8003ae0:	20000568 	.word	0x20000568
 8003ae4:	20000520 	.word	0x20000520
 8003ae8:	2000048c 	.word	0x2000048c
 8003aec:	20000540 	.word	0x20000540
 8003af0:	20000544 	.word	0x20000544
 8003af4:	20000564 	.word	0x20000564

08003af8 <go_point>:

int go_point(){
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	if(goPoint_trig == 1){
 8003afc:	4b58      	ldr	r3, [pc, #352]	@ (8003c60 <go_point+0x168>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	1e51      	subs	r1, r2, #1
 8003b04:	430b      	orrs	r3, r1
 8003b06:	d127      	bne.n	8003b58 <go_point+0x60>
		if(linearPos >= goPointgoal){
 8003b08:	4b56      	ldr	r3, [pc, #344]	@ (8003c64 <go_point+0x16c>)
 8003b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0e:	4610      	mov	r0, r2
 8003b10:	4619      	mov	r1, r3
 8003b12:	f7fd f925 	bl	8000d60 <__aeabi_ul2f>
 8003b16:	ee07 0a10 	vmov	s14, r0
 8003b1a:	4b53      	ldr	r3, [pc, #332]	@ (8003c68 <go_point+0x170>)
 8003b1c:	edd3 7a00 	vldr	s15, [r3]
 8003b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b28:	d816      	bhi.n	8003b58 <go_point+0x60>
			motor_run(0, 3);
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	f04f 0000 	mov.w	r0, #0
 8003b30:	f04f 0100 	mov.w	r1, #0
 8003b34:	f7ff fc92 	bl	800345c <motor_run>
			goPoint_trig = 0;
 8003b38:	4949      	ldr	r1, [pc, #292]	@ (8003c60 <go_point+0x168>)
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	e9c1 2300 	strd	r2, r3, [r1]
			gopoint_act = 0;
 8003b46:	4949      	ldr	r1, [pc, #292]	@ (8003c6c <go_point+0x174>)
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9c1 2300 	strd	r2, r3, [r1]
			return 4;
 8003b54:	2304      	movs	r3, #4
 8003b56:	e080      	b.n	8003c5a <go_point+0x162>
		}
	}
	if(goPoint_trig == 2){
 8003b58:	4b41      	ldr	r3, [pc, #260]	@ (8003c60 <go_point+0x168>)
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	1e91      	subs	r1, r2, #2
 8003b60:	430b      	orrs	r3, r1
 8003b62:	d127      	bne.n	8003bb4 <go_point+0xbc>
		if(linearPos <= goPointgoal){
 8003b64:	4b3f      	ldr	r3, [pc, #252]	@ (8003c64 <go_point+0x16c>)
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	f7fd f8f7 	bl	8000d60 <__aeabi_ul2f>
 8003b72:	ee07 0a10 	vmov	s14, r0
 8003b76:	4b3c      	ldr	r3, [pc, #240]	@ (8003c68 <go_point+0x170>)
 8003b78:	edd3 7a00 	vldr	s15, [r3]
 8003b7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b84:	db16      	blt.n	8003bb4 <go_point+0xbc>
			motor_run(0, 3);
 8003b86:	2203      	movs	r2, #3
 8003b88:	f04f 0000 	mov.w	r0, #0
 8003b8c:	f04f 0100 	mov.w	r1, #0
 8003b90:	f7ff fc64 	bl	800345c <motor_run>
			goPoint_trig = 0;
 8003b94:	4932      	ldr	r1, [pc, #200]	@ (8003c60 <go_point+0x168>)
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	e9c1 2300 	strd	r2, r3, [r1]
			gopoint_act = 0;
 8003ba2:	4932      	ldr	r1, [pc, #200]	@ (8003c6c <go_point+0x174>)
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9c1 2300 	strd	r2, r3, [r1]
			return 4;
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	e052      	b.n	8003c5a <go_point+0x162>
		}
	}

	if(gopoint_act == 1){
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c6c <go_point+0x174>)
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	1e51      	subs	r1, r2, #1
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	d14c      	bne.n	8003c5a <go_point+0x162>
		if(linearPos < goPointgoal){
 8003bc0:	4b28      	ldr	r3, [pc, #160]	@ (8003c64 <go_point+0x16c>)
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f7fd f8c9 	bl	8000d60 <__aeabi_ul2f>
 8003bce:	ee07 0a10 	vmov	s14, r0
 8003bd2:	4b25      	ldr	r3, [pc, #148]	@ (8003c68 <go_point+0x170>)
 8003bd4:	edd3 7a00 	vldr	s15, [r3]
 8003bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be0:	dd15      	ble.n	8003c0e <go_point+0x116>
			motor_run(10000, 1);
 8003be2:	2201      	movs	r2, #1
 8003be4:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003be8:	f04f 0100 	mov.w	r1, #0
 8003bec:	f7ff fc36 	bl	800345c <motor_run>
			goPoint_trig = 1;
 8003bf0:	491b      	ldr	r1, [pc, #108]	@ (8003c60 <go_point+0x168>)
 8003bf2:	f04f 0201 	mov.w	r2, #1
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	e9c1 2300 	strd	r2, r3, [r1]
			jog_goPoint_actt = 1;
 8003bfe:	491c      	ldr	r1, [pc, #112]	@ (8003c70 <go_point+0x178>)
 8003c00:	f04f 0201 	mov.w	r2, #1
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9c1 2300 	strd	r2, r3, [r1]
 8003c0c:	e025      	b.n	8003c5a <go_point+0x162>
		}
		else if(linearPos > goPointgoal){
 8003c0e:	4b15      	ldr	r3, [pc, #84]	@ (8003c64 <go_point+0x16c>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	f7fd f8a2 	bl	8000d60 <__aeabi_ul2f>
 8003c1c:	ee07 0a10 	vmov	s14, r0
 8003c20:	4b11      	ldr	r3, [pc, #68]	@ (8003c68 <go_point+0x170>)
 8003c22:	edd3 7a00 	vldr	s15, [r3]
 8003c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2e:	d514      	bpl.n	8003c5a <go_point+0x162>
			motor_run(7200, 2);
 8003c30:	2202      	movs	r2, #2
 8003c32:	f44f 50e1 	mov.w	r0, #7200	@ 0x1c20
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	f7ff fc0f 	bl	800345c <motor_run>
			goPoint_trig = 2;
 8003c3e:	4908      	ldr	r1, [pc, #32]	@ (8003c60 <go_point+0x168>)
 8003c40:	f04f 0202 	mov.w	r2, #2
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9c1 2300 	strd	r2, r3, [r1]
			jog_goPoint_actt = 1;
 8003c4c:	4908      	ldr	r1, [pc, #32]	@ (8003c70 <go_point+0x178>)
 8003c4e:	f04f 0201 	mov.w	r2, #1
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	200004d8 	.word	0x200004d8
 8003c64:	200004e8 	.word	0x200004e8
 8003c68:	20000494 	.word	0x20000494
 8003c6c:	200004e0 	.word	0x200004e0
 8003c70:	200004f8 	.word	0x200004f8

08003c74 <speedread>:

void speedread(){
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
	static uint32_t Timestamp = 0;
	if (Timestamp < __HAL_TIM_GET_COUNTER(&htim2)) {
 8003c78:	4b24      	ldr	r3, [pc, #144]	@ (8003d0c <speedread+0x98>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c7e:	4b24      	ldr	r3, [pc, #144]	@ (8003d10 <speedread+0x9c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d93f      	bls.n	8003d06 <speedread+0x92>
		Timestamp = __HAL_TIM_GET_COUNTER(&htim2) + 10000;
 8003c86:	4b21      	ldr	r3, [pc, #132]	@ (8003d0c <speedread+0x98>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003c90:	3310      	adds	r3, #16
 8003c92:	4a1f      	ldr	r2, [pc, #124]	@ (8003d10 <speedread+0x9c>)
 8003c94:	6013      	str	r3, [r2, #0]
		QEI_raw = __HAL_TIM_GET_COUNTER(&htim1);
 8003c96:	4b1f      	ldr	r3, [pc, #124]	@ (8003d14 <speedread+0xa0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003d18 <speedread+0xa4>)
 8003c9e:	6013      	str	r3, [r2, #0]
		changeUnit();
 8003ca0:	f000 f8aa 	bl	8003df8 <changeUnit>
		tim_velo_new = __HAL_TIM_GET_COUNTER(&htim2);
 8003ca4:	4b19      	ldr	r3, [pc, #100]	@ (8003d0c <speedread+0x98>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d1c <speedread+0xa8>)
 8003cb4:	edc3 7a00 	vstr	s15, [r3]
		dt_velo = (tim_velo_new - tim_velo_last)/1000000.0;
 8003cb8:	4b18      	ldr	r3, [pc, #96]	@ (8003d1c <speedread+0xa8>)
 8003cba:	ed93 7a00 	vldr	s14, [r3]
 8003cbe:	4b18      	ldr	r3, [pc, #96]	@ (8003d20 <speedread+0xac>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cc8:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8003d24 <speedread+0xb0>
 8003ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cd0:	4b15      	ldr	r3, [pc, #84]	@ (8003d28 <speedread+0xb4>)
 8003cd2:	edc3 7a00 	vstr	s15, [r3]
		speed = (QEI_mm - LastPos)/dt_velo;
 8003cd6:	4b15      	ldr	r3, [pc, #84]	@ (8003d2c <speedread+0xb8>)
 8003cd8:	ed93 7a00 	vldr	s14, [r3]
 8003cdc:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <speedread+0xbc>)
 8003cde:	edd3 7a00 	vldr	s15, [r3]
 8003ce2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003ce6:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <speedread+0xb4>)
 8003ce8:	ed93 7a00 	vldr	s14, [r3]
 8003cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf0:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <speedread+0xc0>)
 8003cf2:	edc3 7a00 	vstr	s15, [r3]

		LastPos = QEI_mm;
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <speedread+0xb8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8003d30 <speedread+0xbc>)
 8003cfc:	6013      	str	r3, [r2, #0]
		tim_velo_last = tim_velo_new;
 8003cfe:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <speedread+0xa8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a07      	ldr	r2, [pc, #28]	@ (8003d20 <speedread+0xac>)
 8003d04:	6013      	str	r3, [r2, #0]
	}
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000668 	.word	0x20000668
 8003d10:	2000131c 	.word	0x2000131c
 8003d14:	2000059c 	.word	0x2000059c
 8003d18:	2000126c 	.word	0x2000126c
 8003d1c:	200012b8 	.word	0x200012b8
 8003d20:	200012bc 	.word	0x200012bc
 8003d24:	49742400 	.word	0x49742400
 8003d28:	200012b0 	.word	0x200012b0
 8003d2c:	20001270 	.word	0x20001270
 8003d30:	200012ac 	.word	0x200012ac
 8003d34:	200012a8 	.word	0x200012a8

08003d38 <accelread>:

void accelread(){
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
	static uint32_t TimesTamp = 0;
	if (TimesTamp < __HAL_TIM_GET_COUNTER(&htim2)) {
 8003d3c:	4b24      	ldr	r3, [pc, #144]	@ (8003dd0 <accelread+0x98>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d42:	4b24      	ldr	r3, [pc, #144]	@ (8003dd4 <accelread+0x9c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d93c      	bls.n	8003dc4 <accelread+0x8c>
		TimesTamp = __HAL_TIM_GET_COUNTER(&htim2) + 40000;
 8003d4a:	4b21      	ldr	r3, [pc, #132]	@ (8003dd0 <accelread+0x98>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8003d54:	3340      	adds	r3, #64	@ 0x40
 8003d56:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd4 <accelread+0x9c>)
 8003d58:	6013      	str	r3, [r2, #0]

		tim_acc_new = __HAL_TIM_GET_COUNTER(&htim2);
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd0 <accelread+0x98>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d68:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd8 <accelread+0xa0>)
 8003d6a:	edc3 7a00 	vstr	s15, [r3]
		velo_new = speed;
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <accelread+0xa4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1b      	ldr	r2, [pc, #108]	@ (8003de0 <accelread+0xa8>)
 8003d74:	6013      	str	r3, [r2, #0]
		dt_acc = (tim_acc_new - tim_acc_last)/1000000.0;
 8003d76:	4b18      	ldr	r3, [pc, #96]	@ (8003dd8 <accelread+0xa0>)
 8003d78:	ed93 7a00 	vldr	s14, [r3]
 8003d7c:	4b19      	ldr	r3, [pc, #100]	@ (8003de4 <accelread+0xac>)
 8003d7e:	edd3 7a00 	vldr	s15, [r3]
 8003d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d86:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8003de8 <accelread+0xb0>
 8003d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d8e:	4b17      	ldr	r3, [pc, #92]	@ (8003dec <accelread+0xb4>)
 8003d90:	edc3 7a00 	vstr	s15, [r3]
		acc = (velo_new - velo_last)/dt_acc;
 8003d94:	4b12      	ldr	r3, [pc, #72]	@ (8003de0 <accelread+0xa8>)
 8003d96:	ed93 7a00 	vldr	s14, [r3]
 8003d9a:	4b15      	ldr	r3, [pc, #84]	@ (8003df0 <accelread+0xb8>)
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003da4:	4b11      	ldr	r3, [pc, #68]	@ (8003dec <accelread+0xb4>)
 8003da6:	ed93 7a00 	vldr	s14, [r3]
 8003daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dae:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <accelread+0xbc>)
 8003db0:	edc3 7a00 	vstr	s15, [r3]

		velo_last = velo_new;
 8003db4:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <accelread+0xa8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a0d      	ldr	r2, [pc, #52]	@ (8003df0 <accelread+0xb8>)
 8003dba:	6013      	str	r3, [r2, #0]
		tim_acc_last = tim_acc_new;
 8003dbc:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <accelread+0xa0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a08      	ldr	r2, [pc, #32]	@ (8003de4 <accelread+0xac>)
 8003dc2:	6013      	str	r3, [r2, #0]
	}
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000668 	.word	0x20000668
 8003dd4:	20001320 	.word	0x20001320
 8003dd8:	200012c0 	.word	0x200012c0
 8003ddc:	200012a8 	.word	0x200012a8
 8003de0:	200012c8 	.word	0x200012c8
 8003de4:	200012c4 	.word	0x200012c4
 8003de8:	49742400 	.word	0x49742400
 8003dec:	200012b4 	.word	0x200012b4
 8003df0:	200012cc 	.word	0x200012cc
 8003df4:	200012d0 	.word	0x200012d0

08003df8 <changeUnit>:

void changeUnit(){
 8003df8:	b5b0      	push	{r4, r5, r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
	QEI_mm = (QEI_raw/8192.0)*25.326*pi;
 8003dfc:	4b18      	ldr	r3, [pc, #96]	@ (8003e60 <changeUnit+0x68>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fc fb4b 	bl	800049c <__aeabi_ui2d>
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	4b16      	ldr	r3, [pc, #88]	@ (8003e64 <changeUnit+0x6c>)
 8003e0c:	f7fc fcea 	bl	80007e4 <__aeabi_ddiv>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	a30f      	add	r3, pc, #60	@ (adr r3, 8003e58 <changeUnit+0x60>)
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f7fc fbb7 	bl	8000590 <__aeabi_dmul>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4614      	mov	r4, r2
 8003e28:	461d      	mov	r5, r3
 8003e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e68 <changeUnit+0x70>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fc fb56 	bl	80004e0 <__aeabi_f2d>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4620      	mov	r0, r4
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	f7fc fba8 	bl	8000590 <__aeabi_dmul>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	f7fc fe72 	bl	8000b30 <__aeabi_d2f>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4a07      	ldr	r2, [pc, #28]	@ (8003e6c <changeUnit+0x74>)
 8003e50:	6013      	str	r3, [r2, #0]
}
 8003e52:	bf00      	nop
 8003e54:	bdb0      	pop	{r4, r5, r7, pc}
 8003e56:	bf00      	nop
 8003e58:	bc6a7efa 	.word	0xbc6a7efa
 8003e5c:	40395374 	.word	0x40395374
 8003e60:	2000126c 	.word	0x2000126c
 8003e64:	40c00000 	.word	0x40c00000
 8003e68:	20000210 	.word	0x20000210
 8003e6c:	20001270 	.word	0x20001270

08003e70 <HomemadePID>:

void HomemadePID(){
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
//	Now Lastime error errorsum kp ki kd Iterm dinput Lasterror
	set_point = traj[0];
 8003e74:	4bb4      	ldr	r3, [pc, #720]	@ (8004148 <HomemadePID+0x2d8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4ab4      	ldr	r2, [pc, #720]	@ (800414c <HomemadePID+0x2dc>)
 8003e7a:	6013      	str	r3, [r2, #0]
	static uint32_t timestamp = 0;
	if (timestamp < __HAL_TIM_GET_COUNTER(&htim2)) {
 8003e7c:	4bb4      	ldr	r3, [pc, #720]	@ (8004150 <HomemadePID+0x2e0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e82:	4bb4      	ldr	r3, [pc, #720]	@ (8004154 <HomemadePID+0x2e4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	f240 829a 	bls.w	80043c0 <HomemadePID+0x550>
		timestamp = __HAL_TIM_GET_COUNTER(&htim2) + 1000;
 8003e8c:	4bb0      	ldr	r3, [pc, #704]	@ (8004150 <HomemadePID+0x2e0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8003e96:	4aaf      	ldr	r2, [pc, #700]	@ (8004154 <HomemadePID+0x2e4>)
 8003e98:	6013      	str	r3, [r2, #0]
		Now = __HAL_TIM_GET_COUNTER(&htim2);
 8003e9a:	4bad      	ldr	r3, [pc, #692]	@ (8004150 <HomemadePID+0x2e0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	4aad      	ldr	r2, [pc, #692]	@ (8004158 <HomemadePID+0x2e8>)
 8003ea2:	6013      	str	r3, [r2, #0]
		error = set_point - QEI_mm;
 8003ea4:	4ba9      	ldr	r3, [pc, #676]	@ (800414c <HomemadePID+0x2dc>)
 8003ea6:	ed93 7a00 	vldr	s14, [r3]
 8003eaa:	4bac      	ldr	r3, [pc, #688]	@ (800415c <HomemadePID+0x2ec>)
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb4:	4baa      	ldr	r3, [pc, #680]	@ (8004160 <HomemadePID+0x2f0>)
 8003eb6:	edc3 7a00 	vstr	s15, [r3]
		finish_state = 0;
 8003eba:	4baa      	ldr	r3, [pc, #680]	@ (8004164 <HomemadePID+0x2f4>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]

		if(error < 2 && error > -2){
 8003ec0:	4ba7      	ldr	r3, [pc, #668]	@ (8004160 <HomemadePID+0x2f0>)
 8003ec2:	edd3 7a00 	vldr	s15, [r3]
 8003ec6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed2:	d522      	bpl.n	8003f1a <HomemadePID+0xaa>
 8003ed4:	4ba2      	ldr	r3, [pc, #648]	@ (8004160 <HomemadePID+0x2f0>)
 8003ed6:	edd3 7a00 	vldr	s15, [r3]
 8003eda:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee6:	dd18      	ble.n	8003f1a <HomemadePID+0xaa>
			errorsum = 0;
 8003ee8:	4b9f      	ldr	r3, [pc, #636]	@ (8004168 <HomemadePID+0x2f8>)
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
			finish_state = 1;
 8003ef0:	4b9c      	ldr	r3, [pc, #624]	@ (8004164 <HomemadePID+0x2f4>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f00:	f002 fb0c 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 8003f04:	2200      	movs	r2, #0
 8003f06:	2180      	movs	r1, #128	@ 0x80
 8003f08:	4898      	ldr	r0, [pc, #608]	@ (800416c <HomemadePID+0x2fc>)
 8003f0a:	f002 fb07 	bl	800651c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,30000);
 8003f0e:	4b98      	ldr	r3, [pc, #608]	@ (8004170 <HomemadePID+0x300>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003f16:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f18:	e01d      	b.n	8003f56 <HomemadePID+0xe6>
		} else if(error < 11 && error > -11){
 8003f1a:	4b91      	ldr	r3, [pc, #580]	@ (8004160 <HomemadePID+0x2f0>)
 8003f1c:	edd3 7a00 	vldr	s15, [r3]
 8003f20:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8003f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2c:	d513      	bpl.n	8003f56 <HomemadePID+0xe6>
 8003f2e:	4b8c      	ldr	r3, [pc, #560]	@ (8004160 <HomemadePID+0x2f0>)
 8003f30:	edd3 7a00 	vldr	s15, [r3]
 8003f34:	eeba 7a06 	vmov.f32	s14, #166	@ 0xc1300000 -11.0
 8003f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f40:	dd09      	ble.n	8003f56 <HomemadePID+0xe6>
			errorsum += 15;
 8003f42:	4b89      	ldr	r3, [pc, #548]	@ (8004168 <HomemadePID+0x2f8>)
 8003f44:	edd3 7a00 	vldr	s15, [r3]
 8003f48:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f50:	4b85      	ldr	r3, [pc, #532]	@ (8004168 <HomemadePID+0x2f8>)
 8003f52:	edc3 7a00 	vstr	s15, [r3]
		}

		if(error > 32768)
 8003f56:	4b82      	ldr	r3, [pc, #520]	@ (8004160 <HomemadePID+0x2f0>)
 8003f58:	edd3 7a00 	vldr	s15, [r3]
 8003f5c:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8004174 <HomemadePID+0x304>
 8003f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f68:	dd09      	ble.n	8003f7e <HomemadePID+0x10e>
			error -= 65536;
 8003f6a:	4b7d      	ldr	r3, [pc, #500]	@ (8004160 <HomemadePID+0x2f0>)
 8003f6c:	edd3 7a00 	vldr	s15, [r3]
 8003f70:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8004178 <HomemadePID+0x308>
 8003f74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f78:	4b79      	ldr	r3, [pc, #484]	@ (8004160 <HomemadePID+0x2f0>)
 8003f7a:	edc3 7a00 	vstr	s15, [r3]
		if(error < -32768)
 8003f7e:	4b78      	ldr	r3, [pc, #480]	@ (8004160 <HomemadePID+0x2f0>)
 8003f80:	edd3 7a00 	vldr	s15, [r3]
 8003f84:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 800417c <HomemadePID+0x30c>
 8003f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f90:	d509      	bpl.n	8003fa6 <HomemadePID+0x136>
			error += 65536;
 8003f92:	4b73      	ldr	r3, [pc, #460]	@ (8004160 <HomemadePID+0x2f0>)
 8003f94:	edd3 7a00 	vldr	s15, [r3]
 8003f98:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8004178 <HomemadePID+0x308>
 8003f9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8004160 <HomemadePID+0x2f0>)
 8003fa2:	edc3 7a00 	vstr	s15, [r3]

		if(error > 0){
 8003fa6:	4b6e      	ldr	r3, [pc, #440]	@ (8004160 <HomemadePID+0x2f0>)
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb4:	f340 80fc 	ble.w	80041b0 <HomemadePID+0x340>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fc2:	f002 faab 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,1);
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	2180      	movs	r1, #128	@ 0x80
 8003fca:	4868      	ldr	r0, [pc, #416]	@ (800416c <HomemadePID+0x2fc>)
 8003fcc:	f002 faa6 	bl	800651c <HAL_GPIO_WritePin>
			errorsum = errorsum + (error*(Now-Lastime)/10000);
 8003fd0:	4b61      	ldr	r3, [pc, #388]	@ (8004158 <HomemadePID+0x2e8>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8004180 <HomemadePID+0x310>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8004160 <HomemadePID+0x2f0>)
 8003fe4:	edd3 7a00 	vldr	s15, [r3]
 8003fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fec:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8004184 <HomemadePID+0x314>
 8003ff0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ff4:	4b5c      	ldr	r3, [pc, #368]	@ (8004168 <HomemadePID+0x2f8>)
 8003ff6:	edd3 7a00 	vldr	s15, [r3]
 8003ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ffe:	4b5a      	ldr	r3, [pc, #360]	@ (8004168 <HomemadePID+0x2f8>)
 8004000:	edc3 7a00 	vstr	s15, [r3]
			Iterm = ki*errorsum;
 8004004:	4b60      	ldr	r3, [pc, #384]	@ (8004188 <HomemadePID+0x318>)
 8004006:	ed93 7a00 	vldr	s14, [r3]
 800400a:	4b57      	ldr	r3, [pc, #348]	@ (8004168 <HomemadePID+0x2f8>)
 800400c:	edd3 7a00 	vldr	s15, [r3]
 8004010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004014:	4b5d      	ldr	r3, [pc, #372]	@ (800418c <HomemadePID+0x31c>)
 8004016:	edc3 7a00 	vstr	s15, [r3]
			if(Iterm > 65535){
 800401a:	4b5c      	ldr	r3, [pc, #368]	@ (800418c <HomemadePID+0x31c>)
 800401c:	edd3 7a00 	vldr	s15, [r3]
 8004020:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8004190 <HomemadePID+0x320>
 8004024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	dd1a      	ble.n	8004064 <HomemadePID+0x1f4>
				errorsum = (Iterm/ki) - (error*(Now-Lastime));
 800402e:	4b57      	ldr	r3, [pc, #348]	@ (800418c <HomemadePID+0x31c>)
 8004030:	edd3 6a00 	vldr	s13, [r3]
 8004034:	4b54      	ldr	r3, [pc, #336]	@ (8004188 <HomemadePID+0x318>)
 8004036:	edd3 7a00 	vldr	s15, [r3]
 800403a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403e:	4b46      	ldr	r3, [pc, #280]	@ (8004158 <HomemadePID+0x2e8>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b4f      	ldr	r3, [pc, #316]	@ (8004180 <HomemadePID+0x310>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	ee07 3a90 	vmov	s15, r3
 800404c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004050:	4b43      	ldr	r3, [pc, #268]	@ (8004160 <HomemadePID+0x2f0>)
 8004052:	edd3 7a00 	vldr	s15, [r3]
 8004056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800405a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800405e:	4b42      	ldr	r3, [pc, #264]	@ (8004168 <HomemadePID+0x2f8>)
 8004060:	edc3 7a00 	vstr	s15, [r3]
			}
			dinput = (error-Lasterror)/(Now-Lastime);
 8004064:	4b3e      	ldr	r3, [pc, #248]	@ (8004160 <HomemadePID+0x2f0>)
 8004066:	ed93 7a00 	vldr	s14, [r3]
 800406a:	4b4a      	ldr	r3, [pc, #296]	@ (8004194 <HomemadePID+0x324>)
 800406c:	edd3 7a00 	vldr	s15, [r3]
 8004070:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004074:	4b38      	ldr	r3, [pc, #224]	@ (8004158 <HomemadePID+0x2e8>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b41      	ldr	r3, [pc, #260]	@ (8004180 <HomemadePID+0x310>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800408a:	4b43      	ldr	r3, [pc, #268]	@ (8004198 <HomemadePID+0x328>)
 800408c:	edc3 7a00 	vstr	s15, [r3]
			if(errorsum < 0){
 8004090:	4b35      	ldr	r3, [pc, #212]	@ (8004168 <HomemadePID+0x2f8>)
 8004092:	edd3 7a00 	vldr	s15, [r3]
 8004096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800409a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409e:	d507      	bpl.n	80040b0 <HomemadePID+0x240>
				errorsum = errorsum*-1;
 80040a0:	4b31      	ldr	r3, [pc, #196]	@ (8004168 <HomemadePID+0x2f8>)
 80040a2:	edd3 7a00 	vldr	s15, [r3]
 80040a6:	eef1 7a67 	vneg.f32	s15, s15
 80040aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004168 <HomemadePID+0x2f8>)
 80040ac:	edc3 7a00 	vstr	s15, [r3]
			}
			Vfeedback = (kp*error)+(ki*errorsum)+(kd*dinput);
 80040b0:	4b3a      	ldr	r3, [pc, #232]	@ (800419c <HomemadePID+0x32c>)
 80040b2:	ed93 7a00 	vldr	s14, [r3]
 80040b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004160 <HomemadePID+0x2f0>)
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040c0:	4b31      	ldr	r3, [pc, #196]	@ (8004188 <HomemadePID+0x318>)
 80040c2:	edd3 6a00 	vldr	s13, [r3]
 80040c6:	4b28      	ldr	r3, [pc, #160]	@ (8004168 <HomemadePID+0x2f8>)
 80040c8:	edd3 7a00 	vldr	s15, [r3]
 80040cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040d4:	4b32      	ldr	r3, [pc, #200]	@ (80041a0 <HomemadePID+0x330>)
 80040d6:	edd3 6a00 	vldr	s13, [r3]
 80040da:	4b2f      	ldr	r3, [pc, #188]	@ (8004198 <HomemadePID+0x328>)
 80040dc:	edd3 7a00 	vldr	s15, [r3]
 80040e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ec:	ee17 2a90 	vmov	r2, s15
 80040f0:	4b2c      	ldr	r3, [pc, #176]	@ (80041a4 <HomemadePID+0x334>)
 80040f2:	601a      	str	r2, [r3, #0]
			if(Vfeedback > 65536){
 80040f4:	4b2b      	ldr	r3, [pc, #172]	@ (80041a4 <HomemadePID+0x334>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040fc:	d903      	bls.n	8004106 <HomemadePID+0x296>
				Vfeedback = 65536;
 80040fe:	4b29      	ldr	r3, [pc, #164]	@ (80041a4 <HomemadePID+0x334>)
 8004100:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004104:	601a      	str	r2, [r3, #0]
			}

			PWMset = (Vfeedback/65536.0)*30000;
 8004106:	4b27      	ldr	r3, [pc, #156]	@ (80041a4 <HomemadePID+0x334>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc f9c6 	bl	800049c <__aeabi_ui2d>
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	4b24      	ldr	r3, [pc, #144]	@ (80041a8 <HomemadePID+0x338>)
 8004116:	f7fc fb65 	bl	80007e4 <__aeabi_ddiv>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	a307      	add	r3, pc, #28	@ (adr r3, 8004140 <HomemadePID+0x2d0>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f7fc fa32 	bl	8000590 <__aeabi_dmul>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	f7fc fcfc 	bl	8000b30 <__aeabi_d2f>
 8004138:	4603      	mov	r3, r0
 800413a:	4a1c      	ldr	r2, [pc, #112]	@ (80041ac <HomemadePID+0x33c>)
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e12d      	b.n	800439c <HomemadePID+0x52c>
 8004140:	00000000 	.word	0x00000000
 8004144:	40dd4c00 	.word	0x40dd4c00
 8004148:	200012ec 	.word	0x200012ec
 800414c:	20001274 	.word	0x20001274
 8004150:	20000668 	.word	0x20000668
 8004154:	20001324 	.word	0x20001324
 8004158:	2000128c 	.word	0x2000128c
 800415c:	20001270 	.word	0x20001270
 8004160:	20001294 	.word	0x20001294
 8004164:	20000598 	.word	0x20000598
 8004168:	20001298 	.word	0x20001298
 800416c:	48000400 	.word	0x48000400
 8004170:	200008cc 	.word	0x200008cc
 8004174:	47000000 	.word	0x47000000
 8004178:	47800000 	.word	0x47800000
 800417c:	c7000000 	.word	0xc7000000
 8004180:	20001290 	.word	0x20001290
 8004184:	461c4000 	.word	0x461c4000
 8004188:	20001284 	.word	0x20001284
 800418c:	2000129c 	.word	0x2000129c
 8004190:	477fff00 	.word	0x477fff00
 8004194:	200012a4 	.word	0x200012a4
 8004198:	200012a0 	.word	0x200012a0
 800419c:	20001280 	.word	0x20001280
 80041a0:	20001288 	.word	0x20001288
 80041a4:	2000127c 	.word	0x2000127c
 80041a8:	40f00000 	.word	0x40f00000
 80041ac:	20001278 	.word	0x20001278
		}
		else if(error < 0){
 80041b0:	4b87      	ldr	r3, [pc, #540]	@ (80043d0 <HomemadePID+0x560>)
 80041b2:	edd3 7a00 	vldr	s15, [r3]
 80041b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041be:	f140 80d9 	bpl.w	8004374 <HomemadePID+0x504>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,1);
 80041c2:	2201      	movs	r2, #1
 80041c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041cc:	f002 f9a6 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 80041d0:	2200      	movs	r2, #0
 80041d2:	2180      	movs	r1, #128	@ 0x80
 80041d4:	487f      	ldr	r0, [pc, #508]	@ (80043d4 <HomemadePID+0x564>)
 80041d6:	f002 f9a1 	bl	800651c <HAL_GPIO_WritePin>
			error = error*(-1);
 80041da:	4b7d      	ldr	r3, [pc, #500]	@ (80043d0 <HomemadePID+0x560>)
 80041dc:	edd3 7a00 	vldr	s15, [r3]
 80041e0:	eef1 7a67 	vneg.f32	s15, s15
 80041e4:	4b7a      	ldr	r3, [pc, #488]	@ (80043d0 <HomemadePID+0x560>)
 80041e6:	edc3 7a00 	vstr	s15, [r3]

//			if(t < Time_acc_tri){
//				PWMset = 8000;
//			} else{
				errorsum = errorsum + (error*(Now-Lastime)/10000);
 80041ea:	4b7b      	ldr	r3, [pc, #492]	@ (80043d8 <HomemadePID+0x568>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b7b      	ldr	r3, [pc, #492]	@ (80043dc <HomemadePID+0x56c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	ee07 3a90 	vmov	s15, r3
 80041f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041fc:	4b74      	ldr	r3, [pc, #464]	@ (80043d0 <HomemadePID+0x560>)
 80041fe:	edd3 7a00 	vldr	s15, [r3]
 8004202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004206:	eddf 6a76 	vldr	s13, [pc, #472]	@ 80043e0 <HomemadePID+0x570>
 800420a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800420e:	4b75      	ldr	r3, [pc, #468]	@ (80043e4 <HomemadePID+0x574>)
 8004210:	edd3 7a00 	vldr	s15, [r3]
 8004214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004218:	4b72      	ldr	r3, [pc, #456]	@ (80043e4 <HomemadePID+0x574>)
 800421a:	edc3 7a00 	vstr	s15, [r3]
				Iterm = ki*errorsum;
 800421e:	4b72      	ldr	r3, [pc, #456]	@ (80043e8 <HomemadePID+0x578>)
 8004220:	ed93 7a00 	vldr	s14, [r3]
 8004224:	4b6f      	ldr	r3, [pc, #444]	@ (80043e4 <HomemadePID+0x574>)
 8004226:	edd3 7a00 	vldr	s15, [r3]
 800422a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422e:	4b6f      	ldr	r3, [pc, #444]	@ (80043ec <HomemadePID+0x57c>)
 8004230:	edc3 7a00 	vstr	s15, [r3]
				if(Iterm > 65535){
 8004234:	4b6d      	ldr	r3, [pc, #436]	@ (80043ec <HomemadePID+0x57c>)
 8004236:	edd3 7a00 	vldr	s15, [r3]
 800423a:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80043f0 <HomemadePID+0x580>
 800423e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004246:	dd1a      	ble.n	800427e <HomemadePID+0x40e>
					errorsum = (Iterm/ki) - (error*(Now-Lastime));
 8004248:	4b68      	ldr	r3, [pc, #416]	@ (80043ec <HomemadePID+0x57c>)
 800424a:	edd3 6a00 	vldr	s13, [r3]
 800424e:	4b66      	ldr	r3, [pc, #408]	@ (80043e8 <HomemadePID+0x578>)
 8004250:	edd3 7a00 	vldr	s15, [r3]
 8004254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004258:	4b5f      	ldr	r3, [pc, #380]	@ (80043d8 <HomemadePID+0x568>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b5f      	ldr	r3, [pc, #380]	@ (80043dc <HomemadePID+0x56c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426a:	4b59      	ldr	r3, [pc, #356]	@ (80043d0 <HomemadePID+0x560>)
 800426c:	edd3 7a00 	vldr	s15, [r3]
 8004270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004278:	4b5a      	ldr	r3, [pc, #360]	@ (80043e4 <HomemadePID+0x574>)
 800427a:	edc3 7a00 	vstr	s15, [r3]
				}
				dinput = (error-Lasterror)/(Now-Lastime);
 800427e:	4b54      	ldr	r3, [pc, #336]	@ (80043d0 <HomemadePID+0x560>)
 8004280:	ed93 7a00 	vldr	s14, [r3]
 8004284:	4b5b      	ldr	r3, [pc, #364]	@ (80043f4 <HomemadePID+0x584>)
 8004286:	edd3 7a00 	vldr	s15, [r3]
 800428a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800428e:	4b52      	ldr	r3, [pc, #328]	@ (80043d8 <HomemadePID+0x568>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4b52      	ldr	r3, [pc, #328]	@ (80043dc <HomemadePID+0x56c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	ee07 3a90 	vmov	s15, r3
 800429c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042a4:	4b54      	ldr	r3, [pc, #336]	@ (80043f8 <HomemadePID+0x588>)
 80042a6:	edc3 7a00 	vstr	s15, [r3]
				if(errorsum < 0){
 80042aa:	4b4e      	ldr	r3, [pc, #312]	@ (80043e4 <HomemadePID+0x574>)
 80042ac:	edd3 7a00 	vldr	s15, [r3]
 80042b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	d507      	bpl.n	80042ca <HomemadePID+0x45a>
					errorsum = errorsum*-1;
 80042ba:	4b4a      	ldr	r3, [pc, #296]	@ (80043e4 <HomemadePID+0x574>)
 80042bc:	edd3 7a00 	vldr	s15, [r3]
 80042c0:	eef1 7a67 	vneg.f32	s15, s15
 80042c4:	4b47      	ldr	r3, [pc, #284]	@ (80043e4 <HomemadePID+0x574>)
 80042c6:	edc3 7a00 	vstr	s15, [r3]
				}
				Vfeedback = (kp*error)+(ki*errorsum)+(kd*dinput);
 80042ca:	4b4c      	ldr	r3, [pc, #304]	@ (80043fc <HomemadePID+0x58c>)
 80042cc:	ed93 7a00 	vldr	s14, [r3]
 80042d0:	4b3f      	ldr	r3, [pc, #252]	@ (80043d0 <HomemadePID+0x560>)
 80042d2:	edd3 7a00 	vldr	s15, [r3]
 80042d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042da:	4b43      	ldr	r3, [pc, #268]	@ (80043e8 <HomemadePID+0x578>)
 80042dc:	edd3 6a00 	vldr	s13, [r3]
 80042e0:	4b40      	ldr	r3, [pc, #256]	@ (80043e4 <HomemadePID+0x574>)
 80042e2:	edd3 7a00 	vldr	s15, [r3]
 80042e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042ee:	4b44      	ldr	r3, [pc, #272]	@ (8004400 <HomemadePID+0x590>)
 80042f0:	edd3 6a00 	vldr	s13, [r3]
 80042f4:	4b40      	ldr	r3, [pc, #256]	@ (80043f8 <HomemadePID+0x588>)
 80042f6:	edd3 7a00 	vldr	s15, [r3]
 80042fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004306:	ee17 2a90 	vmov	r2, s15
 800430a:	4b3e      	ldr	r3, [pc, #248]	@ (8004404 <HomemadePID+0x594>)
 800430c:	601a      	str	r2, [r3, #0]
				if(Vfeedback > 65536){
 800430e:	4b3d      	ldr	r3, [pc, #244]	@ (8004404 <HomemadePID+0x594>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004316:	d903      	bls.n	8004320 <HomemadePID+0x4b0>
					Vfeedback = 65536;
 8004318:	4b3a      	ldr	r3, [pc, #232]	@ (8004404 <HomemadePID+0x594>)
 800431a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800431e:	601a      	str	r2, [r3, #0]
				}

				PWMset = (Vfeedback/65536.0)*30000;
 8004320:	4b38      	ldr	r3, [pc, #224]	@ (8004404 <HomemadePID+0x594>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc f8b9 	bl	800049c <__aeabi_ui2d>
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	4b36      	ldr	r3, [pc, #216]	@ (8004408 <HomemadePID+0x598>)
 8004330:	f7fc fa58 	bl	80007e4 <__aeabi_ddiv>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4610      	mov	r0, r2
 800433a:	4619      	mov	r1, r3
 800433c:	a322      	add	r3, pc, #136	@ (adr r3, 80043c8 <HomemadePID+0x558>)
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f7fc f925 	bl	8000590 <__aeabi_dmul>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4610      	mov	r0, r2
 800434c:	4619      	mov	r1, r3
 800434e:	f7fc fbef 	bl	8000b30 <__aeabi_d2f>
 8004352:	4603      	mov	r3, r0
 8004354:	4a2d      	ldr	r2, [pc, #180]	@ (800440c <HomemadePID+0x59c>)
 8004356:	6013      	str	r3, [r2, #0]
				if(PWMset > 8000){
 8004358:	4b2c      	ldr	r3, [pc, #176]	@ (800440c <HomemadePID+0x59c>)
 800435a:	edd3 7a00 	vldr	s15, [r3]
 800435e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8004410 <HomemadePID+0x5a0>
 8004362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436a:	dd17      	ble.n	800439c <HomemadePID+0x52c>
					PWMset = 8000;
 800436c:	4b27      	ldr	r3, [pc, #156]	@ (800440c <HomemadePID+0x59c>)
 800436e:	4a29      	ldr	r2, [pc, #164]	@ (8004414 <HomemadePID+0x5a4>)
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e013      	b.n	800439c <HomemadePID+0x52c>
				}
//				PWMset = 4000;
//			}
		}
		else if(error == 0){
 8004374:	4b16      	ldr	r3, [pc, #88]	@ (80043d0 <HomemadePID+0x560>)
 8004376:	edd3 7a00 	vldr	s15, [r3]
 800437a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800437e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004382:	d10b      	bne.n	800439c <HomemadePID+0x52c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 8004384:	2200      	movs	r2, #0
 8004386:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800438a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800438e:	f002 f8c5 	bl	800651c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 8004392:	2200      	movs	r2, #0
 8004394:	2180      	movs	r1, #128	@ 0x80
 8004396:	480f      	ldr	r0, [pc, #60]	@ (80043d4 <HomemadePID+0x564>)
 8004398:	f002 f8c0 	bl	800651c <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, PWMset);
 800439c:	4b1b      	ldr	r3, [pc, #108]	@ (800440c <HomemadePID+0x59c>)
 800439e:	edd3 7a00 	vldr	s15, [r3]
 80043a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004418 <HomemadePID+0x5a8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043aa:	ee17 2a90 	vmov	r2, s15
 80043ae:	639a      	str	r2, [r3, #56]	@ 0x38

		Lastime = Now;
 80043b0:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <HomemadePID+0x568>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a09      	ldr	r2, [pc, #36]	@ (80043dc <HomemadePID+0x56c>)
 80043b6:	6013      	str	r3, [r2, #0]
		Lasterror = error;
 80043b8:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <HomemadePID+0x560>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0d      	ldr	r2, [pc, #52]	@ (80043f4 <HomemadePID+0x584>)
 80043be:	6013      	str	r3, [r2, #0]
	}
}
 80043c0:	bf00      	nop
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	f3af 8000 	nop.w
 80043c8:	00000000 	.word	0x00000000
 80043cc:	40dd4c00 	.word	0x40dd4c00
 80043d0:	20001294 	.word	0x20001294
 80043d4:	48000400 	.word	0x48000400
 80043d8:	2000128c 	.word	0x2000128c
 80043dc:	20001290 	.word	0x20001290
 80043e0:	461c4000 	.word	0x461c4000
 80043e4:	20001298 	.word	0x20001298
 80043e8:	20001284 	.word	0x20001284
 80043ec:	2000129c 	.word	0x2000129c
 80043f0:	477fff00 	.word	0x477fff00
 80043f4:	200012a4 	.word	0x200012a4
 80043f8:	200012a0 	.word	0x200012a0
 80043fc:	20001280 	.word	0x20001280
 8004400:	20001288 	.word	0x20001288
 8004404:	2000127c 	.word	0x2000127c
 8004408:	40f00000 	.word	0x40f00000
 800440c:	20001278 	.word	0x20001278
 8004410:	45fa0000 	.word	0x45fa0000
 8004414:	45fa0000 	.word	0x45fa0000
 8004418:	200008cc 	.word	0x200008cc

0800441c <Trajectory>:

void Trajectory(){
 800441c:	b5b0      	push	{r4, r5, r7, lr}
 800441e:	af00      	add	r7, sp, #0
	Distance = trajec_target - QEI_start;
 8004420:	4b91      	ldr	r3, [pc, #580]	@ (8004668 <Trajectory+0x24c>)
 8004422:	ed93 7a00 	vldr	s14, [r3]
 8004426:	4b91      	ldr	r3, [pc, #580]	@ (800466c <Trajectory+0x250>)
 8004428:	edd3 7a00 	vldr	s15, [r3]
 800442c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004430:	4b8f      	ldr	r3, [pc, #572]	@ (8004670 <Trajectory+0x254>)
 8004432:	edc3 7a00 	vstr	s15, [r3]
	Time_acc = Vmax / Amax;
 8004436:	4b8f      	ldr	r3, [pc, #572]	@ (8004674 <Trajectory+0x258>)
 8004438:	edd3 6a00 	vldr	s13, [r3]
 800443c:	4b8e      	ldr	r3, [pc, #568]	@ (8004678 <Trajectory+0x25c>)
 800443e:	ed93 7a00 	vldr	s14, [r3]
 8004442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004446:	4b8d      	ldr	r3, [pc, #564]	@ (800467c <Trajectory+0x260>)
 8004448:	edc3 7a00 	vstr	s15, [r3]
	Time_dec = Time_acc;
 800444c:	4b8b      	ldr	r3, [pc, #556]	@ (800467c <Trajectory+0x260>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a8b      	ldr	r2, [pc, #556]	@ (8004680 <Trajectory+0x264>)
 8004452:	6013      	str	r3, [r2, #0]


	time_now = __HAL_TIM_GET_COUNTER(&htim2);
 8004454:	4b8b      	ldr	r3, [pc, #556]	@ (8004684 <Trajectory+0x268>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004462:	4b89      	ldr	r3, [pc, #548]	@ (8004688 <Trajectory+0x26c>)
 8004464:	edc3 7a00 	vstr	s15, [r3]

	if(trajec_target >= 0 && trajec_state == 0){
 8004468:	4b7f      	ldr	r3, [pc, #508]	@ (8004668 <Trajectory+0x24c>)
 800446a:	edd3 7a00 	vldr	s15, [r3]
 800446e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004476:	db14      	blt.n	80044a2 <Trajectory+0x86>
 8004478:	4b84      	ldr	r3, [pc, #528]	@ (800468c <Trajectory+0x270>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d110      	bne.n	80044a2 <Trajectory+0x86>
		trajec_state = 1;
 8004480:	4b82      	ldr	r3, [pc, #520]	@ (800468c <Trajectory+0x270>)
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
		Timestamp = time_now;
 8004486:	4b80      	ldr	r3, [pc, #512]	@ (8004688 <Trajectory+0x26c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a81      	ldr	r2, [pc, #516]	@ (8004690 <Trajectory+0x274>)
 800448c:	6013      	str	r3, [r2, #0]
		QEI_start = QEI_mm;
 800448e:	4b81      	ldr	r3, [pc, #516]	@ (8004694 <Trajectory+0x278>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a76      	ldr	r2, [pc, #472]	@ (800466c <Trajectory+0x250>)
 8004494:	6013      	str	r3, [r2, #0]
		pos = QEI_start;
 8004496:	4b75      	ldr	r3, [pc, #468]	@ (800466c <Trajectory+0x250>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a7f      	ldr	r2, [pc, #508]	@ (8004698 <Trajectory+0x27c>)
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	f000 be19 	b.w	80050d4 <Trajectory+0xcb8>
	}
	else if(Distance > 0 && trajec_state == 1){	//Run Up
 80044a2:	4b73      	ldr	r3, [pc, #460]	@ (8004670 <Trajectory+0x254>)
 80044a4:	edd3 7a00 	vldr	s15, [r3]
 80044a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b0:	f340 82f9 	ble.w	8004aa6 <Trajectory+0x68a>
 80044b4:	4b75      	ldr	r3, [pc, #468]	@ (800468c <Trajectory+0x270>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	f040 82f4 	bne.w	8004aa6 <Trajectory+0x68a>
		kp = 900;
 80044be:	4b77      	ldr	r3, [pc, #476]	@ (800469c <Trajectory+0x280>)
 80044c0:	4a77      	ldr	r2, [pc, #476]	@ (80046a0 <Trajectory+0x284>)
 80044c2:	601a      	str	r2, [r3, #0]
		ki = 7;
 80044c4:	4b77      	ldr	r3, [pc, #476]	@ (80046a4 <Trajectory+0x288>)
 80044c6:	4a78      	ldr	r2, [pc, #480]	@ (80046a8 <Trajectory+0x28c>)
 80044c8:	601a      	str	r2, [r3, #0]
		kd = 1;
 80044ca:	4b78      	ldr	r3, [pc, #480]	@ (80046ac <Trajectory+0x290>)
 80044cc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80044d0:	601a      	str	r2, [r3, #0]
		Distance_Velo_Max = -(Vmax*Time_acc) + Distance ;
 80044d2:	4b67      	ldr	r3, [pc, #412]	@ (8004670 <Trajectory+0x254>)
 80044d4:	ed93 7a00 	vldr	s14, [r3]
 80044d8:	4b66      	ldr	r3, [pc, #408]	@ (8004674 <Trajectory+0x258>)
 80044da:	edd3 6a00 	vldr	s13, [r3]
 80044de:	4b67      	ldr	r3, [pc, #412]	@ (800467c <Trajectory+0x260>)
 80044e0:	edd3 7a00 	vldr	s15, [r3]
 80044e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044ec:	4b70      	ldr	r3, [pc, #448]	@ (80046b0 <Trajectory+0x294>)
 80044ee:	edc3 7a00 	vstr	s15, [r3]
		t = (time_now - Timestamp)/1000000.0;  //s
 80044f2:	4b65      	ldr	r3, [pc, #404]	@ (8004688 <Trajectory+0x26c>)
 80044f4:	ed93 7a00 	vldr	s14, [r3]
 80044f8:	4b65      	ldr	r3, [pc, #404]	@ (8004690 <Trajectory+0x274>)
 80044fa:	edd3 7a00 	vldr	s15, [r3]
 80044fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004502:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 80046b4 <Trajectory+0x298>
 8004506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800450a:	4b6b      	ldr	r3, [pc, #428]	@ (80046b8 <Trajectory+0x29c>)
 800450c:	edc3 7a00 	vstr	s15, [r3]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8004510:	4b67      	ldr	r3, [pc, #412]	@ (80046b0 <Trajectory+0x294>)
 8004512:	edd3 7a00 	vldr	s15, [r3]
 8004516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451e:	f340 8165 	ble.w	80047ec <Trajectory+0x3d0>
			temp_check = 1;
 8004522:	4b66      	ldr	r3, [pc, #408]	@ (80046bc <Trajectory+0x2a0>)
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]
			Time_const = Distance_Velo_Max/Vmax;
 8004528:	4b61      	ldr	r3, [pc, #388]	@ (80046b0 <Trajectory+0x294>)
 800452a:	edd3 6a00 	vldr	s13, [r3]
 800452e:	4b51      	ldr	r3, [pc, #324]	@ (8004674 <Trajectory+0x258>)
 8004530:	ed93 7a00 	vldr	s14, [r3]
 8004534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004538:	4b61      	ldr	r3, [pc, #388]	@ (80046c0 <Trajectory+0x2a4>)
 800453a:	edc3 7a00 	vstr	s15, [r3]
			if(t < Time_acc){
 800453e:	4b5e      	ldr	r3, [pc, #376]	@ (80046b8 <Trajectory+0x29c>)
 8004540:	ed93 7a00 	vldr	s14, [r3]
 8004544:	4b4d      	ldr	r3, [pc, #308]	@ (800467c <Trajectory+0x260>)
 8004546:	edd3 7a00 	vldr	s15, [r3]
 800454a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004552:	d555      	bpl.n	8004600 <Trajectory+0x1e4>
				traj[2] = Amax;
 8004554:	4b48      	ldr	r3, [pc, #288]	@ (8004678 <Trajectory+0x25c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5a      	ldr	r2, [pc, #360]	@ (80046c4 <Trajectory+0x2a8>)
 800455a:	6093      	str	r3, [r2, #8]
				traj[1] = Amax*t;
 800455c:	4b46      	ldr	r3, [pc, #280]	@ (8004678 <Trajectory+0x25c>)
 800455e:	ed93 7a00 	vldr	s14, [r3]
 8004562:	4b55      	ldr	r3, [pc, #340]	@ (80046b8 <Trajectory+0x29c>)
 8004564:	edd3 7a00 	vldr	s15, [r3]
 8004568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456c:	4b55      	ldr	r3, [pc, #340]	@ (80046c4 <Trajectory+0x2a8>)
 800456e:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (Amax/2.0)*t*t + pos;
 8004572:	4b41      	ldr	r3, [pc, #260]	@ (8004678 <Trajectory+0x25c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fb ffb2 	bl	80004e0 <__aeabi_f2d>
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004584:	f7fc f92e 	bl	80007e4 <__aeabi_ddiv>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4614      	mov	r4, r2
 800458e:	461d      	mov	r5, r3
 8004590:	4b49      	ldr	r3, [pc, #292]	@ (80046b8 <Trajectory+0x29c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7fb ffa3 	bl	80004e0 <__aeabi_f2d>
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4620      	mov	r0, r4
 80045a0:	4629      	mov	r1, r5
 80045a2:	f7fb fff5 	bl	8000590 <__aeabi_dmul>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4614      	mov	r4, r2
 80045ac:	461d      	mov	r5, r3
 80045ae:	4b42      	ldr	r3, [pc, #264]	@ (80046b8 <Trajectory+0x29c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fb ff94 	bl	80004e0 <__aeabi_f2d>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4620      	mov	r0, r4
 80045be:	4629      	mov	r1, r5
 80045c0:	f7fb ffe6 	bl	8000590 <__aeabi_dmul>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4614      	mov	r4, r2
 80045ca:	461d      	mov	r5, r3
 80045cc:	4b32      	ldr	r3, [pc, #200]	@ (8004698 <Trajectory+0x27c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fb ff85 	bl	80004e0 <__aeabi_f2d>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4620      	mov	r0, r4
 80045dc:	4629      	mov	r1, r5
 80045de:	f7fb fe21 	bl	8000224 <__adddf3>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	f7fc faa1 	bl	8000b30 <__aeabi_d2f>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4a34      	ldr	r2, [pc, #208]	@ (80046c4 <Trajectory+0x2a8>)
 80045f2:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 80045f4:	4b33      	ldr	r3, [pc, #204]	@ (80046c4 <Trajectory+0x2a8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a33      	ldr	r2, [pc, #204]	@ (80046c8 <Trajectory+0x2ac>)
 80045fa:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 80045fc:	f000 bd6a 	b.w	80050d4 <Trajectory+0xcb8>
			}
			else if(t < Time_const+Time_acc){
 8004600:	4b2f      	ldr	r3, [pc, #188]	@ (80046c0 <Trajectory+0x2a4>)
 8004602:	ed93 7a00 	vldr	s14, [r3]
 8004606:	4b1d      	ldr	r3, [pc, #116]	@ (800467c <Trajectory+0x260>)
 8004608:	edd3 7a00 	vldr	s15, [r3]
 800460c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004610:	4b29      	ldr	r3, [pc, #164]	@ (80046b8 <Trajectory+0x29c>)
 8004612:	edd3 7a00 	vldr	s15, [r3]
 8004616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461e:	dd57      	ble.n	80046d0 <Trajectory+0x2b4>
				traj[2] = 0;
 8004620:	4b28      	ldr	r3, [pc, #160]	@ (80046c4 <Trajectory+0x2a8>)
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	609a      	str	r2, [r3, #8]
				traj[1] = Vmax;
 8004628:	4b12      	ldr	r3, [pc, #72]	@ (8004674 <Trajectory+0x258>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a25      	ldr	r2, [pc, #148]	@ (80046c4 <Trajectory+0x2a8>)
 800462e:	6053      	str	r3, [r2, #4]
				traj[0] = (Vmax*(t-Time_acc)) + temp_pos_acc;
 8004630:	4b21      	ldr	r3, [pc, #132]	@ (80046b8 <Trajectory+0x29c>)
 8004632:	ed93 7a00 	vldr	s14, [r3]
 8004636:	4b11      	ldr	r3, [pc, #68]	@ (800467c <Trajectory+0x260>)
 8004638:	edd3 7a00 	vldr	s15, [r3]
 800463c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004640:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <Trajectory+0x258>)
 8004642:	edd3 7a00 	vldr	s15, [r3]
 8004646:	ee27 7a27 	vmul.f32	s14, s14, s15
 800464a:	4b1f      	ldr	r3, [pc, #124]	@ (80046c8 <Trajectory+0x2ac>)
 800464c:	edd3 7a00 	vldr	s15, [r3]
 8004650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004654:	4b1b      	ldr	r3, [pc, #108]	@ (80046c4 <Trajectory+0x2a8>)
 8004656:	edc3 7a00 	vstr	s15, [r3]
				temp_pos_const = traj[0];
 800465a:	4b1a      	ldr	r3, [pc, #104]	@ (80046c4 <Trajectory+0x2a8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1b      	ldr	r2, [pc, #108]	@ (80046cc <Trajectory+0x2b0>)
 8004660:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8004662:	f000 bd37 	b.w	80050d4 <Trajectory+0xcb8>
 8004666:	bf00      	nop
 8004668:	2000057c 	.word	0x2000057c
 800466c:	20001314 	.word	0x20001314
 8004670:	200012d4 	.word	0x200012d4
 8004674:	20000214 	.word	0x20000214
 8004678:	20000218 	.word	0x20000218
 800467c:	200012fc 	.word	0x200012fc
 8004680:	20001304 	.word	0x20001304
 8004684:	20000668 	.word	0x20000668
 8004688:	2000130c 	.word	0x2000130c
 800468c:	20001318 	.word	0x20001318
 8004690:	20001310 	.word	0x20001310
 8004694:	20001270 	.word	0x20001270
 8004698:	200012f8 	.word	0x200012f8
 800469c:	20001280 	.word	0x20001280
 80046a0:	44610000 	.word	0x44610000
 80046a4:	20001284 	.word	0x20001284
 80046a8:	40e00000 	.word	0x40e00000
 80046ac:	20001288 	.word	0x20001288
 80046b0:	200012e8 	.word	0x200012e8
 80046b4:	49742400 	.word	0x49742400
 80046b8:	200012d8 	.word	0x200012d8
 80046bc:	20001319 	.word	0x20001319
 80046c0:	20001308 	.word	0x20001308
 80046c4:	200012ec 	.word	0x200012ec
 80046c8:	200012dc 	.word	0x200012dc
 80046cc:	200012e0 	.word	0x200012e0
			}
			else if(t < Time_const+Time_acc+Time_dec){
 80046d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004904 <Trajectory+0x4e8>)
 80046d2:	ed93 7a00 	vldr	s14, [r3]
 80046d6:	4b8c      	ldr	r3, [pc, #560]	@ (8004908 <Trajectory+0x4ec>)
 80046d8:	edd3 7a00 	vldr	s15, [r3]
 80046dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046e0:	4b8a      	ldr	r3, [pc, #552]	@ (800490c <Trajectory+0x4f0>)
 80046e2:	edd3 7a00 	vldr	s15, [r3]
 80046e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046ea:	4b89      	ldr	r3, [pc, #548]	@ (8004910 <Trajectory+0x4f4>)
 80046ec:	edd3 7a00 	vldr	s15, [r3]
 80046f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f8:	dd64      	ble.n	80047c4 <Trajectory+0x3a8>
				traj[2] = -Amax;
 80046fa:	4b86      	ldr	r3, [pc, #536]	@ (8004914 <Trajectory+0x4f8>)
 80046fc:	edd3 7a00 	vldr	s15, [r3]
 8004700:	eef1 7a67 	vneg.f32	s15, s15
 8004704:	4b84      	ldr	r3, [pc, #528]	@ (8004918 <Trajectory+0x4fc>)
 8004706:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = (traj[2]*(t-Time_const-Time_acc)) + Vmax;
 800470a:	4b83      	ldr	r3, [pc, #524]	@ (8004918 <Trajectory+0x4fc>)
 800470c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004710:	4b7f      	ldr	r3, [pc, #508]	@ (8004910 <Trajectory+0x4f4>)
 8004712:	edd3 6a00 	vldr	s13, [r3]
 8004716:	4b7b      	ldr	r3, [pc, #492]	@ (8004904 <Trajectory+0x4e8>)
 8004718:	edd3 7a00 	vldr	s15, [r3]
 800471c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004720:	4b79      	ldr	r3, [pc, #484]	@ (8004908 <Trajectory+0x4ec>)
 8004722:	edd3 7a00 	vldr	s15, [r3]
 8004726:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800472a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800472e:	4b7b      	ldr	r3, [pc, #492]	@ (800491c <Trajectory+0x500>)
 8004730:	edd3 7a00 	vldr	s15, [r3]
 8004734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004738:	4b77      	ldr	r3, [pc, #476]	@ (8004918 <Trajectory+0x4fc>)
 800473a:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((Amax/2)*(t-Time_const-Time_acc)*(t-Time_const-Time_acc))+(traj[1]*(t-Time_const-Time_acc))+temp_pos_const;
 800473e:	4b75      	ldr	r3, [pc, #468]	@ (8004914 <Trajectory+0x4f8>)
 8004740:	edd3 7a00 	vldr	s15, [r3]
 8004744:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004748:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800474c:	4b70      	ldr	r3, [pc, #448]	@ (8004910 <Trajectory+0x4f4>)
 800474e:	edd3 6a00 	vldr	s13, [r3]
 8004752:	4b6c      	ldr	r3, [pc, #432]	@ (8004904 <Trajectory+0x4e8>)
 8004754:	edd3 7a00 	vldr	s15, [r3]
 8004758:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800475c:	4b6a      	ldr	r3, [pc, #424]	@ (8004908 <Trajectory+0x4ec>)
 800475e:	edd3 7a00 	vldr	s15, [r3]
 8004762:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800476a:	4b69      	ldr	r3, [pc, #420]	@ (8004910 <Trajectory+0x4f4>)
 800476c:	edd3 6a00 	vldr	s13, [r3]
 8004770:	4b64      	ldr	r3, [pc, #400]	@ (8004904 <Trajectory+0x4e8>)
 8004772:	edd3 7a00 	vldr	s15, [r3]
 8004776:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800477a:	4b63      	ldr	r3, [pc, #396]	@ (8004908 <Trajectory+0x4ec>)
 800477c:	edd3 7a00 	vldr	s15, [r3]
 8004780:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004788:	4b63      	ldr	r3, [pc, #396]	@ (8004918 <Trajectory+0x4fc>)
 800478a:	edd3 6a01 	vldr	s13, [r3, #4]
 800478e:	4b60      	ldr	r3, [pc, #384]	@ (8004910 <Trajectory+0x4f4>)
 8004790:	ed93 6a00 	vldr	s12, [r3]
 8004794:	4b5b      	ldr	r3, [pc, #364]	@ (8004904 <Trajectory+0x4e8>)
 8004796:	edd3 7a00 	vldr	s15, [r3]
 800479a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800479e:	4b5a      	ldr	r3, [pc, #360]	@ (8004908 <Trajectory+0x4ec>)
 80047a0:	edd3 7a00 	vldr	s15, [r3]
 80047a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80047a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047b0:	4b5b      	ldr	r3, [pc, #364]	@ (8004920 <Trajectory+0x504>)
 80047b2:	edd3 7a00 	vldr	s15, [r3]
 80047b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ba:	4b57      	ldr	r3, [pc, #348]	@ (8004918 <Trajectory+0x4fc>)
 80047bc:	edc3 7a00 	vstr	s15, [r3]
		if(Distance_Velo_Max > 0){						//Trapezoi
 80047c0:	f000 bc88 	b.w	80050d4 <Trajectory+0xcb8>
			}
			else{
				trajec_state = 0;
 80047c4:	4b57      	ldr	r3, [pc, #348]	@ (8004924 <Trajectory+0x508>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 80047ca:	4b57      	ldr	r3, [pc, #348]	@ (8004928 <Trajectory+0x50c>)
 80047cc:	4a57      	ldr	r2, [pc, #348]	@ (800492c <Trajectory+0x510>)
 80047ce:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 80047d0:	4b51      	ldr	r3, [pc, #324]	@ (8004918 <Trajectory+0x4fc>)
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	609a      	str	r2, [r3, #8]
				temp_pos_acc = 0;
 80047d8:	4b55      	ldr	r3, [pc, #340]	@ (8004930 <Trajectory+0x514>)
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
				temp_pos_const = 0;
 80047e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004920 <Trajectory+0x504>)
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 80047e8:	f000 bc74 	b.w	80050d4 <Trajectory+0xcb8>
			}
		}
		else if(Distance_Velo_Max <= 0){				//Triangle
 80047ec:	4b51      	ldr	r3, [pc, #324]	@ (8004934 <Trajectory+0x518>)
 80047ee:	edd3 7a00 	vldr	s15, [r3]
 80047f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fa:	d901      	bls.n	8004800 <Trajectory+0x3e4>
		if(Distance_Velo_Max > 0){						//Trapezoi
 80047fc:	f000 bc6a 	b.w	80050d4 <Trajectory+0xcb8>
			temp_check = 2;
 8004800:	4b4d      	ldr	r3, [pc, #308]	@ (8004938 <Trajectory+0x51c>)
 8004802:	2202      	movs	r2, #2
 8004804:	701a      	strb	r2, [r3, #0]
			Time_acc_tri = sqrt(Distance/Amax);
 8004806:	4b4d      	ldr	r3, [pc, #308]	@ (800493c <Trajectory+0x520>)
 8004808:	ed93 7a00 	vldr	s14, [r3]
 800480c:	4b41      	ldr	r3, [pc, #260]	@ (8004914 <Trajectory+0x4f8>)
 800480e:	edd3 7a00 	vldr	s15, [r3]
 8004812:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004816:	ee16 0a90 	vmov	r0, s13
 800481a:	f7fb fe61 	bl	80004e0 <__aeabi_f2d>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	ec43 2b10 	vmov	d0, r2, r3
 8004826:	f007 fb11 	bl	800be4c <sqrt>
 800482a:	ec53 2b10 	vmov	r2, r3, d0
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	f7fc f97d 	bl	8000b30 <__aeabi_d2f>
 8004836:	4603      	mov	r3, r0
 8004838:	4a41      	ldr	r2, [pc, #260]	@ (8004940 <Trajectory+0x524>)
 800483a:	6013      	str	r3, [r2, #0]
			if(t < Time_acc_tri){
 800483c:	4b34      	ldr	r3, [pc, #208]	@ (8004910 <Trajectory+0x4f4>)
 800483e:	ed93 7a00 	vldr	s14, [r3]
 8004842:	4b3f      	ldr	r3, [pc, #252]	@ (8004940 <Trajectory+0x524>)
 8004844:	edd3 7a00 	vldr	s15, [r3]
 8004848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800484c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004850:	d57c      	bpl.n	800494c <Trajectory+0x530>
				traj[2] = Amax;
 8004852:	4b30      	ldr	r3, [pc, #192]	@ (8004914 <Trajectory+0x4f8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a30      	ldr	r2, [pc, #192]	@ (8004918 <Trajectory+0x4fc>)
 8004858:	6093      	str	r3, [r2, #8]
				traj[1] = Amax*t;
 800485a:	4b2e      	ldr	r3, [pc, #184]	@ (8004914 <Trajectory+0x4f8>)
 800485c:	ed93 7a00 	vldr	s14, [r3]
 8004860:	4b2b      	ldr	r3, [pc, #172]	@ (8004910 <Trajectory+0x4f4>)
 8004862:	edd3 7a00 	vldr	s15, [r3]
 8004866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486a:	4b2b      	ldr	r3, [pc, #172]	@ (8004918 <Trajectory+0x4fc>)
 800486c:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (Amax/2.0)*t*t + pos;
 8004870:	4b28      	ldr	r3, [pc, #160]	@ (8004914 <Trajectory+0x4f8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7fb fe33 	bl	80004e0 <__aeabi_f2d>
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004882:	f7fb ffaf 	bl	80007e4 <__aeabi_ddiv>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4614      	mov	r4, r2
 800488c:	461d      	mov	r5, r3
 800488e:	4b20      	ldr	r3, [pc, #128]	@ (8004910 <Trajectory+0x4f4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fb fe24 	bl	80004e0 <__aeabi_f2d>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4620      	mov	r0, r4
 800489e:	4629      	mov	r1, r5
 80048a0:	f7fb fe76 	bl	8000590 <__aeabi_dmul>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4614      	mov	r4, r2
 80048aa:	461d      	mov	r5, r3
 80048ac:	4b18      	ldr	r3, [pc, #96]	@ (8004910 <Trajectory+0x4f4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fb fe15 	bl	80004e0 <__aeabi_f2d>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4620      	mov	r0, r4
 80048bc:	4629      	mov	r1, r5
 80048be:	f7fb fe67 	bl	8000590 <__aeabi_dmul>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4614      	mov	r4, r2
 80048c8:	461d      	mov	r5, r3
 80048ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004944 <Trajectory+0x528>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fb fe06 	bl	80004e0 <__aeabi_f2d>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4620      	mov	r0, r4
 80048da:	4629      	mov	r1, r5
 80048dc:	f7fb fca2 	bl	8000224 <__adddf3>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	f7fc f922 	bl	8000b30 <__aeabi_d2f>
 80048ec:	4603      	mov	r3, r0
 80048ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004918 <Trajectory+0x4fc>)
 80048f0:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 80048f2:	4b09      	ldr	r3, [pc, #36]	@ (8004918 <Trajectory+0x4fc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004930 <Trajectory+0x514>)
 80048f8:	6013      	str	r3, [r2, #0]
				temp_v_acc = traj[1];
 80048fa:	4b07      	ldr	r3, [pc, #28]	@ (8004918 <Trajectory+0x4fc>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4a12      	ldr	r2, [pc, #72]	@ (8004948 <Trajectory+0x52c>)
 8004900:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8004902:	e3e7      	b.n	80050d4 <Trajectory+0xcb8>
 8004904:	20001308 	.word	0x20001308
 8004908:	200012fc 	.word	0x200012fc
 800490c:	20001304 	.word	0x20001304
 8004910:	200012d8 	.word	0x200012d8
 8004914:	20000218 	.word	0x20000218
 8004918:	200012ec 	.word	0x200012ec
 800491c:	20000214 	.word	0x20000214
 8004920:	200012e0 	.word	0x200012e0
 8004924:	20001318 	.word	0x20001318
 8004928:	2000057c 	.word	0x2000057c
 800492c:	c1200000 	.word	0xc1200000
 8004930:	200012dc 	.word	0x200012dc
 8004934:	200012e8 	.word	0x200012e8
 8004938:	20001319 	.word	0x20001319
 800493c:	200012d4 	.word	0x200012d4
 8004940:	20001300 	.word	0x20001300
 8004944:	200012f8 	.word	0x200012f8
 8004948:	200012e4 	.word	0x200012e4
			}
			else if(t < Time_acc_tri*2){
 800494c:	4bb3      	ldr	r3, [pc, #716]	@ (8004c1c <Trajectory+0x800>)
 800494e:	edd3 7a00 	vldr	s15, [r3]
 8004952:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004956:	4bb2      	ldr	r3, [pc, #712]	@ (8004c20 <Trajectory+0x804>)
 8004958:	edd3 7a00 	vldr	s15, [r3]
 800495c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004964:	f340 8088 	ble.w	8004a78 <Trajectory+0x65c>
				traj[2] = -Amax;
 8004968:	4bae      	ldr	r3, [pc, #696]	@ (8004c24 <Trajectory+0x808>)
 800496a:	edd3 7a00 	vldr	s15, [r3]
 800496e:	eef1 7a67 	vneg.f32	s15, s15
 8004972:	4bad      	ldr	r3, [pc, #692]	@ (8004c28 <Trajectory+0x80c>)
 8004974:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = temp_v_acc - (Amax*(t-Time_acc_tri));
 8004978:	4bac      	ldr	r3, [pc, #688]	@ (8004c2c <Trajectory+0x810>)
 800497a:	ed93 7a00 	vldr	s14, [r3]
 800497e:	4ba8      	ldr	r3, [pc, #672]	@ (8004c20 <Trajectory+0x804>)
 8004980:	edd3 6a00 	vldr	s13, [r3]
 8004984:	4ba5      	ldr	r3, [pc, #660]	@ (8004c1c <Trajectory+0x800>)
 8004986:	edd3 7a00 	vldr	s15, [r3]
 800498a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800498e:	4ba5      	ldr	r3, [pc, #660]	@ (8004c24 <Trajectory+0x808>)
 8004990:	edd3 7a00 	vldr	s15, [r3]
 8004994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800499c:	4ba2      	ldr	r3, [pc, #648]	@ (8004c28 <Trajectory+0x80c>)
 800499e:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((Amax/2.0)*(t-Time_acc_tri)*(t-Time_acc_tri))+(traj[1]*(t-Time_acc_tri))+temp_pos_acc;
 80049a2:	4ba0      	ldr	r3, [pc, #640]	@ (8004c24 <Trajectory+0x808>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fb fd9a 	bl	80004e0 <__aeabi_f2d>
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80049b4:	f7fb ff16 	bl	80007e4 <__aeabi_ddiv>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4614      	mov	r4, r2
 80049be:	461d      	mov	r5, r3
 80049c0:	4b97      	ldr	r3, [pc, #604]	@ (8004c20 <Trajectory+0x804>)
 80049c2:	ed93 7a00 	vldr	s14, [r3]
 80049c6:	4b95      	ldr	r3, [pc, #596]	@ (8004c1c <Trajectory+0x800>)
 80049c8:	edd3 7a00 	vldr	s15, [r3]
 80049cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049d0:	ee17 0a90 	vmov	r0, s15
 80049d4:	f7fb fd84 	bl	80004e0 <__aeabi_f2d>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4620      	mov	r0, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	f7fb fdd6 	bl	8000590 <__aeabi_dmul>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4614      	mov	r4, r2
 80049ea:	461d      	mov	r5, r3
 80049ec:	4b8c      	ldr	r3, [pc, #560]	@ (8004c20 <Trajectory+0x804>)
 80049ee:	ed93 7a00 	vldr	s14, [r3]
 80049f2:	4b8a      	ldr	r3, [pc, #552]	@ (8004c1c <Trajectory+0x800>)
 80049f4:	edd3 7a00 	vldr	s15, [r3]
 80049f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049fc:	ee17 0a90 	vmov	r0, s15
 8004a00:	f7fb fd6e 	bl	80004e0 <__aeabi_f2d>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4620      	mov	r0, r4
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	f7fb fdc0 	bl	8000590 <__aeabi_dmul>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4614      	mov	r4, r2
 8004a16:	461d      	mov	r5, r3
 8004a18:	4b83      	ldr	r3, [pc, #524]	@ (8004c28 <Trajectory+0x80c>)
 8004a1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a1e:	4b80      	ldr	r3, [pc, #512]	@ (8004c20 <Trajectory+0x804>)
 8004a20:	edd3 6a00 	vldr	s13, [r3]
 8004a24:	4b7d      	ldr	r3, [pc, #500]	@ (8004c1c <Trajectory+0x800>)
 8004a26:	edd3 7a00 	vldr	s15, [r3]
 8004a2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a32:	ee17 0a90 	vmov	r0, s15
 8004a36:	f7fb fd53 	bl	80004e0 <__aeabi_f2d>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4629      	mov	r1, r5
 8004a42:	f7fb fbef 	bl	8000224 <__adddf3>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4614      	mov	r4, r2
 8004a4c:	461d      	mov	r5, r3
 8004a4e:	4b78      	ldr	r3, [pc, #480]	@ (8004c30 <Trajectory+0x814>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fb fd44 	bl	80004e0 <__aeabi_f2d>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	4629      	mov	r1, r5
 8004a60:	f7fb fbe0 	bl	8000224 <__adddf3>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f7fc f860 	bl	8000b30 <__aeabi_d2f>
 8004a70:	4603      	mov	r3, r0
 8004a72:	4a6d      	ldr	r2, [pc, #436]	@ (8004c28 <Trajectory+0x80c>)
 8004a74:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8004a76:	e32d      	b.n	80050d4 <Trajectory+0xcb8>
			}
			else{
				trajec_state = 0;
 8004a78:	4b6e      	ldr	r3, [pc, #440]	@ (8004c34 <Trajectory+0x818>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 8004a7e:	4b6e      	ldr	r3, [pc, #440]	@ (8004c38 <Trajectory+0x81c>)
 8004a80:	4a6e      	ldr	r2, [pc, #440]	@ (8004c3c <Trajectory+0x820>)
 8004a82:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 8004a84:	4b68      	ldr	r3, [pc, #416]	@ (8004c28 <Trajectory+0x80c>)
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	609a      	str	r2, [r3, #8]
				Time_acc_tri = 0;
 8004a8c:	4b63      	ldr	r3, [pc, #396]	@ (8004c1c <Trajectory+0x800>)
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
				temp_pos_acc = 0;
 8004a94:	4b66      	ldr	r3, [pc, #408]	@ (8004c30 <Trajectory+0x814>)
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
				temp_v_acc = 0;
 8004a9c:	4b63      	ldr	r3, [pc, #396]	@ (8004c2c <Trajectory+0x810>)
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8004aa4:	e316      	b.n	80050d4 <Trajectory+0xcb8>
			}
		}
	}
	else if(Distance < 0 && trajec_state == 1){        		// Run Down
 8004aa6:	4b66      	ldr	r3, [pc, #408]	@ (8004c40 <Trajectory+0x824>)
 8004aa8:	edd3 7a00 	vldr	s15, [r3]
 8004aac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab4:	d400      	bmi.n	8004ab8 <Trajectory+0x69c>
				temp_pos_acc = 0;
				temp_v_acc = 0;
			}
		}
	}
}
 8004ab6:	e30d      	b.n	80050d4 <Trajectory+0xcb8>
	else if(Distance < 0 && trajec_state == 1){        		// Run Down
 8004ab8:	4b5e      	ldr	r3, [pc, #376]	@ (8004c34 <Trajectory+0x818>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	f040 8309 	bne.w	80050d4 <Trajectory+0xcb8>
		kp = 900;
 8004ac2:	4b60      	ldr	r3, [pc, #384]	@ (8004c44 <Trajectory+0x828>)
 8004ac4:	4a60      	ldr	r2, [pc, #384]	@ (8004c48 <Trajectory+0x82c>)
 8004ac6:	601a      	str	r2, [r3, #0]
		ki = 10;
 8004ac8:	4b60      	ldr	r3, [pc, #384]	@ (8004c4c <Trajectory+0x830>)
 8004aca:	4a61      	ldr	r2, [pc, #388]	@ (8004c50 <Trajectory+0x834>)
 8004acc:	601a      	str	r2, [r3, #0]
		kd = 0;
 8004ace:	4b61      	ldr	r3, [pc, #388]	@ (8004c54 <Trajectory+0x838>)
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
		Distance_Velo_Max = (Vmax*Time_acc) + Distance ;
 8004ad6:	4b60      	ldr	r3, [pc, #384]	@ (8004c58 <Trajectory+0x83c>)
 8004ad8:	ed93 7a00 	vldr	s14, [r3]
 8004adc:	4b5f      	ldr	r3, [pc, #380]	@ (8004c5c <Trajectory+0x840>)
 8004ade:	edd3 7a00 	vldr	s15, [r3]
 8004ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ae6:	4b56      	ldr	r3, [pc, #344]	@ (8004c40 <Trajectory+0x824>)
 8004ae8:	edd3 7a00 	vldr	s15, [r3]
 8004aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004af0:	4b5b      	ldr	r3, [pc, #364]	@ (8004c60 <Trajectory+0x844>)
 8004af2:	edc3 7a00 	vstr	s15, [r3]
		t = (time_now - Timestamp)/1000000.0;  //s
 8004af6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c64 <Trajectory+0x848>)
 8004af8:	ed93 7a00 	vldr	s14, [r3]
 8004afc:	4b5a      	ldr	r3, [pc, #360]	@ (8004c68 <Trajectory+0x84c>)
 8004afe:	edd3 7a00 	vldr	s15, [r3]
 8004b02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b06:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8004c6c <Trajectory+0x850>
 8004b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b0e:	4b44      	ldr	r3, [pc, #272]	@ (8004c20 <Trajectory+0x804>)
 8004b10:	edc3 7a00 	vstr	s15, [r3]
		if(Distance_Velo_Max < 0){							//Trapezoi
 8004b14:	4b52      	ldr	r3, [pc, #328]	@ (8004c60 <Trajectory+0x844>)
 8004b16:	edd3 7a00 	vldr	s15, [r3]
 8004b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b22:	f140 816b 	bpl.w	8004dfc <Trajectory+0x9e0>
			temp_check = 3;
 8004b26:	4b52      	ldr	r3, [pc, #328]	@ (8004c70 <Trajectory+0x854>)
 8004b28:	2203      	movs	r2, #3
 8004b2a:	701a      	strb	r2, [r3, #0]
			Time_const = Distance_Velo_Max/Vmax;
 8004b2c:	4b4c      	ldr	r3, [pc, #304]	@ (8004c60 <Trajectory+0x844>)
 8004b2e:	edd3 6a00 	vldr	s13, [r3]
 8004b32:	4b49      	ldr	r3, [pc, #292]	@ (8004c58 <Trajectory+0x83c>)
 8004b34:	ed93 7a00 	vldr	s14, [r3]
 8004b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8004c74 <Trajectory+0x858>)
 8004b3e:	edc3 7a00 	vstr	s15, [r3]
			if(t < Time_acc){
 8004b42:	4b37      	ldr	r3, [pc, #220]	@ (8004c20 <Trajectory+0x804>)
 8004b44:	ed93 7a00 	vldr	s14, [r3]
 8004b48:	4b44      	ldr	r3, [pc, #272]	@ (8004c5c <Trajectory+0x840>)
 8004b4a:	edd3 7a00 	vldr	s15, [r3]
 8004b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b56:	f140 8091 	bpl.w	8004c7c <Trajectory+0x860>
				traj[2] = -Amax;
 8004b5a:	4b32      	ldr	r3, [pc, #200]	@ (8004c24 <Trajectory+0x808>)
 8004b5c:	edd3 7a00 	vldr	s15, [r3]
 8004b60:	eef1 7a67 	vneg.f32	s15, s15
 8004b64:	4b30      	ldr	r3, [pc, #192]	@ (8004c28 <Trajectory+0x80c>)
 8004b66:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = -Amax*t;
 8004b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8004c24 <Trajectory+0x808>)
 8004b6c:	edd3 7a00 	vldr	s15, [r3]
 8004b70:	eeb1 7a67 	vneg.f32	s14, s15
 8004b74:	4b2a      	ldr	r3, [pc, #168]	@ (8004c20 <Trajectory+0x804>)
 8004b76:	edd3 7a00 	vldr	s15, [r3]
 8004b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c28 <Trajectory+0x80c>)
 8004b80:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (-Amax/2.0)*t*t + pos;
 8004b84:	4b27      	ldr	r3, [pc, #156]	@ (8004c24 <Trajectory+0x808>)
 8004b86:	edd3 7a00 	vldr	s15, [r3]
 8004b8a:	eef1 7a67 	vneg.f32	s15, s15
 8004b8e:	ee17 3a90 	vmov	r3, s15
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fb fca4 	bl	80004e0 <__aeabi_f2d>
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004ba0:	f7fb fe20 	bl	80007e4 <__aeabi_ddiv>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4614      	mov	r4, r2
 8004baa:	461d      	mov	r5, r3
 8004bac:	4b1c      	ldr	r3, [pc, #112]	@ (8004c20 <Trajectory+0x804>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fb fc95 	bl	80004e0 <__aeabi_f2d>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4620      	mov	r0, r4
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	f7fb fce7 	bl	8000590 <__aeabi_dmul>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4614      	mov	r4, r2
 8004bc8:	461d      	mov	r5, r3
 8004bca:	4b15      	ldr	r3, [pc, #84]	@ (8004c20 <Trajectory+0x804>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fb fc86 	bl	80004e0 <__aeabi_f2d>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4620      	mov	r0, r4
 8004bda:	4629      	mov	r1, r5
 8004bdc:	f7fb fcd8 	bl	8000590 <__aeabi_dmul>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4614      	mov	r4, r2
 8004be6:	461d      	mov	r5, r3
 8004be8:	4b23      	ldr	r3, [pc, #140]	@ (8004c78 <Trajectory+0x85c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fb fc77 	bl	80004e0 <__aeabi_f2d>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	f7fb fb13 	bl	8000224 <__adddf3>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4610      	mov	r0, r2
 8004c04:	4619      	mov	r1, r3
 8004c06:	f7fb ff93 	bl	8000b30 <__aeabi_d2f>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4a06      	ldr	r2, [pc, #24]	@ (8004c28 <Trajectory+0x80c>)
 8004c0e:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 8004c10:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <Trajectory+0x80c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a06      	ldr	r2, [pc, #24]	@ (8004c30 <Trajectory+0x814>)
 8004c16:	6013      	str	r3, [r2, #0]
}
 8004c18:	e25c      	b.n	80050d4 <Trajectory+0xcb8>
 8004c1a:	bf00      	nop
 8004c1c:	20001300 	.word	0x20001300
 8004c20:	200012d8 	.word	0x200012d8
 8004c24:	20000218 	.word	0x20000218
 8004c28:	200012ec 	.word	0x200012ec
 8004c2c:	200012e4 	.word	0x200012e4
 8004c30:	200012dc 	.word	0x200012dc
 8004c34:	20001318 	.word	0x20001318
 8004c38:	2000057c 	.word	0x2000057c
 8004c3c:	c1200000 	.word	0xc1200000
 8004c40:	200012d4 	.word	0x200012d4
 8004c44:	20001280 	.word	0x20001280
 8004c48:	44610000 	.word	0x44610000
 8004c4c:	20001284 	.word	0x20001284
 8004c50:	41200000 	.word	0x41200000
 8004c54:	20001288 	.word	0x20001288
 8004c58:	20000214 	.word	0x20000214
 8004c5c:	200012fc 	.word	0x200012fc
 8004c60:	200012e8 	.word	0x200012e8
 8004c64:	2000130c 	.word	0x2000130c
 8004c68:	20001310 	.word	0x20001310
 8004c6c:	49742400 	.word	0x49742400
 8004c70:	20001319 	.word	0x20001319
 8004c74:	20001308 	.word	0x20001308
 8004c78:	200012f8 	.word	0x200012f8
			else if(t < Time_const+Time_acc){
 8004c7c:	4bac      	ldr	r3, [pc, #688]	@ (8004f30 <Trajectory+0xb14>)
 8004c7e:	ed93 7a00 	vldr	s14, [r3]
 8004c82:	4bac      	ldr	r3, [pc, #688]	@ (8004f34 <Trajectory+0xb18>)
 8004c84:	edd3 7a00 	vldr	s15, [r3]
 8004c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c8c:	4baa      	ldr	r3, [pc, #680]	@ (8004f38 <Trajectory+0xb1c>)
 8004c8e:	edd3 7a00 	vldr	s15, [r3]
 8004c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9a:	dd27      	ble.n	8004cec <Trajectory+0x8d0>
				traj[2] = 0;
 8004c9c:	4ba7      	ldr	r3, [pc, #668]	@ (8004f3c <Trajectory+0xb20>)
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	609a      	str	r2, [r3, #8]
				traj[1] = -Vmax;
 8004ca4:	4ba6      	ldr	r3, [pc, #664]	@ (8004f40 <Trajectory+0xb24>)
 8004ca6:	edd3 7a00 	vldr	s15, [r3]
 8004caa:	eef1 7a67 	vneg.f32	s15, s15
 8004cae:	4ba3      	ldr	r3, [pc, #652]	@ (8004f3c <Trajectory+0xb20>)
 8004cb0:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (-Vmax*(t-Time_acc)) + temp_pos_acc;
 8004cb4:	4ba2      	ldr	r3, [pc, #648]	@ (8004f40 <Trajectory+0xb24>)
 8004cb6:	edd3 7a00 	vldr	s15, [r3]
 8004cba:	eeb1 7a67 	vneg.f32	s14, s15
 8004cbe:	4b9e      	ldr	r3, [pc, #632]	@ (8004f38 <Trajectory+0xb1c>)
 8004cc0:	edd3 6a00 	vldr	s13, [r3]
 8004cc4:	4b9b      	ldr	r3, [pc, #620]	@ (8004f34 <Trajectory+0xb18>)
 8004cc6:	edd3 7a00 	vldr	s15, [r3]
 8004cca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cd2:	4b9c      	ldr	r3, [pc, #624]	@ (8004f44 <Trajectory+0xb28>)
 8004cd4:	edd3 7a00 	vldr	s15, [r3]
 8004cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cdc:	4b97      	ldr	r3, [pc, #604]	@ (8004f3c <Trajectory+0xb20>)
 8004cde:	edc3 7a00 	vstr	s15, [r3]
				temp_pos_const = traj[0];
 8004ce2:	4b96      	ldr	r3, [pc, #600]	@ (8004f3c <Trajectory+0xb20>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a98      	ldr	r2, [pc, #608]	@ (8004f48 <Trajectory+0xb2c>)
 8004ce8:	6013      	str	r3, [r2, #0]
}
 8004cea:	e1f3      	b.n	80050d4 <Trajectory+0xcb8>
			else if(t < Time_const+Time_acc+Time_dec){
 8004cec:	4b90      	ldr	r3, [pc, #576]	@ (8004f30 <Trajectory+0xb14>)
 8004cee:	ed93 7a00 	vldr	s14, [r3]
 8004cf2:	4b90      	ldr	r3, [pc, #576]	@ (8004f34 <Trajectory+0xb18>)
 8004cf4:	edd3 7a00 	vldr	s15, [r3]
 8004cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cfc:	4b93      	ldr	r3, [pc, #588]	@ (8004f4c <Trajectory+0xb30>)
 8004cfe:	edd3 7a00 	vldr	s15, [r3]
 8004d02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d06:	4b8c      	ldr	r3, [pc, #560]	@ (8004f38 <Trajectory+0xb1c>)
 8004d08:	edd3 7a00 	vldr	s15, [r3]
 8004d0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d14:	dd5f      	ble.n	8004dd6 <Trajectory+0x9ba>
				traj[2] = Amax;
 8004d16:	4b8e      	ldr	r3, [pc, #568]	@ (8004f50 <Trajectory+0xb34>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a88      	ldr	r2, [pc, #544]	@ (8004f3c <Trajectory+0xb20>)
 8004d1c:	6093      	str	r3, [r2, #8]
				traj[1] = (traj[2]*(t-Time_const-Time_acc)) - Vmax;
 8004d1e:	4b87      	ldr	r3, [pc, #540]	@ (8004f3c <Trajectory+0xb20>)
 8004d20:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d24:	4b84      	ldr	r3, [pc, #528]	@ (8004f38 <Trajectory+0xb1c>)
 8004d26:	edd3 6a00 	vldr	s13, [r3]
 8004d2a:	4b81      	ldr	r3, [pc, #516]	@ (8004f30 <Trajectory+0xb14>)
 8004d2c:	edd3 7a00 	vldr	s15, [r3]
 8004d30:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004d34:	4b7f      	ldr	r3, [pc, #508]	@ (8004f34 <Trajectory+0xb18>)
 8004d36:	edd3 7a00 	vldr	s15, [r3]
 8004d3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d42:	4b7f      	ldr	r3, [pc, #508]	@ (8004f40 <Trajectory+0xb24>)
 8004d44:	edd3 7a00 	vldr	s15, [r3]
 8004d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d4c:	4b7b      	ldr	r3, [pc, #492]	@ (8004f3c <Trajectory+0xb20>)
 8004d4e:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((Amax/2)*(t-Time_const-Time_acc)*(t-Time_const-Time_acc))+(traj[1]*(t-Time_const-Time_acc))+temp_pos_const;
 8004d52:	4b7f      	ldr	r3, [pc, #508]	@ (8004f50 <Trajectory+0xb34>)
 8004d54:	edd3 7a00 	vldr	s15, [r3]
 8004d58:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004d5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004d60:	4b75      	ldr	r3, [pc, #468]	@ (8004f38 <Trajectory+0xb1c>)
 8004d62:	edd3 6a00 	vldr	s13, [r3]
 8004d66:	4b72      	ldr	r3, [pc, #456]	@ (8004f30 <Trajectory+0xb14>)
 8004d68:	edd3 7a00 	vldr	s15, [r3]
 8004d6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004d70:	4b70      	ldr	r3, [pc, #448]	@ (8004f34 <Trajectory+0xb18>)
 8004d72:	edd3 7a00 	vldr	s15, [r3]
 8004d76:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d7e:	4b6e      	ldr	r3, [pc, #440]	@ (8004f38 <Trajectory+0xb1c>)
 8004d80:	edd3 6a00 	vldr	s13, [r3]
 8004d84:	4b6a      	ldr	r3, [pc, #424]	@ (8004f30 <Trajectory+0xb14>)
 8004d86:	edd3 7a00 	vldr	s15, [r3]
 8004d8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004d8e:	4b69      	ldr	r3, [pc, #420]	@ (8004f34 <Trajectory+0xb18>)
 8004d90:	edd3 7a00 	vldr	s15, [r3]
 8004d94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d9c:	4b67      	ldr	r3, [pc, #412]	@ (8004f3c <Trajectory+0xb20>)
 8004d9e:	edd3 6a01 	vldr	s13, [r3, #4]
 8004da2:	4b65      	ldr	r3, [pc, #404]	@ (8004f38 <Trajectory+0xb1c>)
 8004da4:	ed93 6a00 	vldr	s12, [r3]
 8004da8:	4b61      	ldr	r3, [pc, #388]	@ (8004f30 <Trajectory+0xb14>)
 8004daa:	edd3 7a00 	vldr	s15, [r3]
 8004dae:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004db2:	4b60      	ldr	r3, [pc, #384]	@ (8004f34 <Trajectory+0xb18>)
 8004db4:	edd3 7a00 	vldr	s15, [r3]
 8004db8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004dc4:	4b60      	ldr	r3, [pc, #384]	@ (8004f48 <Trajectory+0xb2c>)
 8004dc6:	edd3 7a00 	vldr	s15, [r3]
 8004dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dce:	4b5b      	ldr	r3, [pc, #364]	@ (8004f3c <Trajectory+0xb20>)
 8004dd0:	edc3 7a00 	vstr	s15, [r3]
}
 8004dd4:	e17e      	b.n	80050d4 <Trajectory+0xcb8>
				trajec_state = 0;
 8004dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8004f54 <Trajectory+0xb38>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 8004ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8004f58 <Trajectory+0xb3c>)
 8004dde:	4a5f      	ldr	r2, [pc, #380]	@ (8004f5c <Trajectory+0xb40>)
 8004de0:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 8004de2:	4b56      	ldr	r3, [pc, #344]	@ (8004f3c <Trajectory+0xb20>)
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
				temp_pos_acc = 0;
 8004dea:	4b56      	ldr	r3, [pc, #344]	@ (8004f44 <Trajectory+0xb28>)
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
				temp_pos_const = 0;
 8004df2:	4b55      	ldr	r3, [pc, #340]	@ (8004f48 <Trajectory+0xb2c>)
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
}
 8004dfa:	e16b      	b.n	80050d4 <Trajectory+0xcb8>
		else if(Distance_Velo_Max >= 0){					//Triangle
 8004dfc:	4b58      	ldr	r3, [pc, #352]	@ (8004f60 <Trajectory+0xb44>)
 8004dfe:	edd3 7a00 	vldr	s15, [r3]
 8004e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0a:	da00      	bge.n	8004e0e <Trajectory+0x9f2>
}
 8004e0c:	e162      	b.n	80050d4 <Trajectory+0xcb8>
			temp_check = 4;
 8004e0e:	4b55      	ldr	r3, [pc, #340]	@ (8004f64 <Trajectory+0xb48>)
 8004e10:	2204      	movs	r2, #4
 8004e12:	701a      	strb	r2, [r3, #0]
			Time_acc_tri = sqrt(-Distance/Amax);
 8004e14:	4b54      	ldr	r3, [pc, #336]	@ (8004f68 <Trajectory+0xb4c>)
 8004e16:	edd3 7a00 	vldr	s15, [r3]
 8004e1a:	eeb1 7a67 	vneg.f32	s14, s15
 8004e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f50 <Trajectory+0xb34>)
 8004e20:	edd3 7a00 	vldr	s15, [r3]
 8004e24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e28:	ee16 0a90 	vmov	r0, s13
 8004e2c:	f7fb fb58 	bl	80004e0 <__aeabi_f2d>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	ec43 2b10 	vmov	d0, r2, r3
 8004e38:	f007 f808 	bl	800be4c <sqrt>
 8004e3c:	ec53 2b10 	vmov	r2, r3, d0
 8004e40:	4610      	mov	r0, r2
 8004e42:	4619      	mov	r1, r3
 8004e44:	f7fb fe74 	bl	8000b30 <__aeabi_d2f>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4a48      	ldr	r2, [pc, #288]	@ (8004f6c <Trajectory+0xb50>)
 8004e4c:	6013      	str	r3, [r2, #0]
			if(t < Time_acc_tri){
 8004e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f38 <Trajectory+0xb1c>)
 8004e50:	ed93 7a00 	vldr	s14, [r3]
 8004e54:	4b45      	ldr	r3, [pc, #276]	@ (8004f6c <Trajectory+0xb50>)
 8004e56:	edd3 7a00 	vldr	s15, [r3]
 8004e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e62:	f140 8089 	bpl.w	8004f78 <Trajectory+0xb5c>
				traj[2] = -Amax;
 8004e66:	4b3a      	ldr	r3, [pc, #232]	@ (8004f50 <Trajectory+0xb34>)
 8004e68:	edd3 7a00 	vldr	s15, [r3]
 8004e6c:	eef1 7a67 	vneg.f32	s15, s15
 8004e70:	4b32      	ldr	r3, [pc, #200]	@ (8004f3c <Trajectory+0xb20>)
 8004e72:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = -Amax*t;
 8004e76:	4b36      	ldr	r3, [pc, #216]	@ (8004f50 <Trajectory+0xb34>)
 8004e78:	edd3 7a00 	vldr	s15, [r3]
 8004e7c:	eeb1 7a67 	vneg.f32	s14, s15
 8004e80:	4b2d      	ldr	r3, [pc, #180]	@ (8004f38 <Trajectory+0xb1c>)
 8004e82:	edd3 7a00 	vldr	s15, [r3]
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8004f3c <Trajectory+0xb20>)
 8004e8c:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (-Amax/2.0)*t*t + pos;
 8004e90:	4b2f      	ldr	r3, [pc, #188]	@ (8004f50 <Trajectory+0xb34>)
 8004e92:	edd3 7a00 	vldr	s15, [r3]
 8004e96:	eef1 7a67 	vneg.f32	s15, s15
 8004e9a:	ee17 3a90 	vmov	r3, s15
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fb fb1e 	bl	80004e0 <__aeabi_f2d>
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004eac:	f7fb fc9a 	bl	80007e4 <__aeabi_ddiv>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	461d      	mov	r5, r3
 8004eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f38 <Trajectory+0xb1c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fb fb0f 	bl	80004e0 <__aeabi_f2d>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	4629      	mov	r1, r5
 8004eca:	f7fb fb61 	bl	8000590 <__aeabi_dmul>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4614      	mov	r4, r2
 8004ed4:	461d      	mov	r5, r3
 8004ed6:	4b18      	ldr	r3, [pc, #96]	@ (8004f38 <Trajectory+0xb1c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fb fb00 	bl	80004e0 <__aeabi_f2d>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	f7fb fb52 	bl	8000590 <__aeabi_dmul>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	461d      	mov	r5, r3
 8004ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f70 <Trajectory+0xb54>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fb faf1 	bl	80004e0 <__aeabi_f2d>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4620      	mov	r0, r4
 8004f04:	4629      	mov	r1, r5
 8004f06:	f7fb f98d 	bl	8000224 <__adddf3>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4610      	mov	r0, r2
 8004f10:	4619      	mov	r1, r3
 8004f12:	f7fb fe0d 	bl	8000b30 <__aeabi_d2f>
 8004f16:	4603      	mov	r3, r0
 8004f18:	4a08      	ldr	r2, [pc, #32]	@ (8004f3c <Trajectory+0xb20>)
 8004f1a:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 8004f1c:	4b07      	ldr	r3, [pc, #28]	@ (8004f3c <Trajectory+0xb20>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a08      	ldr	r2, [pc, #32]	@ (8004f44 <Trajectory+0xb28>)
 8004f22:	6013      	str	r3, [r2, #0]
				temp_v_acc = traj[1];
 8004f24:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <Trajectory+0xb20>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4a12      	ldr	r2, [pc, #72]	@ (8004f74 <Trajectory+0xb58>)
 8004f2a:	6013      	str	r3, [r2, #0]
}
 8004f2c:	e0d2      	b.n	80050d4 <Trajectory+0xcb8>
 8004f2e:	bf00      	nop
 8004f30:	20001308 	.word	0x20001308
 8004f34:	200012fc 	.word	0x200012fc
 8004f38:	200012d8 	.word	0x200012d8
 8004f3c:	200012ec 	.word	0x200012ec
 8004f40:	20000214 	.word	0x20000214
 8004f44:	200012dc 	.word	0x200012dc
 8004f48:	200012e0 	.word	0x200012e0
 8004f4c:	20001304 	.word	0x20001304
 8004f50:	20000218 	.word	0x20000218
 8004f54:	20001318 	.word	0x20001318
 8004f58:	2000057c 	.word	0x2000057c
 8004f5c:	c1200000 	.word	0xc1200000
 8004f60:	200012e8 	.word	0x200012e8
 8004f64:	20001319 	.word	0x20001319
 8004f68:	200012d4 	.word	0x200012d4
 8004f6c:	20001300 	.word	0x20001300
 8004f70:	200012f8 	.word	0x200012f8
 8004f74:	200012e4 	.word	0x200012e4
			else if(t < Time_acc_tri*2){
 8004f78:	4b57      	ldr	r3, [pc, #348]	@ (80050d8 <Trajectory+0xcbc>)
 8004f7a:	edd3 7a00 	vldr	s15, [r3]
 8004f7e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004f82:	4b56      	ldr	r3, [pc, #344]	@ (80050dc <Trajectory+0xcc0>)
 8004f84:	edd3 7a00 	vldr	s15, [r3]
 8004f88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f90:	f340 8089 	ble.w	80050a6 <Trajectory+0xc8a>
				traj[2] = Amax;
 8004f94:	4b52      	ldr	r3, [pc, #328]	@ (80050e0 <Trajectory+0xcc4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a52      	ldr	r2, [pc, #328]	@ (80050e4 <Trajectory+0xcc8>)
 8004f9a:	6093      	str	r3, [r2, #8]
				traj[1] = temp_v_acc + (Amax*(t-Time_acc_tri));
 8004f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80050dc <Trajectory+0xcc0>)
 8004f9e:	ed93 7a00 	vldr	s14, [r3]
 8004fa2:	4b4d      	ldr	r3, [pc, #308]	@ (80050d8 <Trajectory+0xcbc>)
 8004fa4:	edd3 7a00 	vldr	s15, [r3]
 8004fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fac:	4b4c      	ldr	r3, [pc, #304]	@ (80050e0 <Trajectory+0xcc4>)
 8004fae:	edd3 7a00 	vldr	s15, [r3]
 8004fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80050e8 <Trajectory+0xccc>)
 8004fb8:	edd3 7a00 	vldr	s15, [r3]
 8004fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fc0:	4b48      	ldr	r3, [pc, #288]	@ (80050e4 <Trajectory+0xcc8>)
 8004fc2:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((-Amax/2.0)*(t-Time_acc_tri)*(t-Time_acc_tri))+(traj[1]*(t-Time_acc_tri))+temp_pos_acc;
 8004fc6:	4b46      	ldr	r3, [pc, #280]	@ (80050e0 <Trajectory+0xcc4>)
 8004fc8:	edd3 7a00 	vldr	s15, [r3]
 8004fcc:	eef1 7a67 	vneg.f32	s15, s15
 8004fd0:	ee17 3a90 	vmov	r3, s15
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fb fa83 	bl	80004e0 <__aeabi_f2d>
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004fe2:	f7fb fbff 	bl	80007e4 <__aeabi_ddiv>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4614      	mov	r4, r2
 8004fec:	461d      	mov	r5, r3
 8004fee:	4b3b      	ldr	r3, [pc, #236]	@ (80050dc <Trajectory+0xcc0>)
 8004ff0:	ed93 7a00 	vldr	s14, [r3]
 8004ff4:	4b38      	ldr	r3, [pc, #224]	@ (80050d8 <Trajectory+0xcbc>)
 8004ff6:	edd3 7a00 	vldr	s15, [r3]
 8004ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ffe:	ee17 0a90 	vmov	r0, s15
 8005002:	f7fb fa6d 	bl	80004e0 <__aeabi_f2d>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4620      	mov	r0, r4
 800500c:	4629      	mov	r1, r5
 800500e:	f7fb fabf 	bl	8000590 <__aeabi_dmul>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4614      	mov	r4, r2
 8005018:	461d      	mov	r5, r3
 800501a:	4b30      	ldr	r3, [pc, #192]	@ (80050dc <Trajectory+0xcc0>)
 800501c:	ed93 7a00 	vldr	s14, [r3]
 8005020:	4b2d      	ldr	r3, [pc, #180]	@ (80050d8 <Trajectory+0xcbc>)
 8005022:	edd3 7a00 	vldr	s15, [r3]
 8005026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800502a:	ee17 0a90 	vmov	r0, s15
 800502e:	f7fb fa57 	bl	80004e0 <__aeabi_f2d>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4620      	mov	r0, r4
 8005038:	4629      	mov	r1, r5
 800503a:	f7fb faa9 	bl	8000590 <__aeabi_dmul>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4614      	mov	r4, r2
 8005044:	461d      	mov	r5, r3
 8005046:	4b27      	ldr	r3, [pc, #156]	@ (80050e4 <Trajectory+0xcc8>)
 8005048:	ed93 7a01 	vldr	s14, [r3, #4]
 800504c:	4b23      	ldr	r3, [pc, #140]	@ (80050dc <Trajectory+0xcc0>)
 800504e:	edd3 6a00 	vldr	s13, [r3]
 8005052:	4b21      	ldr	r3, [pc, #132]	@ (80050d8 <Trajectory+0xcbc>)
 8005054:	edd3 7a00 	vldr	s15, [r3]
 8005058:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800505c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005060:	ee17 0a90 	vmov	r0, s15
 8005064:	f7fb fa3c 	bl	80004e0 <__aeabi_f2d>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4620      	mov	r0, r4
 800506e:	4629      	mov	r1, r5
 8005070:	f7fb f8d8 	bl	8000224 <__adddf3>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4614      	mov	r4, r2
 800507a:	461d      	mov	r5, r3
 800507c:	4b1b      	ldr	r3, [pc, #108]	@ (80050ec <Trajectory+0xcd0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f7fb fa2d 	bl	80004e0 <__aeabi_f2d>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4620      	mov	r0, r4
 800508c:	4629      	mov	r1, r5
 800508e:	f7fb f8c9 	bl	8000224 <__adddf3>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
 800509a:	f7fb fd49 	bl	8000b30 <__aeabi_d2f>
 800509e:	4603      	mov	r3, r0
 80050a0:	4a10      	ldr	r2, [pc, #64]	@ (80050e4 <Trajectory+0xcc8>)
 80050a2:	6013      	str	r3, [r2, #0]
}
 80050a4:	e016      	b.n	80050d4 <Trajectory+0xcb8>
				trajec_state = 0;
 80050a6:	4b12      	ldr	r3, [pc, #72]	@ (80050f0 <Trajectory+0xcd4>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 80050ac:	4b11      	ldr	r3, [pc, #68]	@ (80050f4 <Trajectory+0xcd8>)
 80050ae:	4a12      	ldr	r2, [pc, #72]	@ (80050f8 <Trajectory+0xcdc>)
 80050b0:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 80050b2:	4b0c      	ldr	r3, [pc, #48]	@ (80050e4 <Trajectory+0xcc8>)
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	609a      	str	r2, [r3, #8]
				Time_acc_tri = 0;
 80050ba:	4b07      	ldr	r3, [pc, #28]	@ (80050d8 <Trajectory+0xcbc>)
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
				temp_pos_acc = 0;
 80050c2:	4b0a      	ldr	r3, [pc, #40]	@ (80050ec <Trajectory+0xcd0>)
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
				temp_v_acc = 0;
 80050ca:	4b07      	ldr	r3, [pc, #28]	@ (80050e8 <Trajectory+0xccc>)
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
}
 80050d2:	e7ff      	b.n	80050d4 <Trajectory+0xcb8>
 80050d4:	bf00      	nop
 80050d6:	bdb0      	pop	{r4, r5, r7, pc}
 80050d8:	20001300 	.word	0x20001300
 80050dc:	200012d8 	.word	0x200012d8
 80050e0:	20000218 	.word	0x20000218
 80050e4:	200012ec 	.word	0x200012ec
 80050e8:	200012e4 	.word	0x200012e4
 80050ec:	200012dc 	.word	0x200012dc
 80050f0:	20001318 	.word	0x20001318
 80050f4:	2000057c 	.word	0x2000057c
 80050f8:	c1200000 	.word	0xc1200000

080050fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005100:	b672      	cpsid	i
}
 8005102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <Error_Handler+0x8>

08005108 <is_motor_should_run>:
//	degreePerRound = (QEIOfRound * 360.0) / 8192.0;
//	//position on z-zxis
//	linearPos = ((25.01093 * M_PI) / 8192.0) * QEIReadRaw; //24.95
//}
//
void is_motor_should_run(){
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
	limitMin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 800510c:	2102      	movs	r1, #2
 800510e:	481b      	ldr	r0, [pc, #108]	@ (800517c <is_motor_should_run+0x74>)
 8005110:	f001 f9ec 	bl	80064ec <HAL_GPIO_ReadPin>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	4b19      	ldr	r3, [pc, #100]	@ (8005180 <is_motor_should_run+0x78>)
 800511a:	801a      	strh	r2, [r3, #0]
	limitMax = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800511c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005120:	4816      	ldr	r0, [pc, #88]	@ (800517c <is_motor_should_run+0x74>)
 8005122:	f001 f9e3 	bl	80064ec <HAL_GPIO_ReadPin>
 8005126:	4603      	mov	r3, r0
 8005128:	461a      	mov	r2, r3
 800512a:	4b16      	ldr	r3, [pc, #88]	@ (8005184 <is_motor_should_run+0x7c>)
 800512c:	801a      	strh	r2, [r3, #0]
	// motor can move up and down
	if(!limitMax && !limitMin){
 800512e:	4b15      	ldr	r3, [pc, #84]	@ (8005184 <is_motor_should_run+0x7c>)
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <is_motor_should_run+0x44>
 8005136:	4b12      	ldr	r3, [pc, #72]	@ (8005180 <is_motor_should_run+0x78>)
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <is_motor_should_run+0x44>
		isMotorCanMoveUp = 1;
 800513e:	4b12      	ldr	r3, [pc, #72]	@ (8005188 <is_motor_should_run+0x80>)
 8005140:	2201      	movs	r2, #1
 8005142:	701a      	strb	r2, [r3, #0]
		isMotorCanMoveDown = 1;
 8005144:	4b11      	ldr	r3, [pc, #68]	@ (800518c <is_motor_should_run+0x84>)
 8005146:	2201      	movs	r2, #1
 8005148:	701a      	strb	r2, [r3, #0]
	//motor can only move down
	else if(limitMax){
		isMotorCanMoveUp = 0;
		isMotorCanMoveDown = 1;
	}
}
 800514a:	e014      	b.n	8005176 <is_motor_should_run+0x6e>
	else if(limitMin){
 800514c:	4b0c      	ldr	r3, [pc, #48]	@ (8005180 <is_motor_should_run+0x78>)
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d006      	beq.n	8005162 <is_motor_should_run+0x5a>
		isMotorCanMoveUp = 1;
 8005154:	4b0c      	ldr	r3, [pc, #48]	@ (8005188 <is_motor_should_run+0x80>)
 8005156:	2201      	movs	r2, #1
 8005158:	701a      	strb	r2, [r3, #0]
		isMotorCanMoveDown = 0;
 800515a:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <is_motor_should_run+0x84>)
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
}
 8005160:	e009      	b.n	8005176 <is_motor_should_run+0x6e>
	else if(limitMax){
 8005162:	4b08      	ldr	r3, [pc, #32]	@ (8005184 <is_motor_should_run+0x7c>)
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <is_motor_should_run+0x6e>
		isMotorCanMoveUp = 0;
 800516a:	4b07      	ldr	r3, [pc, #28]	@ (8005188 <is_motor_should_run+0x80>)
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]
		isMotorCanMoveDown = 1;
 8005170:	4b06      	ldr	r3, [pc, #24]	@ (800518c <is_motor_should_run+0x84>)
 8005172:	2201      	movs	r2, #1
 8005174:	701a      	strb	r2, [r3, #0]
}
 8005176:	bf00      	nop
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	48000400 	.word	0x48000400
 8005180:	20000574 	.word	0x20000574
 8005184:	20000576 	.word	0x20000576
 8005188:	200004a8 	.word	0x200004a8
 800518c:	200004a9 	.word	0x200004a9

08005190 <readLimit>:
//	}
//}
//


void readLimit(){
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
 	limitMin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8005194:	2102      	movs	r1, #2
 8005196:	4809      	ldr	r0, [pc, #36]	@ (80051bc <readLimit+0x2c>)
 8005198:	f001 f9a8 	bl	80064ec <HAL_GPIO_ReadPin>
 800519c:	4603      	mov	r3, r0
 800519e:	461a      	mov	r2, r3
 80051a0:	4b07      	ldr	r3, [pc, #28]	@ (80051c0 <readLimit+0x30>)
 80051a2:	801a      	strh	r2, [r3, #0]
	limitMax = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80051a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80051a8:	4804      	ldr	r0, [pc, #16]	@ (80051bc <readLimit+0x2c>)
 80051aa:	f001 f99f 	bl	80064ec <HAL_GPIO_ReadPin>
 80051ae:	4603      	mov	r3, r0
 80051b0:	461a      	mov	r2, r3
 80051b2:	4b04      	ldr	r3, [pc, #16]	@ (80051c4 <readLimit+0x34>)
 80051b4:	801a      	strh	r2, [r3, #0]
}
 80051b6:	bf00      	nop
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	48000400 	.word	0x48000400
 80051c0:	20000574 	.word	0x20000574
 80051c4:	20000576 	.word	0x20000576

080051c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ce:	4b0f      	ldr	r3, [pc, #60]	@ (800520c <HAL_MspInit+0x44>)
 80051d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d2:	4a0e      	ldr	r2, [pc, #56]	@ (800520c <HAL_MspInit+0x44>)
 80051d4:	f043 0301 	orr.w	r3, r3, #1
 80051d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80051da:	4b0c      	ldr	r3, [pc, #48]	@ (800520c <HAL_MspInit+0x44>)
 80051dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	607b      	str	r3, [r7, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051e6:	4b09      	ldr	r3, [pc, #36]	@ (800520c <HAL_MspInit+0x44>)
 80051e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ea:	4a08      	ldr	r2, [pc, #32]	@ (800520c <HAL_MspInit+0x44>)
 80051ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80051f2:	4b06      	ldr	r3, [pc, #24]	@ (800520c <HAL_MspInit+0x44>)
 80051f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80051fe:	f001 fa6d 	bl	80066dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000

08005210 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	@ 0x28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005218:	f107 0314 	add.w	r3, r7, #20
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	605a      	str	r2, [r3, #4]
 8005222:	609a      	str	r2, [r3, #8]
 8005224:	60da      	str	r2, [r3, #12]
 8005226:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1c      	ldr	r2, [pc, #112]	@ (80052a0 <HAL_TIM_Encoder_MspInit+0x90>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d131      	bne.n	8005296 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005232:	4b1c      	ldr	r3, [pc, #112]	@ (80052a4 <HAL_TIM_Encoder_MspInit+0x94>)
 8005234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005236:	4a1b      	ldr	r2, [pc, #108]	@ (80052a4 <HAL_TIM_Encoder_MspInit+0x94>)
 8005238:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800523c:	6613      	str	r3, [r2, #96]	@ 0x60
 800523e:	4b19      	ldr	r3, [pc, #100]	@ (80052a4 <HAL_TIM_Encoder_MspInit+0x94>)
 8005240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800524a:	4b16      	ldr	r3, [pc, #88]	@ (80052a4 <HAL_TIM_Encoder_MspInit+0x94>)
 800524c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524e:	4a15      	ldr	r2, [pc, #84]	@ (80052a4 <HAL_TIM_Encoder_MspInit+0x94>)
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005256:	4b13      	ldr	r3, [pc, #76]	@ (80052a4 <HAL_TIM_Encoder_MspInit+0x94>)
 8005258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1CH1_EocoderA_Pin|TIM1CH2_EncoderB_Pin;
 8005262:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005268:	2302      	movs	r3, #2
 800526a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005270:	2300      	movs	r3, #0
 8005272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005274:	2306      	movs	r3, #6
 8005276:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005278:	f107 0314 	add.w	r3, r7, #20
 800527c:	4619      	mov	r1, r3
 800527e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005282:	f000 ffb1 	bl	80061e8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005286:	2200      	movs	r2, #0
 8005288:	2100      	movs	r1, #0
 800528a:	2019      	movs	r0, #25
 800528c:	f000 fc45 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005290:	2019      	movs	r0, #25
 8005292:	f000 fc5c 	bl	8005b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005296:	bf00      	nop
 8005298:	3728      	adds	r7, #40	@ 0x28
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40021000 	.word	0x40021000

080052a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b094      	sub	sp, #80	@ 0x50
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	60da      	str	r2, [r3, #12]
 80052be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c8:	d114      	bne.n	80052f4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052ca:	4b96      	ldr	r3, [pc, #600]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80052cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ce:	4a95      	ldr	r2, [pc, #596]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80052d6:	4b93      	ldr	r3, [pc, #588]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80052d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80052e2:	2200      	movs	r2, #0
 80052e4:	2100      	movs	r1, #0
 80052e6:	201c      	movs	r0, #28
 80052e8:	f000 fc17 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80052ec:	201c      	movs	r0, #28
 80052ee:	f000 fc2e 	bl	8005b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80052f2:	e112      	b.n	800551a <HAL_TIM_Base_MspInit+0x272>
  else if(htim_base->Instance==TIM3)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a8b      	ldr	r2, [pc, #556]	@ (8005528 <HAL_TIM_Base_MspInit+0x280>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d128      	bne.n	8005350 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052fe:	4b89      	ldr	r3, [pc, #548]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005302:	4a88      	ldr	r2, [pc, #544]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005304:	f043 0302 	orr.w	r3, r3, #2
 8005308:	6593      	str	r3, [r2, #88]	@ 0x58
 800530a:	4b86      	ldr	r3, [pc, #536]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 800530c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	637b      	str	r3, [r7, #52]	@ 0x34
 8005314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005316:	4b83      	ldr	r3, [pc, #524]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800531a:	4a82      	ldr	r2, [pc, #520]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 800531c:	f043 0304 	orr.w	r3, r3, #4
 8005320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005322:	4b80      	ldr	r3, [pc, #512]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	633b      	str	r3, [r7, #48]	@ 0x30
 800532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = TIM3CH1_JoySave_Pin;
 800532e:	2340      	movs	r3, #64	@ 0x40
 8005330:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005332:	2302      	movs	r3, #2
 8005334:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005336:	2300      	movs	r3, #0
 8005338:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800533a:	2300      	movs	r3, #0
 800533c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800533e:	2302      	movs	r3, #2
 8005340:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(TIM3CH1_JoySave_GPIO_Port, &GPIO_InitStruct);
 8005342:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005346:	4619      	mov	r1, r3
 8005348:	4878      	ldr	r0, [pc, #480]	@ (800552c <HAL_TIM_Base_MspInit+0x284>)
 800534a:	f000 ff4d 	bl	80061e8 <HAL_GPIO_Init>
}
 800534e:	e0e4      	b.n	800551a <HAL_TIM_Base_MspInit+0x272>
  else if(htim_base->Instance==TIM4)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a76      	ldr	r2, [pc, #472]	@ (8005530 <HAL_TIM_Base_MspInit+0x288>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d12a      	bne.n	80053b0 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800535a:	4b72      	ldr	r3, [pc, #456]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 800535c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535e:	4a71      	ldr	r2, [pc, #452]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005360:	f043 0304 	orr.w	r3, r3, #4
 8005364:	6593      	str	r3, [r2, #88]	@ 0x58
 8005366:	4b6f      	ldr	r3, [pc, #444]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005372:	4b6c      	ldr	r3, [pc, #432]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005376:	4a6b      	ldr	r2, [pc, #428]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800537e:	4b69      	ldr	r3, [pc, #420]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = TIM4CH1_JoySel1_Pin;
 800538a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800538e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005390:	2302      	movs	r3, #2
 8005392:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005394:	2300      	movs	r3, #0
 8005396:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005398:	2300      	movs	r3, #0
 800539a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800539c:	230a      	movs	r3, #10
 800539e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(TIM4CH1_JoySel1_GPIO_Port, &GPIO_InitStruct);
 80053a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80053a4:	4619      	mov	r1, r3
 80053a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80053aa:	f000 ff1d 	bl	80061e8 <HAL_GPIO_Init>
}
 80053ae:	e0b4      	b.n	800551a <HAL_TIM_Base_MspInit+0x272>
  else if(htim_base->Instance==TIM5)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a5f      	ldr	r2, [pc, #380]	@ (8005534 <HAL_TIM_Base_MspInit+0x28c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d10c      	bne.n	80053d4 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80053ba:	4b5a      	ldr	r3, [pc, #360]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053be:	4a59      	ldr	r2, [pc, #356]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80053c0:	f043 0308 	orr.w	r3, r3, #8
 80053c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80053c6:	4b57      	ldr	r3, [pc, #348]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053d2:	e0a2      	b.n	800551a <HAL_TIM_Base_MspInit+0x272>
  else if(htim_base->Instance==TIM8)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a57      	ldr	r2, [pc, #348]	@ (8005538 <HAL_TIM_Base_MspInit+0x290>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d139      	bne.n	8005452 <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80053de:	4b51      	ldr	r3, [pc, #324]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80053e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e2:	4a50      	ldr	r2, [pc, #320]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80053e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80053e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80053ea:	4b4e      	ldr	r3, [pc, #312]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80053ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053f2:	623b      	str	r3, [r7, #32]
 80053f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80053f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053fa:	4a4a      	ldr	r2, [pc, #296]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80053fc:	f043 0302 	orr.w	r3, r3, #2
 8005400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005402:	4b48      	ldr	r3, [pc, #288]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TIM8CH1_joyX_Pin;
 800540e:	2340      	movs	r3, #64	@ 0x40
 8005410:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005412:	2302      	movs	r3, #2
 8005414:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005416:	2300      	movs	r3, #0
 8005418:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800541a:	2300      	movs	r3, #0
 800541c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800541e:	2305      	movs	r3, #5
 8005420:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(TIM8CH1_joyX_GPIO_Port, &GPIO_InitStruct);
 8005422:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005426:	4619      	mov	r1, r3
 8005428:	4844      	ldr	r0, [pc, #272]	@ (800553c <HAL_TIM_Base_MspInit+0x294>)
 800542a:	f000 fedd 	bl	80061e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM8CH3_JoyZUp_Pin;
 800542e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005432:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005434:	2302      	movs	r3, #2
 8005436:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005438:	2300      	movs	r3, #0
 800543a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800543c:	2300      	movs	r3, #0
 800543e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8005440:	230a      	movs	r3, #10
 8005442:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(TIM8CH3_JoyZUp_GPIO_Port, &GPIO_InitStruct);
 8005444:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005448:	4619      	mov	r1, r3
 800544a:	483c      	ldr	r0, [pc, #240]	@ (800553c <HAL_TIM_Base_MspInit+0x294>)
 800544c:	f000 fecc 	bl	80061e8 <HAL_GPIO_Init>
}
 8005450:	e063      	b.n	800551a <HAL_TIM_Base_MspInit+0x272>
  else if(htim_base->Instance==TIM16)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a3a      	ldr	r2, [pc, #232]	@ (8005540 <HAL_TIM_Base_MspInit+0x298>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d114      	bne.n	8005486 <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800545c:	4b31      	ldr	r3, [pc, #196]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 800545e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005460:	4a30      	ldr	r2, [pc, #192]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005466:	6613      	str	r3, [r2, #96]	@ 0x60
 8005468:	4b2e      	ldr	r3, [pc, #184]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 800546a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800546c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005474:	2200      	movs	r2, #0
 8005476:	2100      	movs	r1, #0
 8005478:	2019      	movs	r0, #25
 800547a:	f000 fb4e 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800547e:	2019      	movs	r0, #25
 8005480:	f000 fb65 	bl	8005b4e <HAL_NVIC_EnableIRQ>
}
 8005484:	e049      	b.n	800551a <HAL_TIM_Base_MspInit+0x272>
  else if(htim_base->Instance==TIM20)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2e      	ldr	r2, [pc, #184]	@ (8005544 <HAL_TIM_Base_MspInit+0x29c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d144      	bne.n	800551a <HAL_TIM_Base_MspInit+0x272>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8005490:	4b24      	ldr	r3, [pc, #144]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005494:	4a23      	ldr	r2, [pc, #140]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 8005496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800549a:	6613      	str	r3, [r2, #96]	@ 0x60
 800549c:	4b21      	ldr	r3, [pc, #132]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 800549e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80054aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80054ae:	f043 0302 	orr.w	r3, r3, #2
 80054b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80054b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054c0:	4b18      	ldr	r3, [pc, #96]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80054c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054c4:	4a17      	ldr	r2, [pc, #92]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80054c6:	f043 0304 	orr.w	r3, r3, #4
 80054ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054cc:	4b15      	ldr	r3, [pc, #84]	@ (8005524 <HAL_TIM_Base_MspInit+0x27c>)
 80054ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM20CH1_JoySel2_Pin;
 80054d8:	2304      	movs	r3, #4
 80054da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054dc:	2302      	movs	r3, #2
 80054de:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e4:	2300      	movs	r3, #0
 80054e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 80054e8:	2303      	movs	r3, #3
 80054ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(TIM20CH1_JoySel2_GPIO_Port, &GPIO_InitStruct);
 80054ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80054f0:	4619      	mov	r1, r3
 80054f2:	4812      	ldr	r0, [pc, #72]	@ (800553c <HAL_TIM_Base_MspInit+0x294>)
 80054f4:	f000 fe78 	bl	80061e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM20CH3_JoyZDown_Pin;
 80054f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054fe:	2302      	movs	r3, #2
 8005500:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005502:	2300      	movs	r3, #0
 8005504:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005506:	2300      	movs	r3, #0
 8005508:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 800550a:	2306      	movs	r3, #6
 800550c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(TIM20CH3_JoyZDown_GPIO_Port, &GPIO_InitStruct);
 800550e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005512:	4619      	mov	r1, r3
 8005514:	4805      	ldr	r0, [pc, #20]	@ (800552c <HAL_TIM_Base_MspInit+0x284>)
 8005516:	f000 fe67 	bl	80061e8 <HAL_GPIO_Init>
}
 800551a:	bf00      	nop
 800551c:	3750      	adds	r7, #80	@ 0x50
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40021000 	.word	0x40021000
 8005528:	40000400 	.word	0x40000400
 800552c:	48000800 	.word	0x48000800
 8005530:	40000800 	.word	0x40000800
 8005534:	40000c00 	.word	0x40000c00
 8005538:	40013400 	.word	0x40013400
 800553c:	48000400 	.word	0x48000400
 8005540:	40014400 	.word	0x40014400
 8005544:	40015000 	.word	0x40015000

08005548 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005550:	f107 030c 	add.w	r3, r7, #12
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a11      	ldr	r2, [pc, #68]	@ (80055ac <HAL_TIM_MspPostInit+0x64>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d11c      	bne.n	80055a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800556a:	4b11      	ldr	r3, [pc, #68]	@ (80055b0 <HAL_TIM_MspPostInit+0x68>)
 800556c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800556e:	4a10      	ldr	r2, [pc, #64]	@ (80055b0 <HAL_TIM_MspPostInit+0x68>)
 8005570:	f043 0304 	orr.w	r3, r3, #4
 8005574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005576:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <HAL_TIM_MspPostInit+0x68>)
 8005578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	60bb      	str	r3, [r7, #8]
 8005580:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005586:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005588:	2302      	movs	r3, #2
 800558a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005590:	2300      	movs	r3, #0
 8005592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8005594:	2301      	movs	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005598:	f107 030c 	add.w	r3, r7, #12
 800559c:	4619      	mov	r1, r3
 800559e:	4805      	ldr	r0, [pc, #20]	@ (80055b4 <HAL_TIM_MspPostInit+0x6c>)
 80055a0:	f000 fe22 	bl	80061e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80055a4:	bf00      	nop
 80055a6:	3720      	adds	r7, #32
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40000c00 	.word	0x40000c00
 80055b0:	40021000 	.word	0x40021000
 80055b4:	48000800 	.word	0x48000800

080055b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b09e      	sub	sp, #120	@ 0x78
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	605a      	str	r2, [r3, #4]
 80055ca:	609a      	str	r2, [r3, #8]
 80055cc:	60da      	str	r2, [r3, #12]
 80055ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80055d0:	f107 0310 	add.w	r3, r7, #16
 80055d4:	2254      	movs	r2, #84	@ 0x54
 80055d6:	2100      	movs	r1, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	f006 fbf7 	bl	800bdcc <memset>
  if(huart->Instance==USART2)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a4d      	ldr	r2, [pc, #308]	@ (8005718 <HAL_UART_MspInit+0x160>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	f040 8092 	bne.w	800570e <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80055ea:	2302      	movs	r3, #2
 80055ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055f2:	f107 0310 	add.w	r3, r7, #16
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 fdae 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005602:	f7ff fd7b 	bl	80050fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005606:	4b45      	ldr	r3, [pc, #276]	@ (800571c <HAL_UART_MspInit+0x164>)
 8005608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800560a:	4a44      	ldr	r2, [pc, #272]	@ (800571c <HAL_UART_MspInit+0x164>)
 800560c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005610:	6593      	str	r3, [r2, #88]	@ 0x58
 8005612:	4b42      	ldr	r3, [pc, #264]	@ (800571c <HAL_UART_MspInit+0x164>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800561e:	4b3f      	ldr	r3, [pc, #252]	@ (800571c <HAL_UART_MspInit+0x164>)
 8005620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005622:	4a3e      	ldr	r2, [pc, #248]	@ (800571c <HAL_UART_MspInit+0x164>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800562a:	4b3c      	ldr	r3, [pc, #240]	@ (800571c <HAL_UART_MspInit+0x164>)
 800562c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005636:	230c      	movs	r3, #12
 8005638:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800563a:	2302      	movs	r3, #2
 800563c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563e:	2300      	movs	r3, #0
 8005640:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005642:	2300      	movs	r3, #0
 8005644:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005646:	2307      	movs	r3, #7
 8005648:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800564a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800564e:	4619      	mov	r1, r3
 8005650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005654:	f000 fdc8 	bl	80061e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8005658:	4b31      	ldr	r3, [pc, #196]	@ (8005720 <HAL_UART_MspInit+0x168>)
 800565a:	4a32      	ldr	r2, [pc, #200]	@ (8005724 <HAL_UART_MspInit+0x16c>)
 800565c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800565e:	4b30      	ldr	r3, [pc, #192]	@ (8005720 <HAL_UART_MspInit+0x168>)
 8005660:	221b      	movs	r2, #27
 8005662:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005664:	4b2e      	ldr	r3, [pc, #184]	@ (8005720 <HAL_UART_MspInit+0x168>)
 8005666:	2210      	movs	r2, #16
 8005668:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800566a:	4b2d      	ldr	r3, [pc, #180]	@ (8005720 <HAL_UART_MspInit+0x168>)
 800566c:	2200      	movs	r2, #0
 800566e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005670:	4b2b      	ldr	r3, [pc, #172]	@ (8005720 <HAL_UART_MspInit+0x168>)
 8005672:	2280      	movs	r2, #128	@ 0x80
 8005674:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005676:	4b2a      	ldr	r3, [pc, #168]	@ (8005720 <HAL_UART_MspInit+0x168>)
 8005678:	2200      	movs	r2, #0
 800567a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800567c:	4b28      	ldr	r3, [pc, #160]	@ (8005720 <HAL_UART_MspInit+0x168>)
 800567e:	2200      	movs	r2, #0
 8005680:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005682:	4b27      	ldr	r3, [pc, #156]	@ (8005720 <HAL_UART_MspInit+0x168>)
 8005684:	2200      	movs	r2, #0
 8005686:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005688:	4b25      	ldr	r3, [pc, #148]	@ (8005720 <HAL_UART_MspInit+0x168>)
 800568a:	2200      	movs	r2, #0
 800568c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800568e:	4824      	ldr	r0, [pc, #144]	@ (8005720 <HAL_UART_MspInit+0x168>)
 8005690:	f000 fa78 	bl	8005b84 <HAL_DMA_Init>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800569a:	f7ff fd2f 	bl	80050fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005720 <HAL_UART_MspInit+0x168>)
 80056a2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80056a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005720 <HAL_UART_MspInit+0x168>)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80056aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005728 <HAL_UART_MspInit+0x170>)
 80056ac:	4a1f      	ldr	r2, [pc, #124]	@ (800572c <HAL_UART_MspInit+0x174>)
 80056ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80056b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005728 <HAL_UART_MspInit+0x170>)
 80056b2:	221a      	movs	r2, #26
 80056b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005728 <HAL_UART_MspInit+0x170>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005728 <HAL_UART_MspInit+0x170>)
 80056be:	2200      	movs	r2, #0
 80056c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056c2:	4b19      	ldr	r3, [pc, #100]	@ (8005728 <HAL_UART_MspInit+0x170>)
 80056c4:	2280      	movs	r2, #128	@ 0x80
 80056c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056c8:	4b17      	ldr	r3, [pc, #92]	@ (8005728 <HAL_UART_MspInit+0x170>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056ce:	4b16      	ldr	r3, [pc, #88]	@ (8005728 <HAL_UART_MspInit+0x170>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80056d4:	4b14      	ldr	r3, [pc, #80]	@ (8005728 <HAL_UART_MspInit+0x170>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056da:	4b13      	ldr	r3, [pc, #76]	@ (8005728 <HAL_UART_MspInit+0x170>)
 80056dc:	2200      	movs	r2, #0
 80056de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80056e0:	4811      	ldr	r0, [pc, #68]	@ (8005728 <HAL_UART_MspInit+0x170>)
 80056e2:	f000 fa4f 	bl	8005b84 <HAL_DMA_Init>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80056ec:	f7ff fd06 	bl	80050fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005728 <HAL_UART_MspInit+0x170>)
 80056f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80056f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005728 <HAL_UART_MspInit+0x170>)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80056fe:	2200      	movs	r2, #0
 8005700:	2100      	movs	r1, #0
 8005702:	2026      	movs	r0, #38	@ 0x26
 8005704:	f000 fa09 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005708:	2026      	movs	r0, #38	@ 0x26
 800570a:	f000 fa20 	bl	8005b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800570e:	bf00      	nop
 8005710:	3778      	adds	r7, #120	@ 0x78
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40004400 	.word	0x40004400
 800571c:	40021000 	.word	0x40021000
 8005720:	20000cc8 	.word	0x20000cc8
 8005724:	40020008 	.word	0x40020008
 8005728:	20000d28 	.word	0x20000d28
 800572c:	4002001c 	.word	0x4002001c

08005730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005734:	bf00      	nop
 8005736:	e7fd      	b.n	8005734 <NMI_Handler+0x4>

08005738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <HardFault_Handler+0x4>

08005740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005744:	bf00      	nop
 8005746:	e7fd      	b.n	8005744 <MemManage_Handler+0x4>

08005748 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800574c:	bf00      	nop
 800574e:	e7fd      	b.n	800574c <BusFault_Handler+0x4>

08005750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005754:	bf00      	nop
 8005756:	e7fd      	b.n	8005754 <UsageFault_Handler+0x4>

08005758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005766:	b480      	push	{r7}
 8005768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800576a:	bf00      	nop
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005778:	bf00      	nop
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005786:	f000 f8cf 	bl	8005928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800578a:	bf00      	nop
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005794:	4802      	ldr	r0, [pc, #8]	@ (80057a0 <DMA1_Channel1_IRQHandler+0x10>)
 8005796:	f000 fbd8 	bl	8005f4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800579a:	bf00      	nop
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20000cc8 	.word	0x20000cc8

080057a4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80057a8:	4802      	ldr	r0, [pc, #8]	@ (80057b4 <DMA1_Channel2_IRQHandler+0x10>)
 80057aa:	f000 fbce 	bl	8005f4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80057ae:	bf00      	nop
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000d28 	.word	0x20000d28

080057b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80057bc:	4803      	ldr	r0, [pc, #12]	@ (80057cc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80057be:	f002 fd8f 	bl	80082e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80057c2:	4803      	ldr	r0, [pc, #12]	@ (80057d0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80057c4:	f002 fd8c 	bl	80082e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80057c8:	bf00      	nop
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	2000059c 	.word	0x2000059c
 80057d0:	20000a64 	.word	0x20000a64

080057d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80057d8:	4802      	ldr	r0, [pc, #8]	@ (80057e4 <TIM2_IRQHandler+0x10>)
 80057da:	f002 fd81 	bl	80082e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000668 	.word	0x20000668

080057e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80057ec:	4802      	ldr	r0, [pc, #8]	@ (80057f8 <USART2_IRQHandler+0x10>)
 80057ee:	f004 fda9 	bl	800a344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80057f2:	bf00      	nop
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000bfc 	.word	0x20000bfc

080057fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005800:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005804:	f000 fea2 	bl	800654c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005808:	bf00      	nop
 800580a:	bd80      	pop	{r7, pc}

0800580c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005810:	4b06      	ldr	r3, [pc, #24]	@ (800582c <SystemInit+0x20>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005816:	4a05      	ldr	r2, [pc, #20]	@ (800582c <SystemInit+0x20>)
 8005818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800581c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005820:	bf00      	nop
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	e000ed00 	.word	0xe000ed00

08005830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005830:	480d      	ldr	r0, [pc, #52]	@ (8005868 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005832:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005834:	f7ff ffea 	bl	800580c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005838:	480c      	ldr	r0, [pc, #48]	@ (800586c <LoopForever+0x6>)
  ldr r1, =_edata
 800583a:	490d      	ldr	r1, [pc, #52]	@ (8005870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800583c:	4a0d      	ldr	r2, [pc, #52]	@ (8005874 <LoopForever+0xe>)
  movs r3, #0
 800583e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005840:	e002      	b.n	8005848 <LoopCopyDataInit>

08005842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005846:	3304      	adds	r3, #4

08005848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800584a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800584c:	d3f9      	bcc.n	8005842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800584e:	4a0a      	ldr	r2, [pc, #40]	@ (8005878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005850:	4c0a      	ldr	r4, [pc, #40]	@ (800587c <LoopForever+0x16>)
  movs r3, #0
 8005852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005854:	e001      	b.n	800585a <LoopFillZerobss>

08005856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005858:	3204      	adds	r2, #4

0800585a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800585a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800585c:	d3fb      	bcc.n	8005856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800585e:	f006 fac3 	bl	800bde8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005862:	f7fc fe5f 	bl	8002524 <main>

08005866 <LoopForever>:

LoopForever:
    b LoopForever
 8005866:	e7fe      	b.n	8005866 <LoopForever>
  ldr   r0, =_estack
 8005868:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800586c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005870:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8005874:	0800c1b8 	.word	0x0800c1b8
  ldr r2, =_sbss
 8005878:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 800587c:	20001464 	.word	0x20001464

08005880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005880:	e7fe      	b.n	8005880 <ADC1_2_IRQHandler>

08005882 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b082      	sub	sp, #8
 8005886:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800588c:	2003      	movs	r0, #3
 800588e:	f000 f939 	bl	8005b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005892:	2000      	movs	r0, #0
 8005894:	f000 f80e 	bl	80058b4 <HAL_InitTick>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	71fb      	strb	r3, [r7, #7]
 80058a2:	e001      	b.n	80058a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80058a4:	f7ff fc90 	bl	80051c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80058a8:	79fb      	ldrb	r3, [r7, #7]

}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80058c0:	4b16      	ldr	r3, [pc, #88]	@ (800591c <HAL_InitTick+0x68>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d022      	beq.n	800590e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80058c8:	4b15      	ldr	r3, [pc, #84]	@ (8005920 <HAL_InitTick+0x6c>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b13      	ldr	r3, [pc, #76]	@ (800591c <HAL_InitTick+0x68>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80058d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80058d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 f944 	bl	8005b6a <HAL_SYSTICK_Config>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10f      	bne.n	8005908 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b0f      	cmp	r3, #15
 80058ec:	d809      	bhi.n	8005902 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058ee:	2200      	movs	r2, #0
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	f04f 30ff 	mov.w	r0, #4294967295
 80058f6:	f000 f910 	bl	8005b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80058fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005924 <HAL_InitTick+0x70>)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	e007      	b.n	8005912 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	73fb      	strb	r3, [r7, #15]
 8005906:	e004      	b.n	8005912 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
 800590c:	e001      	b.n	8005912 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005912:	7bfb      	ldrb	r3, [r7, #15]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20000224 	.word	0x20000224
 8005920:	2000021c 	.word	0x2000021c
 8005924:	20000220 	.word	0x20000220

08005928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800592c:	4b05      	ldr	r3, [pc, #20]	@ (8005944 <HAL_IncTick+0x1c>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	4b05      	ldr	r3, [pc, #20]	@ (8005948 <HAL_IncTick+0x20>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4413      	add	r3, r2
 8005936:	4a03      	ldr	r2, [pc, #12]	@ (8005944 <HAL_IncTick+0x1c>)
 8005938:	6013      	str	r3, [r2, #0]
}
 800593a:	bf00      	nop
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	20001328 	.word	0x20001328
 8005948:	20000224 	.word	0x20000224

0800594c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  return uwTick;
 8005950:	4b03      	ldr	r3, [pc, #12]	@ (8005960 <HAL_GetTick+0x14>)
 8005952:	681b      	ldr	r3, [r3, #0]
}
 8005954:	4618      	mov	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20001328 	.word	0x20001328

08005964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005974:	4b0c      	ldr	r3, [pc, #48]	@ (80059a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005980:	4013      	ands	r3, r2
 8005982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800598c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005996:	4a04      	ldr	r2, [pc, #16]	@ (80059a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	60d3      	str	r3, [r2, #12]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	e000ed00 	.word	0xe000ed00

080059ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059b0:	4b04      	ldr	r3, [pc, #16]	@ (80059c4 <__NVIC_GetPriorityGrouping+0x18>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	0a1b      	lsrs	r3, r3, #8
 80059b6:	f003 0307 	and.w	r3, r3, #7
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	db0b      	blt.n	80059f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	f003 021f 	and.w	r2, r3, #31
 80059e0:	4907      	ldr	r1, [pc, #28]	@ (8005a00 <__NVIC_EnableIRQ+0x38>)
 80059e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	2001      	movs	r0, #1
 80059ea:	fa00 f202 	lsl.w	r2, r0, r2
 80059ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	e000e100 	.word	0xe000e100

08005a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	6039      	str	r1, [r7, #0]
 8005a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	db0a      	blt.n	8005a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	490c      	ldr	r1, [pc, #48]	@ (8005a50 <__NVIC_SetPriority+0x4c>)
 8005a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a22:	0112      	lsls	r2, r2, #4
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	440b      	add	r3, r1
 8005a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a2c:	e00a      	b.n	8005a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	4908      	ldr	r1, [pc, #32]	@ (8005a54 <__NVIC_SetPriority+0x50>)
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	3b04      	subs	r3, #4
 8005a3c:	0112      	lsls	r2, r2, #4
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	440b      	add	r3, r1
 8005a42:	761a      	strb	r2, [r3, #24]
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	e000e100 	.word	0xe000e100
 8005a54:	e000ed00 	.word	0xe000ed00

08005a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b089      	sub	sp, #36	@ 0x24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f1c3 0307 	rsb	r3, r3, #7
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	bf28      	it	cs
 8005a76:	2304      	movcs	r3, #4
 8005a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	2b06      	cmp	r3, #6
 8005a80:	d902      	bls.n	8005a88 <NVIC_EncodePriority+0x30>
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	3b03      	subs	r3, #3
 8005a86:	e000      	b.n	8005a8a <NVIC_EncodePriority+0x32>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	43da      	mvns	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aaa:	43d9      	mvns	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab0:	4313      	orrs	r3, r2
         );
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3724      	adds	r7, #36	@ 0x24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ad0:	d301      	bcc.n	8005ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e00f      	b.n	8005af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8005b00 <SysTick_Config+0x40>)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ade:	210f      	movs	r1, #15
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	f7ff ff8e 	bl	8005a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ae8:	4b05      	ldr	r3, [pc, #20]	@ (8005b00 <SysTick_Config+0x40>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aee:	4b04      	ldr	r3, [pc, #16]	@ (8005b00 <SysTick_Config+0x40>)
 8005af0:	2207      	movs	r2, #7
 8005af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	e000e010 	.word	0xe000e010

08005b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff ff29 	bl	8005964 <__NVIC_SetPriorityGrouping>
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b086      	sub	sp, #24
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	4603      	mov	r3, r0
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b28:	f7ff ff40 	bl	80059ac <__NVIC_GetPriorityGrouping>
 8005b2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	6978      	ldr	r0, [r7, #20]
 8005b34:	f7ff ff90 	bl	8005a58 <NVIC_EncodePriority>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b3e:	4611      	mov	r1, r2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff ff5f 	bl	8005a04 <__NVIC_SetPriority>
}
 8005b46:	bf00      	nop
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	4603      	mov	r3, r0
 8005b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff ff33 	bl	80059c8 <__NVIC_EnableIRQ>
}
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff ffa4 	bl	8005ac0 <SysTick_Config>
 8005b78:	4603      	mov	r3, r0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e08d      	b.n	8005cb2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	4b47      	ldr	r3, [pc, #284]	@ (8005cbc <HAL_DMA_Init+0x138>)
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d80f      	bhi.n	8005bc2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4b45      	ldr	r3, [pc, #276]	@ (8005cc0 <HAL_DMA_Init+0x13c>)
 8005baa:	4413      	add	r3, r2
 8005bac:	4a45      	ldr	r2, [pc, #276]	@ (8005cc4 <HAL_DMA_Init+0x140>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	009a      	lsls	r2, r3, #2
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a42      	ldr	r2, [pc, #264]	@ (8005cc8 <HAL_DMA_Init+0x144>)
 8005bbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bc0:	e00e      	b.n	8005be0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4b40      	ldr	r3, [pc, #256]	@ (8005ccc <HAL_DMA_Init+0x148>)
 8005bca:	4413      	add	r3, r2
 8005bcc:	4a3d      	ldr	r2, [pc, #244]	@ (8005cc4 <HAL_DMA_Init+0x140>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	009a      	lsls	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a3c      	ldr	r2, [pc, #240]	@ (8005cd0 <HAL_DMA_Init+0x14c>)
 8005bde:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fa76 	bl	8006124 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c40:	d102      	bne.n	8005c48 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c5c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d010      	beq.n	8005c88 <HAL_DMA_Init+0x104>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d80c      	bhi.n	8005c88 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa96 	bl	80061a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c84:	605a      	str	r2, [r3, #4]
 8005c86:	e008      	b.n	8005c9a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40020407 	.word	0x40020407
 8005cc0:	bffdfff8 	.word	0xbffdfff8
 8005cc4:	cccccccd 	.word	0xcccccccd
 8005cc8:	40020000 	.word	0x40020000
 8005ccc:	bffdfbf8 	.word	0xbffdfbf8
 8005cd0:	40020400 	.word	0x40020400

08005cd4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_DMA_Start_IT+0x20>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e066      	b.n	8005dc2 <HAL_DMA_Start_IT+0xee>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d155      	bne.n	8005db4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f9bb 	bl	80060a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 020e 	orr.w	r2, r2, #14
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e00f      	b.n	8005d6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0204 	bic.w	r2, r2, #4
 8005d5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 020a 	orr.w	r2, r2, #10
 8005d6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d007      	beq.n	8005d8a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d88:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005da0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	e005      	b.n	8005dc0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d005      	beq.n	8005dee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2204      	movs	r2, #4
 8005de6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	73fb      	strb	r3, [r7, #15]
 8005dec:	e037      	b.n	8005e5e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 020e 	bic.w	r2, r2, #14
 8005dfc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e0c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e22:	f003 021f 	and.w	r2, r3, #31
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e30:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e3a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00c      	beq.n	8005e5e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e52:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e5c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d00d      	beq.n	8005eb0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2204      	movs	r2, #4
 8005e98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	73fb      	strb	r3, [r7, #15]
 8005eae:	e047      	b.n	8005f40 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 020e 	bic.w	r2, r2, #14
 8005ebe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee4:	f003 021f 	and.w	r2, r3, #31
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eec:	2101      	movs	r1, #1
 8005eee:	fa01 f202 	lsl.w	r2, r1, r2
 8005ef2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005efc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00c      	beq.n	8005f20 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
    }
  }
  return status;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	409a      	lsls	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d026      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x7a>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d021      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d107      	bne.n	8005f9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0204 	bic.w	r2, r2, #4
 8005f9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa2:	f003 021f 	and.w	r2, r3, #31
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	2104      	movs	r1, #4
 8005fac:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d071      	beq.n	800609e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005fc2:	e06c      	b.n	800609e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2202      	movs	r2, #2
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d02e      	beq.n	8006036 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d029      	beq.n	8006036 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10b      	bne.n	8006008 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 020a 	bic.w	r2, r2, #10
 8005ffe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600c:	f003 021f 	and.w	r2, r3, #31
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006014:	2102      	movs	r1, #2
 8006016:	fa01 f202 	lsl.w	r2, r1, r2
 800601a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d038      	beq.n	800609e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006034:	e033      	b.n	800609e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	2208      	movs	r2, #8
 8006040:	409a      	lsls	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4013      	ands	r3, r2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d02a      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d025      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 020e 	bic.w	r2, r2, #14
 8006062:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006068:	f003 021f 	and.w	r2, r3, #31
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006070:	2101      	movs	r1, #1
 8006072:	fa01 f202 	lsl.w	r2, r1, r2
 8006076:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
}
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80060be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80060d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d6:	f003 021f 	and.w	r2, r3, #31
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	2101      	movs	r1, #1
 80060e0:	fa01 f202 	lsl.w	r2, r1, r2
 80060e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d108      	bne.n	8006108 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006106:	e007      	b.n	8006118 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	60da      	str	r2, [r3, #12]
}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	4b16      	ldr	r3, [pc, #88]	@ (800618c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006134:	429a      	cmp	r2, r3
 8006136:	d802      	bhi.n	800613e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006138:	4b15      	ldr	r3, [pc, #84]	@ (8006190 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	e001      	b.n	8006142 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800613e:	4b15      	ldr	r3, [pc, #84]	@ (8006194 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006140:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	3b08      	subs	r3, #8
 800614e:	4a12      	ldr	r2, [pc, #72]	@ (8006198 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006150:	fba2 2303 	umull	r2, r3, r2, r3
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615c:	089b      	lsrs	r3, r3, #2
 800615e:	009a      	lsls	r2, r3, #2
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4413      	add	r3, r2
 8006164:	461a      	mov	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a0b      	ldr	r2, [pc, #44]	@ (800619c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800616e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2201      	movs	r2, #1
 8006178:	409a      	lsls	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40020407 	.word	0x40020407
 8006190:	40020800 	.word	0x40020800
 8006194:	40020820 	.word	0x40020820
 8006198:	cccccccd 	.word	0xcccccccd
 800619c:	40020880 	.word	0x40020880

080061a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	461a      	mov	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a08      	ldr	r2, [pc, #32]	@ (80061e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80061c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2201      	movs	r2, #1
 80061ce:	409a      	lsls	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	1000823f 	.word	0x1000823f
 80061e4:	40020940 	.word	0x40020940

080061e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80061f6:	e15a      	b.n	80064ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	2101      	movs	r1, #1
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	fa01 f303 	lsl.w	r3, r1, r3
 8006204:	4013      	ands	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 814c 	beq.w	80064a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f003 0303 	and.w	r3, r3, #3
 8006218:	2b01      	cmp	r3, #1
 800621a:	d005      	beq.n	8006228 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006224:	2b02      	cmp	r3, #2
 8006226:	d130      	bne.n	800628a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	2203      	movs	r2, #3
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	43db      	mvns	r3, r3
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4013      	ands	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800625e:	2201      	movs	r2, #1
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	43db      	mvns	r3, r3
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4013      	ands	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	f003 0201 	and.w	r2, r3, #1
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	2b03      	cmp	r3, #3
 8006294:	d017      	beq.n	80062c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	2203      	movs	r2, #3
 80062a2:	fa02 f303 	lsl.w	r3, r2, r3
 80062a6:	43db      	mvns	r3, r3
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4013      	ands	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d123      	bne.n	800631a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	08da      	lsrs	r2, r3, #3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3208      	adds	r2, #8
 80062da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	220f      	movs	r2, #15
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43db      	mvns	r3, r3
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4013      	ands	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	691a      	ldr	r2, [r3, #16]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	08da      	lsrs	r2, r3, #3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3208      	adds	r2, #8
 8006314:	6939      	ldr	r1, [r7, #16]
 8006316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	2203      	movs	r2, #3
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	43db      	mvns	r3, r3
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4013      	ands	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f003 0203 	and.w	r2, r3, #3
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80a6 	beq.w	80064a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800635c:	4b5b      	ldr	r3, [pc, #364]	@ (80064cc <HAL_GPIO_Init+0x2e4>)
 800635e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006360:	4a5a      	ldr	r2, [pc, #360]	@ (80064cc <HAL_GPIO_Init+0x2e4>)
 8006362:	f043 0301 	orr.w	r3, r3, #1
 8006366:	6613      	str	r3, [r2, #96]	@ 0x60
 8006368:	4b58      	ldr	r3, [pc, #352]	@ (80064cc <HAL_GPIO_Init+0x2e4>)
 800636a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006374:	4a56      	ldr	r2, [pc, #344]	@ (80064d0 <HAL_GPIO_Init+0x2e8>)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	089b      	lsrs	r3, r3, #2
 800637a:	3302      	adds	r3, #2
 800637c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	220f      	movs	r2, #15
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	43db      	mvns	r3, r3
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4013      	ands	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800639e:	d01f      	beq.n	80063e0 <HAL_GPIO_Init+0x1f8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a4c      	ldr	r2, [pc, #304]	@ (80064d4 <HAL_GPIO_Init+0x2ec>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d019      	beq.n	80063dc <HAL_GPIO_Init+0x1f4>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a4b      	ldr	r2, [pc, #300]	@ (80064d8 <HAL_GPIO_Init+0x2f0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <HAL_GPIO_Init+0x1f0>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a4a      	ldr	r2, [pc, #296]	@ (80064dc <HAL_GPIO_Init+0x2f4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00d      	beq.n	80063d4 <HAL_GPIO_Init+0x1ec>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a49      	ldr	r2, [pc, #292]	@ (80064e0 <HAL_GPIO_Init+0x2f8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d007      	beq.n	80063d0 <HAL_GPIO_Init+0x1e8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a48      	ldr	r2, [pc, #288]	@ (80064e4 <HAL_GPIO_Init+0x2fc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d101      	bne.n	80063cc <HAL_GPIO_Init+0x1e4>
 80063c8:	2305      	movs	r3, #5
 80063ca:	e00a      	b.n	80063e2 <HAL_GPIO_Init+0x1fa>
 80063cc:	2306      	movs	r3, #6
 80063ce:	e008      	b.n	80063e2 <HAL_GPIO_Init+0x1fa>
 80063d0:	2304      	movs	r3, #4
 80063d2:	e006      	b.n	80063e2 <HAL_GPIO_Init+0x1fa>
 80063d4:	2303      	movs	r3, #3
 80063d6:	e004      	b.n	80063e2 <HAL_GPIO_Init+0x1fa>
 80063d8:	2302      	movs	r3, #2
 80063da:	e002      	b.n	80063e2 <HAL_GPIO_Init+0x1fa>
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <HAL_GPIO_Init+0x1fa>
 80063e0:	2300      	movs	r3, #0
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	f002 0203 	and.w	r2, r2, #3
 80063e8:	0092      	lsls	r2, r2, #2
 80063ea:	4093      	lsls	r3, r2
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063f2:	4937      	ldr	r1, [pc, #220]	@ (80064d0 <HAL_GPIO_Init+0x2e8>)
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	089b      	lsrs	r3, r3, #2
 80063f8:	3302      	adds	r3, #2
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006400:	4b39      	ldr	r3, [pc, #228]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	43db      	mvns	r3, r3
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4013      	ands	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006424:	4a30      	ldr	r2, [pc, #192]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800642a:	4b2f      	ldr	r3, [pc, #188]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	43db      	mvns	r3, r3
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4013      	ands	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800644e:	4a26      	ldr	r2, [pc, #152]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006454:	4b24      	ldr	r3, [pc, #144]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	43db      	mvns	r3, r3
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4013      	ands	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006478:	4a1b      	ldr	r2, [pc, #108]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800647e:	4b1a      	ldr	r3, [pc, #104]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	43db      	mvns	r3, r3
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4013      	ands	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80064a2:	4a11      	ldr	r2, [pc, #68]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	3301      	adds	r3, #1
 80064ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f47f ae9d 	bne.w	80061f8 <HAL_GPIO_Init+0x10>
  }
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	40021000 	.word	0x40021000
 80064d0:	40010000 	.word	0x40010000
 80064d4:	48000400 	.word	0x48000400
 80064d8:	48000800 	.word	0x48000800
 80064dc:	48000c00 	.word	0x48000c00
 80064e0:	48001000 	.word	0x48001000
 80064e4:	48001400 	.word	0x48001400
 80064e8:	40010400 	.word	0x40010400

080064ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	887b      	ldrh	r3, [r7, #2]
 80064fe:	4013      	ands	r3, r2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006504:	2301      	movs	r3, #1
 8006506:	73fb      	strb	r3, [r7, #15]
 8006508:	e001      	b.n	800650e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	807b      	strh	r3, [r7, #2]
 8006528:	4613      	mov	r3, r2
 800652a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800652c:	787b      	ldrb	r3, [r7, #1]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006532:	887a      	ldrh	r2, [r7, #2]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006538:	e002      	b.n	8006540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800653a:	887a      	ldrh	r2, [r7, #2]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006556:	4b08      	ldr	r3, [pc, #32]	@ (8006578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	4013      	ands	r3, r2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d006      	beq.n	8006570 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006562:	4a05      	ldr	r2, [pc, #20]	@ (8006578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006568:	88fb      	ldrh	r3, [r7, #6]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 f806 	bl	800657c <HAL_GPIO_EXTI_Callback>
  }
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40010400 	.word	0x40010400

0800657c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	4603      	mov	r3, r0
 8006584:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d141      	bne.n	8006626 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80065a2:	4b4b      	ldr	r3, [pc, #300]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80065aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ae:	d131      	bne.n	8006614 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065b0:	4b47      	ldr	r3, [pc, #284]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065b6:	4a46      	ldr	r2, [pc, #280]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065c0:	4b43      	ldr	r3, [pc, #268]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065c8:	4a41      	ldr	r2, [pc, #260]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065d0:	4b40      	ldr	r3, [pc, #256]	@ (80066d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2232      	movs	r2, #50	@ 0x32
 80065d6:	fb02 f303 	mul.w	r3, r2, r3
 80065da:	4a3f      	ldr	r2, [pc, #252]	@ (80066d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065dc:	fba2 2303 	umull	r2, r3, r2, r3
 80065e0:	0c9b      	lsrs	r3, r3, #18
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065e6:	e002      	b.n	80065ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065ee:	4b38      	ldr	r3, [pc, #224]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065fa:	d102      	bne.n	8006602 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f2      	bne.n	80065e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006602:	4b33      	ldr	r3, [pc, #204]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800660a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800660e:	d158      	bne.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e057      	b.n	80066c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006614:	4b2e      	ldr	r3, [pc, #184]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800661a:	4a2d      	ldr	r2, [pc, #180]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800661c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006620:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006624:	e04d      	b.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800662c:	d141      	bne.n	80066b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800662e:	4b28      	ldr	r3, [pc, #160]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800663a:	d131      	bne.n	80066a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800663c:	4b24      	ldr	r3, [pc, #144]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800663e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006642:	4a23      	ldr	r2, [pc, #140]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006648:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800664c:	4b20      	ldr	r3, [pc, #128]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006654:	4a1e      	ldr	r2, [pc, #120]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800665a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800665c:	4b1d      	ldr	r3, [pc, #116]	@ (80066d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2232      	movs	r2, #50	@ 0x32
 8006662:	fb02 f303 	mul.w	r3, r2, r3
 8006666:	4a1c      	ldr	r2, [pc, #112]	@ (80066d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006668:	fba2 2303 	umull	r2, r3, r2, r3
 800666c:	0c9b      	lsrs	r3, r3, #18
 800666e:	3301      	adds	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006672:	e002      	b.n	800667a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3b01      	subs	r3, #1
 8006678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800667a:	4b15      	ldr	r3, [pc, #84]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006686:	d102      	bne.n	800668e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1f2      	bne.n	8006674 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800668e:	4b10      	ldr	r3, [pc, #64]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800669a:	d112      	bne.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e011      	b.n	80066c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066a0:	4b0b      	ldr	r3, [pc, #44]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a6:	4a0a      	ldr	r2, [pc, #40]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80066b0:	e007      	b.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066b2:	4b07      	ldr	r3, [pc, #28]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80066ba:	4a05      	ldr	r2, [pc, #20]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40007000 	.word	0x40007000
 80066d4:	2000021c 	.word	0x2000021c
 80066d8:	431bde83 	.word	0x431bde83

080066dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80066e0:	4b05      	ldr	r3, [pc, #20]	@ (80066f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	4a04      	ldr	r2, [pc, #16]	@ (80066f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80066e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066ea:	6093      	str	r3, [r2, #8]
}
 80066ec:	bf00      	nop
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40007000 	.word	0x40007000

080066fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e2fe      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d075      	beq.n	8006806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800671a:	4b97      	ldr	r3, [pc, #604]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 030c 	and.w	r3, r3, #12
 8006722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006724:	4b94      	ldr	r3, [pc, #592]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b0c      	cmp	r3, #12
 8006732:	d102      	bne.n	800673a <HAL_RCC_OscConfig+0x3e>
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b03      	cmp	r3, #3
 8006738:	d002      	beq.n	8006740 <HAL_RCC_OscConfig+0x44>
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b08      	cmp	r3, #8
 800673e:	d10b      	bne.n	8006758 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006740:	4b8d      	ldr	r3, [pc, #564]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d05b      	beq.n	8006804 <HAL_RCC_OscConfig+0x108>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d157      	bne.n	8006804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e2d9      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006760:	d106      	bne.n	8006770 <HAL_RCC_OscConfig+0x74>
 8006762:	4b85      	ldr	r3, [pc, #532]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a84      	ldr	r2, [pc, #528]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	e01d      	b.n	80067ac <HAL_RCC_OscConfig+0xb0>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006778:	d10c      	bne.n	8006794 <HAL_RCC_OscConfig+0x98>
 800677a:	4b7f      	ldr	r3, [pc, #508]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a7e      	ldr	r2, [pc, #504]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	4b7c      	ldr	r3, [pc, #496]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a7b      	ldr	r2, [pc, #492]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800678c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e00b      	b.n	80067ac <HAL_RCC_OscConfig+0xb0>
 8006794:	4b78      	ldr	r3, [pc, #480]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a77      	ldr	r2, [pc, #476]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800679a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	4b75      	ldr	r3, [pc, #468]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a74      	ldr	r2, [pc, #464]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80067a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d013      	beq.n	80067dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b4:	f7ff f8ca 	bl	800594c <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067bc:	f7ff f8c6 	bl	800594c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b64      	cmp	r3, #100	@ 0x64
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e29e      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0f0      	beq.n	80067bc <HAL_RCC_OscConfig+0xc0>
 80067da:	e014      	b.n	8006806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067dc:	f7ff f8b6 	bl	800594c <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067e4:	f7ff f8b2 	bl	800594c <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b64      	cmp	r3, #100	@ 0x64
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e28a      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067f6:	4b60      	ldr	r3, [pc, #384]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f0      	bne.n	80067e4 <HAL_RCC_OscConfig+0xe8>
 8006802:	e000      	b.n	8006806 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d075      	beq.n	80068fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006812:	4b59      	ldr	r3, [pc, #356]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 030c 	and.w	r3, r3, #12
 800681a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800681c:	4b56      	ldr	r3, [pc, #344]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b0c      	cmp	r3, #12
 800682a:	d102      	bne.n	8006832 <HAL_RCC_OscConfig+0x136>
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d002      	beq.n	8006838 <HAL_RCC_OscConfig+0x13c>
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	2b04      	cmp	r3, #4
 8006836:	d11f      	bne.n	8006878 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006838:	4b4f      	ldr	r3, [pc, #316]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_OscConfig+0x154>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e25d      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006850:	4b49      	ldr	r3, [pc, #292]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	4946      	ldr	r1, [pc, #280]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006860:	4313      	orrs	r3, r2
 8006862:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006864:	4b45      	ldr	r3, [pc, #276]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff f823 	bl	80058b4 <HAL_InitTick>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d043      	beq.n	80068fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e249      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d023      	beq.n	80068c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006880:	4b3d      	ldr	r3, [pc, #244]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a3c      	ldr	r2, [pc, #240]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800688a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688c:	f7ff f85e 	bl	800594c <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006894:	f7ff f85a 	bl	800594c <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e232      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068a6:	4b34      	ldr	r3, [pc, #208]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0f0      	beq.n	8006894 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068b2:	4b31      	ldr	r3, [pc, #196]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	061b      	lsls	r3, r3, #24
 80068c0:	492d      	ldr	r1, [pc, #180]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	604b      	str	r3, [r1, #4]
 80068c6:	e01a      	b.n	80068fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80068ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d4:	f7ff f83a 	bl	800594c <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068dc:	f7ff f836 	bl	800594c <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e20e      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068ee:	4b22      	ldr	r3, [pc, #136]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0x1e0>
 80068fa:	e000      	b.n	80068fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d041      	beq.n	800698e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01c      	beq.n	800694c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006912:	4b19      	ldr	r3, [pc, #100]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006918:	4a17      	ldr	r2, [pc, #92]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800691a:	f043 0301 	orr.w	r3, r3, #1
 800691e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006922:	f7ff f813 	bl	800594c <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006928:	e008      	b.n	800693c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800692a:	f7ff f80f 	bl	800594c <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e1e7      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800693c:	4b0e      	ldr	r3, [pc, #56]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800693e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0ef      	beq.n	800692a <HAL_RCC_OscConfig+0x22e>
 800694a:	e020      	b.n	800698e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800694c:	4b0a      	ldr	r3, [pc, #40]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800694e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006952:	4a09      	ldr	r2, [pc, #36]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006954:	f023 0301 	bic.w	r3, r3, #1
 8006958:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695c:	f7fe fff6 	bl	800594c <HAL_GetTick>
 8006960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006962:	e00d      	b.n	8006980 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006964:	f7fe fff2 	bl	800594c <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d906      	bls.n	8006980 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e1ca      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
 8006976:	bf00      	nop
 8006978:	40021000 	.word	0x40021000
 800697c:	20000220 	.word	0x20000220
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006980:	4b8c      	ldr	r3, [pc, #560]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1ea      	bne.n	8006964 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 80a6 	beq.w	8006ae8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800699c:	2300      	movs	r3, #0
 800699e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069a0:	4b84      	ldr	r3, [pc, #528]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 80069a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_RCC_OscConfig+0x2b4>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <HAL_RCC_OscConfig+0x2b6>
 80069b0:	2300      	movs	r3, #0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00d      	beq.n	80069d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069b6:	4b7f      	ldr	r3, [pc, #508]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 80069b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ba:	4a7e      	ldr	r2, [pc, #504]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 80069bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80069c2:	4b7c      	ldr	r3, [pc, #496]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 80069c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80069ce:	2301      	movs	r3, #1
 80069d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069d2:	4b79      	ldr	r3, [pc, #484]	@ (8006bb8 <HAL_RCC_OscConfig+0x4bc>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d118      	bne.n	8006a10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069de:	4b76      	ldr	r3, [pc, #472]	@ (8006bb8 <HAL_RCC_OscConfig+0x4bc>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a75      	ldr	r2, [pc, #468]	@ (8006bb8 <HAL_RCC_OscConfig+0x4bc>)
 80069e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ea:	f7fe ffaf 	bl	800594c <HAL_GetTick>
 80069ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069f0:	e008      	b.n	8006a04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069f2:	f7fe ffab 	bl	800594c <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d901      	bls.n	8006a04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e183      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a04:	4b6c      	ldr	r3, [pc, #432]	@ (8006bb8 <HAL_RCC_OscConfig+0x4bc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d0f0      	beq.n	80069f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d108      	bne.n	8006a2a <HAL_RCC_OscConfig+0x32e>
 8006a18:	4b66      	ldr	r3, [pc, #408]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a1e:	4a65      	ldr	r2, [pc, #404]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a20:	f043 0301 	orr.w	r3, r3, #1
 8006a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a28:	e024      	b.n	8006a74 <HAL_RCC_OscConfig+0x378>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2b05      	cmp	r3, #5
 8006a30:	d110      	bne.n	8006a54 <HAL_RCC_OscConfig+0x358>
 8006a32:	4b60      	ldr	r3, [pc, #384]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a38:	4a5e      	ldr	r2, [pc, #376]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a3a:	f043 0304 	orr.w	r3, r3, #4
 8006a3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a42:	4b5c      	ldr	r3, [pc, #368]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a48:	4a5a      	ldr	r2, [pc, #360]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a52:	e00f      	b.n	8006a74 <HAL_RCC_OscConfig+0x378>
 8006a54:	4b57      	ldr	r3, [pc, #348]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5a:	4a56      	ldr	r2, [pc, #344]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a5c:	f023 0301 	bic.w	r3, r3, #1
 8006a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a64:	4b53      	ldr	r3, [pc, #332]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a6a:	4a52      	ldr	r2, [pc, #328]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a6c:	f023 0304 	bic.w	r3, r3, #4
 8006a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d016      	beq.n	8006aaa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7c:	f7fe ff66 	bl	800594c <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a82:	e00a      	b.n	8006a9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a84:	f7fe ff62 	bl	800594c <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e138      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a9a:	4b46      	ldr	r3, [pc, #280]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0ed      	beq.n	8006a84 <HAL_RCC_OscConfig+0x388>
 8006aa8:	e015      	b.n	8006ad6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aaa:	f7fe ff4f 	bl	800594c <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ab0:	e00a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ab2:	f7fe ff4b 	bl	800594c <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e121      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1ed      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ad6:	7ffb      	ldrb	r3, [r7, #31]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d105      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006adc:	4b35      	ldr	r3, [pc, #212]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae0:	4a34      	ldr	r2, [pc, #208]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d03c      	beq.n	8006b6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01c      	beq.n	8006b36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006afc:	4b2d      	ldr	r3, [pc, #180]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b02:	4a2c      	ldr	r2, [pc, #176]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0c:	f7fe ff1e 	bl	800594c <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b14:	f7fe ff1a 	bl	800594c <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e0f2      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b26:	4b23      	ldr	r3, [pc, #140]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0ef      	beq.n	8006b14 <HAL_RCC_OscConfig+0x418>
 8006b34:	e01b      	b.n	8006b6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b36:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
 8006b42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b46:	f7fe ff01 	bl	800594c <HAL_GetTick>
 8006b4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b4c:	e008      	b.n	8006b60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b4e:	f7fe fefd 	bl	800594c <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d901      	bls.n	8006b60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e0d5      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b60:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1ef      	bne.n	8006b4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 80c9 	beq.w	8006d0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b78:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 030c 	and.w	r3, r3, #12
 8006b80:	2b0c      	cmp	r3, #12
 8006b82:	f000 8083 	beq.w	8006c8c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d15e      	bne.n	8006c4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8e:	4b09      	ldr	r3, [pc, #36]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a08      	ldr	r2, [pc, #32]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9a:	f7fe fed7 	bl	800594c <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ba0:	e00c      	b.n	8006bbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba2:	f7fe fed3 	bl	800594c <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d905      	bls.n	8006bbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e0ab      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bbc:	4b55      	ldr	r3, [pc, #340]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1ec      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bc8:	4b52      	ldr	r3, [pc, #328]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	4b52      	ldr	r3, [pc, #328]	@ (8006d18 <HAL_RCC_OscConfig+0x61c>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6a11      	ldr	r1, [r2, #32]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006bd8:	3a01      	subs	r2, #1
 8006bda:	0112      	lsls	r2, r2, #4
 8006bdc:	4311      	orrs	r1, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006be2:	0212      	lsls	r2, r2, #8
 8006be4:	4311      	orrs	r1, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006bea:	0852      	lsrs	r2, r2, #1
 8006bec:	3a01      	subs	r2, #1
 8006bee:	0552      	lsls	r2, r2, #21
 8006bf0:	4311      	orrs	r1, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006bf6:	0852      	lsrs	r2, r2, #1
 8006bf8:	3a01      	subs	r2, #1
 8006bfa:	0652      	lsls	r2, r2, #25
 8006bfc:	4311      	orrs	r1, r2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c02:	06d2      	lsls	r2, r2, #27
 8006c04:	430a      	orrs	r2, r1
 8006c06:	4943      	ldr	r1, [pc, #268]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c0c:	4b41      	ldr	r3, [pc, #260]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a40      	ldr	r2, [pc, #256]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c18:	4b3e      	ldr	r3, [pc, #248]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	4a3d      	ldr	r2, [pc, #244]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c24:	f7fe fe92 	bl	800594c <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2c:	f7fe fe8e 	bl	800594c <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e066      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c3e:	4b35      	ldr	r3, [pc, #212]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCC_OscConfig+0x530>
 8006c4a:	e05e      	b.n	8006d0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c4c:	4b31      	ldr	r3, [pc, #196]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a30      	ldr	r2, [pc, #192]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c58:	f7fe fe78 	bl	800594c <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c60:	f7fe fe74 	bl	800594c <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e04c      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c72:	4b28      	ldr	r3, [pc, #160]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f0      	bne.n	8006c60 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006c7e:	4b25      	ldr	r3, [pc, #148]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	4924      	ldr	r1, [pc, #144]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c84:	4b25      	ldr	r3, [pc, #148]	@ (8006d1c <HAL_RCC_OscConfig+0x620>)
 8006c86:	4013      	ands	r3, r2
 8006c88:	60cb      	str	r3, [r1, #12]
 8006c8a:	e03e      	b.n	8006d0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e039      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006c98:	4b1e      	ldr	r3, [pc, #120]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f003 0203 	and.w	r2, r3, #3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d12c      	bne.n	8006d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d123      	bne.n	8006d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d11b      	bne.n	8006d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d113      	bne.n	8006d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce8:	085b      	lsrs	r3, r3, #1
 8006cea:	3b01      	subs	r3, #1
 8006cec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d109      	bne.n	8006d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cfc:	085b      	lsrs	r3, r3, #1
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d001      	beq.n	8006d0a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3720      	adds	r7, #32
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	40021000 	.word	0x40021000
 8006d18:	019f800c 	.word	0x019f800c
 8006d1c:	feeefffc 	.word	0xfeeefffc

08006d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e11e      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d38:	4b91      	ldr	r3, [pc, #580]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d910      	bls.n	8006d68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d46:	4b8e      	ldr	r3, [pc, #568]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f023 020f 	bic.w	r2, r3, #15
 8006d4e:	498c      	ldr	r1, [pc, #560]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d56:	4b8a      	ldr	r3, [pc, #552]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d001      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e106      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d073      	beq.n	8006e5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d129      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d7c:	4b81      	ldr	r3, [pc, #516]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0f4      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006d8c:	f000 f99e 	bl	80070cc <RCC_GetSysClockFreqFromPLLSource>
 8006d90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	4a7c      	ldr	r2, [pc, #496]	@ (8006f88 <HAL_RCC_ClockConfig+0x268>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d93f      	bls.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d033      	beq.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d12f      	bne.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006dba:	4b72      	ldr	r3, [pc, #456]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dc2:	4a70      	ldr	r2, [pc, #448]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006dca:	2380      	movs	r3, #128	@ 0x80
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e024      	b.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0c6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006de8:	4b66      	ldr	r3, [pc, #408]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0be      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006df8:	f000 f8ce 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8006dfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	4a61      	ldr	r2, [pc, #388]	@ (8006f88 <HAL_RCC_ClockConfig+0x268>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d909      	bls.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e06:	4b5f      	ldr	r3, [pc, #380]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e0e:	4a5d      	ldr	r2, [pc, #372]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006e16:	2380      	movs	r3, #128	@ 0x80
 8006e18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f023 0203 	bic.w	r2, r3, #3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	4957      	ldr	r1, [pc, #348]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e2c:	f7fe fd8e 	bl	800594c <HAL_GetTick>
 8006e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e32:	e00a      	b.n	8006e4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e34:	f7fe fd8a 	bl	800594c <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e095      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e4a:	4b4e      	ldr	r3, [pc, #312]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 020c 	and.w	r2, r3, #12
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d1eb      	bne.n	8006e34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d023      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e74:	4b43      	ldr	r3, [pc, #268]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4a42      	ldr	r2, [pc, #264]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e94:	4a3b      	ldr	r2, [pc, #236]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e9c:	4b39      	ldr	r3, [pc, #228]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	4936      	ldr	r1, [pc, #216]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	608b      	str	r3, [r1, #8]
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2b80      	cmp	r3, #128	@ 0x80
 8006eb4:	d105      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006eb6:	4b33      	ldr	r3, [pc, #204]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	4a32      	ldr	r2, [pc, #200]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006ebc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ec0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 030f 	and.w	r3, r3, #15
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d21d      	bcs.n	8006f0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f023 020f 	bic.w	r2, r3, #15
 8006ed8:	4929      	ldr	r1, [pc, #164]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ee0:	f7fe fd34 	bl	800594c <HAL_GetTick>
 8006ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee6:	e00a      	b.n	8006efe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee8:	f7fe fd30 	bl	800594c <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e03b      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efe:	4b20      	ldr	r3, [pc, #128]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d1ed      	bne.n	8006ee8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d008      	beq.n	8006f2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f18:	4b1a      	ldr	r3, [pc, #104]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	4917      	ldr	r1, [pc, #92]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f36:	4b13      	ldr	r3, [pc, #76]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	490f      	ldr	r1, [pc, #60]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f4a:	f000 f825 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	4b0c      	ldr	r3, [pc, #48]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	091b      	lsrs	r3, r3, #4
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	490c      	ldr	r1, [pc, #48]	@ (8006f8c <HAL_RCC_ClockConfig+0x26c>)
 8006f5c:	5ccb      	ldrb	r3, [r1, r3]
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	fa22 f303 	lsr.w	r3, r2, r3
 8006f66:	4a0a      	ldr	r2, [pc, #40]	@ (8006f90 <HAL_RCC_ClockConfig+0x270>)
 8006f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f94 <HAL_RCC_ClockConfig+0x274>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fe fca0 	bl	80058b4 <HAL_InitTick>
 8006f74:	4603      	mov	r3, r0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	40022000 	.word	0x40022000
 8006f84:	40021000 	.word	0x40021000
 8006f88:	04c4b400 	.word	0x04c4b400
 8006f8c:	0800c168 	.word	0x0800c168
 8006f90:	2000021c 	.word	0x2000021c
 8006f94:	20000220 	.word	0x20000220

08006f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 030c 	and.w	r3, r3, #12
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d102      	bne.n	8006fb0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006faa:	4b2a      	ldr	r3, [pc, #168]	@ (8007054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fac:	613b      	str	r3, [r7, #16]
 8006fae:	e047      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006fb0:	4b27      	ldr	r3, [pc, #156]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f003 030c 	and.w	r3, r3, #12
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d102      	bne.n	8006fc2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fbc:	4b26      	ldr	r3, [pc, #152]	@ (8007058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	e03e      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006fc2:	4b23      	ldr	r3, [pc, #140]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f003 030c 	and.w	r3, r3, #12
 8006fca:	2b0c      	cmp	r3, #12
 8006fcc:	d136      	bne.n	800703c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006fce:	4b20      	ldr	r3, [pc, #128]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d10c      	bne.n	8007006 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fec:	4a1a      	ldr	r2, [pc, #104]	@ (8007058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff4:	4a16      	ldr	r2, [pc, #88]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ff6:	68d2      	ldr	r2, [r2, #12]
 8006ff8:	0a12      	lsrs	r2, r2, #8
 8006ffa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ffe:	fb02 f303 	mul.w	r3, r2, r3
 8007002:	617b      	str	r3, [r7, #20]
      break;
 8007004:	e00c      	b.n	8007020 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007006:	4a13      	ldr	r2, [pc, #76]	@ (8007054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	fbb2 f3f3 	udiv	r3, r2, r3
 800700e:	4a10      	ldr	r2, [pc, #64]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007010:	68d2      	ldr	r2, [r2, #12]
 8007012:	0a12      	lsrs	r2, r2, #8
 8007014:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007018:	fb02 f303 	mul.w	r3, r2, r3
 800701c:	617b      	str	r3, [r7, #20]
      break;
 800701e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007020:	4b0b      	ldr	r3, [pc, #44]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	0e5b      	lsrs	r3, r3, #25
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	3301      	adds	r3, #1
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	fbb2 f3f3 	udiv	r3, r2, r3
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	e001      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007040:	693b      	ldr	r3, [r7, #16]
}
 8007042:	4618      	mov	r0, r3
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40021000 	.word	0x40021000
 8007054:	00f42400 	.word	0x00f42400
 8007058:	016e3600 	.word	0x016e3600

0800705c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007060:	4b03      	ldr	r3, [pc, #12]	@ (8007070 <HAL_RCC_GetHCLKFreq+0x14>)
 8007062:	681b      	ldr	r3, [r3, #0]
}
 8007064:	4618      	mov	r0, r3
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	2000021c 	.word	0x2000021c

08007074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007078:	f7ff fff0 	bl	800705c <HAL_RCC_GetHCLKFreq>
 800707c:	4602      	mov	r2, r0
 800707e:	4b06      	ldr	r3, [pc, #24]	@ (8007098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	0a1b      	lsrs	r3, r3, #8
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	4904      	ldr	r1, [pc, #16]	@ (800709c <HAL_RCC_GetPCLK1Freq+0x28>)
 800708a:	5ccb      	ldrb	r3, [r1, r3]
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007094:	4618      	mov	r0, r3
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40021000 	.word	0x40021000
 800709c:	0800c178 	.word	0x0800c178

080070a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80070a4:	f7ff ffda 	bl	800705c <HAL_RCC_GetHCLKFreq>
 80070a8:	4602      	mov	r2, r0
 80070aa:	4b06      	ldr	r3, [pc, #24]	@ (80070c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	0adb      	lsrs	r3, r3, #11
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	4904      	ldr	r1, [pc, #16]	@ (80070c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070b6:	5ccb      	ldrb	r3, [r1, r3]
 80070b8:	f003 031f 	and.w	r3, r3, #31
 80070bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40021000 	.word	0x40021000
 80070c8:	0800c178 	.word	0x0800c178

080070cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070d2:	4b1e      	ldr	r3, [pc, #120]	@ (800714c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070dc:	4b1b      	ldr	r3, [pc, #108]	@ (800714c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	091b      	lsrs	r3, r3, #4
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	3301      	adds	r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d10c      	bne.n	800710a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070f0:	4a17      	ldr	r2, [pc, #92]	@ (8007150 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f8:	4a14      	ldr	r2, [pc, #80]	@ (800714c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070fa:	68d2      	ldr	r2, [r2, #12]
 80070fc:	0a12      	lsrs	r2, r2, #8
 80070fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007102:	fb02 f303 	mul.w	r3, r2, r3
 8007106:	617b      	str	r3, [r7, #20]
    break;
 8007108:	e00c      	b.n	8007124 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800710a:	4a12      	ldr	r2, [pc, #72]	@ (8007154 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007112:	4a0e      	ldr	r2, [pc, #56]	@ (800714c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007114:	68d2      	ldr	r2, [r2, #12]
 8007116:	0a12      	lsrs	r2, r2, #8
 8007118:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800711c:	fb02 f303 	mul.w	r3, r2, r3
 8007120:	617b      	str	r3, [r7, #20]
    break;
 8007122:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007124:	4b09      	ldr	r3, [pc, #36]	@ (800714c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	0e5b      	lsrs	r3, r3, #25
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	3301      	adds	r3, #1
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	fbb2 f3f3 	udiv	r3, r2, r3
 800713c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800713e:	687b      	ldr	r3, [r7, #4]
}
 8007140:	4618      	mov	r0, r3
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	40021000 	.word	0x40021000
 8007150:	016e3600 	.word	0x016e3600
 8007154:	00f42400 	.word	0x00f42400

08007158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007160:	2300      	movs	r3, #0
 8007162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007164:	2300      	movs	r3, #0
 8007166:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 8098 	beq.w	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007176:	2300      	movs	r3, #0
 8007178:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800717a:	4b43      	ldr	r3, [pc, #268]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800717c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10d      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007186:	4b40      	ldr	r3, [pc, #256]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800718a:	4a3f      	ldr	r2, [pc, #252]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800718c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007190:	6593      	str	r3, [r2, #88]	@ 0x58
 8007192:	4b3d      	ldr	r3, [pc, #244]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800719a:	60bb      	str	r3, [r7, #8]
 800719c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800719e:	2301      	movs	r3, #1
 80071a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071a2:	4b3a      	ldr	r3, [pc, #232]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a39      	ldr	r2, [pc, #228]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071ae:	f7fe fbcd 	bl	800594c <HAL_GetTick>
 80071b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071b4:	e009      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b6:	f7fe fbc9 	bl	800594c <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d902      	bls.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	74fb      	strb	r3, [r7, #19]
        break;
 80071c8:	e005      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071ca:	4b30      	ldr	r3, [pc, #192]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0ef      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80071d6:	7cfb      	ldrb	r3, [r7, #19]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d159      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d01e      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d019      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80071f8:	4b23      	ldr	r3, [pc, #140]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007202:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007204:	4b20      	ldr	r3, [pc, #128]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800720a:	4a1f      	ldr	r2, [pc, #124]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800720c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007214:	4b1c      	ldr	r3, [pc, #112]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800721a:	4a1b      	ldr	r2, [pc, #108]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800721c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007224:	4a18      	ldr	r2, [pc, #96]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d016      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007236:	f7fe fb89 	bl	800594c <HAL_GetTick>
 800723a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800723c:	e00b      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800723e:	f7fe fb85 	bl	800594c <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800724c:	4293      	cmp	r3, r2
 800724e:	d902      	bls.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	74fb      	strb	r3, [r7, #19]
            break;
 8007254:	e006      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007256:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0ec      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007264:	7cfb      	ldrb	r3, [r7, #19]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10b      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800726a:	4b07      	ldr	r3, [pc, #28]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800726c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007270:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007278:	4903      	ldr	r1, [pc, #12]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800727a:	4313      	orrs	r3, r2
 800727c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007280:	e008      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007282:	7cfb      	ldrb	r3, [r7, #19]
 8007284:	74bb      	strb	r3, [r7, #18]
 8007286:	e005      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007288:	40021000 	.word	0x40021000
 800728c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007290:	7cfb      	ldrb	r3, [r7, #19]
 8007292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007294:	7c7b      	ldrb	r3, [r7, #17]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d105      	bne.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800729a:	4ba7      	ldr	r3, [pc, #668]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800729e:	4aa6      	ldr	r2, [pc, #664]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072b2:	4ba1      	ldr	r3, [pc, #644]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b8:	f023 0203 	bic.w	r2, r3, #3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	499d      	ldr	r1, [pc, #628]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072d4:	4b98      	ldr	r3, [pc, #608]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072da:	f023 020c 	bic.w	r2, r3, #12
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	4995      	ldr	r1, [pc, #596]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072f6:	4b90      	ldr	r3, [pc, #576]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	498c      	ldr	r1, [pc, #560]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007318:	4b87      	ldr	r3, [pc, #540]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800731a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	4984      	ldr	r1, [pc, #528]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007328:	4313      	orrs	r3, r2
 800732a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0310 	and.w	r3, r3, #16
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800733a:	4b7f      	ldr	r3, [pc, #508]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800733c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007340:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	497b      	ldr	r1, [pc, #492]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800734a:	4313      	orrs	r3, r2
 800734c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0320 	and.w	r3, r3, #32
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00a      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800735c:	4b76      	ldr	r3, [pc, #472]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800735e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007362:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	4973      	ldr	r1, [pc, #460]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800736c:	4313      	orrs	r3, r2
 800736e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800737e:	4b6e      	ldr	r3, [pc, #440]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007384:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	496a      	ldr	r1, [pc, #424]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800738e:	4313      	orrs	r3, r2
 8007390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073a0:	4b65      	ldr	r3, [pc, #404]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	4962      	ldr	r1, [pc, #392]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073c2:	4b5d      	ldr	r3, [pc, #372]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d0:	4959      	ldr	r1, [pc, #356]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073e4:	4b54      	ldr	r3, [pc, #336]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073ea:	f023 0203 	bic.w	r2, r3, #3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f2:	4951      	ldr	r1, [pc, #324]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007406:	4b4c      	ldr	r3, [pc, #304]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800740c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007414:	4948      	ldr	r1, [pc, #288]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007416:	4313      	orrs	r3, r2
 8007418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007424:	2b00      	cmp	r3, #0
 8007426:	d015      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007428:	4b43      	ldr	r3, [pc, #268]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007436:	4940      	ldr	r1, [pc, #256]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007438:	4313      	orrs	r3, r2
 800743a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007446:	d105      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007448:	4b3b      	ldr	r3, [pc, #236]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	4a3a      	ldr	r2, [pc, #232]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800744e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007452:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800745c:	2b00      	cmp	r3, #0
 800745e:	d015      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007460:	4b35      	ldr	r3, [pc, #212]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007466:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800746e:	4932      	ldr	r1, [pc, #200]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007470:	4313      	orrs	r3, r2
 8007472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800747a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800747e:	d105      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007480:	4b2d      	ldr	r3, [pc, #180]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	4a2c      	ldr	r2, [pc, #176]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800748a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d015      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007498:	4b27      	ldr	r3, [pc, #156]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a6:	4924      	ldr	r1, [pc, #144]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074b6:	d105      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074b8:	4b1f      	ldr	r3, [pc, #124]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d015      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074d0:	4b19      	ldr	r3, [pc, #100]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074de:	4916      	ldr	r1, [pc, #88]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074ee:	d105      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074f0:	4b11      	ldr	r3, [pc, #68]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	4a10      	ldr	r2, [pc, #64]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d019      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007508:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800750a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800750e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007516:	4908      	ldr	r1, [pc, #32]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007518:	4313      	orrs	r3, r2
 800751a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007526:	d109      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007528:	4b03      	ldr	r3, [pc, #12]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	4a02      	ldr	r2, [pc, #8]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007532:	60d3      	str	r3, [r2, #12]
 8007534:	e002      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007536:	bf00      	nop
 8007538:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d015      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007548:	4b29      	ldr	r3, [pc, #164]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800754a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007556:	4926      	ldr	r1, [pc, #152]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007562:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007566:	d105      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007568:	4b21      	ldr	r3, [pc, #132]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4a20      	ldr	r2, [pc, #128]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800756e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007572:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d015      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007580:	4b1b      	ldr	r3, [pc, #108]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007586:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800758e:	4918      	ldr	r1, [pc, #96]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007590:	4313      	orrs	r3, r2
 8007592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800759a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800759e:	d105      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80075a0:	4b13      	ldr	r3, [pc, #76]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	4a12      	ldr	r2, [pc, #72]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d015      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075b8:	4b0d      	ldr	r3, [pc, #52]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075c6:	490a      	ldr	r1, [pc, #40]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075d6:	d105      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075d8:	4b05      	ldr	r3, [pc, #20]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	4a04      	ldr	r2, [pc, #16]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80075e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	40021000 	.word	0x40021000

080075f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e054      	b.n	80076b0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d111      	bne.n	8007636 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f002 fb50 	bl	8009cc0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d102      	bne.n	800762e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a23      	ldr	r2, [pc, #140]	@ (80076b8 <HAL_TIM_Base_Init+0xc4>)
 800762c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2202      	movs	r2, #2
 800763a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3304      	adds	r3, #4
 8007646:	4619      	mov	r1, r3
 8007648:	4610      	mov	r0, r2
 800764a:	f001 fc8f 	bl	8008f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	080052a9 	.word	0x080052a9

080076bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d001      	beq.n	80076d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e04c      	b.n	800776e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a26      	ldr	r2, [pc, #152]	@ (800777c <HAL_TIM_Base_Start+0xc0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d022      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ee:	d01d      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a22      	ldr	r2, [pc, #136]	@ (8007780 <HAL_TIM_Base_Start+0xc4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d018      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a21      	ldr	r2, [pc, #132]	@ (8007784 <HAL_TIM_Base_Start+0xc8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d013      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1f      	ldr	r2, [pc, #124]	@ (8007788 <HAL_TIM_Base_Start+0xcc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00e      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a1e      	ldr	r2, [pc, #120]	@ (800778c <HAL_TIM_Base_Start+0xd0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d009      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1c      	ldr	r2, [pc, #112]	@ (8007790 <HAL_TIM_Base_Start+0xd4>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d004      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a1b      	ldr	r2, [pc, #108]	@ (8007794 <HAL_TIM_Base_Start+0xd8>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d115      	bne.n	8007758 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	4b19      	ldr	r3, [pc, #100]	@ (8007798 <HAL_TIM_Base_Start+0xdc>)
 8007734:	4013      	ands	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b06      	cmp	r3, #6
 800773c:	d015      	beq.n	800776a <HAL_TIM_Base_Start+0xae>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007744:	d011      	beq.n	800776a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0201 	orr.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007756:	e008      	b.n	800776a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0201 	orr.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	e000      	b.n	800776c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40012c00 	.word	0x40012c00
 8007780:	40000400 	.word	0x40000400
 8007784:	40000800 	.word	0x40000800
 8007788:	40000c00 	.word	0x40000c00
 800778c:	40013400 	.word	0x40013400
 8007790:	40014000 	.word	0x40014000
 8007794:	40015000 	.word	0x40015000
 8007798:	00010007 	.word	0x00010007

0800779c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d001      	beq.n	80077b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e054      	b.n	800785e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a26      	ldr	r2, [pc, #152]	@ (800786c <HAL_TIM_Base_Start_IT+0xd0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d022      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077de:	d01d      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a22      	ldr	r2, [pc, #136]	@ (8007870 <HAL_TIM_Base_Start_IT+0xd4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d018      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a21      	ldr	r2, [pc, #132]	@ (8007874 <HAL_TIM_Base_Start_IT+0xd8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d013      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007878 <HAL_TIM_Base_Start_IT+0xdc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d00e      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a1e      	ldr	r2, [pc, #120]	@ (800787c <HAL_TIM_Base_Start_IT+0xe0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d009      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a1c      	ldr	r2, [pc, #112]	@ (8007880 <HAL_TIM_Base_Start_IT+0xe4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d004      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1b      	ldr	r2, [pc, #108]	@ (8007884 <HAL_TIM_Base_Start_IT+0xe8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d115      	bne.n	8007848 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	4b19      	ldr	r3, [pc, #100]	@ (8007888 <HAL_TIM_Base_Start_IT+0xec>)
 8007824:	4013      	ands	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b06      	cmp	r3, #6
 800782c:	d015      	beq.n	800785a <HAL_TIM_Base_Start_IT+0xbe>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007834:	d011      	beq.n	800785a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f042 0201 	orr.w	r2, r2, #1
 8007844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007846:	e008      	b.n	800785a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0201 	orr.w	r2, r2, #1
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	e000      	b.n	800785c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800785a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	40012c00 	.word	0x40012c00
 8007870:	40000400 	.word	0x40000400
 8007874:	40000800 	.word	0x40000800
 8007878:	40000c00 	.word	0x40000c00
 800787c:	40013400 	.word	0x40013400
 8007880:	40014000 	.word	0x40014000
 8007884:	40015000 	.word	0x40015000
 8007888:	00010007 	.word	0x00010007

0800788c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e054      	b.n	8007948 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d111      	bne.n	80078ce <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f002 fa04 	bl	8009cc0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a23      	ldr	r2, [pc, #140]	@ (8007950 <HAL_TIM_PWM_Init+0xc4>)
 80078c4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2202      	movs	r2, #2
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3304      	adds	r3, #4
 80078de:	4619      	mov	r1, r3
 80078e0:	4610      	mov	r0, r2
 80078e2:	f001 fb43 	bl	8008f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	08007955 	.word	0x08007955

08007954 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d109      	bne.n	800798c <HAL_TIM_PWM_Start+0x24>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b01      	cmp	r3, #1
 8007982:	bf14      	ite	ne
 8007984:	2301      	movne	r3, #1
 8007986:	2300      	moveq	r3, #0
 8007988:	b2db      	uxtb	r3, r3
 800798a:	e03c      	b.n	8007a06 <HAL_TIM_PWM_Start+0x9e>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b04      	cmp	r3, #4
 8007990:	d109      	bne.n	80079a6 <HAL_TIM_PWM_Start+0x3e>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b01      	cmp	r3, #1
 800799c:	bf14      	ite	ne
 800799e:	2301      	movne	r3, #1
 80079a0:	2300      	moveq	r3, #0
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	e02f      	b.n	8007a06 <HAL_TIM_PWM_Start+0x9e>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d109      	bne.n	80079c0 <HAL_TIM_PWM_Start+0x58>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	bf14      	ite	ne
 80079b8:	2301      	movne	r3, #1
 80079ba:	2300      	moveq	r3, #0
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	e022      	b.n	8007a06 <HAL_TIM_PWM_Start+0x9e>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2b0c      	cmp	r3, #12
 80079c4:	d109      	bne.n	80079da <HAL_TIM_PWM_Start+0x72>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	bf14      	ite	ne
 80079d2:	2301      	movne	r3, #1
 80079d4:	2300      	moveq	r3, #0
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	e015      	b.n	8007a06 <HAL_TIM_PWM_Start+0x9e>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b10      	cmp	r3, #16
 80079de:	d109      	bne.n	80079f4 <HAL_TIM_PWM_Start+0x8c>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	bf14      	ite	ne
 80079ec:	2301      	movne	r3, #1
 80079ee:	2300      	moveq	r3, #0
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	e008      	b.n	8007a06 <HAL_TIM_PWM_Start+0x9e>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	bf14      	ite	ne
 8007a00:	2301      	movne	r3, #1
 8007a02:	2300      	moveq	r3, #0
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e0a6      	b.n	8007b5c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <HAL_TIM_PWM_Start+0xb6>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a1c:	e023      	b.n	8007a66 <HAL_TIM_PWM_Start+0xfe>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d104      	bne.n	8007a2e <HAL_TIM_PWM_Start+0xc6>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a2c:	e01b      	b.n	8007a66 <HAL_TIM_PWM_Start+0xfe>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d104      	bne.n	8007a3e <HAL_TIM_PWM_Start+0xd6>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a3c:	e013      	b.n	8007a66 <HAL_TIM_PWM_Start+0xfe>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b0c      	cmp	r3, #12
 8007a42:	d104      	bne.n	8007a4e <HAL_TIM_PWM_Start+0xe6>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a4c:	e00b      	b.n	8007a66 <HAL_TIM_PWM_Start+0xfe>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d104      	bne.n	8007a5e <HAL_TIM_PWM_Start+0xf6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a5c:	e003      	b.n	8007a66 <HAL_TIM_PWM_Start+0xfe>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f002 f900 	bl	8009c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a3a      	ldr	r2, [pc, #232]	@ (8007b64 <HAL_TIM_PWM_Start+0x1fc>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d018      	beq.n	8007ab0 <HAL_TIM_PWM_Start+0x148>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a39      	ldr	r2, [pc, #228]	@ (8007b68 <HAL_TIM_PWM_Start+0x200>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d013      	beq.n	8007ab0 <HAL_TIM_PWM_Start+0x148>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a37      	ldr	r2, [pc, #220]	@ (8007b6c <HAL_TIM_PWM_Start+0x204>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00e      	beq.n	8007ab0 <HAL_TIM_PWM_Start+0x148>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a36      	ldr	r2, [pc, #216]	@ (8007b70 <HAL_TIM_PWM_Start+0x208>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d009      	beq.n	8007ab0 <HAL_TIM_PWM_Start+0x148>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a34      	ldr	r2, [pc, #208]	@ (8007b74 <HAL_TIM_PWM_Start+0x20c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d004      	beq.n	8007ab0 <HAL_TIM_PWM_Start+0x148>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a33      	ldr	r2, [pc, #204]	@ (8007b78 <HAL_TIM_PWM_Start+0x210>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d101      	bne.n	8007ab4 <HAL_TIM_PWM_Start+0x14c>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <HAL_TIM_PWM_Start+0x14e>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d007      	beq.n	8007aca <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ac8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a25      	ldr	r2, [pc, #148]	@ (8007b64 <HAL_TIM_PWM_Start+0x1fc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d022      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x1b2>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007adc:	d01d      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x1b2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a26      	ldr	r2, [pc, #152]	@ (8007b7c <HAL_TIM_PWM_Start+0x214>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d018      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x1b2>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a24      	ldr	r2, [pc, #144]	@ (8007b80 <HAL_TIM_PWM_Start+0x218>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d013      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x1b2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a23      	ldr	r2, [pc, #140]	@ (8007b84 <HAL_TIM_PWM_Start+0x21c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00e      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x1b2>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a19      	ldr	r2, [pc, #100]	@ (8007b68 <HAL_TIM_PWM_Start+0x200>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d009      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x1b2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a18      	ldr	r2, [pc, #96]	@ (8007b6c <HAL_TIM_PWM_Start+0x204>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d004      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x1b2>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a18      	ldr	r2, [pc, #96]	@ (8007b78 <HAL_TIM_PWM_Start+0x210>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d115      	bne.n	8007b46 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	4b19      	ldr	r3, [pc, #100]	@ (8007b88 <HAL_TIM_PWM_Start+0x220>)
 8007b22:	4013      	ands	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b06      	cmp	r3, #6
 8007b2a:	d015      	beq.n	8007b58 <HAL_TIM_PWM_Start+0x1f0>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b32:	d011      	beq.n	8007b58 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0201 	orr.w	r2, r2, #1
 8007b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b44:	e008      	b.n	8007b58 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f042 0201 	orr.w	r2, r2, #1
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	e000      	b.n	8007b5a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	40012c00 	.word	0x40012c00
 8007b68:	40013400 	.word	0x40013400
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40014400 	.word	0x40014400
 8007b74:	40014800 	.word	0x40014800
 8007b78:	40015000 	.word	0x40015000
 8007b7c:	40000400 	.word	0x40000400
 8007b80:	40000800 	.word	0x40000800
 8007b84:	40000c00 	.word	0x40000c00
 8007b88:	00010007 	.word	0x00010007

08007b8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e054      	b.n	8007c48 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d111      	bne.n	8007bce <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f002 f884 	bl	8009cc0 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d102      	bne.n	8007bc6 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a23      	ldr	r2, [pc, #140]	@ (8007c50 <HAL_TIM_IC_Init+0xc4>)
 8007bc4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	3304      	adds	r3, #4
 8007bde:	4619      	mov	r1, r3
 8007be0:	4610      	mov	r0, r2
 8007be2:	f001 f9c3 	bl	8008f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	08007c55 	.word	0x08007c55

08007c54 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <HAL_TIM_IC_Start+0x1a>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	e023      	b.n	8007cca <HAL_TIM_IC_Start+0x62>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d104      	bne.n	8007c92 <HAL_TIM_IC_Start+0x2a>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	e01b      	b.n	8007cca <HAL_TIM_IC_Start+0x62>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d104      	bne.n	8007ca2 <HAL_TIM_IC_Start+0x3a>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	e013      	b.n	8007cca <HAL_TIM_IC_Start+0x62>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b0c      	cmp	r3, #12
 8007ca6:	d104      	bne.n	8007cb2 <HAL_TIM_IC_Start+0x4a>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	e00b      	b.n	8007cca <HAL_TIM_IC_Start+0x62>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b10      	cmp	r3, #16
 8007cb6:	d104      	bne.n	8007cc2 <HAL_TIM_IC_Start+0x5a>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	e003      	b.n	8007cca <HAL_TIM_IC_Start+0x62>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d104      	bne.n	8007cdc <HAL_TIM_IC_Start+0x74>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	e013      	b.n	8007d04 <HAL_TIM_IC_Start+0x9c>
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d104      	bne.n	8007cec <HAL_TIM_IC_Start+0x84>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	e00b      	b.n	8007d04 <HAL_TIM_IC_Start+0x9c>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b08      	cmp	r3, #8
 8007cf0:	d104      	bne.n	8007cfc <HAL_TIM_IC_Start+0x94>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	e003      	b.n	8007d04 <HAL_TIM_IC_Start+0x9c>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d102      	bne.n	8007d12 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d001      	beq.n	8007d16 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e097      	b.n	8007e46 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_IC_Start+0xbe>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d24:	e023      	b.n	8007d6e <HAL_TIM_IC_Start+0x106>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d104      	bne.n	8007d36 <HAL_TIM_IC_Start+0xce>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d34:	e01b      	b.n	8007d6e <HAL_TIM_IC_Start+0x106>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b08      	cmp	r3, #8
 8007d3a:	d104      	bne.n	8007d46 <HAL_TIM_IC_Start+0xde>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d44:	e013      	b.n	8007d6e <HAL_TIM_IC_Start+0x106>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b0c      	cmp	r3, #12
 8007d4a:	d104      	bne.n	8007d56 <HAL_TIM_IC_Start+0xee>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d54:	e00b      	b.n	8007d6e <HAL_TIM_IC_Start+0x106>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b10      	cmp	r3, #16
 8007d5a:	d104      	bne.n	8007d66 <HAL_TIM_IC_Start+0xfe>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d64:	e003      	b.n	8007d6e <HAL_TIM_IC_Start+0x106>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d104      	bne.n	8007d7e <HAL_TIM_IC_Start+0x116>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d7c:	e013      	b.n	8007da6 <HAL_TIM_IC_Start+0x13e>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b04      	cmp	r3, #4
 8007d82:	d104      	bne.n	8007d8e <HAL_TIM_IC_Start+0x126>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d8c:	e00b      	b.n	8007da6 <HAL_TIM_IC_Start+0x13e>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d104      	bne.n	8007d9e <HAL_TIM_IC_Start+0x136>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d9c:	e003      	b.n	8007da6 <HAL_TIM_IC_Start+0x13e>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2202      	movs	r2, #2
 8007da2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2201      	movs	r2, #1
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f001 ff60 	bl	8009c74 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a25      	ldr	r2, [pc, #148]	@ (8007e50 <HAL_TIM_IC_Start+0x1e8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d022      	beq.n	8007e04 <HAL_TIM_IC_Start+0x19c>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dc6:	d01d      	beq.n	8007e04 <HAL_TIM_IC_Start+0x19c>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a21      	ldr	r2, [pc, #132]	@ (8007e54 <HAL_TIM_IC_Start+0x1ec>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d018      	beq.n	8007e04 <HAL_TIM_IC_Start+0x19c>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a20      	ldr	r2, [pc, #128]	@ (8007e58 <HAL_TIM_IC_Start+0x1f0>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d013      	beq.n	8007e04 <HAL_TIM_IC_Start+0x19c>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a1e      	ldr	r2, [pc, #120]	@ (8007e5c <HAL_TIM_IC_Start+0x1f4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d00e      	beq.n	8007e04 <HAL_TIM_IC_Start+0x19c>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a1d      	ldr	r2, [pc, #116]	@ (8007e60 <HAL_TIM_IC_Start+0x1f8>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d009      	beq.n	8007e04 <HAL_TIM_IC_Start+0x19c>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a1b      	ldr	r2, [pc, #108]	@ (8007e64 <HAL_TIM_IC_Start+0x1fc>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d004      	beq.n	8007e04 <HAL_TIM_IC_Start+0x19c>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8007e68 <HAL_TIM_IC_Start+0x200>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d115      	bne.n	8007e30 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	4b18      	ldr	r3, [pc, #96]	@ (8007e6c <HAL_TIM_IC_Start+0x204>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2b06      	cmp	r3, #6
 8007e14:	d015      	beq.n	8007e42 <HAL_TIM_IC_Start+0x1da>
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e1c:	d011      	beq.n	8007e42 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0201 	orr.w	r2, r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e2e:	e008      	b.n	8007e42 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f042 0201 	orr.w	r2, r2, #1
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	e000      	b.n	8007e44 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	40012c00 	.word	0x40012c00
 8007e54:	40000400 	.word	0x40000400
 8007e58:	40000800 	.word	0x40000800
 8007e5c:	40000c00 	.word	0x40000c00
 8007e60:	40013400 	.word	0x40013400
 8007e64:	40014000 	.word	0x40014000
 8007e68:	40015000 	.word	0x40015000
 8007e6c:	00010007 	.word	0x00010007

08007e70 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e04c      	b.n	8007f1e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d111      	bne.n	8007eb4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 ff11 	bl	8009cc0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d102      	bne.n	8007eac <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8007f28 <HAL_TIM_OnePulse_Init+0xb8>)
 8007eaa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	f001 f850 	bl	8008f6c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 0208 	bic.w	r2, r2, #8
 8007eda:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6819      	ldr	r1, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	08007f2d 	.word	0x08007f2d

08007f2c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f68:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d108      	bne.n	8007f82 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d105      	bne.n	8007f82 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f76:	7b7b      	ldrb	r3, [r7, #13]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d102      	bne.n	8007f82 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f7c:	7b3b      	ldrb	r3, [r7, #12]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d001      	beq.n	8007f86 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e059      	b.n	800803a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2202      	movs	r2, #2
 8007f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2202      	movs	r2, #2
 8007f92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f042 0202 	orr.w	r2, r2, #2
 8007fb4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f042 0204 	orr.w	r2, r2, #4
 8007fc4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f001 fe50 	bl	8009c74 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	2104      	movs	r1, #4
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f001 fe49 	bl	8009c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a17      	ldr	r2, [pc, #92]	@ (8008044 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d018      	beq.n	800801e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a15      	ldr	r2, [pc, #84]	@ (8008048 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d013      	beq.n	800801e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a14      	ldr	r2, [pc, #80]	@ (800804c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00e      	beq.n	800801e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a12      	ldr	r2, [pc, #72]	@ (8008050 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d009      	beq.n	800801e <HAL_TIM_OnePulse_Start_IT+0xde>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a11      	ldr	r2, [pc, #68]	@ (8008054 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d004      	beq.n	800801e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a0f      	ldr	r2, [pc, #60]	@ (8008058 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d101      	bne.n	8008022 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008022:	2300      	movs	r3, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d007      	beq.n	8008038 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008036:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	40012c00 	.word	0x40012c00
 8008048:	40013400 	.word	0x40013400
 800804c:	40014000 	.word	0x40014000
 8008050:	40014400 	.word	0x40014400
 8008054:	40014800 	.word	0x40014800
 8008058:	40015000 	.word	0x40015000

0800805c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e0a2      	b.n	80081b6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d111      	bne.n	80080a0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 fe1b 	bl	8009cc0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800808e:	2b00      	cmp	r3, #0
 8008090:	d102      	bne.n	8008098 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a4a      	ldr	r2, [pc, #296]	@ (80081c0 <HAL_TIM_Encoder_Init+0x164>)
 8008096:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80080b6:	f023 0307 	bic.w	r3, r3, #7
 80080ba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4619      	mov	r1, r3
 80080c6:	4610      	mov	r0, r2
 80080c8:	f000 ff50 	bl	8008f6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	4313      	orrs	r3, r2
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	4313      	orrs	r3, r2
 800810a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008112:	f023 030c 	bic.w	r3, r3, #12
 8008116:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800811e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	021b      	lsls	r3, r3, #8
 800812e:	4313      	orrs	r3, r2
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	4313      	orrs	r3, r2
 8008134:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	011a      	lsls	r2, r3, #4
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	6a1b      	ldr	r3, [r3, #32]
 8008140:	031b      	lsls	r3, r3, #12
 8008142:	4313      	orrs	r3, r2
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008150:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008158:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	011b      	lsls	r3, r3, #4
 8008164:	4313      	orrs	r3, r2
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4313      	orrs	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	08005211 	.word	0x08005211

080081c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d110      	bne.n	8008216 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d102      	bne.n	8008200 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80081fa:	7b7b      	ldrb	r3, [r7, #13]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d001      	beq.n	8008204 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e069      	b.n	80082d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008214:	e031      	b.n	800827a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b04      	cmp	r3, #4
 800821a:	d110      	bne.n	800823e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d102      	bne.n	8008228 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008222:	7b3b      	ldrb	r3, [r7, #12]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d001      	beq.n	800822c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e055      	b.n	80082d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800823c:	e01d      	b.n	800827a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d108      	bne.n	8008256 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d105      	bne.n	8008256 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800824a:	7b7b      	ldrb	r3, [r7, #13]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d102      	bne.n	8008256 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008250:	7b3b      	ldrb	r3, [r7, #12]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d001      	beq.n	800825a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e03e      	b.n	80082d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2202      	movs	r2, #2
 800825e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2202      	movs	r2, #2
 800826e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2202      	movs	r2, #2
 8008276:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d003      	beq.n	8008288 <HAL_TIM_Encoder_Start+0xc4>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b04      	cmp	r3, #4
 8008284:	d008      	beq.n	8008298 <HAL_TIM_Encoder_Start+0xd4>
 8008286:	e00f      	b.n	80082a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2201      	movs	r2, #1
 800828e:	2100      	movs	r1, #0
 8008290:	4618      	mov	r0, r3
 8008292:	f001 fcef 	bl	8009c74 <TIM_CCxChannelCmd>
      break;
 8008296:	e016      	b.n	80082c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2201      	movs	r2, #1
 800829e:	2104      	movs	r1, #4
 80082a0:	4618      	mov	r0, r3
 80082a2:	f001 fce7 	bl	8009c74 <TIM_CCxChannelCmd>
      break;
 80082a6:	e00e      	b.n	80082c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2201      	movs	r2, #1
 80082ae:	2100      	movs	r1, #0
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 fcdf 	bl	8009c74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2201      	movs	r2, #1
 80082bc:	2104      	movs	r1, #4
 80082be:	4618      	mov	r0, r3
 80082c0:	f001 fcd8 	bl	8009c74 <TIM_CCxChannelCmd>
      break;
 80082c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0201 	orr.w	r2, r2, #1
 80082d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d026      	beq.n	8008350 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d021      	beq.n	8008350 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f06f 0202 	mvn.w	r2, #2
 8008314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d005      	beq.n	8008336 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	4798      	blx	r3
 8008334:	e009      	b.n	800834a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f003 0304 	and.w	r3, r3, #4
 8008356:	2b00      	cmp	r3, #0
 8008358:	d026      	beq.n	80083a8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	2b00      	cmp	r3, #0
 8008362:	d021      	beq.n	80083a8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f06f 0204 	mvn.w	r2, #4
 800836c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800837e:	2b00      	cmp	r3, #0
 8008380:	d005      	beq.n	800838e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	4798      	blx	r3
 800838c:	e009      	b.n	80083a2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f003 0308 	and.w	r3, r3, #8
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d026      	beq.n	8008400 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f003 0308 	and.w	r3, r3, #8
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d021      	beq.n	8008400 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f06f 0208 	mvn.w	r2, #8
 80083c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2204      	movs	r2, #4
 80083ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	f003 0303 	and.w	r3, r3, #3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d005      	beq.n	80083e6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	4798      	blx	r3
 80083e4:	e009      	b.n	80083fa <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f003 0310 	and.w	r3, r3, #16
 8008406:	2b00      	cmp	r3, #0
 8008408:	d026      	beq.n	8008458 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f003 0310 	and.w	r3, r3, #16
 8008410:	2b00      	cmp	r3, #0
 8008412:	d021      	beq.n	8008458 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f06f 0210 	mvn.w	r2, #16
 800841c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2208      	movs	r2, #8
 8008422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800842e:	2b00      	cmp	r3, #0
 8008430:	d005      	beq.n	800843e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	4798      	blx	r3
 800843c:	e009      	b.n	8008452 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00e      	beq.n	8008480 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b00      	cmp	r3, #0
 800846a:	d009      	beq.n	8008480 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f06f 0201 	mvn.w	r2, #1
 8008474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00e      	beq.n	80084b2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800849a:	2b00      	cmp	r3, #0
 800849c:	d009      	beq.n	80084b2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80084a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00e      	beq.n	80084da <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d009      	beq.n	80084da <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80084ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00e      	beq.n	8008502 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d009      	beq.n	8008502 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80084f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00e      	beq.n	800852a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f06f 0220 	mvn.w	r2, #32
 800851e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00e      	beq.n	8008552 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00e      	beq.n	800857a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d009      	beq.n	800857a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800856e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00e      	beq.n	80085a2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d009      	beq.n	80085a2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00e      	beq.n	80085ca <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d009      	beq.n	80085ca <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80085be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085ca:	bf00      	nop
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b086      	sub	sp, #24
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d101      	bne.n	80085f0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80085ec:	2302      	movs	r3, #2
 80085ee:	e088      	b.n	8008702 <HAL_TIM_IC_ConfigChannel+0x130>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d11b      	bne.n	8008636 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800860e:	f001 f96b 	bl	80098e8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	699a      	ldr	r2, [r3, #24]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 020c 	bic.w	r2, r2, #12
 8008620:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6999      	ldr	r1, [r3, #24]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	619a      	str	r2, [r3, #24]
 8008634:	e060      	b.n	80086f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b04      	cmp	r3, #4
 800863a:	d11c      	bne.n	8008676 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800864c:	f001 f9ef 	bl	8009a2e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	699a      	ldr	r2, [r3, #24]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800865e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6999      	ldr	r1, [r3, #24]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	021a      	lsls	r2, r3, #8
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	619a      	str	r2, [r3, #24]
 8008674:	e040      	b.n	80086f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b08      	cmp	r3, #8
 800867a:	d11b      	bne.n	80086b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800868c:	f001 fa3c 	bl	8009b08 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	69da      	ldr	r2, [r3, #28]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 020c 	bic.w	r2, r2, #12
 800869e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	69d9      	ldr	r1, [r3, #28]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	61da      	str	r2, [r3, #28]
 80086b2:	e021      	b.n	80086f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b0c      	cmp	r3, #12
 80086b8:	d11c      	bne.n	80086f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80086ca:	f001 fa59 	bl	8009b80 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69da      	ldr	r2, [r3, #28]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80086dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69d9      	ldr	r1, [r3, #28]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	021a      	lsls	r2, r3, #8
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	61da      	str	r2, [r3, #28]
 80086f2:	e001      	b.n	80086f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008700:	7dfb      	ldrb	r3, [r7, #23]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008722:	2b01      	cmp	r3, #1
 8008724:	d101      	bne.n	800872a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008726:	2302      	movs	r3, #2
 8008728:	e0ff      	b.n	800892a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b14      	cmp	r3, #20
 8008736:	f200 80f0 	bhi.w	800891a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800873a:	a201      	add	r2, pc, #4	@ (adr r2, 8008740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	08008795 	.word	0x08008795
 8008744:	0800891b 	.word	0x0800891b
 8008748:	0800891b 	.word	0x0800891b
 800874c:	0800891b 	.word	0x0800891b
 8008750:	080087d5 	.word	0x080087d5
 8008754:	0800891b 	.word	0x0800891b
 8008758:	0800891b 	.word	0x0800891b
 800875c:	0800891b 	.word	0x0800891b
 8008760:	08008817 	.word	0x08008817
 8008764:	0800891b 	.word	0x0800891b
 8008768:	0800891b 	.word	0x0800891b
 800876c:	0800891b 	.word	0x0800891b
 8008770:	08008857 	.word	0x08008857
 8008774:	0800891b 	.word	0x0800891b
 8008778:	0800891b 	.word	0x0800891b
 800877c:	0800891b 	.word	0x0800891b
 8008780:	08008899 	.word	0x08008899
 8008784:	0800891b 	.word	0x0800891b
 8008788:	0800891b 	.word	0x0800891b
 800878c:	0800891b 	.word	0x0800891b
 8008790:	080088d9 	.word	0x080088d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	4618      	mov	r0, r3
 800879c:	f000 fc9a 	bl	80090d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	699a      	ldr	r2, [r3, #24]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f042 0208 	orr.w	r2, r2, #8
 80087ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	699a      	ldr	r2, [r3, #24]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0204 	bic.w	r2, r2, #4
 80087be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6999      	ldr	r1, [r3, #24]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	691a      	ldr	r2, [r3, #16]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	619a      	str	r2, [r3, #24]
      break;
 80087d2:	e0a5      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68b9      	ldr	r1, [r7, #8]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fd14 	bl	8009208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	699a      	ldr	r2, [r3, #24]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6999      	ldr	r1, [r3, #24]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	021a      	lsls	r2, r3, #8
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	430a      	orrs	r2, r1
 8008812:	619a      	str	r2, [r3, #24]
      break;
 8008814:	e084      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fd87 	bl	8009330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69da      	ldr	r2, [r3, #28]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f042 0208 	orr.w	r2, r2, #8
 8008830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	69da      	ldr	r2, [r3, #28]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 0204 	bic.w	r2, r2, #4
 8008840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69d9      	ldr	r1, [r3, #28]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	61da      	str	r2, [r3, #28]
      break;
 8008854:	e064      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fdf9 	bl	8009454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69da      	ldr	r2, [r3, #28]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69da      	ldr	r2, [r3, #28]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69d9      	ldr	r1, [r3, #28]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	021a      	lsls	r2, r3, #8
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	61da      	str	r2, [r3, #28]
      break;
 8008896:	e043      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fe6c 	bl	800957c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0208 	orr.w	r2, r2, #8
 80088b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0204 	bic.w	r2, r2, #4
 80088c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	691a      	ldr	r2, [r3, #16]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80088d6:	e023      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68b9      	ldr	r1, [r7, #8]
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 feb6 	bl	8009650 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008902:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	021a      	lsls	r2, r3, #8
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008918:	e002      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	75fb      	strb	r3, [r7, #23]
      break;
 800891e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008928:	7dfb      	ldrb	r3, [r7, #23]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop

08008934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008948:	2b01      	cmp	r3, #1
 800894a:	d101      	bne.n	8008950 <HAL_TIM_ConfigClockSource+0x1c>
 800894c:	2302      	movs	r3, #2
 800894e:	e0f6      	b.n	8008b3e <HAL_TIM_ConfigClockSource+0x20a>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800896e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800897a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a6f      	ldr	r2, [pc, #444]	@ (8008b48 <HAL_TIM_ConfigClockSource+0x214>)
 800898a:	4293      	cmp	r3, r2
 800898c:	f000 80c1 	beq.w	8008b12 <HAL_TIM_ConfigClockSource+0x1de>
 8008990:	4a6d      	ldr	r2, [pc, #436]	@ (8008b48 <HAL_TIM_ConfigClockSource+0x214>)
 8008992:	4293      	cmp	r3, r2
 8008994:	f200 80c6 	bhi.w	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8008998:	4a6c      	ldr	r2, [pc, #432]	@ (8008b4c <HAL_TIM_ConfigClockSource+0x218>)
 800899a:	4293      	cmp	r3, r2
 800899c:	f000 80b9 	beq.w	8008b12 <HAL_TIM_ConfigClockSource+0x1de>
 80089a0:	4a6a      	ldr	r2, [pc, #424]	@ (8008b4c <HAL_TIM_ConfigClockSource+0x218>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	f200 80be 	bhi.w	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 80089a8:	4a69      	ldr	r2, [pc, #420]	@ (8008b50 <HAL_TIM_ConfigClockSource+0x21c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	f000 80b1 	beq.w	8008b12 <HAL_TIM_ConfigClockSource+0x1de>
 80089b0:	4a67      	ldr	r2, [pc, #412]	@ (8008b50 <HAL_TIM_ConfigClockSource+0x21c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	f200 80b6 	bhi.w	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 80089b8:	4a66      	ldr	r2, [pc, #408]	@ (8008b54 <HAL_TIM_ConfigClockSource+0x220>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	f000 80a9 	beq.w	8008b12 <HAL_TIM_ConfigClockSource+0x1de>
 80089c0:	4a64      	ldr	r2, [pc, #400]	@ (8008b54 <HAL_TIM_ConfigClockSource+0x220>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	f200 80ae 	bhi.w	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 80089c8:	4a63      	ldr	r2, [pc, #396]	@ (8008b58 <HAL_TIM_ConfigClockSource+0x224>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	f000 80a1 	beq.w	8008b12 <HAL_TIM_ConfigClockSource+0x1de>
 80089d0:	4a61      	ldr	r2, [pc, #388]	@ (8008b58 <HAL_TIM_ConfigClockSource+0x224>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	f200 80a6 	bhi.w	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 80089d8:	4a60      	ldr	r2, [pc, #384]	@ (8008b5c <HAL_TIM_ConfigClockSource+0x228>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	f000 8099 	beq.w	8008b12 <HAL_TIM_ConfigClockSource+0x1de>
 80089e0:	4a5e      	ldr	r2, [pc, #376]	@ (8008b5c <HAL_TIM_ConfigClockSource+0x228>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	f200 809e 	bhi.w	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 80089e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089ec:	f000 8091 	beq.w	8008b12 <HAL_TIM_ConfigClockSource+0x1de>
 80089f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089f4:	f200 8096 	bhi.w	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 80089f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089fc:	f000 8089 	beq.w	8008b12 <HAL_TIM_ConfigClockSource+0x1de>
 8008a00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a04:	f200 808e 	bhi.w	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a0c:	d03e      	beq.n	8008a8c <HAL_TIM_ConfigClockSource+0x158>
 8008a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a12:	f200 8087 	bhi.w	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a1a:	f000 8086 	beq.w	8008b2a <HAL_TIM_ConfigClockSource+0x1f6>
 8008a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a22:	d87f      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a24:	2b70      	cmp	r3, #112	@ 0x70
 8008a26:	d01a      	beq.n	8008a5e <HAL_TIM_ConfigClockSource+0x12a>
 8008a28:	2b70      	cmp	r3, #112	@ 0x70
 8008a2a:	d87b      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a2c:	2b60      	cmp	r3, #96	@ 0x60
 8008a2e:	d050      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x19e>
 8008a30:	2b60      	cmp	r3, #96	@ 0x60
 8008a32:	d877      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a34:	2b50      	cmp	r3, #80	@ 0x50
 8008a36:	d03c      	beq.n	8008ab2 <HAL_TIM_ConfigClockSource+0x17e>
 8008a38:	2b50      	cmp	r3, #80	@ 0x50
 8008a3a:	d873      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a3c:	2b40      	cmp	r3, #64	@ 0x40
 8008a3e:	d058      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x1be>
 8008a40:	2b40      	cmp	r3, #64	@ 0x40
 8008a42:	d86f      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a44:	2b30      	cmp	r3, #48	@ 0x30
 8008a46:	d064      	beq.n	8008b12 <HAL_TIM_ConfigClockSource+0x1de>
 8008a48:	2b30      	cmp	r3, #48	@ 0x30
 8008a4a:	d86b      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a4c:	2b20      	cmp	r3, #32
 8008a4e:	d060      	beq.n	8008b12 <HAL_TIM_ConfigClockSource+0x1de>
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	d867      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d05c      	beq.n	8008b12 <HAL_TIM_ConfigClockSource+0x1de>
 8008a58:	2b10      	cmp	r3, #16
 8008a5a:	d05a      	beq.n	8008b12 <HAL_TIM_ConfigClockSource+0x1de>
 8008a5c:	e062      	b.n	8008b24 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a6e:	f001 f8e1 	bl	8009c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	609a      	str	r2, [r3, #8]
      break;
 8008a8a:	e04f      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a9c:	f001 f8ca 	bl	8009c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689a      	ldr	r2, [r3, #8]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008aae:	609a      	str	r2, [r3, #8]
      break;
 8008ab0:	e03c      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f000 ff86 	bl	80099d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2150      	movs	r1, #80	@ 0x50
 8008aca:	4618      	mov	r0, r3
 8008acc:	f001 f895 	bl	8009bfa <TIM_ITRx_SetConfig>
      break;
 8008ad0:	e02c      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f000 ffe2 	bl	8009aa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2160      	movs	r1, #96	@ 0x60
 8008aea:	4618      	mov	r0, r3
 8008aec:	f001 f885 	bl	8009bfa <TIM_ITRx_SetConfig>
      break;
 8008af0:	e01c      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008afe:	461a      	mov	r2, r3
 8008b00:	f000 ff66 	bl	80099d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2140      	movs	r1, #64	@ 0x40
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f001 f875 	bl	8009bfa <TIM_ITRx_SetConfig>
      break;
 8008b10:	e00c      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	f001 f86c 	bl	8009bfa <TIM_ITRx_SetConfig>
      break;
 8008b22:	e003      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	73fb      	strb	r3, [r7, #15]
      break;
 8008b28:	e000      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	00100070 	.word	0x00100070
 8008b4c:	00100060 	.word	0x00100060
 8008b50:	00100050 	.word	0x00100050
 8008b54:	00100040 	.word	0x00100040
 8008b58:	00100030 	.word	0x00100030
 8008b5c:	00100020 	.word	0x00100020

08008b60 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d101      	bne.n	8008b78 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008b74:	2302      	movs	r3, #2
 8008b76:	e031      	b.n	8008bdc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fdcc 	bl	8009728 <TIM_SlaveTimer_SetConfig>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d009      	beq.n	8008baa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e018      	b.n	8008bdc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68da      	ldr	r2, [r3, #12]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bb8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008bc8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e14a      	b.n	8008f5e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	f040 80dd 	bne.w	8008e90 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008cd6:	7afb      	ldrb	r3, [r7, #11]
 8008cd8:	2b1f      	cmp	r3, #31
 8008cda:	f200 80d6 	bhi.w	8008e8a <HAL_TIM_RegisterCallback+0x1de>
 8008cde:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce4 <HAL_TIM_RegisterCallback+0x38>)
 8008ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce4:	08008d65 	.word	0x08008d65
 8008ce8:	08008d6d 	.word	0x08008d6d
 8008cec:	08008d75 	.word	0x08008d75
 8008cf0:	08008d7d 	.word	0x08008d7d
 8008cf4:	08008d85 	.word	0x08008d85
 8008cf8:	08008d8d 	.word	0x08008d8d
 8008cfc:	08008d95 	.word	0x08008d95
 8008d00:	08008d9d 	.word	0x08008d9d
 8008d04:	08008da5 	.word	0x08008da5
 8008d08:	08008dad 	.word	0x08008dad
 8008d0c:	08008db5 	.word	0x08008db5
 8008d10:	08008dbd 	.word	0x08008dbd
 8008d14:	08008dc5 	.word	0x08008dc5
 8008d18:	08008dcd 	.word	0x08008dcd
 8008d1c:	08008dd7 	.word	0x08008dd7
 8008d20:	08008de1 	.word	0x08008de1
 8008d24:	08008deb 	.word	0x08008deb
 8008d28:	08008df5 	.word	0x08008df5
 8008d2c:	08008dff 	.word	0x08008dff
 8008d30:	08008e09 	.word	0x08008e09
 8008d34:	08008e13 	.word	0x08008e13
 8008d38:	08008e1d 	.word	0x08008e1d
 8008d3c:	08008e27 	.word	0x08008e27
 8008d40:	08008e31 	.word	0x08008e31
 8008d44:	08008e3b 	.word	0x08008e3b
 8008d48:	08008e45 	.word	0x08008e45
 8008d4c:	08008e4f 	.word	0x08008e4f
 8008d50:	08008e59 	.word	0x08008e59
 8008d54:	08008e63 	.word	0x08008e63
 8008d58:	08008e6d 	.word	0x08008e6d
 8008d5c:	08008e77 	.word	0x08008e77
 8008d60:	08008e81 	.word	0x08008e81
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008d6a:	e0f7      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008d72:	e0f3      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008d7a:	e0ef      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008d82:	e0eb      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008d8a:	e0e7      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008d92:	e0e3      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008d9a:	e0df      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008da2:	e0db      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008daa:	e0d7      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008db2:	e0d3      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008dba:	e0cf      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008dc2:	e0cb      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008dca:	e0c7      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008dd4:	e0c2      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008dde:	e0bd      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008de8:	e0b8      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008df2:	e0b3      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008dfc:	e0ae      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008e06:	e0a9      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008e10:	e0a4      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008e1a:	e09f      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008e24:	e09a      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008e2e:	e095      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008e38:	e090      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008e42:	e08b      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008e4c:	e086      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008e56:	e081      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008e60:	e07c      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008e6a:	e077      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008e74:	e072      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008e7e:	e06d      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008e88:	e068      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	75fb      	strb	r3, [r7, #23]
        break;
 8008e8e:	e065      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d15d      	bne.n	8008f58 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008e9c:	7afb      	ldrb	r3, [r7, #11]
 8008e9e:	2b0d      	cmp	r3, #13
 8008ea0:	d857      	bhi.n	8008f52 <HAL_TIM_RegisterCallback+0x2a6>
 8008ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea8 <HAL_TIM_RegisterCallback+0x1fc>)
 8008ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea8:	08008ee1 	.word	0x08008ee1
 8008eac:	08008ee9 	.word	0x08008ee9
 8008eb0:	08008ef1 	.word	0x08008ef1
 8008eb4:	08008ef9 	.word	0x08008ef9
 8008eb8:	08008f01 	.word	0x08008f01
 8008ebc:	08008f09 	.word	0x08008f09
 8008ec0:	08008f11 	.word	0x08008f11
 8008ec4:	08008f19 	.word	0x08008f19
 8008ec8:	08008f21 	.word	0x08008f21
 8008ecc:	08008f29 	.word	0x08008f29
 8008ed0:	08008f31 	.word	0x08008f31
 8008ed4:	08008f39 	.word	0x08008f39
 8008ed8:	08008f41 	.word	0x08008f41
 8008edc:	08008f49 	.word	0x08008f49
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008ee6:	e039      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008eee:	e035      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008ef6:	e031      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008efe:	e02d      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008f06:	e029      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008f0e:	e025      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008f16:	e021      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008f1e:	e01d      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008f26:	e019      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008f2e:	e015      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008f36:	e011      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008f3e:	e00d      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008f46:	e009      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008f50:	e004      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	75fb      	strb	r3, [r7, #23]
        break;
 8008f56:	e001      	b.n	8008f5c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	371c      	adds	r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop

08008f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a4c      	ldr	r2, [pc, #304]	@ (80090b0 <TIM_Base_SetConfig+0x144>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d017      	beq.n	8008fb4 <TIM_Base_SetConfig+0x48>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f8a:	d013      	beq.n	8008fb4 <TIM_Base_SetConfig+0x48>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a49      	ldr	r2, [pc, #292]	@ (80090b4 <TIM_Base_SetConfig+0x148>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d00f      	beq.n	8008fb4 <TIM_Base_SetConfig+0x48>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a48      	ldr	r2, [pc, #288]	@ (80090b8 <TIM_Base_SetConfig+0x14c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d00b      	beq.n	8008fb4 <TIM_Base_SetConfig+0x48>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a47      	ldr	r2, [pc, #284]	@ (80090bc <TIM_Base_SetConfig+0x150>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d007      	beq.n	8008fb4 <TIM_Base_SetConfig+0x48>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a46      	ldr	r2, [pc, #280]	@ (80090c0 <TIM_Base_SetConfig+0x154>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d003      	beq.n	8008fb4 <TIM_Base_SetConfig+0x48>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a45      	ldr	r2, [pc, #276]	@ (80090c4 <TIM_Base_SetConfig+0x158>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d108      	bne.n	8008fc6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a39      	ldr	r2, [pc, #228]	@ (80090b0 <TIM_Base_SetConfig+0x144>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d023      	beq.n	8009016 <TIM_Base_SetConfig+0xaa>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fd4:	d01f      	beq.n	8009016 <TIM_Base_SetConfig+0xaa>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a36      	ldr	r2, [pc, #216]	@ (80090b4 <TIM_Base_SetConfig+0x148>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d01b      	beq.n	8009016 <TIM_Base_SetConfig+0xaa>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a35      	ldr	r2, [pc, #212]	@ (80090b8 <TIM_Base_SetConfig+0x14c>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d017      	beq.n	8009016 <TIM_Base_SetConfig+0xaa>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a34      	ldr	r2, [pc, #208]	@ (80090bc <TIM_Base_SetConfig+0x150>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d013      	beq.n	8009016 <TIM_Base_SetConfig+0xaa>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a33      	ldr	r2, [pc, #204]	@ (80090c0 <TIM_Base_SetConfig+0x154>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d00f      	beq.n	8009016 <TIM_Base_SetConfig+0xaa>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a33      	ldr	r2, [pc, #204]	@ (80090c8 <TIM_Base_SetConfig+0x15c>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d00b      	beq.n	8009016 <TIM_Base_SetConfig+0xaa>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a32      	ldr	r2, [pc, #200]	@ (80090cc <TIM_Base_SetConfig+0x160>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d007      	beq.n	8009016 <TIM_Base_SetConfig+0xaa>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a31      	ldr	r2, [pc, #196]	@ (80090d0 <TIM_Base_SetConfig+0x164>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d003      	beq.n	8009016 <TIM_Base_SetConfig+0xaa>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a2c      	ldr	r2, [pc, #176]	@ (80090c4 <TIM_Base_SetConfig+0x158>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d108      	bne.n	8009028 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800901c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	4313      	orrs	r3, r2
 8009026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a18      	ldr	r2, [pc, #96]	@ (80090b0 <TIM_Base_SetConfig+0x144>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d013      	beq.n	800907c <TIM_Base_SetConfig+0x110>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a1a      	ldr	r2, [pc, #104]	@ (80090c0 <TIM_Base_SetConfig+0x154>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d00f      	beq.n	800907c <TIM_Base_SetConfig+0x110>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a1a      	ldr	r2, [pc, #104]	@ (80090c8 <TIM_Base_SetConfig+0x15c>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d00b      	beq.n	800907c <TIM_Base_SetConfig+0x110>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a19      	ldr	r2, [pc, #100]	@ (80090cc <TIM_Base_SetConfig+0x160>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d007      	beq.n	800907c <TIM_Base_SetConfig+0x110>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a18      	ldr	r2, [pc, #96]	@ (80090d0 <TIM_Base_SetConfig+0x164>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d003      	beq.n	800907c <TIM_Base_SetConfig+0x110>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a13      	ldr	r2, [pc, #76]	@ (80090c4 <TIM_Base_SetConfig+0x158>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d103      	bne.n	8009084 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	691a      	ldr	r2, [r3, #16]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b01      	cmp	r3, #1
 8009094:	d105      	bne.n	80090a2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f023 0201 	bic.w	r2, r3, #1
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	611a      	str	r2, [r3, #16]
  }
}
 80090a2:	bf00      	nop
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	40012c00 	.word	0x40012c00
 80090b4:	40000400 	.word	0x40000400
 80090b8:	40000800 	.word	0x40000800
 80090bc:	40000c00 	.word	0x40000c00
 80090c0:	40013400 	.word	0x40013400
 80090c4:	40015000 	.word	0x40015000
 80090c8:	40014000 	.word	0x40014000
 80090cc:	40014400 	.word	0x40014400
 80090d0:	40014800 	.word	0x40014800

080090d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	f023 0201 	bic.w	r2, r3, #1
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0303 	bic.w	r3, r3, #3
 800910e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	4313      	orrs	r3, r2
 8009118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f023 0302 	bic.w	r3, r3, #2
 8009120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	4313      	orrs	r3, r2
 800912a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a30      	ldr	r2, [pc, #192]	@ (80091f0 <TIM_OC1_SetConfig+0x11c>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d013      	beq.n	800915c <TIM_OC1_SetConfig+0x88>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a2f      	ldr	r2, [pc, #188]	@ (80091f4 <TIM_OC1_SetConfig+0x120>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d00f      	beq.n	800915c <TIM_OC1_SetConfig+0x88>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a2e      	ldr	r2, [pc, #184]	@ (80091f8 <TIM_OC1_SetConfig+0x124>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d00b      	beq.n	800915c <TIM_OC1_SetConfig+0x88>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a2d      	ldr	r2, [pc, #180]	@ (80091fc <TIM_OC1_SetConfig+0x128>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d007      	beq.n	800915c <TIM_OC1_SetConfig+0x88>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a2c      	ldr	r2, [pc, #176]	@ (8009200 <TIM_OC1_SetConfig+0x12c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d003      	beq.n	800915c <TIM_OC1_SetConfig+0x88>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a2b      	ldr	r2, [pc, #172]	@ (8009204 <TIM_OC1_SetConfig+0x130>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d10c      	bne.n	8009176 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f023 0308 	bic.w	r3, r3, #8
 8009162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	4313      	orrs	r3, r2
 800916c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f023 0304 	bic.w	r3, r3, #4
 8009174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a1d      	ldr	r2, [pc, #116]	@ (80091f0 <TIM_OC1_SetConfig+0x11c>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d013      	beq.n	80091a6 <TIM_OC1_SetConfig+0xd2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a1c      	ldr	r2, [pc, #112]	@ (80091f4 <TIM_OC1_SetConfig+0x120>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d00f      	beq.n	80091a6 <TIM_OC1_SetConfig+0xd2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a1b      	ldr	r2, [pc, #108]	@ (80091f8 <TIM_OC1_SetConfig+0x124>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d00b      	beq.n	80091a6 <TIM_OC1_SetConfig+0xd2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a1a      	ldr	r2, [pc, #104]	@ (80091fc <TIM_OC1_SetConfig+0x128>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d007      	beq.n	80091a6 <TIM_OC1_SetConfig+0xd2>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a19      	ldr	r2, [pc, #100]	@ (8009200 <TIM_OC1_SetConfig+0x12c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d003      	beq.n	80091a6 <TIM_OC1_SetConfig+0xd2>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a18      	ldr	r2, [pc, #96]	@ (8009204 <TIM_OC1_SetConfig+0x130>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d111      	bne.n	80091ca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	4313      	orrs	r3, r2
 80091be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	621a      	str	r2, [r3, #32]
}
 80091e4:	bf00      	nop
 80091e6:	371c      	adds	r7, #28
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	40012c00 	.word	0x40012c00
 80091f4:	40013400 	.word	0x40013400
 80091f8:	40014000 	.word	0x40014000
 80091fc:	40014400 	.word	0x40014400
 8009200:	40014800 	.word	0x40014800
 8009204:	40015000 	.word	0x40015000

08009208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009208:	b480      	push	{r7}
 800920a:	b087      	sub	sp, #28
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	f023 0210 	bic.w	r2, r3, #16
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800923a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	021b      	lsls	r3, r3, #8
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	4313      	orrs	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f023 0320 	bic.w	r3, r3, #32
 8009256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	011b      	lsls	r3, r3, #4
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	4313      	orrs	r3, r2
 8009262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a2c      	ldr	r2, [pc, #176]	@ (8009318 <TIM_OC2_SetConfig+0x110>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d007      	beq.n	800927c <TIM_OC2_SetConfig+0x74>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a2b      	ldr	r2, [pc, #172]	@ (800931c <TIM_OC2_SetConfig+0x114>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d003      	beq.n	800927c <TIM_OC2_SetConfig+0x74>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a2a      	ldr	r2, [pc, #168]	@ (8009320 <TIM_OC2_SetConfig+0x118>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d10d      	bne.n	8009298 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	011b      	lsls	r3, r3, #4
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	4313      	orrs	r3, r2
 800928e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009296:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a1f      	ldr	r2, [pc, #124]	@ (8009318 <TIM_OC2_SetConfig+0x110>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d013      	beq.n	80092c8 <TIM_OC2_SetConfig+0xc0>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a1e      	ldr	r2, [pc, #120]	@ (800931c <TIM_OC2_SetConfig+0x114>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d00f      	beq.n	80092c8 <TIM_OC2_SetConfig+0xc0>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009324 <TIM_OC2_SetConfig+0x11c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d00b      	beq.n	80092c8 <TIM_OC2_SetConfig+0xc0>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009328 <TIM_OC2_SetConfig+0x120>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d007      	beq.n	80092c8 <TIM_OC2_SetConfig+0xc0>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a1c      	ldr	r2, [pc, #112]	@ (800932c <TIM_OC2_SetConfig+0x124>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d003      	beq.n	80092c8 <TIM_OC2_SetConfig+0xc0>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a17      	ldr	r2, [pc, #92]	@ (8009320 <TIM_OC2_SetConfig+0x118>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d113      	bne.n	80092f0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80092ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80092d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	621a      	str	r2, [r3, #32]
}
 800930a:	bf00      	nop
 800930c:	371c      	adds	r7, #28
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	40012c00 	.word	0x40012c00
 800931c:	40013400 	.word	0x40013400
 8009320:	40015000 	.word	0x40015000
 8009324:	40014000 	.word	0x40014000
 8009328:	40014400 	.word	0x40014400
 800932c:	40014800 	.word	0x40014800

08009330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800935e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 0303 	bic.w	r3, r3, #3
 800936a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	4313      	orrs	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800937c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	021b      	lsls	r3, r3, #8
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	4313      	orrs	r3, r2
 8009388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a2b      	ldr	r2, [pc, #172]	@ (800943c <TIM_OC3_SetConfig+0x10c>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d007      	beq.n	80093a2 <TIM_OC3_SetConfig+0x72>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a2a      	ldr	r2, [pc, #168]	@ (8009440 <TIM_OC3_SetConfig+0x110>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d003      	beq.n	80093a2 <TIM_OC3_SetConfig+0x72>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a29      	ldr	r2, [pc, #164]	@ (8009444 <TIM_OC3_SetConfig+0x114>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d10d      	bne.n	80093be <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	021b      	lsls	r3, r3, #8
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a1e      	ldr	r2, [pc, #120]	@ (800943c <TIM_OC3_SetConfig+0x10c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d013      	beq.n	80093ee <TIM_OC3_SetConfig+0xbe>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009440 <TIM_OC3_SetConfig+0x110>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00f      	beq.n	80093ee <TIM_OC3_SetConfig+0xbe>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009448 <TIM_OC3_SetConfig+0x118>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d00b      	beq.n	80093ee <TIM_OC3_SetConfig+0xbe>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a1c      	ldr	r2, [pc, #112]	@ (800944c <TIM_OC3_SetConfig+0x11c>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d007      	beq.n	80093ee <TIM_OC3_SetConfig+0xbe>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009450 <TIM_OC3_SetConfig+0x120>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d003      	beq.n	80093ee <TIM_OC3_SetConfig+0xbe>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a16      	ldr	r2, [pc, #88]	@ (8009444 <TIM_OC3_SetConfig+0x114>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d113      	bne.n	8009416 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80093fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	011b      	lsls	r3, r3, #4
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	4313      	orrs	r3, r2
 8009408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	011b      	lsls	r3, r3, #4
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	4313      	orrs	r3, r2
 8009414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	685a      	ldr	r2, [r3, #4]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	621a      	str	r2, [r3, #32]
}
 8009430:	bf00      	nop
 8009432:	371c      	adds	r7, #28
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	40012c00 	.word	0x40012c00
 8009440:	40013400 	.word	0x40013400
 8009444:	40015000 	.word	0x40015000
 8009448:	40014000 	.word	0x40014000
 800944c:	40014400 	.word	0x40014400
 8009450:	40014800 	.word	0x40014800

08009454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a1b      	ldr	r3, [r3, #32]
 8009468:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800948e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	021b      	lsls	r3, r3, #8
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	4313      	orrs	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	031b      	lsls	r3, r3, #12
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a2c      	ldr	r2, [pc, #176]	@ (8009564 <TIM_OC4_SetConfig+0x110>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d007      	beq.n	80094c8 <TIM_OC4_SetConfig+0x74>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a2b      	ldr	r2, [pc, #172]	@ (8009568 <TIM_OC4_SetConfig+0x114>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d003      	beq.n	80094c8 <TIM_OC4_SetConfig+0x74>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a2a      	ldr	r2, [pc, #168]	@ (800956c <TIM_OC4_SetConfig+0x118>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d10d      	bne.n	80094e4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80094ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	031b      	lsls	r3, r3, #12
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	4313      	orrs	r3, r2
 80094da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a1f      	ldr	r2, [pc, #124]	@ (8009564 <TIM_OC4_SetConfig+0x110>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d013      	beq.n	8009514 <TIM_OC4_SetConfig+0xc0>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009568 <TIM_OC4_SetConfig+0x114>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d00f      	beq.n	8009514 <TIM_OC4_SetConfig+0xc0>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009570 <TIM_OC4_SetConfig+0x11c>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d00b      	beq.n	8009514 <TIM_OC4_SetConfig+0xc0>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009574 <TIM_OC4_SetConfig+0x120>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d007      	beq.n	8009514 <TIM_OC4_SetConfig+0xc0>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a1c      	ldr	r2, [pc, #112]	@ (8009578 <TIM_OC4_SetConfig+0x124>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d003      	beq.n	8009514 <TIM_OC4_SetConfig+0xc0>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a17      	ldr	r2, [pc, #92]	@ (800956c <TIM_OC4_SetConfig+0x118>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d113      	bne.n	800953c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800951a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009522:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	019b      	lsls	r3, r3, #6
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	4313      	orrs	r3, r2
 800952e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	019b      	lsls	r3, r3, #6
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	4313      	orrs	r3, r2
 800953a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	621a      	str	r2, [r3, #32]
}
 8009556:	bf00      	nop
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	40012c00 	.word	0x40012c00
 8009568:	40013400 	.word	0x40013400
 800956c:	40015000 	.word	0x40015000
 8009570:	40014000 	.word	0x40014000
 8009574:	40014400 	.word	0x40014400
 8009578:	40014800 	.word	0x40014800

0800957c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80095c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	041b      	lsls	r3, r3, #16
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a19      	ldr	r2, [pc, #100]	@ (8009638 <TIM_OC5_SetConfig+0xbc>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d013      	beq.n	80095fe <TIM_OC5_SetConfig+0x82>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a18      	ldr	r2, [pc, #96]	@ (800963c <TIM_OC5_SetConfig+0xc0>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d00f      	beq.n	80095fe <TIM_OC5_SetConfig+0x82>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a17      	ldr	r2, [pc, #92]	@ (8009640 <TIM_OC5_SetConfig+0xc4>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d00b      	beq.n	80095fe <TIM_OC5_SetConfig+0x82>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a16      	ldr	r2, [pc, #88]	@ (8009644 <TIM_OC5_SetConfig+0xc8>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d007      	beq.n	80095fe <TIM_OC5_SetConfig+0x82>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a15      	ldr	r2, [pc, #84]	@ (8009648 <TIM_OC5_SetConfig+0xcc>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d003      	beq.n	80095fe <TIM_OC5_SetConfig+0x82>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a14      	ldr	r2, [pc, #80]	@ (800964c <TIM_OC5_SetConfig+0xd0>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d109      	bne.n	8009612 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009604:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	021b      	lsls	r3, r3, #8
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	4313      	orrs	r3, r2
 8009610:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	621a      	str	r2, [r3, #32]
}
 800962c:	bf00      	nop
 800962e:	371c      	adds	r7, #28
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	40012c00 	.word	0x40012c00
 800963c:	40013400 	.word	0x40013400
 8009640:	40014000 	.word	0x40014000
 8009644:	40014400 	.word	0x40014400
 8009648:	40014800 	.word	0x40014800
 800964c:	40015000 	.word	0x40015000

08009650 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009650:	b480      	push	{r7}
 8009652:	b087      	sub	sp, #28
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a1b      	ldr	r3, [r3, #32]
 8009664:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800967e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	021b      	lsls	r3, r3, #8
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	4313      	orrs	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	051b      	lsls	r3, r3, #20
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a1a      	ldr	r2, [pc, #104]	@ (8009710 <TIM_OC6_SetConfig+0xc0>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d013      	beq.n	80096d4 <TIM_OC6_SetConfig+0x84>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a19      	ldr	r2, [pc, #100]	@ (8009714 <TIM_OC6_SetConfig+0xc4>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d00f      	beq.n	80096d4 <TIM_OC6_SetConfig+0x84>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a18      	ldr	r2, [pc, #96]	@ (8009718 <TIM_OC6_SetConfig+0xc8>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d00b      	beq.n	80096d4 <TIM_OC6_SetConfig+0x84>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a17      	ldr	r2, [pc, #92]	@ (800971c <TIM_OC6_SetConfig+0xcc>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d007      	beq.n	80096d4 <TIM_OC6_SetConfig+0x84>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a16      	ldr	r2, [pc, #88]	@ (8009720 <TIM_OC6_SetConfig+0xd0>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d003      	beq.n	80096d4 <TIM_OC6_SetConfig+0x84>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a15      	ldr	r2, [pc, #84]	@ (8009724 <TIM_OC6_SetConfig+0xd4>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d109      	bne.n	80096e8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	029b      	lsls	r3, r3, #10
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	621a      	str	r2, [r3, #32]
}
 8009702:	bf00      	nop
 8009704:	371c      	adds	r7, #28
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	40012c00 	.word	0x40012c00
 8009714:	40013400 	.word	0x40013400
 8009718:	40014000 	.word	0x40014000
 800971c:	40014400 	.word	0x40014400
 8009720:	40014800 	.word	0x40014800
 8009724:	40015000 	.word	0x40015000

08009728 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009748:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	4313      	orrs	r3, r2
 8009752:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800975a:	f023 0307 	bic.w	r3, r3, #7
 800975e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	4313      	orrs	r3, r2
 8009768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	4a56      	ldr	r2, [pc, #344]	@ (80098d0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009778:	4293      	cmp	r3, r2
 800977a:	f000 80a2 	beq.w	80098c2 <TIM_SlaveTimer_SetConfig+0x19a>
 800977e:	4a54      	ldr	r2, [pc, #336]	@ (80098d0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009780:	4293      	cmp	r3, r2
 8009782:	f200 809b 	bhi.w	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 8009786:	4a53      	ldr	r2, [pc, #332]	@ (80098d4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009788:	4293      	cmp	r3, r2
 800978a:	f000 809a 	beq.w	80098c2 <TIM_SlaveTimer_SetConfig+0x19a>
 800978e:	4a51      	ldr	r2, [pc, #324]	@ (80098d4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009790:	4293      	cmp	r3, r2
 8009792:	f200 8093 	bhi.w	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 8009796:	4a50      	ldr	r2, [pc, #320]	@ (80098d8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009798:	4293      	cmp	r3, r2
 800979a:	f000 8092 	beq.w	80098c2 <TIM_SlaveTimer_SetConfig+0x19a>
 800979e:	4a4e      	ldr	r2, [pc, #312]	@ (80098d8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	f200 808b 	bhi.w	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 80097a6:	4a4d      	ldr	r2, [pc, #308]	@ (80098dc <TIM_SlaveTimer_SetConfig+0x1b4>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	f000 808a 	beq.w	80098c2 <TIM_SlaveTimer_SetConfig+0x19a>
 80097ae:	4a4b      	ldr	r2, [pc, #300]	@ (80098dc <TIM_SlaveTimer_SetConfig+0x1b4>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	f200 8083 	bhi.w	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 80097b6:	4a4a      	ldr	r2, [pc, #296]	@ (80098e0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	f000 8082 	beq.w	80098c2 <TIM_SlaveTimer_SetConfig+0x19a>
 80097be:	4a48      	ldr	r2, [pc, #288]	@ (80098e0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d87b      	bhi.n	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 80097c4:	4a47      	ldr	r2, [pc, #284]	@ (80098e4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d07b      	beq.n	80098c2 <TIM_SlaveTimer_SetConfig+0x19a>
 80097ca:	4a46      	ldr	r2, [pc, #280]	@ (80098e4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d875      	bhi.n	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 80097d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80097d4:	d075      	beq.n	80098c2 <TIM_SlaveTimer_SetConfig+0x19a>
 80097d6:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80097da:	d86f      	bhi.n	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 80097dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097e0:	d06f      	beq.n	80098c2 <TIM_SlaveTimer_SetConfig+0x19a>
 80097e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097e6:	d869      	bhi.n	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 80097e8:	2b70      	cmp	r3, #112	@ 0x70
 80097ea:	d01a      	beq.n	8009822 <TIM_SlaveTimer_SetConfig+0xfa>
 80097ec:	2b70      	cmp	r3, #112	@ 0x70
 80097ee:	d865      	bhi.n	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 80097f0:	2b60      	cmp	r3, #96	@ 0x60
 80097f2:	d059      	beq.n	80098a8 <TIM_SlaveTimer_SetConfig+0x180>
 80097f4:	2b60      	cmp	r3, #96	@ 0x60
 80097f6:	d861      	bhi.n	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 80097f8:	2b50      	cmp	r3, #80	@ 0x50
 80097fa:	d04b      	beq.n	8009894 <TIM_SlaveTimer_SetConfig+0x16c>
 80097fc:	2b50      	cmp	r3, #80	@ 0x50
 80097fe:	d85d      	bhi.n	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 8009800:	2b40      	cmp	r3, #64	@ 0x40
 8009802:	d019      	beq.n	8009838 <TIM_SlaveTimer_SetConfig+0x110>
 8009804:	2b40      	cmp	r3, #64	@ 0x40
 8009806:	d859      	bhi.n	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 8009808:	2b30      	cmp	r3, #48	@ 0x30
 800980a:	d05a      	beq.n	80098c2 <TIM_SlaveTimer_SetConfig+0x19a>
 800980c:	2b30      	cmp	r3, #48	@ 0x30
 800980e:	d855      	bhi.n	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 8009810:	2b20      	cmp	r3, #32
 8009812:	d056      	beq.n	80098c2 <TIM_SlaveTimer_SetConfig+0x19a>
 8009814:	2b20      	cmp	r3, #32
 8009816:	d851      	bhi.n	80098bc <TIM_SlaveTimer_SetConfig+0x194>
 8009818:	2b00      	cmp	r3, #0
 800981a:	d052      	beq.n	80098c2 <TIM_SlaveTimer_SetConfig+0x19a>
 800981c:	2b10      	cmp	r3, #16
 800981e:	d050      	beq.n	80098c2 <TIM_SlaveTimer_SetConfig+0x19a>
 8009820:	e04c      	b.n	80098bc <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009832:	f000 f9ff 	bl	8009c34 <TIM_ETR_SetConfig>
      break;
 8009836:	e045      	b.n	80098c4 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b05      	cmp	r3, #5
 800983e:	d004      	beq.n	800984a <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009844:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009848:	d101      	bne.n	800984e <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e03b      	b.n	80098c6 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6a1a      	ldr	r2, [r3, #32]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0201 	bic.w	r2, r2, #1
 8009864:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009874:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	4313      	orrs	r3, r2
 8009880:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	621a      	str	r2, [r3, #32]
      break;
 8009892:	e017      	b.n	80098c4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098a0:	461a      	mov	r2, r3
 80098a2:	f000 f895 	bl	80099d0 <TIM_TI1_ConfigInputStage>
      break;
 80098a6:	e00d      	b.n	80098c4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098b4:	461a      	mov	r2, r3
 80098b6:	f000 f8f7 	bl	8009aa8 <TIM_TI2_ConfigInputStage>
      break;
 80098ba:	e003      	b.n	80098c4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	75fb      	strb	r3, [r7, #23]
      break;
 80098c0:	e000      	b.n	80098c4 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80098c2:	bf00      	nop
  }

  return status;
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	00100070 	.word	0x00100070
 80098d4:	00100060 	.word	0x00100060
 80098d8:	00100050 	.word	0x00100050
 80098dc:	00100040 	.word	0x00100040
 80098e0:	00100030 	.word	0x00100030
 80098e4:	00100020 	.word	0x00100020

080098e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	f023 0201 	bic.w	r2, r3, #1
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4a28      	ldr	r2, [pc, #160]	@ (80099b4 <TIM_TI1_SetConfig+0xcc>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d01b      	beq.n	800994e <TIM_TI1_SetConfig+0x66>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800991c:	d017      	beq.n	800994e <TIM_TI1_SetConfig+0x66>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	4a25      	ldr	r2, [pc, #148]	@ (80099b8 <TIM_TI1_SetConfig+0xd0>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d013      	beq.n	800994e <TIM_TI1_SetConfig+0x66>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	4a24      	ldr	r2, [pc, #144]	@ (80099bc <TIM_TI1_SetConfig+0xd4>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d00f      	beq.n	800994e <TIM_TI1_SetConfig+0x66>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	4a23      	ldr	r2, [pc, #140]	@ (80099c0 <TIM_TI1_SetConfig+0xd8>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d00b      	beq.n	800994e <TIM_TI1_SetConfig+0x66>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4a22      	ldr	r2, [pc, #136]	@ (80099c4 <TIM_TI1_SetConfig+0xdc>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d007      	beq.n	800994e <TIM_TI1_SetConfig+0x66>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4a21      	ldr	r2, [pc, #132]	@ (80099c8 <TIM_TI1_SetConfig+0xe0>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d003      	beq.n	800994e <TIM_TI1_SetConfig+0x66>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4a20      	ldr	r2, [pc, #128]	@ (80099cc <TIM_TI1_SetConfig+0xe4>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d101      	bne.n	8009952 <TIM_TI1_SetConfig+0x6a>
 800994e:	2301      	movs	r3, #1
 8009950:	e000      	b.n	8009954 <TIM_TI1_SetConfig+0x6c>
 8009952:	2300      	movs	r3, #0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d008      	beq.n	800996a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f023 0303 	bic.w	r3, r3, #3
 800995e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4313      	orrs	r3, r2
 8009966:	617b      	str	r3, [r7, #20]
 8009968:	e003      	b.n	8009972 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f043 0301 	orr.w	r3, r3, #1
 8009970:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	011b      	lsls	r3, r3, #4
 800997e:	b2db      	uxtb	r3, r3
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	4313      	orrs	r3, r2
 8009984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f023 030a 	bic.w	r3, r3, #10
 800998c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	f003 030a 	and.w	r3, r3, #10
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	4313      	orrs	r3, r2
 8009998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	621a      	str	r2, [r3, #32]
}
 80099a6:	bf00      	nop
 80099a8:	371c      	adds	r7, #28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	40012c00 	.word	0x40012c00
 80099b8:	40000400 	.word	0x40000400
 80099bc:	40000800 	.word	0x40000800
 80099c0:	40000c00 	.word	0x40000c00
 80099c4:	40013400 	.word	0x40013400
 80099c8:	40014000 	.word	0x40014000
 80099cc:	40015000 	.word	0x40015000

080099d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6a1b      	ldr	r3, [r3, #32]
 80099e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	f023 0201 	bic.w	r2, r3, #1
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	011b      	lsls	r3, r3, #4
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f023 030a 	bic.w	r3, r3, #10
 8009a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	621a      	str	r2, [r3, #32]
}
 8009a22:	bf00      	nop
 8009a24:	371c      	adds	r7, #28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b087      	sub	sp, #28
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	607a      	str	r2, [r7, #4]
 8009a3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	f023 0210 	bic.w	r2, r3, #16
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	021b      	lsls	r3, r3, #8
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	031b      	lsls	r3, r3, #12
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009a80:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	011b      	lsls	r3, r3, #4
 8009a86:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	621a      	str	r2, [r3, #32]
}
 8009a9c:	bf00      	nop
 8009a9e:	371c      	adds	r7, #28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b087      	sub	sp, #28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6a1b      	ldr	r3, [r3, #32]
 8009ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	f023 0210 	bic.w	r2, r3, #16
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	031b      	lsls	r3, r3, #12
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	011b      	lsls	r3, r3, #4
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	621a      	str	r2, [r3, #32]
}
 8009afc:	bf00      	nop
 8009afe:	371c      	adds	r7, #28
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6a1b      	ldr	r3, [r3, #32]
 8009b20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f023 0303 	bic.w	r3, r3, #3
 8009b34:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	011b      	lsls	r3, r3, #4
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009b58:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	021b      	lsls	r3, r3, #8
 8009b5e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	697a      	ldr	r2, [r7, #20]
 8009b72:	621a      	str	r2, [r3, #32]
}
 8009b74:	bf00      	nop
 8009b76:	371c      	adds	r7, #28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b087      	sub	sp, #28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
 8009b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	021b      	lsls	r3, r3, #8
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009bbe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	031b      	lsls	r3, r3, #12
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	693a      	ldr	r2, [r7, #16]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009bd2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	031b      	lsls	r3, r3, #12
 8009bd8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009bdc:	697a      	ldr	r2, [r7, #20]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	621a      	str	r2, [r3, #32]
}
 8009bee:	bf00      	nop
 8009bf0:	371c      	adds	r7, #28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b085      	sub	sp, #20
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	f043 0307 	orr.w	r3, r3, #7
 8009c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	609a      	str	r2, [r3, #8]
}
 8009c28:	bf00      	nop
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b087      	sub	sp, #28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	021a      	lsls	r2, r3, #8
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	431a      	orrs	r2, r3
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	609a      	str	r2, [r3, #8]
}
 8009c68:	bf00      	nop
 8009c6a:	371c      	adds	r7, #28
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b087      	sub	sp, #28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	f003 031f 	and.w	r3, r3, #31
 8009c86:	2201      	movs	r2, #1
 8009c88:	fa02 f303 	lsl.w	r3, r2, r3
 8009c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6a1a      	ldr	r2, [r3, #32]
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	43db      	mvns	r3, r3
 8009c96:	401a      	ands	r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a1a      	ldr	r2, [r3, #32]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	f003 031f 	and.w	r3, r3, #31
 8009ca6:	6879      	ldr	r1, [r7, #4]
 8009ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cac:	431a      	orrs	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	621a      	str	r2, [r3, #32]
}
 8009cb2:	bf00      	nop
 8009cb4:	371c      	adds	r7, #28
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
	...

08009cc0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a26      	ldr	r2, [pc, #152]	@ (8009d64 <TIM_ResetCallback+0xa4>)
 8009ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a25      	ldr	r2, [pc, #148]	@ (8009d68 <TIM_ResetCallback+0xa8>)
 8009cd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a24      	ldr	r2, [pc, #144]	@ (8009d6c <TIM_ResetCallback+0xac>)
 8009cdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a23      	ldr	r2, [pc, #140]	@ (8009d70 <TIM_ResetCallback+0xb0>)
 8009ce4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a22      	ldr	r2, [pc, #136]	@ (8009d74 <TIM_ResetCallback+0xb4>)
 8009cec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a21      	ldr	r2, [pc, #132]	@ (8009d78 <TIM_ResetCallback+0xb8>)
 8009cf4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a20      	ldr	r2, [pc, #128]	@ (8009d7c <TIM_ResetCallback+0xbc>)
 8009cfc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a1f      	ldr	r2, [pc, #124]	@ (8009d80 <TIM_ResetCallback+0xc0>)
 8009d04:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8009d84 <TIM_ResetCallback+0xc4>)
 8009d0c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a1d      	ldr	r2, [pc, #116]	@ (8009d88 <TIM_ResetCallback+0xc8>)
 8009d14:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8009d8c <TIM_ResetCallback+0xcc>)
 8009d1c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a1b      	ldr	r2, [pc, #108]	@ (8009d90 <TIM_ResetCallback+0xd0>)
 8009d24:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8009d94 <TIM_ResetCallback+0xd4>)
 8009d2c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a19      	ldr	r2, [pc, #100]	@ (8009d98 <TIM_ResetCallback+0xd8>)
 8009d34:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a18      	ldr	r2, [pc, #96]	@ (8009d9c <TIM_ResetCallback+0xdc>)
 8009d3c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a17      	ldr	r2, [pc, #92]	@ (8009da0 <TIM_ResetCallback+0xe0>)
 8009d44:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a16      	ldr	r2, [pc, #88]	@ (8009da4 <TIM_ResetCallback+0xe4>)
 8009d4c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a15      	ldr	r2, [pc, #84]	@ (8009da8 <TIM_ResetCallback+0xe8>)
 8009d54:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	08008be5 	.word	0x08008be5
 8009d68:	08008bf9 	.word	0x08008bf9
 8009d6c:	08008c71 	.word	0x08008c71
 8009d70:	08008c85 	.word	0x08008c85
 8009d74:	08008c21 	.word	0x08008c21
 8009d78:	08008c35 	.word	0x08008c35
 8009d7c:	08008c0d 	.word	0x08008c0d
 8009d80:	08008c49 	.word	0x08008c49
 8009d84:	08008c5d 	.word	0x08008c5d
 8009d88:	08008c99 	.word	0x08008c99
 8009d8c:	08009ed9 	.word	0x08009ed9
 8009d90:	08009eed 	.word	0x08009eed
 8009d94:	08009f01 	.word	0x08009f01
 8009d98:	08009f15 	.word	0x08009f15
 8009d9c:	08009f29 	.word	0x08009f29
 8009da0:	08009f3d 	.word	0x08009f3d
 8009da4:	08009f51 	.word	0x08009f51
 8009da8:	08009f65 	.word	0x08009f65

08009dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d101      	bne.n	8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e074      	b.n	8009eae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a34      	ldr	r2, [pc, #208]	@ (8009ebc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d009      	beq.n	8009e02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a33      	ldr	r2, [pc, #204]	@ (8009ec0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d004      	beq.n	8009e02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a31      	ldr	r2, [pc, #196]	@ (8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d108      	bne.n	8009e14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a21      	ldr	r2, [pc, #132]	@ (8009ebc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d022      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e44:	d01d      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8009ec8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d018      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a1d      	ldr	r2, [pc, #116]	@ (8009ecc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d013      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8009ed0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00e      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a15      	ldr	r2, [pc, #84]	@ (8009ec0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d009      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a18      	ldr	r2, [pc, #96]	@ (8009ed4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d004      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a11      	ldr	r2, [pc, #68]	@ (8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d10c      	bne.n	8009e9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	40012c00 	.word	0x40012c00
 8009ec0:	40013400 	.word	0x40013400
 8009ec4:	40015000 	.word	0x40015000
 8009ec8:	40000400 	.word	0x40000400
 8009ecc:	40000800 	.word	0x40000800
 8009ed0:	40000c00 	.word	0x40000c00
 8009ed4:	40014000 	.word	0x40014000

08009ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e050      	b.n	800a02c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d114      	bne.n	8009fbe <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fdc5 	bl	800ab2c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d103      	bne.n	8009fb4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a21      	ldr	r2, [pc, #132]	@ (800a034 <HAL_UART_Init+0xbc>)
 8009fb0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2224      	movs	r2, #36	@ 0x24
 8009fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f022 0201 	bic.w	r2, r2, #1
 8009fd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d002      	beq.n	8009fe4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f001 f8f2 	bl	800b1c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fdf3 	bl	800abd0 <UART_SetConfig>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d101      	bne.n	8009ff4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e01b      	b.n	800a02c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	689a      	ldr	r2, [r3, #8]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f042 0201 	orr.w	r2, r2, #1
 800a022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f001 f971 	bl	800b30c <UART_CheckIdleState>
 800a02a:	4603      	mov	r3, r0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	080055b9 	.word	0x080055b9

0800a038 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a038:	b480      	push	{r7}
 800a03a:	b087      	sub	sp, #28
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	460b      	mov	r3, r1
 800a042:	607a      	str	r2, [r7, #4]
 800a044:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d109      	bne.n	800a064 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a056:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	e09c      	b.n	800a19e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a06a:	2b20      	cmp	r3, #32
 800a06c:	d16c      	bne.n	800a148 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a06e:	7afb      	ldrb	r3, [r7, #11]
 800a070:	2b0c      	cmp	r3, #12
 800a072:	d85e      	bhi.n	800a132 <HAL_UART_RegisterCallback+0xfa>
 800a074:	a201      	add	r2, pc, #4	@ (adr r2, 800a07c <HAL_UART_RegisterCallback+0x44>)
 800a076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07a:	bf00      	nop
 800a07c:	0800a0b1 	.word	0x0800a0b1
 800a080:	0800a0bb 	.word	0x0800a0bb
 800a084:	0800a0c5 	.word	0x0800a0c5
 800a088:	0800a0cf 	.word	0x0800a0cf
 800a08c:	0800a0d9 	.word	0x0800a0d9
 800a090:	0800a0e3 	.word	0x0800a0e3
 800a094:	0800a0ed 	.word	0x0800a0ed
 800a098:	0800a0f7 	.word	0x0800a0f7
 800a09c:	0800a101 	.word	0x0800a101
 800a0a0:	0800a10b 	.word	0x0800a10b
 800a0a4:	0800a115 	.word	0x0800a115
 800a0a8:	0800a11f 	.word	0x0800a11f
 800a0ac:	0800a129 	.word	0x0800a129
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a0b8:	e070      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a0c2:	e06b      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a0cc:	e066      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a0d6:	e061      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a0e0:	e05c      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a0ea:	e057      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a0f4:	e052      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a0fe:	e04d      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a108:	e048      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a112:	e043      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a11c:	e03e      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a126:	e039      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a130:	e034      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a138:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	75fb      	strb	r3, [r7, #23]
        break;
 800a146:	e029      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d11a      	bne.n	800a188 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a152:	7afb      	ldrb	r3, [r7, #11]
 800a154:	2b0b      	cmp	r3, #11
 800a156:	d002      	beq.n	800a15e <HAL_UART_RegisterCallback+0x126>
 800a158:	2b0c      	cmp	r3, #12
 800a15a:	d005      	beq.n	800a168 <HAL_UART_RegisterCallback+0x130>
 800a15c:	e009      	b.n	800a172 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a166:	e019      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a170:	e014      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a178:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	75fb      	strb	r3, [r7, #23]
        break;
 800a186:	e009      	b.n	800a19c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a18e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a19c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	371c      	adds	r7, #28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop

0800a1ac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08a      	sub	sp, #40	@ 0x28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1c0:	2b20      	cmp	r3, #32
 800a1c2:	d167      	bne.n	800a294 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <HAL_UART_Transmit_DMA+0x24>
 800a1ca:	88fb      	ldrh	r3, [r7, #6]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e060      	b.n	800a296 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	88fa      	ldrh	r2, [r7, #6]
 800a1de:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	88fa      	ldrh	r2, [r7, #6]
 800a1e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2221      	movs	r2, #33	@ 0x21
 800a1f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d028      	beq.n	800a254 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a206:	4a26      	ldr	r2, [pc, #152]	@ (800a2a0 <HAL_UART_Transmit_DMA+0xf4>)
 800a208:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a20e:	4a25      	ldr	r2, [pc, #148]	@ (800a2a4 <HAL_UART_Transmit_DMA+0xf8>)
 800a210:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a216:	4a24      	ldr	r2, [pc, #144]	@ (800a2a8 <HAL_UART_Transmit_DMA+0xfc>)
 800a218:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a21e:	2200      	movs	r2, #0
 800a220:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a22a:	4619      	mov	r1, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3328      	adds	r3, #40	@ 0x28
 800a232:	461a      	mov	r2, r3
 800a234:	88fb      	ldrh	r3, [r7, #6]
 800a236:	f7fb fd4d 	bl	8005cd4 <HAL_DMA_Start_IT>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d009      	beq.n	800a254 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2210      	movs	r2, #16
 800a244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2220      	movs	r2, #32
 800a24c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e020      	b.n	800a296 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2240      	movs	r2, #64	@ 0x40
 800a25a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3308      	adds	r3, #8
 800a262:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	e853 3f00 	ldrex	r3, [r3]
 800a26a:	613b      	str	r3, [r7, #16]
   return(result);
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a272:	627b      	str	r3, [r7, #36]	@ 0x24
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3308      	adds	r3, #8
 800a27a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a27c:	623a      	str	r2, [r7, #32]
 800a27e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a280:	69f9      	ldr	r1, [r7, #28]
 800a282:	6a3a      	ldr	r2, [r7, #32]
 800a284:	e841 2300 	strex	r3, r2, [r1]
 800a288:	61bb      	str	r3, [r7, #24]
   return(result);
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e5      	bne.n	800a25c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	e000      	b.n	800a296 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a294:	2302      	movs	r3, #2
  }
}
 800a296:	4618      	mov	r0, r3
 800a298:	3728      	adds	r7, #40	@ 0x28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	0800b7d7 	.word	0x0800b7d7
 800a2a4:	0800b875 	.word	0x0800b875
 800a2a8:	0800ba0f 	.word	0x0800ba0f

0800a2ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08a      	sub	sp, #40	@ 0x28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2c0:	2b20      	cmp	r3, #32
 800a2c2:	d137      	bne.n	800a334 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <HAL_UART_Receive_DMA+0x24>
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e030      	b.n	800a336 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a18      	ldr	r2, [pc, #96]	@ (800a340 <HAL_UART_Receive_DMA+0x94>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d01f      	beq.n	800a324 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d018      	beq.n	800a324 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	e853 3f00 	ldrex	r3, [r3]
 800a2fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a306:	627b      	str	r3, [r7, #36]	@ 0x24
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	461a      	mov	r2, r3
 800a30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a310:	623b      	str	r3, [r7, #32]
 800a312:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a314:	69f9      	ldr	r1, [r7, #28]
 800a316:	6a3a      	ldr	r2, [r7, #32]
 800a318:	e841 2300 	strex	r3, r2, [r1]
 800a31c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1e6      	bne.n	800a2f2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a324:	88fb      	ldrh	r3, [r7, #6]
 800a326:	461a      	mov	r2, r3
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f001 f906 	bl	800b53c <UART_Start_Receive_DMA>
 800a330:	4603      	mov	r3, r0
 800a332:	e000      	b.n	800a336 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a334:	2302      	movs	r3, #2
  }
}
 800a336:	4618      	mov	r0, r3
 800a338:	3728      	adds	r7, #40	@ 0x28
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	40008000 	.word	0x40008000

0800a344 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b0ba      	sub	sp, #232	@ 0xe8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a36a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a36e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a372:	4013      	ands	r3, r2
 800a374:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d11b      	bne.n	800a3b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a384:	f003 0320 	and.w	r3, r3, #32
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d015      	beq.n	800a3b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a390:	f003 0320 	and.w	r3, r3, #32
 800a394:	2b00      	cmp	r3, #0
 800a396:	d105      	bne.n	800a3a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a39c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d009      	beq.n	800a3b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 82f3 	beq.w	800a994 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	4798      	blx	r3
      }
      return;
 800a3b6:	e2ed      	b.n	800a994 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a3b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 8129 	beq.w	800a614 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a3c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a3c6:	4b90      	ldr	r3, [pc, #576]	@ (800a608 <HAL_UART_IRQHandler+0x2c4>)
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d106      	bne.n	800a3dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a3ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a3d2:	4b8e      	ldr	r3, [pc, #568]	@ (800a60c <HAL_UART_IRQHandler+0x2c8>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 811c 	beq.w	800a614 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3e0:	f003 0301 	and.w	r3, r3, #1
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d011      	beq.n	800a40c <HAL_UART_IRQHandler+0xc8>
 800a3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00b      	beq.n	800a40c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a402:	f043 0201 	orr.w	r2, r3, #1
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a410:	f003 0302 	and.w	r3, r3, #2
 800a414:	2b00      	cmp	r3, #0
 800a416:	d011      	beq.n	800a43c <HAL_UART_IRQHandler+0xf8>
 800a418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00b      	beq.n	800a43c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2202      	movs	r2, #2
 800a42a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a432:	f043 0204 	orr.w	r2, r3, #4
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a440:	f003 0304 	and.w	r3, r3, #4
 800a444:	2b00      	cmp	r3, #0
 800a446:	d011      	beq.n	800a46c <HAL_UART_IRQHandler+0x128>
 800a448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00b      	beq.n	800a46c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2204      	movs	r2, #4
 800a45a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a462:	f043 0202 	orr.w	r2, r3, #2
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a470:	f003 0308 	and.w	r3, r3, #8
 800a474:	2b00      	cmp	r3, #0
 800a476:	d017      	beq.n	800a4a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a47c:	f003 0320 	and.w	r3, r3, #32
 800a480:	2b00      	cmp	r3, #0
 800a482:	d105      	bne.n	800a490 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a484:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a488:	4b5f      	ldr	r3, [pc, #380]	@ (800a608 <HAL_UART_IRQHandler+0x2c4>)
 800a48a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00b      	beq.n	800a4a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2208      	movs	r2, #8
 800a496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a49e:	f043 0208 	orr.w	r2, r3, #8
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a4a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d012      	beq.n	800a4da <HAL_UART_IRQHandler+0x196>
 800a4b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00c      	beq.n	800a4da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4d0:	f043 0220 	orr.w	r2, r3, #32
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f000 8259 	beq.w	800a998 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a4e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ea:	f003 0320 	and.w	r3, r3, #32
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d013      	beq.n	800a51a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a4f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4f6:	f003 0320 	and.w	r3, r3, #32
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d105      	bne.n	800a50a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a4fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a506:	2b00      	cmp	r3, #0
 800a508:	d007      	beq.n	800a51a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d003      	beq.n	800a51a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a520:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a52e:	2b40      	cmp	r3, #64	@ 0x40
 800a530:	d005      	beq.n	800a53e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a536:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d058      	beq.n	800a5f0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f001 f8e3 	bl	800b70a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a54e:	2b40      	cmp	r3, #64	@ 0x40
 800a550:	d148      	bne.n	800a5e4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3308      	adds	r3, #8
 800a558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a560:	e853 3f00 	ldrex	r3, [r3]
 800a564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a568:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a56c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3308      	adds	r3, #8
 800a57a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a57e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a582:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a58a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a58e:	e841 2300 	strex	r3, r2, [r1]
 800a592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1d9      	bne.n	800a552 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d017      	beq.n	800a5d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5ae:	4a18      	ldr	r2, [pc, #96]	@ (800a610 <HAL_UART_IRQHandler+0x2cc>)
 800a5b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fb fc5f 	bl	8005e7c <HAL_DMA_Abort_IT>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d01f      	beq.n	800a604 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d6:	e015      	b.n	800a604 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e2:	e00f      	b.n	800a604 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ee:	e009      	b.n	800a604 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a602:	e1c9      	b.n	800a998 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a604:	bf00      	nop
    return;
 800a606:	e1c7      	b.n	800a998 <HAL_UART_IRQHandler+0x654>
 800a608:	10000001 	.word	0x10000001
 800a60c:	04000120 	.word	0x04000120
 800a610:	0800ba93 	.word	0x0800ba93

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a618:	2b01      	cmp	r3, #1
 800a61a:	f040 8157 	bne.w	800a8cc <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a622:	f003 0310 	and.w	r3, r3, #16
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 8150 	beq.w	800a8cc <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a62c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a630:	f003 0310 	and.w	r3, r3, #16
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 8149 	beq.w	800a8cc <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2210      	movs	r2, #16
 800a640:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a64c:	2b40      	cmp	r3, #64	@ 0x40
 800a64e:	f040 80bd 	bne.w	800a7cc <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a660:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 8199 	beq.w	800a99c <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a670:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a674:	429a      	cmp	r2, r3
 800a676:	f080 8191 	bcs.w	800a99c <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a680:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f003 0320 	and.w	r3, r3, #32
 800a692:	2b00      	cmp	r3, #0
 800a694:	f040 8087 	bne.w	800a7a6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6a4:	e853 3f00 	ldrex	r3, [r3]
 800a6a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a6ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	461a      	mov	r2, r3
 800a6be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a6c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a6ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a6d2:	e841 2300 	strex	r3, r2, [r1]
 800a6d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a6da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1da      	bne.n	800a698 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	3308      	adds	r3, #8
 800a6e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6ec:	e853 3f00 	ldrex	r3, [r3]
 800a6f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a6f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6f4:	f023 0301 	bic.w	r3, r3, #1
 800a6f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	3308      	adds	r3, #8
 800a702:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a706:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a70a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a70e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a712:	e841 2300 	strex	r3, r2, [r1]
 800a716:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a718:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1e1      	bne.n	800a6e2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3308      	adds	r3, #8
 800a724:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a726:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a728:	e853 3f00 	ldrex	r3, [r3]
 800a72c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a72e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a730:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a734:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	3308      	adds	r3, #8
 800a73e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a742:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a744:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a746:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a748:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a74a:	e841 2300 	strex	r3, r2, [r1]
 800a74e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1e3      	bne.n	800a71e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2220      	movs	r2, #32
 800a75a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a76c:	e853 3f00 	ldrex	r3, [r3]
 800a770:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a774:	f023 0310 	bic.w	r3, r3, #16
 800a778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	461a      	mov	r2, r3
 800a782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a786:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a788:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a78c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a78e:	e841 2300 	strex	r3, r2, [r1]
 800a792:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1e4      	bne.n	800a764 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fb fb12 	bl	8005dca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a7be:	b292      	uxth	r2, r2
 800a7c0:	1a8a      	subs	r2, r1, r2
 800a7c2:	b292      	uxth	r2, r2
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7ca:	e0e7      	b.n	800a99c <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 80d9 	beq.w	800a9a0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a7ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f000 80d4 	beq.w	800a9a0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a808:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a80c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	461a      	mov	r2, r3
 800a816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a81a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a81c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a820:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a822:	e841 2300 	strex	r3, r2, [r1]
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1e4      	bne.n	800a7f8 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	3308      	adds	r3, #8
 800a834:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	623b      	str	r3, [r7, #32]
   return(result);
 800a83e:	6a3b      	ldr	r3, [r7, #32]
 800a840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a844:	f023 0301 	bic.w	r3, r3, #1
 800a848:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	3308      	adds	r3, #8
 800a852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a856:	633a      	str	r2, [r7, #48]	@ 0x30
 800a858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a85c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e1      	bne.n	800a82e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2220      	movs	r2, #32
 800a86e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	e853 3f00 	ldrex	r3, [r3]
 800a88a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 0310 	bic.w	r3, r3, #16
 800a892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	461a      	mov	r2, r3
 800a89c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a8a0:	61fb      	str	r3, [r7, #28]
 800a8a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a4:	69b9      	ldr	r1, [r7, #24]
 800a8a6:	69fa      	ldr	r2, [r7, #28]
 800a8a8:	e841 2300 	strex	r3, r2, [r1]
 800a8ac:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1e4      	bne.n	800a87e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a8c0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8ca:	e069      	b.n	800a9a0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a8cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d010      	beq.n	800a8fa <HAL_UART_IRQHandler+0x5b6>
 800a8d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00a      	beq.n	800a8fa <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a8ec:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a8f8:	e055      	b.n	800a9a6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a8fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a902:	2b00      	cmp	r3, #0
 800a904:	d014      	beq.n	800a930 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a90a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d105      	bne.n	800a91e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a916:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d008      	beq.n	800a930 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a922:	2b00      	cmp	r3, #0
 800a924:	d03e      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	4798      	blx	r3
    }
    return;
 800a92e:	e039      	b.n	800a9a4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d009      	beq.n	800a950 <HAL_UART_IRQHandler+0x60c>
 800a93c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a944:	2b00      	cmp	r3, #0
 800a946:	d003      	beq.n	800a950 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 f8ba 	bl	800bac2 <UART_EndTransmit_IT>
    return;
 800a94e:	e02a      	b.n	800a9a6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00b      	beq.n	800a974 <HAL_UART_IRQHandler+0x630>
 800a95c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a960:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d005      	beq.n	800a974 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a972:	e018      	b.n	800a9a6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d012      	beq.n	800a9a6 <HAL_UART_IRQHandler+0x662>
 800a980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a984:	2b00      	cmp	r3, #0
 800a986:	da0e      	bge.n	800a9a6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a992:	e008      	b.n	800a9a6 <HAL_UART_IRQHandler+0x662>
      return;
 800a994:	bf00      	nop
 800a996:	e006      	b.n	800a9a6 <HAL_UART_IRQHandler+0x662>
    return;
 800a998:	bf00      	nop
 800a99a:	e004      	b.n	800a9a6 <HAL_UART_IRQHandler+0x662>
      return;
 800a99c:	bf00      	nop
 800a99e:	e002      	b.n	800a9a6 <HAL_UART_IRQHandler+0x662>
      return;
 800a9a0:	bf00      	nop
 800a9a2:	e000      	b.n	800a9a6 <HAL_UART_IRQHandler+0x662>
    return;
 800a9a4:	bf00      	nop
  }
}
 800a9a6:	37e8      	adds	r7, #232	@ 0xe8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a9dc:	bf00      	nop
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a09      	ldr	r2, [pc, #36]	@ (800aa98 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d009      	beq.n	800aa8c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	695b      	ldr	r3, [r3, #20]
 800aa7e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	683a      	ldr	r2, [r7, #0]
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	615a      	str	r2, [r3, #20]
  }
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	40008000 	.word	0x40008000

0800aa9c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a18      	ldr	r2, [pc, #96]	@ (800ab0c <HAL_UART_EnableReceiverTimeout+0x70>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d027      	beq.n	800aafe <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aab4:	2b20      	cmp	r3, #32
 800aab6:	d120      	bne.n	800aafa <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d101      	bne.n	800aac6 <HAL_UART_EnableReceiverTimeout+0x2a>
 800aac2:	2302      	movs	r3, #2
 800aac4:	e01c      	b.n	800ab00 <HAL_UART_EnableReceiverTimeout+0x64>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2224      	movs	r2, #36	@ 0x24
 800aad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800aae4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2220      	movs	r2, #32
 800aaea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	e002      	b.n	800ab00 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800aafa:	2302      	movs	r3, #2
 800aafc:	e000      	b.n	800ab00 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
  }
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	40008000 	.word	0x40008000

0800ab10 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
	...

0800ab2c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a1a      	ldr	r2, [pc, #104]	@ (800aba0 <UART_InitCallbacksToDefault+0x74>)
 800ab38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a19      	ldr	r2, [pc, #100]	@ (800aba4 <UART_InitCallbacksToDefault+0x78>)
 800ab40:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a18      	ldr	r2, [pc, #96]	@ (800aba8 <UART_InitCallbacksToDefault+0x7c>)
 800ab48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a17      	ldr	r2, [pc, #92]	@ (800abac <UART_InitCallbacksToDefault+0x80>)
 800ab50:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a16      	ldr	r2, [pc, #88]	@ (800abb0 <UART_InitCallbacksToDefault+0x84>)
 800ab58:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a15      	ldr	r2, [pc, #84]	@ (800abb4 <UART_InitCallbacksToDefault+0x88>)
 800ab60:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a14      	ldr	r2, [pc, #80]	@ (800abb8 <UART_InitCallbacksToDefault+0x8c>)
 800ab68:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a13      	ldr	r2, [pc, #76]	@ (800abbc <UART_InitCallbacksToDefault+0x90>)
 800ab70:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a12      	ldr	r2, [pc, #72]	@ (800abc0 <UART_InitCallbacksToDefault+0x94>)
 800ab78:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a11      	ldr	r2, [pc, #68]	@ (800abc4 <UART_InitCallbacksToDefault+0x98>)
 800ab80:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a10      	ldr	r2, [pc, #64]	@ (800abc8 <UART_InitCallbacksToDefault+0x9c>)
 800ab88:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a0f      	ldr	r2, [pc, #60]	@ (800abcc <UART_InitCallbacksToDefault+0xa0>)
 800ab90:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	0800a9c1 	.word	0x0800a9c1
 800aba4:	0800a9ad 	.word	0x0800a9ad
 800aba8:	0800a9e9 	.word	0x0800a9e9
 800abac:	0800a9d5 	.word	0x0800a9d5
 800abb0:	0800a9fd 	.word	0x0800a9fd
 800abb4:	0800aa11 	.word	0x0800aa11
 800abb8:	0800aa25 	.word	0x0800aa25
 800abbc:	0800aa39 	.word	0x0800aa39
 800abc0:	0800bb1d 	.word	0x0800bb1d
 800abc4:	0800bb31 	.word	0x0800bb31
 800abc8:	0800bb45 	.word	0x0800bb45
 800abcc:	0800aa4d 	.word	0x0800aa4d

0800abd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abd4:	b08c      	sub	sp, #48	@ 0x30
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	431a      	orrs	r2, r3
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	431a      	orrs	r2, r3
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	69db      	ldr	r3, [r3, #28]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	4baa      	ldr	r3, [pc, #680]	@ (800aea8 <UART_SetConfig+0x2d8>)
 800ac00:	4013      	ands	r3, r2
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	6812      	ldr	r2, [r2, #0]
 800ac06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac08:	430b      	orrs	r3, r1
 800ac0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	68da      	ldr	r2, [r3, #12]
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	430a      	orrs	r2, r1
 800ac20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a9f      	ldr	r2, [pc, #636]	@ (800aeac <UART_SetConfig+0x2dc>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d004      	beq.n	800ac3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ac46:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	6812      	ldr	r2, [r2, #0]
 800ac4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac50:	430b      	orrs	r3, r1
 800ac52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac5a:	f023 010f 	bic.w	r1, r3, #15
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a90      	ldr	r2, [pc, #576]	@ (800aeb0 <UART_SetConfig+0x2e0>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d125      	bne.n	800acc0 <UART_SetConfig+0xf0>
 800ac74:	4b8f      	ldr	r3, [pc, #572]	@ (800aeb4 <UART_SetConfig+0x2e4>)
 800ac76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac7a:	f003 0303 	and.w	r3, r3, #3
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d81a      	bhi.n	800acb8 <UART_SetConfig+0xe8>
 800ac82:	a201      	add	r2, pc, #4	@ (adr r2, 800ac88 <UART_SetConfig+0xb8>)
 800ac84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac88:	0800ac99 	.word	0x0800ac99
 800ac8c:	0800aca9 	.word	0x0800aca9
 800ac90:	0800aca1 	.word	0x0800aca1
 800ac94:	0800acb1 	.word	0x0800acb1
 800ac98:	2301      	movs	r3, #1
 800ac9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac9e:	e116      	b.n	800aece <UART_SetConfig+0x2fe>
 800aca0:	2302      	movs	r3, #2
 800aca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aca6:	e112      	b.n	800aece <UART_SetConfig+0x2fe>
 800aca8:	2304      	movs	r3, #4
 800acaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acae:	e10e      	b.n	800aece <UART_SetConfig+0x2fe>
 800acb0:	2308      	movs	r3, #8
 800acb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acb6:	e10a      	b.n	800aece <UART_SetConfig+0x2fe>
 800acb8:	2310      	movs	r3, #16
 800acba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acbe:	e106      	b.n	800aece <UART_SetConfig+0x2fe>
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a7c      	ldr	r2, [pc, #496]	@ (800aeb8 <UART_SetConfig+0x2e8>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d138      	bne.n	800ad3c <UART_SetConfig+0x16c>
 800acca:	4b7a      	ldr	r3, [pc, #488]	@ (800aeb4 <UART_SetConfig+0x2e4>)
 800accc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acd0:	f003 030c 	and.w	r3, r3, #12
 800acd4:	2b0c      	cmp	r3, #12
 800acd6:	d82d      	bhi.n	800ad34 <UART_SetConfig+0x164>
 800acd8:	a201      	add	r2, pc, #4	@ (adr r2, 800ace0 <UART_SetConfig+0x110>)
 800acda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acde:	bf00      	nop
 800ace0:	0800ad15 	.word	0x0800ad15
 800ace4:	0800ad35 	.word	0x0800ad35
 800ace8:	0800ad35 	.word	0x0800ad35
 800acec:	0800ad35 	.word	0x0800ad35
 800acf0:	0800ad25 	.word	0x0800ad25
 800acf4:	0800ad35 	.word	0x0800ad35
 800acf8:	0800ad35 	.word	0x0800ad35
 800acfc:	0800ad35 	.word	0x0800ad35
 800ad00:	0800ad1d 	.word	0x0800ad1d
 800ad04:	0800ad35 	.word	0x0800ad35
 800ad08:	0800ad35 	.word	0x0800ad35
 800ad0c:	0800ad35 	.word	0x0800ad35
 800ad10:	0800ad2d 	.word	0x0800ad2d
 800ad14:	2300      	movs	r3, #0
 800ad16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad1a:	e0d8      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad22:	e0d4      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad24:	2304      	movs	r3, #4
 800ad26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad2a:	e0d0      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad2c:	2308      	movs	r3, #8
 800ad2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad32:	e0cc      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad34:	2310      	movs	r3, #16
 800ad36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad3a:	e0c8      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a5e      	ldr	r2, [pc, #376]	@ (800aebc <UART_SetConfig+0x2ec>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d125      	bne.n	800ad92 <UART_SetConfig+0x1c2>
 800ad46:	4b5b      	ldr	r3, [pc, #364]	@ (800aeb4 <UART_SetConfig+0x2e4>)
 800ad48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ad50:	2b30      	cmp	r3, #48	@ 0x30
 800ad52:	d016      	beq.n	800ad82 <UART_SetConfig+0x1b2>
 800ad54:	2b30      	cmp	r3, #48	@ 0x30
 800ad56:	d818      	bhi.n	800ad8a <UART_SetConfig+0x1ba>
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	d00a      	beq.n	800ad72 <UART_SetConfig+0x1a2>
 800ad5c:	2b20      	cmp	r3, #32
 800ad5e:	d814      	bhi.n	800ad8a <UART_SetConfig+0x1ba>
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <UART_SetConfig+0x19a>
 800ad64:	2b10      	cmp	r3, #16
 800ad66:	d008      	beq.n	800ad7a <UART_SetConfig+0x1aa>
 800ad68:	e00f      	b.n	800ad8a <UART_SetConfig+0x1ba>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad70:	e0ad      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad72:	2302      	movs	r3, #2
 800ad74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad78:	e0a9      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad7a:	2304      	movs	r3, #4
 800ad7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad80:	e0a5      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad82:	2308      	movs	r3, #8
 800ad84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad88:	e0a1      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad8a:	2310      	movs	r3, #16
 800ad8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad90:	e09d      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a4a      	ldr	r2, [pc, #296]	@ (800aec0 <UART_SetConfig+0x2f0>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d125      	bne.n	800ade8 <UART_SetConfig+0x218>
 800ad9c:	4b45      	ldr	r3, [pc, #276]	@ (800aeb4 <UART_SetConfig+0x2e4>)
 800ad9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ada2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ada6:	2bc0      	cmp	r3, #192	@ 0xc0
 800ada8:	d016      	beq.n	800add8 <UART_SetConfig+0x208>
 800adaa:	2bc0      	cmp	r3, #192	@ 0xc0
 800adac:	d818      	bhi.n	800ade0 <UART_SetConfig+0x210>
 800adae:	2b80      	cmp	r3, #128	@ 0x80
 800adb0:	d00a      	beq.n	800adc8 <UART_SetConfig+0x1f8>
 800adb2:	2b80      	cmp	r3, #128	@ 0x80
 800adb4:	d814      	bhi.n	800ade0 <UART_SetConfig+0x210>
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d002      	beq.n	800adc0 <UART_SetConfig+0x1f0>
 800adba:	2b40      	cmp	r3, #64	@ 0x40
 800adbc:	d008      	beq.n	800add0 <UART_SetConfig+0x200>
 800adbe:	e00f      	b.n	800ade0 <UART_SetConfig+0x210>
 800adc0:	2300      	movs	r3, #0
 800adc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adc6:	e082      	b.n	800aece <UART_SetConfig+0x2fe>
 800adc8:	2302      	movs	r3, #2
 800adca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adce:	e07e      	b.n	800aece <UART_SetConfig+0x2fe>
 800add0:	2304      	movs	r3, #4
 800add2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800add6:	e07a      	b.n	800aece <UART_SetConfig+0x2fe>
 800add8:	2308      	movs	r3, #8
 800adda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adde:	e076      	b.n	800aece <UART_SetConfig+0x2fe>
 800ade0:	2310      	movs	r3, #16
 800ade2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ade6:	e072      	b.n	800aece <UART_SetConfig+0x2fe>
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a35      	ldr	r2, [pc, #212]	@ (800aec4 <UART_SetConfig+0x2f4>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d12a      	bne.n	800ae48 <UART_SetConfig+0x278>
 800adf2:	4b30      	ldr	r3, [pc, #192]	@ (800aeb4 <UART_SetConfig+0x2e4>)
 800adf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae00:	d01a      	beq.n	800ae38 <UART_SetConfig+0x268>
 800ae02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae06:	d81b      	bhi.n	800ae40 <UART_SetConfig+0x270>
 800ae08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae0c:	d00c      	beq.n	800ae28 <UART_SetConfig+0x258>
 800ae0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae12:	d815      	bhi.n	800ae40 <UART_SetConfig+0x270>
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d003      	beq.n	800ae20 <UART_SetConfig+0x250>
 800ae18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae1c:	d008      	beq.n	800ae30 <UART_SetConfig+0x260>
 800ae1e:	e00f      	b.n	800ae40 <UART_SetConfig+0x270>
 800ae20:	2300      	movs	r3, #0
 800ae22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae26:	e052      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae28:	2302      	movs	r3, #2
 800ae2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae2e:	e04e      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae30:	2304      	movs	r3, #4
 800ae32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae36:	e04a      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae38:	2308      	movs	r3, #8
 800ae3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae3e:	e046      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae40:	2310      	movs	r3, #16
 800ae42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae46:	e042      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a17      	ldr	r2, [pc, #92]	@ (800aeac <UART_SetConfig+0x2dc>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d13a      	bne.n	800aec8 <UART_SetConfig+0x2f8>
 800ae52:	4b18      	ldr	r3, [pc, #96]	@ (800aeb4 <UART_SetConfig+0x2e4>)
 800ae54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ae5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae60:	d01a      	beq.n	800ae98 <UART_SetConfig+0x2c8>
 800ae62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae66:	d81b      	bhi.n	800aea0 <UART_SetConfig+0x2d0>
 800ae68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae6c:	d00c      	beq.n	800ae88 <UART_SetConfig+0x2b8>
 800ae6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae72:	d815      	bhi.n	800aea0 <UART_SetConfig+0x2d0>
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <UART_SetConfig+0x2b0>
 800ae78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae7c:	d008      	beq.n	800ae90 <UART_SetConfig+0x2c0>
 800ae7e:	e00f      	b.n	800aea0 <UART_SetConfig+0x2d0>
 800ae80:	2300      	movs	r3, #0
 800ae82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae86:	e022      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae8e:	e01e      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae90:	2304      	movs	r3, #4
 800ae92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae96:	e01a      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae98:	2308      	movs	r3, #8
 800ae9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae9e:	e016      	b.n	800aece <UART_SetConfig+0x2fe>
 800aea0:	2310      	movs	r3, #16
 800aea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aea6:	e012      	b.n	800aece <UART_SetConfig+0x2fe>
 800aea8:	cfff69f3 	.word	0xcfff69f3
 800aeac:	40008000 	.word	0x40008000
 800aeb0:	40013800 	.word	0x40013800
 800aeb4:	40021000 	.word	0x40021000
 800aeb8:	40004400 	.word	0x40004400
 800aebc:	40004800 	.word	0x40004800
 800aec0:	40004c00 	.word	0x40004c00
 800aec4:	40005000 	.word	0x40005000
 800aec8:	2310      	movs	r3, #16
 800aeca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4aae      	ldr	r2, [pc, #696]	@ (800b18c <UART_SetConfig+0x5bc>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	f040 8097 	bne.w	800b008 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aeda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aede:	2b08      	cmp	r3, #8
 800aee0:	d823      	bhi.n	800af2a <UART_SetConfig+0x35a>
 800aee2:	a201      	add	r2, pc, #4	@ (adr r2, 800aee8 <UART_SetConfig+0x318>)
 800aee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee8:	0800af0d 	.word	0x0800af0d
 800aeec:	0800af2b 	.word	0x0800af2b
 800aef0:	0800af15 	.word	0x0800af15
 800aef4:	0800af2b 	.word	0x0800af2b
 800aef8:	0800af1b 	.word	0x0800af1b
 800aefc:	0800af2b 	.word	0x0800af2b
 800af00:	0800af2b 	.word	0x0800af2b
 800af04:	0800af2b 	.word	0x0800af2b
 800af08:	0800af23 	.word	0x0800af23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af0c:	f7fc f8b2 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 800af10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af12:	e010      	b.n	800af36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af14:	4b9e      	ldr	r3, [pc, #632]	@ (800b190 <UART_SetConfig+0x5c0>)
 800af16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af18:	e00d      	b.n	800af36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af1a:	f7fc f83d 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 800af1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af20:	e009      	b.n	800af36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af28:	e005      	b.n	800af36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800af2a:	2300      	movs	r3, #0
 800af2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 8130 	beq.w	800b19e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af42:	4a94      	ldr	r2, [pc, #592]	@ (800b194 <UART_SetConfig+0x5c4>)
 800af44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af48:	461a      	mov	r2, r3
 800af4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	4613      	mov	r3, r2
 800af58:	005b      	lsls	r3, r3, #1
 800af5a:	4413      	add	r3, r2
 800af5c:	69ba      	ldr	r2, [r7, #24]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d305      	bcc.n	800af6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af68:	69ba      	ldr	r2, [r7, #24]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d903      	bls.n	800af76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800af74:	e113      	b.n	800b19e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af78:	2200      	movs	r2, #0
 800af7a:	60bb      	str	r3, [r7, #8]
 800af7c:	60fa      	str	r2, [r7, #12]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af82:	4a84      	ldr	r2, [pc, #528]	@ (800b194 <UART_SetConfig+0x5c4>)
 800af84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	2200      	movs	r2, #0
 800af8c:	603b      	str	r3, [r7, #0]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af98:	f7f5 ff28 	bl	8000dec <__aeabi_uldivmod>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4610      	mov	r0, r2
 800afa2:	4619      	mov	r1, r3
 800afa4:	f04f 0200 	mov.w	r2, #0
 800afa8:	f04f 0300 	mov.w	r3, #0
 800afac:	020b      	lsls	r3, r1, #8
 800afae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800afb2:	0202      	lsls	r2, r0, #8
 800afb4:	6979      	ldr	r1, [r7, #20]
 800afb6:	6849      	ldr	r1, [r1, #4]
 800afb8:	0849      	lsrs	r1, r1, #1
 800afba:	2000      	movs	r0, #0
 800afbc:	460c      	mov	r4, r1
 800afbe:	4605      	mov	r5, r0
 800afc0:	eb12 0804 	adds.w	r8, r2, r4
 800afc4:	eb43 0905 	adc.w	r9, r3, r5
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	469a      	mov	sl, r3
 800afd0:	4693      	mov	fp, r2
 800afd2:	4652      	mov	r2, sl
 800afd4:	465b      	mov	r3, fp
 800afd6:	4640      	mov	r0, r8
 800afd8:	4649      	mov	r1, r9
 800afda:	f7f5 ff07 	bl	8000dec <__aeabi_uldivmod>
 800afde:	4602      	mov	r2, r0
 800afe0:	460b      	mov	r3, r1
 800afe2:	4613      	mov	r3, r2
 800afe4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afec:	d308      	bcc.n	800b000 <UART_SetConfig+0x430>
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aff4:	d204      	bcs.n	800b000 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	6a3a      	ldr	r2, [r7, #32]
 800affc:	60da      	str	r2, [r3, #12]
 800affe:	e0ce      	b.n	800b19e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b006:	e0ca      	b.n	800b19e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	69db      	ldr	r3, [r3, #28]
 800b00c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b010:	d166      	bne.n	800b0e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b012:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b016:	2b08      	cmp	r3, #8
 800b018:	d827      	bhi.n	800b06a <UART_SetConfig+0x49a>
 800b01a:	a201      	add	r2, pc, #4	@ (adr r2, 800b020 <UART_SetConfig+0x450>)
 800b01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b020:	0800b045 	.word	0x0800b045
 800b024:	0800b04d 	.word	0x0800b04d
 800b028:	0800b055 	.word	0x0800b055
 800b02c:	0800b06b 	.word	0x0800b06b
 800b030:	0800b05b 	.word	0x0800b05b
 800b034:	0800b06b 	.word	0x0800b06b
 800b038:	0800b06b 	.word	0x0800b06b
 800b03c:	0800b06b 	.word	0x0800b06b
 800b040:	0800b063 	.word	0x0800b063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b044:	f7fc f816 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 800b048:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b04a:	e014      	b.n	800b076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b04c:	f7fc f828 	bl	80070a0 <HAL_RCC_GetPCLK2Freq>
 800b050:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b052:	e010      	b.n	800b076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b054:	4b4e      	ldr	r3, [pc, #312]	@ (800b190 <UART_SetConfig+0x5c0>)
 800b056:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b058:	e00d      	b.n	800b076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b05a:	f7fb ff9d 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 800b05e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b060:	e009      	b.n	800b076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b068:	e005      	b.n	800b076 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b074:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 8090 	beq.w	800b19e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b082:	4a44      	ldr	r2, [pc, #272]	@ (800b194 <UART_SetConfig+0x5c4>)
 800b084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b088:	461a      	mov	r2, r3
 800b08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b090:	005a      	lsls	r2, r3, #1
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	085b      	lsrs	r3, r3, #1
 800b098:	441a      	add	r2, r3
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	2b0f      	cmp	r3, #15
 800b0a8:	d916      	bls.n	800b0d8 <UART_SetConfig+0x508>
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0b0:	d212      	bcs.n	800b0d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	f023 030f 	bic.w	r3, r3, #15
 800b0ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0bc:	6a3b      	ldr	r3, [r7, #32]
 800b0be:	085b      	lsrs	r3, r3, #1
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	f003 0307 	and.w	r3, r3, #7
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	8bfb      	ldrh	r3, [r7, #30]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	8bfa      	ldrh	r2, [r7, #30]
 800b0d4:	60da      	str	r2, [r3, #12]
 800b0d6:	e062      	b.n	800b19e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b0de:	e05e      	b.n	800b19e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b0e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0e4:	2b08      	cmp	r3, #8
 800b0e6:	d828      	bhi.n	800b13a <UART_SetConfig+0x56a>
 800b0e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b0f0 <UART_SetConfig+0x520>)
 800b0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ee:	bf00      	nop
 800b0f0:	0800b115 	.word	0x0800b115
 800b0f4:	0800b11d 	.word	0x0800b11d
 800b0f8:	0800b125 	.word	0x0800b125
 800b0fc:	0800b13b 	.word	0x0800b13b
 800b100:	0800b12b 	.word	0x0800b12b
 800b104:	0800b13b 	.word	0x0800b13b
 800b108:	0800b13b 	.word	0x0800b13b
 800b10c:	0800b13b 	.word	0x0800b13b
 800b110:	0800b133 	.word	0x0800b133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b114:	f7fb ffae 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 800b118:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b11a:	e014      	b.n	800b146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b11c:	f7fb ffc0 	bl	80070a0 <HAL_RCC_GetPCLK2Freq>
 800b120:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b122:	e010      	b.n	800b146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b124:	4b1a      	ldr	r3, [pc, #104]	@ (800b190 <UART_SetConfig+0x5c0>)
 800b126:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b128:	e00d      	b.n	800b146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b12a:	f7fb ff35 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 800b12e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b130:	e009      	b.n	800b146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b136:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b138:	e005      	b.n	800b146 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b13a:	2300      	movs	r3, #0
 800b13c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b144:	bf00      	nop
    }

    if (pclk != 0U)
 800b146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d028      	beq.n	800b19e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b150:	4a10      	ldr	r2, [pc, #64]	@ (800b194 <UART_SetConfig+0x5c4>)
 800b152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b156:	461a      	mov	r2, r3
 800b158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	085b      	lsrs	r3, r3, #1
 800b164:	441a      	add	r2, r3
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b16e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b170:	6a3b      	ldr	r3, [r7, #32]
 800b172:	2b0f      	cmp	r3, #15
 800b174:	d910      	bls.n	800b198 <UART_SetConfig+0x5c8>
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b17c:	d20c      	bcs.n	800b198 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	b29a      	uxth	r2, r3
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	60da      	str	r2, [r3, #12]
 800b188:	e009      	b.n	800b19e <UART_SetConfig+0x5ce>
 800b18a:	bf00      	nop
 800b18c:	40008000 	.word	0x40008000
 800b190:	00f42400 	.word	0x00f42400
 800b194:	0800c180 	.word	0x0800c180
      }
      else
      {
        ret = HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b1ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3730      	adds	r7, #48	@ 0x30
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b1c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d4:	f003 0308 	and.w	r3, r3, #8
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d00a      	beq.n	800b1f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	430a      	orrs	r2, r1
 800b1f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00a      	beq.n	800b214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	430a      	orrs	r2, r1
 800b212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00a      	beq.n	800b236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	430a      	orrs	r2, r1
 800b234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b23a:	f003 0304 	and.w	r3, r3, #4
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00a      	beq.n	800b258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	430a      	orrs	r2, r1
 800b256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b25c:	f003 0310 	and.w	r3, r3, #16
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00a      	beq.n	800b27a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	430a      	orrs	r2, r1
 800b278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b27e:	f003 0320 	and.w	r3, r3, #32
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00a      	beq.n	800b29c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	430a      	orrs	r2, r1
 800b29a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d01a      	beq.n	800b2de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	430a      	orrs	r2, r1
 800b2bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2c6:	d10a      	bne.n	800b2de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00a      	beq.n	800b300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	430a      	orrs	r2, r1
 800b2fe:	605a      	str	r2, [r3, #4]
  }
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b098      	sub	sp, #96	@ 0x60
 800b310:	af02      	add	r7, sp, #8
 800b312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b31c:	f7fa fb16 	bl	800594c <HAL_GetTick>
 800b320:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 0308 	and.w	r3, r3, #8
 800b32c:	2b08      	cmp	r3, #8
 800b32e:	d12f      	bne.n	800b390 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b330:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b338:	2200      	movs	r2, #0
 800b33a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f88e 	bl	800b460 <UART_WaitOnFlagUntilTimeout>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d022      	beq.n	800b390 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b352:	e853 3f00 	ldrex	r3, [r3]
 800b356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b35a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b35e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	461a      	mov	r2, r3
 800b366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b368:	647b      	str	r3, [r7, #68]	@ 0x44
 800b36a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b36e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b370:	e841 2300 	strex	r3, r2, [r1]
 800b374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1e6      	bne.n	800b34a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2220      	movs	r2, #32
 800b380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b38c:	2303      	movs	r3, #3
 800b38e:	e063      	b.n	800b458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 0304 	and.w	r3, r3, #4
 800b39a:	2b04      	cmp	r3, #4
 800b39c:	d149      	bne.n	800b432 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b39e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f857 	bl	800b460 <UART_WaitOnFlagUntilTimeout>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d03c      	beq.n	800b432 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c0:	e853 3f00 	ldrex	r3, [r3]
 800b3c4:	623b      	str	r3, [r7, #32]
   return(result);
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3de:	e841 2300 	strex	r3, r2, [r1]
 800b3e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1e6      	bne.n	800b3b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3308      	adds	r3, #8
 800b3f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	e853 3f00 	ldrex	r3, [r3]
 800b3f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f023 0301 	bic.w	r3, r3, #1
 800b400:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3308      	adds	r3, #8
 800b408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b40a:	61fa      	str	r2, [r7, #28]
 800b40c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40e:	69b9      	ldr	r1, [r7, #24]
 800b410:	69fa      	ldr	r2, [r7, #28]
 800b412:	e841 2300 	strex	r3, r2, [r1]
 800b416:	617b      	str	r3, [r7, #20]
   return(result);
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1e5      	bne.n	800b3ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2220      	movs	r2, #32
 800b422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b42e:	2303      	movs	r3, #3
 800b430:	e012      	b.n	800b458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2220      	movs	r2, #32
 800b436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3758      	adds	r7, #88	@ 0x58
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	603b      	str	r3, [r7, #0]
 800b46c:	4613      	mov	r3, r2
 800b46e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b470:	e04f      	b.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b478:	d04b      	beq.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b47a:	f7fa fa67 	bl	800594c <HAL_GetTick>
 800b47e:	4602      	mov	r2, r0
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	429a      	cmp	r2, r3
 800b488:	d302      	bcc.n	800b490 <UART_WaitOnFlagUntilTimeout+0x30>
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d101      	bne.n	800b494 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b490:	2303      	movs	r3, #3
 800b492:	e04e      	b.n	800b532 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0304 	and.w	r3, r3, #4
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d037      	beq.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	2b80      	cmp	r3, #128	@ 0x80
 800b4a6:	d034      	beq.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	2b40      	cmp	r3, #64	@ 0x40
 800b4ac:	d031      	beq.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	69db      	ldr	r3, [r3, #28]
 800b4b4:	f003 0308 	and.w	r3, r3, #8
 800b4b8:	2b08      	cmp	r3, #8
 800b4ba:	d110      	bne.n	800b4de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2208      	movs	r2, #8
 800b4c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f000 f920 	bl	800b70a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2208      	movs	r2, #8
 800b4ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e029      	b.n	800b532 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4ec:	d111      	bne.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f000 f906 	bl	800b70a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2220      	movs	r2, #32
 800b502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e00f      	b.n	800b532 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	69da      	ldr	r2, [r3, #28]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	4013      	ands	r3, r2
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	429a      	cmp	r2, r3
 800b520:	bf0c      	ite	eq
 800b522:	2301      	moveq	r3, #1
 800b524:	2300      	movne	r3, #0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	461a      	mov	r2, r3
 800b52a:	79fb      	ldrb	r3, [r7, #7]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d0a0      	beq.n	800b472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
	...

0800b53c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b096      	sub	sp, #88	@ 0x58
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	4613      	mov	r3, r2
 800b548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	88fa      	ldrh	r2, [r7, #6]
 800b554:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2222      	movs	r2, #34	@ 0x22
 800b564:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d02d      	beq.n	800b5ce <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b578:	4a40      	ldr	r2, [pc, #256]	@ (800b67c <UART_Start_Receive_DMA+0x140>)
 800b57a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b582:	4a3f      	ldr	r2, [pc, #252]	@ (800b680 <UART_Start_Receive_DMA+0x144>)
 800b584:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b58c:	4a3d      	ldr	r2, [pc, #244]	@ (800b684 <UART_Start_Receive_DMA+0x148>)
 800b58e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b596:	2200      	movs	r2, #0
 800b598:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3324      	adds	r3, #36	@ 0x24
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	88fb      	ldrh	r3, [r7, #6]
 800b5b0:	f7fa fb90 	bl	8005cd4 <HAL_DMA_Start_IT>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d009      	beq.n	800b5ce <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2210      	movs	r2, #16
 800b5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e051      	b.n	800b672 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d018      	beq.n	800b608 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5de:	e853 3f00 	ldrex	r3, [r3]
 800b5e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5f6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b5fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5fc:	e841 2300 	strex	r3, r2, [r1]
 800b600:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1e6      	bne.n	800b5d6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	3308      	adds	r3, #8
 800b60e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b612:	e853 3f00 	ldrex	r3, [r3]
 800b616:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3308      	adds	r3, #8
 800b626:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b628:	637a      	str	r2, [r7, #52]	@ 0x34
 800b62a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b62e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b630:	e841 2300 	strex	r3, r2, [r1]
 800b634:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1e5      	bne.n	800b608 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3308      	adds	r3, #8
 800b642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	e853 3f00 	ldrex	r3, [r3]
 800b64a:	613b      	str	r3, [r7, #16]
   return(result);
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3308      	adds	r3, #8
 800b65a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b65c:	623a      	str	r2, [r7, #32]
 800b65e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b660:	69f9      	ldr	r1, [r7, #28]
 800b662:	6a3a      	ldr	r2, [r7, #32]
 800b664:	e841 2300 	strex	r3, r2, [r1]
 800b668:	61bb      	str	r3, [r7, #24]
   return(result);
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1e5      	bne.n	800b63c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3758      	adds	r7, #88	@ 0x58
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	0800b895 	.word	0x0800b895
 800b680:	0800b9c9 	.word	0x0800b9c9
 800b684:	0800ba0f 	.word	0x0800ba0f

0800b688 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b688:	b480      	push	{r7}
 800b68a:	b08f      	sub	sp, #60	@ 0x3c
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	e853 3f00 	ldrex	r3, [r3]
 800b69c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b6a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6b0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6b6:	e841 2300 	strex	r3, r2, [r1]
 800b6ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1e6      	bne.n	800b690 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	e853 3f00 	ldrex	r3, [r3]
 800b6d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b6d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	3308      	adds	r3, #8
 800b6e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6e2:	61ba      	str	r2, [r7, #24]
 800b6e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e6:	6979      	ldr	r1, [r7, #20]
 800b6e8:	69ba      	ldr	r2, [r7, #24]
 800b6ea:	e841 2300 	strex	r3, r2, [r1]
 800b6ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1e5      	bne.n	800b6c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2220      	movs	r2, #32
 800b6fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b6fe:	bf00      	nop
 800b700:	373c      	adds	r7, #60	@ 0x3c
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b095      	sub	sp, #84	@ 0x54
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b71a:	e853 3f00 	ldrex	r3, [r3]
 800b71e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b722:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	461a      	mov	r2, r3
 800b72e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b730:	643b      	str	r3, [r7, #64]	@ 0x40
 800b732:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b734:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b736:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b738:	e841 2300 	strex	r3, r2, [r1]
 800b73c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1e6      	bne.n	800b712 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3308      	adds	r3, #8
 800b74a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74c:	6a3b      	ldr	r3, [r7, #32]
 800b74e:	e853 3f00 	ldrex	r3, [r3]
 800b752:	61fb      	str	r3, [r7, #28]
   return(result);
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b75a:	f023 0301 	bic.w	r3, r3, #1
 800b75e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3308      	adds	r3, #8
 800b766:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b768:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b76a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b76e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b770:	e841 2300 	strex	r3, r2, [r1]
 800b774:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1e3      	bne.n	800b744 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b780:	2b01      	cmp	r3, #1
 800b782:	d118      	bne.n	800b7b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	e853 3f00 	ldrex	r3, [r3]
 800b790:	60bb      	str	r3, [r7, #8]
   return(result);
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	f023 0310 	bic.w	r3, r3, #16
 800b798:	647b      	str	r3, [r7, #68]	@ 0x44
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7a2:	61bb      	str	r3, [r7, #24]
 800b7a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a6:	6979      	ldr	r1, [r7, #20]
 800b7a8:	69ba      	ldr	r2, [r7, #24]
 800b7aa:	e841 2300 	strex	r3, r2, [r1]
 800b7ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1e6      	bne.n	800b784 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2220      	movs	r2, #32
 800b7ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b7ca:	bf00      	nop
 800b7cc:	3754      	adds	r7, #84	@ 0x54
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b090      	sub	sp, #64	@ 0x40
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0320 	and.w	r3, r3, #32
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d137      	bne.n	800b862 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b7f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b7fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3308      	adds	r3, #8
 800b800:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b804:	e853 3f00 	ldrex	r3, [r3]
 800b808:	623b      	str	r3, [r7, #32]
   return(result);
 800b80a:	6a3b      	ldr	r3, [r7, #32]
 800b80c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b810:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	3308      	adds	r3, #8
 800b818:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b81a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b81c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b822:	e841 2300 	strex	r3, r2, [r1]
 800b826:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1e5      	bne.n	800b7fa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b82e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	e853 3f00 	ldrex	r3, [r3]
 800b83a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b842:	637b      	str	r3, [r7, #52]	@ 0x34
 800b844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	461a      	mov	r2, r3
 800b84a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b84c:	61fb      	str	r3, [r7, #28]
 800b84e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b850:	69b9      	ldr	r1, [r7, #24]
 800b852:	69fa      	ldr	r2, [r7, #28]
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	617b      	str	r3, [r7, #20]
   return(result);
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e6      	bne.n	800b82e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b860:	e004      	b.n	800b86c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b864:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b868:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b86a:	4798      	blx	r3
}
 800b86c:	bf00      	nop
 800b86e:	3740      	adds	r7, #64	@ 0x40
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b880:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b88c:	bf00      	nop
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b09c      	sub	sp, #112	@ 0x70
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8a0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 0320 	and.w	r3, r3, #32
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d171      	bne.n	800b994 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b8b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8c0:	e853 3f00 	ldrex	r3, [r3]
 800b8c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b8c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b8ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b8d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8de:	e841 2300 	strex	r3, r2, [r1]
 800b8e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1e6      	bne.n	800b8b8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f4:	e853 3f00 	ldrex	r3, [r3]
 800b8f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b8fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8fc:	f023 0301 	bic.w	r3, r3, #1
 800b900:	667b      	str	r3, [r7, #100]	@ 0x64
 800b902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	3308      	adds	r3, #8
 800b908:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b90a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b90c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b912:	e841 2300 	strex	r3, r2, [r1]
 800b916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1e5      	bne.n	800b8ea <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b91e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3308      	adds	r3, #8
 800b924:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b928:	e853 3f00 	ldrex	r3, [r3]
 800b92c:	623b      	str	r3, [r7, #32]
   return(result);
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b934:	663b      	str	r3, [r7, #96]	@ 0x60
 800b936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	3308      	adds	r3, #8
 800b93c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b93e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b946:	e841 2300 	strex	r3, r2, [r1]
 800b94a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e5      	bne.n	800b91e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b954:	2220      	movs	r2, #32
 800b956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b95a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b95c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d118      	bne.n	800b994 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	e853 3f00 	ldrex	r3, [r3]
 800b96e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f023 0310 	bic.w	r3, r3, #16
 800b976:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	461a      	mov	r2, r3
 800b97e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b980:	61fb      	str	r3, [r7, #28]
 800b982:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b984:	69b9      	ldr	r1, [r7, #24]
 800b986:	69fa      	ldr	r2, [r7, #28]
 800b988:	e841 2300 	strex	r3, r2, [r1]
 800b98c:	617b      	str	r3, [r7, #20]
   return(result);
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1e6      	bne.n	800b962 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b996:	2200      	movs	r2, #0
 800b998:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b99a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b99c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d109      	bne.n	800b9b6 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b9a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b9a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b9aa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b9ae:	4611      	mov	r1, r2
 800b9b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b9b2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b9b4:	e004      	b.n	800b9c0 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b9b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b9bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b9be:	4798      	blx	r3
}
 800b9c0:	bf00      	nop
 800b9c2:	3770      	adds	r7, #112	@ 0x70
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d10b      	bne.n	800b9fc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b9f0:	0852      	lsrs	r2, r2, #1
 800b9f2:	b292      	uxth	r2, r2
 800b9f4:	4611      	mov	r1, r2
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b9fa:	e004      	b.n	800ba06 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	4798      	blx	r3
}
 800ba06:	bf00      	nop
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b086      	sub	sp, #24
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba1a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba22:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba2a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba36:	2b80      	cmp	r3, #128	@ 0x80
 800ba38:	d109      	bne.n	800ba4e <UART_DMAError+0x40>
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	2b21      	cmp	r3, #33	@ 0x21
 800ba3e:	d106      	bne.n	800ba4e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ba48:	6978      	ldr	r0, [r7, #20]
 800ba4a:	f7ff fe1d 	bl	800b688 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba58:	2b40      	cmp	r3, #64	@ 0x40
 800ba5a:	d109      	bne.n	800ba70 <UART_DMAError+0x62>
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2b22      	cmp	r3, #34	@ 0x22
 800ba60:	d106      	bne.n	800ba70 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ba6a:	6978      	ldr	r0, [r7, #20]
 800ba6c:	f7ff fe4d 	bl	800b70a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba76:	f043 0210 	orr.w	r2, r3, #16
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ba86:	6978      	ldr	r0, [r7, #20]
 800ba88:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba8a:	bf00      	nop
 800ba8c:	3718      	adds	r7, #24
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800baba:	bf00      	nop
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b088      	sub	sp, #32
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	e853 3f00 	ldrex	r3, [r3]
 800bad6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bade:	61fb      	str	r3, [r7, #28]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	461a      	mov	r2, r3
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	61bb      	str	r3, [r7, #24]
 800baea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baec:	6979      	ldr	r1, [r7, #20]
 800baee:	69ba      	ldr	r2, [r7, #24]
 800baf0:	e841 2300 	strex	r3, r2, [r1]
 800baf4:	613b      	str	r3, [r7, #16]
   return(result);
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1e6      	bne.n	800baca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2220      	movs	r2, #32
 800bb00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb14:	bf00      	nop
 800bb16:	3720      	adds	r7, #32
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bb24:	bf00      	nop
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bb38:	bf00      	nop
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d101      	bne.n	800bb6e <HAL_UARTEx_DisableFifoMode+0x16>
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	e027      	b.n	800bbbe <HAL_UARTEx_DisableFifoMode+0x66>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2201      	movs	r2, #1
 800bb72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2224      	movs	r2, #36	@ 0x24
 800bb7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f022 0201 	bic.w	r2, r2, #1
 800bb94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bb9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2220      	movs	r2, #32
 800bbb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3714      	adds	r7, #20
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b084      	sub	sp, #16
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d101      	bne.n	800bbe2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bbde:	2302      	movs	r3, #2
 800bbe0:	e02d      	b.n	800bc3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2224      	movs	r2, #36	@ 0x24
 800bbee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f022 0201 	bic.w	r2, r2, #1
 800bc08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 f850 	bl	800bcc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2220      	movs	r2, #32
 800bc30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b084      	sub	sp, #16
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d101      	bne.n	800bc5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc5a:	2302      	movs	r3, #2
 800bc5c:	e02d      	b.n	800bcba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2224      	movs	r2, #36	@ 0x24
 800bc6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f022 0201 	bic.w	r2, r2, #1
 800bc84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	683a      	ldr	r2, [r7, #0]
 800bc96:	430a      	orrs	r2, r1
 800bc98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 f812 	bl	800bcc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2220      	movs	r2, #32
 800bcac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
	...

0800bcc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d108      	bne.n	800bce6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bce4:	e031      	b.n	800bd4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bce6:	2308      	movs	r3, #8
 800bce8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bcea:	2308      	movs	r3, #8
 800bcec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	0e5b      	lsrs	r3, r3, #25
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	f003 0307 	and.w	r3, r3, #7
 800bcfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	0f5b      	lsrs	r3, r3, #29
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	f003 0307 	and.w	r3, r3, #7
 800bd0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd0e:	7bbb      	ldrb	r3, [r7, #14]
 800bd10:	7b3a      	ldrb	r2, [r7, #12]
 800bd12:	4911      	ldr	r1, [pc, #68]	@ (800bd58 <UARTEx_SetNbDataToProcess+0x94>)
 800bd14:	5c8a      	ldrb	r2, [r1, r2]
 800bd16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd1a:	7b3a      	ldrb	r2, [r7, #12]
 800bd1c:	490f      	ldr	r1, [pc, #60]	@ (800bd5c <UARTEx_SetNbDataToProcess+0x98>)
 800bd1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd20:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd2c:	7bfb      	ldrb	r3, [r7, #15]
 800bd2e:	7b7a      	ldrb	r2, [r7, #13]
 800bd30:	4909      	ldr	r1, [pc, #36]	@ (800bd58 <UARTEx_SetNbDataToProcess+0x94>)
 800bd32:	5c8a      	ldrb	r2, [r1, r2]
 800bd34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd38:	7b7a      	ldrb	r2, [r7, #13]
 800bd3a:	4908      	ldr	r1, [pc, #32]	@ (800bd5c <UARTEx_SetNbDataToProcess+0x98>)
 800bd3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bd4a:	bf00      	nop
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	0800c198 	.word	0x0800c198
 800bd5c:	0800c1a0 	.word	0x0800c1a0

0800bd60 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	ed93 7a06 	vldr	s14, [r3, #24]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	edd3 7a07 	vldr	s15, [r3, #28]
 800bd76:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	edd3 7a08 	vldr	s15, [r3, #32]
 800bd80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	edd3 7a06 	vldr	s15, [r3, #24]
 800bd90:	eeb1 7a67 	vneg.f32	s14, s15
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	edd3 7a08 	vldr	s15, [r3, #32]
 800bd9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bd9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a1a      	ldr	r2, [r3, #32]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d006      	beq.n	800bdc4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	330c      	adds	r3, #12
 800bdba:	220c      	movs	r2, #12
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 f804 	bl	800bdcc <memset>
  }

}
 800bdc4:	bf00      	nop
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <memset>:
 800bdcc:	4402      	add	r2, r0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d100      	bne.n	800bdd6 <memset+0xa>
 800bdd4:	4770      	bx	lr
 800bdd6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdda:	e7f9      	b.n	800bdd0 <memset+0x4>

0800bddc <__errno>:
 800bddc:	4b01      	ldr	r3, [pc, #4]	@ (800bde4 <__errno+0x8>)
 800bdde:	6818      	ldr	r0, [r3, #0]
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	20000228 	.word	0x20000228

0800bde8 <__libc_init_array>:
 800bde8:	b570      	push	{r4, r5, r6, lr}
 800bdea:	4d0d      	ldr	r5, [pc, #52]	@ (800be20 <__libc_init_array+0x38>)
 800bdec:	4c0d      	ldr	r4, [pc, #52]	@ (800be24 <__libc_init_array+0x3c>)
 800bdee:	1b64      	subs	r4, r4, r5
 800bdf0:	10a4      	asrs	r4, r4, #2
 800bdf2:	2600      	movs	r6, #0
 800bdf4:	42a6      	cmp	r6, r4
 800bdf6:	d109      	bne.n	800be0c <__libc_init_array+0x24>
 800bdf8:	4d0b      	ldr	r5, [pc, #44]	@ (800be28 <__libc_init_array+0x40>)
 800bdfa:	4c0c      	ldr	r4, [pc, #48]	@ (800be2c <__libc_init_array+0x44>)
 800bdfc:	f000 f9a8 	bl	800c150 <_init>
 800be00:	1b64      	subs	r4, r4, r5
 800be02:	10a4      	asrs	r4, r4, #2
 800be04:	2600      	movs	r6, #0
 800be06:	42a6      	cmp	r6, r4
 800be08:	d105      	bne.n	800be16 <__libc_init_array+0x2e>
 800be0a:	bd70      	pop	{r4, r5, r6, pc}
 800be0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be10:	4798      	blx	r3
 800be12:	3601      	adds	r6, #1
 800be14:	e7ee      	b.n	800bdf4 <__libc_init_array+0xc>
 800be16:	f855 3b04 	ldr.w	r3, [r5], #4
 800be1a:	4798      	blx	r3
 800be1c:	3601      	adds	r6, #1
 800be1e:	e7f2      	b.n	800be06 <__libc_init_array+0x1e>
 800be20:	0800c1b0 	.word	0x0800c1b0
 800be24:	0800c1b0 	.word	0x0800c1b0
 800be28:	0800c1b0 	.word	0x0800c1b0
 800be2c:	0800c1b4 	.word	0x0800c1b4

0800be30 <memcpy>:
 800be30:	440a      	add	r2, r1
 800be32:	4291      	cmp	r1, r2
 800be34:	f100 33ff 	add.w	r3, r0, #4294967295
 800be38:	d100      	bne.n	800be3c <memcpy+0xc>
 800be3a:	4770      	bx	lr
 800be3c:	b510      	push	{r4, lr}
 800be3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be46:	4291      	cmp	r1, r2
 800be48:	d1f9      	bne.n	800be3e <memcpy+0xe>
 800be4a:	bd10      	pop	{r4, pc}

0800be4c <sqrt>:
 800be4c:	b538      	push	{r3, r4, r5, lr}
 800be4e:	ed2d 8b02 	vpush	{d8}
 800be52:	ec55 4b10 	vmov	r4, r5, d0
 800be56:	f000 f825 	bl	800bea4 <__ieee754_sqrt>
 800be5a:	4622      	mov	r2, r4
 800be5c:	462b      	mov	r3, r5
 800be5e:	4620      	mov	r0, r4
 800be60:	4629      	mov	r1, r5
 800be62:	eeb0 8a40 	vmov.f32	s16, s0
 800be66:	eef0 8a60 	vmov.f32	s17, s1
 800be6a:	f7f4 fe2b 	bl	8000ac4 <__aeabi_dcmpun>
 800be6e:	b990      	cbnz	r0, 800be96 <sqrt+0x4a>
 800be70:	2200      	movs	r2, #0
 800be72:	2300      	movs	r3, #0
 800be74:	4620      	mov	r0, r4
 800be76:	4629      	mov	r1, r5
 800be78:	f7f4 fdfc 	bl	8000a74 <__aeabi_dcmplt>
 800be7c:	b158      	cbz	r0, 800be96 <sqrt+0x4a>
 800be7e:	f7ff ffad 	bl	800bddc <__errno>
 800be82:	2321      	movs	r3, #33	@ 0x21
 800be84:	6003      	str	r3, [r0, #0]
 800be86:	2200      	movs	r2, #0
 800be88:	2300      	movs	r3, #0
 800be8a:	4610      	mov	r0, r2
 800be8c:	4619      	mov	r1, r3
 800be8e:	f7f4 fca9 	bl	80007e4 <__aeabi_ddiv>
 800be92:	ec41 0b18 	vmov	d8, r0, r1
 800be96:	eeb0 0a48 	vmov.f32	s0, s16
 800be9a:	eef0 0a68 	vmov.f32	s1, s17
 800be9e:	ecbd 8b02 	vpop	{d8}
 800bea2:	bd38      	pop	{r3, r4, r5, pc}

0800bea4 <__ieee754_sqrt>:
 800bea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea8:	4a68      	ldr	r2, [pc, #416]	@ (800c04c <__ieee754_sqrt+0x1a8>)
 800beaa:	ec55 4b10 	vmov	r4, r5, d0
 800beae:	43aa      	bics	r2, r5
 800beb0:	462b      	mov	r3, r5
 800beb2:	4621      	mov	r1, r4
 800beb4:	d110      	bne.n	800bed8 <__ieee754_sqrt+0x34>
 800beb6:	4622      	mov	r2, r4
 800beb8:	4620      	mov	r0, r4
 800beba:	4629      	mov	r1, r5
 800bebc:	f7f4 fb68 	bl	8000590 <__aeabi_dmul>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4620      	mov	r0, r4
 800bec6:	4629      	mov	r1, r5
 800bec8:	f7f4 f9ac 	bl	8000224 <__adddf3>
 800becc:	4604      	mov	r4, r0
 800bece:	460d      	mov	r5, r1
 800bed0:	ec45 4b10 	vmov	d0, r4, r5
 800bed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed8:	2d00      	cmp	r5, #0
 800beda:	dc0e      	bgt.n	800befa <__ieee754_sqrt+0x56>
 800bedc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bee0:	4322      	orrs	r2, r4
 800bee2:	d0f5      	beq.n	800bed0 <__ieee754_sqrt+0x2c>
 800bee4:	b19d      	cbz	r5, 800bf0e <__ieee754_sqrt+0x6a>
 800bee6:	4622      	mov	r2, r4
 800bee8:	4620      	mov	r0, r4
 800beea:	4629      	mov	r1, r5
 800beec:	f7f4 f998 	bl	8000220 <__aeabi_dsub>
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	f7f4 fc76 	bl	80007e4 <__aeabi_ddiv>
 800bef8:	e7e8      	b.n	800becc <__ieee754_sqrt+0x28>
 800befa:	152a      	asrs	r2, r5, #20
 800befc:	d115      	bne.n	800bf2a <__ieee754_sqrt+0x86>
 800befe:	2000      	movs	r0, #0
 800bf00:	e009      	b.n	800bf16 <__ieee754_sqrt+0x72>
 800bf02:	0acb      	lsrs	r3, r1, #11
 800bf04:	3a15      	subs	r2, #21
 800bf06:	0549      	lsls	r1, r1, #21
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d0fa      	beq.n	800bf02 <__ieee754_sqrt+0x5e>
 800bf0c:	e7f7      	b.n	800befe <__ieee754_sqrt+0x5a>
 800bf0e:	462a      	mov	r2, r5
 800bf10:	e7fa      	b.n	800bf08 <__ieee754_sqrt+0x64>
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	3001      	adds	r0, #1
 800bf16:	02dc      	lsls	r4, r3, #11
 800bf18:	d5fb      	bpl.n	800bf12 <__ieee754_sqrt+0x6e>
 800bf1a:	1e44      	subs	r4, r0, #1
 800bf1c:	1b12      	subs	r2, r2, r4
 800bf1e:	f1c0 0420 	rsb	r4, r0, #32
 800bf22:	fa21 f404 	lsr.w	r4, r1, r4
 800bf26:	4323      	orrs	r3, r4
 800bf28:	4081      	lsls	r1, r0
 800bf2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf2e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bf32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf36:	07d2      	lsls	r2, r2, #31
 800bf38:	bf5c      	itt	pl
 800bf3a:	005b      	lslpl	r3, r3, #1
 800bf3c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bf40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf44:	bf58      	it	pl
 800bf46:	0049      	lslpl	r1, r1, #1
 800bf48:	2600      	movs	r6, #0
 800bf4a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bf4e:	106d      	asrs	r5, r5, #1
 800bf50:	0049      	lsls	r1, r1, #1
 800bf52:	2016      	movs	r0, #22
 800bf54:	4632      	mov	r2, r6
 800bf56:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bf5a:	1917      	adds	r7, r2, r4
 800bf5c:	429f      	cmp	r7, r3
 800bf5e:	bfde      	ittt	le
 800bf60:	193a      	addle	r2, r7, r4
 800bf62:	1bdb      	suble	r3, r3, r7
 800bf64:	1936      	addle	r6, r6, r4
 800bf66:	0fcf      	lsrs	r7, r1, #31
 800bf68:	3801      	subs	r0, #1
 800bf6a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bf6e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bf72:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bf76:	d1f0      	bne.n	800bf5a <__ieee754_sqrt+0xb6>
 800bf78:	4604      	mov	r4, r0
 800bf7a:	2720      	movs	r7, #32
 800bf7c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bf80:	429a      	cmp	r2, r3
 800bf82:	eb00 0e0c 	add.w	lr, r0, ip
 800bf86:	db02      	blt.n	800bf8e <__ieee754_sqrt+0xea>
 800bf88:	d113      	bne.n	800bfb2 <__ieee754_sqrt+0x10e>
 800bf8a:	458e      	cmp	lr, r1
 800bf8c:	d811      	bhi.n	800bfb2 <__ieee754_sqrt+0x10e>
 800bf8e:	f1be 0f00 	cmp.w	lr, #0
 800bf92:	eb0e 000c 	add.w	r0, lr, ip
 800bf96:	da42      	bge.n	800c01e <__ieee754_sqrt+0x17a>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	db40      	blt.n	800c01e <__ieee754_sqrt+0x17a>
 800bf9c:	f102 0801 	add.w	r8, r2, #1
 800bfa0:	1a9b      	subs	r3, r3, r2
 800bfa2:	458e      	cmp	lr, r1
 800bfa4:	bf88      	it	hi
 800bfa6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bfaa:	eba1 010e 	sub.w	r1, r1, lr
 800bfae:	4464      	add	r4, ip
 800bfb0:	4642      	mov	r2, r8
 800bfb2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bfb6:	3f01      	subs	r7, #1
 800bfb8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bfbc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bfc0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bfc4:	d1dc      	bne.n	800bf80 <__ieee754_sqrt+0xdc>
 800bfc6:	4319      	orrs	r1, r3
 800bfc8:	d01b      	beq.n	800c002 <__ieee754_sqrt+0x15e>
 800bfca:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c050 <__ieee754_sqrt+0x1ac>
 800bfce:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c054 <__ieee754_sqrt+0x1b0>
 800bfd2:	e9da 0100 	ldrd	r0, r1, [sl]
 800bfd6:	e9db 2300 	ldrd	r2, r3, [fp]
 800bfda:	f7f4 f921 	bl	8000220 <__aeabi_dsub>
 800bfde:	e9da 8900 	ldrd	r8, r9, [sl]
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	4649      	mov	r1, r9
 800bfea:	f7f4 fd4d 	bl	8000a88 <__aeabi_dcmple>
 800bfee:	b140      	cbz	r0, 800c002 <__ieee754_sqrt+0x15e>
 800bff0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bff4:	e9da 0100 	ldrd	r0, r1, [sl]
 800bff8:	e9db 2300 	ldrd	r2, r3, [fp]
 800bffc:	d111      	bne.n	800c022 <__ieee754_sqrt+0x17e>
 800bffe:	3601      	adds	r6, #1
 800c000:	463c      	mov	r4, r7
 800c002:	1072      	asrs	r2, r6, #1
 800c004:	0863      	lsrs	r3, r4, #1
 800c006:	07f1      	lsls	r1, r6, #31
 800c008:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c00c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c010:	bf48      	it	mi
 800c012:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c016:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c01a:	4618      	mov	r0, r3
 800c01c:	e756      	b.n	800becc <__ieee754_sqrt+0x28>
 800c01e:	4690      	mov	r8, r2
 800c020:	e7be      	b.n	800bfa0 <__ieee754_sqrt+0xfc>
 800c022:	f7f4 f8ff 	bl	8000224 <__adddf3>
 800c026:	e9da 8900 	ldrd	r8, r9, [sl]
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	4640      	mov	r0, r8
 800c030:	4649      	mov	r1, r9
 800c032:	f7f4 fd1f 	bl	8000a74 <__aeabi_dcmplt>
 800c036:	b120      	cbz	r0, 800c042 <__ieee754_sqrt+0x19e>
 800c038:	1ca0      	adds	r0, r4, #2
 800c03a:	bf08      	it	eq
 800c03c:	3601      	addeq	r6, #1
 800c03e:	3402      	adds	r4, #2
 800c040:	e7df      	b.n	800c002 <__ieee754_sqrt+0x15e>
 800c042:	1c63      	adds	r3, r4, #1
 800c044:	f023 0401 	bic.w	r4, r3, #1
 800c048:	e7db      	b.n	800c002 <__ieee754_sqrt+0x15e>
 800c04a:	bf00      	nop
 800c04c:	7ff00000 	.word	0x7ff00000
 800c050:	20000280 	.word	0x20000280
 800c054:	20000278 	.word	0x20000278

0800c058 <floor>:
 800c058:	ec51 0b10 	vmov	r0, r1, d0
 800c05c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c064:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c068:	2e13      	cmp	r6, #19
 800c06a:	460c      	mov	r4, r1
 800c06c:	4605      	mov	r5, r0
 800c06e:	4680      	mov	r8, r0
 800c070:	dc34      	bgt.n	800c0dc <floor+0x84>
 800c072:	2e00      	cmp	r6, #0
 800c074:	da17      	bge.n	800c0a6 <floor+0x4e>
 800c076:	a332      	add	r3, pc, #200	@ (adr r3, 800c140 <floor+0xe8>)
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	f7f4 f8d2 	bl	8000224 <__adddf3>
 800c080:	2200      	movs	r2, #0
 800c082:	2300      	movs	r3, #0
 800c084:	f7f4 fd14 	bl	8000ab0 <__aeabi_dcmpgt>
 800c088:	b150      	cbz	r0, 800c0a0 <floor+0x48>
 800c08a:	2c00      	cmp	r4, #0
 800c08c:	da55      	bge.n	800c13a <floor+0xe2>
 800c08e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c092:	432c      	orrs	r4, r5
 800c094:	2500      	movs	r5, #0
 800c096:	42ac      	cmp	r4, r5
 800c098:	4c2b      	ldr	r4, [pc, #172]	@ (800c148 <floor+0xf0>)
 800c09a:	bf08      	it	eq
 800c09c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	e023      	b.n	800c0ee <floor+0x96>
 800c0a6:	4f29      	ldr	r7, [pc, #164]	@ (800c14c <floor+0xf4>)
 800c0a8:	4137      	asrs	r7, r6
 800c0aa:	ea01 0307 	and.w	r3, r1, r7
 800c0ae:	4303      	orrs	r3, r0
 800c0b0:	d01d      	beq.n	800c0ee <floor+0x96>
 800c0b2:	a323      	add	r3, pc, #140	@ (adr r3, 800c140 <floor+0xe8>)
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	f7f4 f8b4 	bl	8000224 <__adddf3>
 800c0bc:	2200      	movs	r2, #0
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f7f4 fcf6 	bl	8000ab0 <__aeabi_dcmpgt>
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d0eb      	beq.n	800c0a0 <floor+0x48>
 800c0c8:	2c00      	cmp	r4, #0
 800c0ca:	bfbe      	ittt	lt
 800c0cc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c0d0:	4133      	asrlt	r3, r6
 800c0d2:	18e4      	addlt	r4, r4, r3
 800c0d4:	ea24 0407 	bic.w	r4, r4, r7
 800c0d8:	2500      	movs	r5, #0
 800c0da:	e7e1      	b.n	800c0a0 <floor+0x48>
 800c0dc:	2e33      	cmp	r6, #51	@ 0x33
 800c0de:	dd0a      	ble.n	800c0f6 <floor+0x9e>
 800c0e0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c0e4:	d103      	bne.n	800c0ee <floor+0x96>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	f7f4 f89b 	bl	8000224 <__adddf3>
 800c0ee:	ec41 0b10 	vmov	d0, r0, r1
 800c0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c0fa:	f04f 37ff 	mov.w	r7, #4294967295
 800c0fe:	40df      	lsrs	r7, r3
 800c100:	4207      	tst	r7, r0
 800c102:	d0f4      	beq.n	800c0ee <floor+0x96>
 800c104:	a30e      	add	r3, pc, #56	@ (adr r3, 800c140 <floor+0xe8>)
 800c106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10a:	f7f4 f88b 	bl	8000224 <__adddf3>
 800c10e:	2200      	movs	r2, #0
 800c110:	2300      	movs	r3, #0
 800c112:	f7f4 fccd 	bl	8000ab0 <__aeabi_dcmpgt>
 800c116:	2800      	cmp	r0, #0
 800c118:	d0c2      	beq.n	800c0a0 <floor+0x48>
 800c11a:	2c00      	cmp	r4, #0
 800c11c:	da0a      	bge.n	800c134 <floor+0xdc>
 800c11e:	2e14      	cmp	r6, #20
 800c120:	d101      	bne.n	800c126 <floor+0xce>
 800c122:	3401      	adds	r4, #1
 800c124:	e006      	b.n	800c134 <floor+0xdc>
 800c126:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c12a:	2301      	movs	r3, #1
 800c12c:	40b3      	lsls	r3, r6
 800c12e:	441d      	add	r5, r3
 800c130:	4545      	cmp	r5, r8
 800c132:	d3f6      	bcc.n	800c122 <floor+0xca>
 800c134:	ea25 0507 	bic.w	r5, r5, r7
 800c138:	e7b2      	b.n	800c0a0 <floor+0x48>
 800c13a:	2500      	movs	r5, #0
 800c13c:	462c      	mov	r4, r5
 800c13e:	e7af      	b.n	800c0a0 <floor+0x48>
 800c140:	8800759c 	.word	0x8800759c
 800c144:	7e37e43c 	.word	0x7e37e43c
 800c148:	bff00000 	.word	0xbff00000
 800c14c:	000fffff 	.word	0x000fffff

0800c150 <_init>:
 800c150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c152:	bf00      	nop
 800c154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c156:	bc08      	pop	{r3}
 800c158:	469e      	mov	lr, r3
 800c15a:	4770      	bx	lr

0800c15c <_fini>:
 800c15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15e:	bf00      	nop
 800c160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c162:	bc08      	pop	{r3}
 800c164:	469e      	mov	lr, r3
 800c166:	4770      	bx	lr
