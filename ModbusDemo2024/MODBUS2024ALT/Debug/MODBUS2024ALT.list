
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af30  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b108  0800b108  0000c108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b148  0800b148  0000d20c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b148  0800b148  0000c148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b150  0800b150  0000d20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b150  0800b150  0000c150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b154  0800b154  0000c154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800b158  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f2c  20000210  0800b364  0000d210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000113c  0800b364  0000e13c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bef5  00000000  00000000  0000d23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358c  00000000  00000000  00029131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  0002c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000119e  00000000  00000000  0002dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a19c  00000000  00000000  0002ef0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8f7  00000000  00000000  000590aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115c97  00000000  00000000  000759a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b638  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062dc  00000000  00000000  0018b67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00191958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b0f0 	.word	0x0800b0f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	0800b0f0 	.word	0x0800b0f0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0201 	orr.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	2000022c 	.word	0x2000022c

08000ed4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <modbus_3t5_Timeout+0x1c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	755a      	strb	r2, [r3, #21]

}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	2000022c 	.word	0x2000022c

08000ef4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f008 fee3 	bl	8009cc8 <HAL_UART_GetError>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b20      	cmp	r3, #32
 8000f06:	d101      	bne.n	8000f0c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f08:	f7ff ffc4 	bl	8000e94 <modbus_1t5_Timeout>

	}
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f1e:	4a25      	ldr	r2, [pc, #148]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f24:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	4a21      	ldr	r2, [pc, #132]	@ (8000fb8 <Modbus_init+0xa4>)
 8000f32:	210e      	movs	r1, #14
 8000f34:	4618      	mov	r0, r3
 8000f36:	f006 ff95 	bl	8007e64 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4618      	mov	r0, r3
 8000f42:	f008 fe6b 	bl	8009c1c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f008 fe82 	bl	8009c54 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <Modbus_init+0xa8>)
 8000f56:	2104      	movs	r1, #4
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f008 f949 	bl	80091f0 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f70:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000f74:	4413      	add	r3, r2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f008 fa71 	bl	8009464 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10c      	bne.n	8000fac <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f92:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f005 fce5 	bl	8006968 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000f9e:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <Modbus_init+0xa0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 f8b0 	bl	800710c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000022c 	.word	0x2000022c
 8000fb8:	08000ed5 	.word	0x08000ed5
 8000fbc:	08000ef5 	.word	0x08000ef5

08000fc0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000fcc:	23ff      	movs	r3, #255	@ 0xff
 8000fce:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000fd0:	23ff      	movs	r3, #255	@ 0xff
 8000fd2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000fd4:	e013      	b.n	8000ffe <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	4053      	eors	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <CRC16+0x64>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4413      	add	r3, r2
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4053      	eors	r3, r2
 8000ff2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8001028 <CRC16+0x68>)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000ffe:	883b      	ldrh	r3, [r7, #0]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	803a      	strh	r2, [r7, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1e6      	bne.n	8000fd6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	b29b      	uxth	r3, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000100 	.word	0x20000100
 8001028:	20000000 	.word	0x20000000

0800102c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001032:	4b7e      	ldr	r3, [pc, #504]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	7ddb      	ldrb	r3, [r3, #23]
 8001038:	3b01      	subs	r3, #1
 800103a:	2b03      	cmp	r3, #3
 800103c:	d80a      	bhi.n	8001054 <Modbus_Protocal_Worker+0x28>
 800103e:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <Modbus_Protocal_Worker+0x18>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	0800105f 	.word	0x0800105f
 8001048:	080011f3 	.word	0x080011f3
 800104c:	080010eb 	.word	0x080010eb
 8001050:	0800112f 	.word	0x0800112f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001054:	4b75      	ldr	r3, [pc, #468]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2201      	movs	r2, #1
 800105a:	75da      	strb	r2, [r3, #23]
		break;
 800105c:	e0e1      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800105e:	4b73      	ldr	r3, [pc, #460]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800106a:	4b70      	ldr	r3, [pc, #448]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2202      	movs	r2, #2
 8001070:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001072:	f000 f9cd 	bl	8001410 <Modbus_Emission>
 8001076:	e018      	b.n	80010aa <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001078:	4b6c      	ldr	r3, [pc, #432]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001082:	4b6a      	ldr	r3, [pc, #424]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800108c:	b29b      	uxth	r3, r3
 800108e:	429a      	cmp	r2, r3
 8001090:	d00b      	beq.n	80010aa <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001092:	4b66      	ldr	r3, [pc, #408]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800109a:	4b64      	ldr	r3, [pc, #400]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010a2:	4b62      	ldr	r3, [pc, #392]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2203      	movs	r2, #3
 80010a8:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010aa:	4b60      	ldr	r3, [pc, #384]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010b4:	2b20      	cmp	r3, #32
 80010b6:	f040 80ad 	bne.w	8001214 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010ba:	4b5c      	ldr	r3, [pc, #368]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80010c4:	4b59      	ldr	r3, [pc, #356]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80010ca:	4b58      	ldr	r3, [pc, #352]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b57      	ldr	r3, [pc, #348]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80010d6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80010da:	4413      	add	r3, r2
 80010dc:	3302      	adds	r3, #2
 80010de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010e2:	4619      	mov	r1, r3
 80010e4:	f008 f9be 	bl	8009464 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80010e8:	e094      	b.n	8001214 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80010ea:	4b50      	ldr	r3, [pc, #320]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	7d1b      	ldrb	r3, [r3, #20]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 8091 	beq.w	8001218 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80010f6:	4b4d      	ldr	r3, [pc, #308]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	22fe      	movs	r2, #254	@ 0xfe
 80010fc:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80010fe:	4b4b      	ldr	r3, [pc, #300]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001108:	4b48      	ldr	r3, [pc, #288]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001118:	4b44      	ldr	r3, [pc, #272]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800111a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800111c:	1a8a      	subs	r2, r1, r2
 800111e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001120:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001124:	4b41      	ldr	r3, [pc, #260]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2204      	movs	r2, #4
 800112a:	75da      	strb	r2, [r3, #23]
		}
		break;
 800112c:	e074      	b.n	8001218 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800112e:	4b3f      	ldr	r3, [pc, #252]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001136:	f113 0f02 	cmn.w	r3, #2
 800113a:	d150      	bne.n	80011de <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800113c:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2200      	movs	r2, #0
 8001142:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001144:	4b39      	ldr	r3, [pc, #228]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800114c:	4b37      	ldr	r3, [pc, #220]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001154:	3b02      	subs	r3, #2
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f7ff ff31 	bl	8000fc0 <CRC16>
 800115e:	4603      	mov	r3, r0
 8001160:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001162:	793a      	ldrb	r2, [r7, #4]
 8001164:	4b31      	ldr	r3, [pc, #196]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001166:	6819      	ldr	r1, [r3, #0]
 8001168:	4b30      	ldr	r3, [pc, #192]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001170:	3b02      	subs	r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001178:	429a      	cmp	r2, r3
 800117a:	d10c      	bne.n	8001196 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800117c:	797a      	ldrb	r2, [r7, #5]
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800118a:	3b01      	subs	r3, #1
 800118c:	440b      	add	r3, r1
 800118e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001192:	429a      	cmp	r2, r3
 8001194:	d004      	beq.n	80011a0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001196:	4b25      	ldr	r3, [pc, #148]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	22ff      	movs	r2, #255	@ 0xff
 800119c:	759a      	strb	r2, [r3, #22]
				break;
 800119e:	e040      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011a0:	4b22      	ldr	r3, [pc, #136]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d113      	bne.n	80011da <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011b2:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80011c2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011cc:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80011ce:	461a      	mov	r2, r3
 80011d0:	f009 ff04 	bl	800afdc <memcpy>

			//execute command
			Modbus_frame_response();
 80011d4:	f000 f904 	bl	80013e0 <Modbus_frame_response>
 80011d8:	e001      	b.n	80011de <Modbus_Protocal_Worker+0x1b2>
				break;
 80011da:	bf00      	nop
					}
		break;


	}
}
 80011dc:	e021      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	7d5b      	ldrb	r3, [r3, #21]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d019      	beq.n	800121c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	75da      	strb	r2, [r3, #23]
		break;
 80011f0:	e014      	b.n	800121c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011fc:	2b20      	cmp	r3, #32
 80011fe:	d10f      	bne.n	8001220 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001200:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	75da      	strb	r2, [r3, #23]
		break;
 8001212:	e005      	b.n	8001220 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001214:	bf00      	nop
 8001216:	e004      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001218:	bf00      	nop
 800121a:	e002      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 800121c:	bf00      	nop
 800121e:	e000      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001220:	bf00      	nop
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000022c 	.word	0x2000022c

08001230 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001236:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	7e5b      	ldrb	r3, [r3, #25]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b29b      	uxth	r3, r3
 8001240:	4a1a      	ldr	r2, [pc, #104]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	7e92      	ldrb	r2, [r2, #26]
 8001246:	4413      	add	r3, r2
 8001248:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800124a:	88fa      	ldrh	r2, [r7, #6]
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <modbusWrite1Register+0x7c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	429a      	cmp	r2, r3
 8001254:	d903      	bls.n	800125e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001256:	2002      	movs	r0, #2
 8001258:	f000 f8a0 	bl	800139c <ModbusErrorReply>
			 return;
 800125c:	e023      	b.n	80012a6 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6859      	ldr	r1, [r3, #4]
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	440b      	add	r3, r1
 800126e:	7ed2      	ldrb	r2, [r2, #27]
 8001270:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	440b      	add	r3, r1
 8001282:	7f12      	ldrb	r2, [r2, #28]
 8001284:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800128e:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001294:	2208      	movs	r2, #8
 8001296:	4619      	mov	r1, r3
 8001298:	f009 fea0 	bl	800afdc <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <modbusWrite1Register+0x7c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000022c 	.word	0x2000022c

080012b0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <modbusRead1Register+0xe8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	7edb      	ldrb	r3, [r3, #27]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4a35      	ldr	r2, [pc, #212]	@ (8001398 <modbusRead1Register+0xe8>)
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	7f12      	ldrb	r2, [r2, #28]
 80012c6:	4413      	add	r3, r2
 80012c8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80012ca:	4b33      	ldr	r3, [pc, #204]	@ (8001398 <modbusRead1Register+0xe8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	7e5b      	ldrb	r3, [r3, #25]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4a30      	ldr	r2, [pc, #192]	@ (8001398 <modbusRead1Register+0xe8>)
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	7e92      	ldrb	r2, [r2, #26]
 80012da:	4413      	add	r3, r2
 80012dc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <modbusRead1Register+0x3a>
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	2b7d      	cmp	r3, #125	@ 0x7d
 80012e8:	d903      	bls.n	80012f2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f000 f856 	bl	800139c <ModbusErrorReply>
		 return;
 80012f0:	e04e      	b.n	8001390 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80012f2:	88ba      	ldrh	r2, [r7, #4]
 80012f4:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <modbusRead1Register+0xe8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d808      	bhi.n	8001310 <modbusRead1Register+0x60>
 80012fe:	88ba      	ldrh	r2, [r7, #4]
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	4413      	add	r3, r2
 8001304:	461a      	mov	r2, r3
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <modbusRead1Register+0xe8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	429a      	cmp	r2, r3
 800130e:	d903      	bls.n	8001318 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001310:	2002      	movs	r0, #2
 8001312:	f000 f843 	bl	800139c <ModbusErrorReply>
		 return;
 8001316:	e03b      	b.n	8001390 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001318:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <modbusRead1Register+0xe8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2203      	movs	r2, #3
 800131e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <modbusRead1Register+0xe8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	0052      	lsls	r2, r2, #1
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001332:	2400      	movs	r4, #0
 8001334:	e020      	b.n	8001378 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <modbusRead1Register+0xe8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	4423      	add	r3, r4
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	18d1      	adds	r1, r2, r3
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <modbusRead1Register+0xe8>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	1c63      	adds	r3, r4, #1
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	7849      	ldrb	r1, [r1, #1]
 800134e:	4413      	add	r3, r2
 8001350:	460a      	mov	r2, r1
 8001352:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <modbusRead1Register+0xe8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	4423      	add	r3, r4
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	18d1      	adds	r1, r2, r3
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <modbusRead1Register+0xe8>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	0063      	lsls	r3, r4, #1
 800136a:	3303      	adds	r3, #3
 800136c:	7809      	ldrb	r1, [r1, #0]
 800136e:	4413      	add	r3, r2
 8001370:	460a      	mov	r2, r1
 8001372:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001376:	3401      	adds	r4, #1
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	429c      	cmp	r4, r3
 800137c:	dbdb      	blt.n	8001336 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	3301      	adds	r3, #1
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <modbusRead1Register+0xe8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0052      	lsls	r2, r2, #1
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bd90      	pop	{r4, r7, pc}
 8001396:	bf00      	nop
 8001398:	2000022c 	.word	0x2000022c

0800139c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <ModbusErrorReply+0x40>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	7e1a      	ldrb	r2, [r3, #24]
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <ModbusErrorReply+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <ModbusErrorReply+0x40>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <ModbusErrorReply+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2202      	movs	r2, #2
 80013ca:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2000022c 	.word	0x2000022c

080013e0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <Modbus_frame_response+0x2c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	7e1b      	ldrb	r3, [r3, #24]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d004      	beq.n	80013f8 <Modbus_frame_response+0x18>
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d105      	bne.n	80013fe <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80013f2:	f7ff ff1d 	bl	8001230 <modbusWrite1Register>
		break;
 80013f6:	e006      	b.n	8001406 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80013f8:	f7ff ff5a 	bl	80012b0 <modbusRead1Register>
		break;
 80013fc:	e003      	b.n	8001406 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff ffcc 	bl	800139c <ModbusErrorReply>
		break;
 8001404:	bf00      	nop

	}
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000022c 	.word	0x2000022c

08001410 <Modbus_Emission>:

void Modbus_Emission()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001416:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001420:	2b20      	cmp	r3, #32
 8001422:	d15d      	bne.n	80014e0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001424:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b33      	ldr	r3, [pc, #204]	@ (80014f8 <Modbus_Emission+0xe8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001432:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800143a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <Modbus_Emission+0xe8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800144c:	461a      	mov	r2, r3
 800144e:	f009 fdc5 	bl	800afdc <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800145a:	461a      	mov	r2, r3
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <Modbus_Emission+0xe8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3203      	adds	r2, #3
 8001462:	b292      	uxth	r2, r2
 8001464:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <Modbus_Emission+0xe8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001470:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001478:	3b02      	subs	r3, #2
 800147a:	4619      	mov	r1, r3
 800147c:	4610      	mov	r0, r2
 800147e:	f7ff fd9f 	bl	8000fc0 <CRC16>
 8001482:	4603      	mov	r3, r0
 8001484:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <Modbus_Emission+0xe8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001492:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001494:	7939      	ldrb	r1, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	460a      	mov	r2, r1
 800149a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014aa:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014ac:	7979      	ldrb	r1, [r7, #5]
 80014ae:	4413      	add	r3, r2
 80014b0:	460a      	mov	r2, r1
 80014b2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	d10d      	bne.n	80014e0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80014d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014da:	461a      	mov	r2, r3
 80014dc:	f007 ff42 	bl	8009364 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	755a      	strb	r2, [r3, #21]

}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000022c 	.word	0x2000022c
 80014fc:	00000000 	.word	0x00000000

08001500 <sendall>:
 *      Author: Phatt
 */
#include "globalVar.h"
#include "math.h"

void sendall(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	// Movement Status
//	registerFrame[0x03].U16 = 0;
	// Movement Actual Status
//	registerFrame[0x04].U16 = 0;
	// z-axis Moving Status
	registerFrame[0x10].U16 = zMovingStatus;
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <sendall+0x80>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <sendall+0x84>)
 800150c:	841a      	strh	r2, [r3, #32]
	// z-axis Actual Position
	registerFrame[0x11].U16 = floor((linearPos * 1000000))/100000;
 800150e:	4b1e      	ldr	r3, [pc, #120]	@ (8001588 <sendall+0x88>)
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800158c <sendall+0x8c>
 8001518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151c:	ee17 0a90 	vmov	r0, s15
 8001520:	f7fe ffde 	bl	80004e0 <__aeabi_f2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	ec43 2b10 	vmov	d0, r2, r3
 800152c:	f009 fd64 	bl	800aff8 <floor>
 8001530:	ec51 0b10 	vmov	r0, r1, d0
 8001534:	a310      	add	r3, pc, #64	@ (adr r3, 8001578 <sendall+0x78>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7ff f953 	bl	80007e4 <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fabd 	bl	8000ac4 <__aeabi_d2uiz>
 800154a:	4603      	mov	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <sendall+0x84>)
 8001550:	845a      	strh	r2, [r3, #34]	@ 0x22
	// z-axis Actual Speed
	registerFrame[0x12].U16 = 0;
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <sendall+0x84>)
 8001554:	2200      	movs	r2, #0
 8001556:	849a      	strh	r2, [r3, #36]	@ 0x24
	// z-axis Actual Acceleration
	registerFrame[0x13].U16 = 0;
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <sendall+0x84>)
 800155a:	2200      	movs	r2, #0
 800155c:	84da      	strh	r2, [r3, #38]	@ 0x26
	// 5th shelves position
//	registerFrame[0x27].U16 = 0;
	// Goal point z
//	registerFrame[0x30].U16 = 0;
	//x-axis Actual position
	registerFrame[0x40].U16 = (xAxisPosition * 10);
 800155e:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <sendall+0x90>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	4413      	add	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <sendall+0x84>)
 8001570:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	00000000 	.word	0x00000000
 800157c:	40f86a00 	.word	0x40f86a00
 8001580:	200003c4 	.word	0x200003c4
 8001584:	20000230 	.word	0x20000230
 8001588:	200003e0 	.word	0x200003e0
 800158c:	49742400 	.word	0x49742400
 8001590:	200003c8 	.word	0x200003c8

08001594 <watch_mode>:

void call_all_mode(){
	do_home();
}

void watch_mode(){
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 == 1){
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <watch_mode+0x34>)
 800159a:	885b      	ldrh	r3, [r3, #2]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d00a      	beq.n	80015b6 <watch_mode+0x22>

	}
	else if(registerFrame[0x01].U16 == 2){
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <watch_mode+0x34>)
 80015a2:	885b      	ldrh	r3, [r3, #2]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d103      	bne.n	80015b0 <watch_mode+0x1c>
		modeSelection = 1;
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <watch_mode+0x38>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	e002      	b.n	80015b6 <watch_mode+0x22>
	}
	else if(registerFrame[0x01].U16 == 4){
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <watch_mode+0x34>)
 80015b2:	885b      	ldrh	r3, [r3, #2]
 80015b4:	2b04      	cmp	r3, #4

	}
	else if(registerFrame[0x01].U16 == 8){
//		run_point_mode();
	}
	if(modeSelection == 1){
 80015b6:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <watch_mode+0x38>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <watch_mode+0x2e>
		do_home();
 80015be:	f000 f807 	bl	80015d0 <do_home>
	}
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000230 	.word	0x20000230
 80015cc:	200003c0 	.word	0x200003c0

080015d0 <do_home>:

void do_home(){
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	//set base status to 0 (default)
	registerFrame[0x01].U16 = 0;
 80015d4:	4b23      	ldr	r3, [pc, #140]	@ (8001664 <do_home+0x94>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	805a      	strh	r2, [r3, #2]
	//set moving status to home
	zMovingStatus = 2;
 80015da:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <do_home+0x98>)
 80015dc:	2202      	movs	r2, #2
 80015de:	601a      	str	r2, [r3, #0]
	//Homing
	if(ADC_RawRead[0] < 4090){
 80015e0:	4b22      	ldr	r3, [pc, #136]	@ (800166c <do_home+0x9c>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	f640 72f9 	movw	r2, #4089	@ 0xff9
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d810      	bhi.n	800160e <do_home+0x3e>
		//when finished turn moving status to 0
		motorDirection = -1;
 80015ec:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <do_home+0xa0>)
 80015ee:	22ff      	movs	r2, #255	@ 0xff
 80015f0:	701a      	strb	r2, [r3, #0]
		thispwm = 14000;
 80015f2:	4920      	ldr	r1, [pc, #128]	@ (8001674 <do_home+0xa4>)
 80015f4:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9c1 2300 	strd	r2, r3, [r1]
		motor_run(thispwm, 2);
 8001600:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <do_home+0xa4>)
 8001602:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001606:	2202      	movs	r2, #2
 8001608:	f001 f810 	bl	800262c <motor_run>
		modeSelection = 0;
		QEIReadRaw = 0;
		home_trigger = 1;
		home_timeStamp = HAL_GetTick() + 500;
	}
}
 800160c:	e027      	b.n	800165e <do_home+0x8e>
	else if(ADC_RawRead[0] > 4090){
 800160e:	4b17      	ldr	r3, [pc, #92]	@ (800166c <do_home+0x9c>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	f640 72fa 	movw	r2, #4090	@ 0xffa
 8001616:	4293      	cmp	r3, r2
 8001618:	d921      	bls.n	800165e <do_home+0x8e>
		thispwm = 0;
 800161a:	4916      	ldr	r1, [pc, #88]	@ (8001674 <do_home+0xa4>)
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	e9c1 2300 	strd	r2, r3, [r1]
		zMovingStatus = 0;
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <do_home+0x98>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
		modeSelection = 0;
 800162e:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <do_home+0xa8>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
		QEIReadRaw = 0;
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <do_home+0xac>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
		home_trigger = 1;
 800163a:	4911      	ldr	r1, [pc, #68]	@ (8001680 <do_home+0xb0>)
 800163c:	f04f 0201 	mov.w	r2, #1
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9c1 2300 	strd	r2, r3, [r1]
		home_timeStamp = HAL_GetTick() + 500;
 8001648:	f001 fdf8 	bl	800323c <HAL_GetTick>
 800164c:	4603      	mov	r3, r0
 800164e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001652:	2200      	movs	r2, #0
 8001654:	461c      	mov	r4, r3
 8001656:	4615      	mov	r5, r2
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <do_home+0xb4>)
 800165a:	e9c3 4500 	strd	r4, r5, [r3]
}
 800165e:	bf00      	nop
 8001660:	bdb0      	pop	{r4, r5, r7, pc}
 8001662:	bf00      	nop
 8001664:	20000230 	.word	0x20000230
 8001668:	200003c4 	.word	0x200003c4
 800166c:	20000470 	.word	0x20000470
 8001670:	20000408 	.word	0x20000408
 8001674:	20000400 	.word	0x20000400
 8001678:	200003c0 	.word	0x200003c0
 800167c:	200003cc 	.word	0x200003cc
 8001680:	20000418 	.word	0x20000418
 8001684:	20000410 	.word	0x20000410

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b08c      	sub	sp, #48	@ 0x30
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168e:	f001 fd70 	bl	8003172 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001692:	f000 f917 	bl	80018c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001696:	f000 fdf7 	bl	8002288 <MX_GPIO_Init>
  MX_DMA_Init();
 800169a:	f000 fdbb 	bl	8002214 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800169e:	f000 fd6b 	bl	8002178 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80016a2:	f000 fc7b 	bl	8001f9c <MX_TIM16_Init>
  MX_TIM2_Init();
 80016a6:	f000 fa9f 	bl	8001be8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80016aa:	f000 fb63 	bl	8001d74 <MX_TIM4_Init>
  MX_TIM3_Init();
 80016ae:	f000 fae9 	bl	8001c84 <MX_TIM3_Init>
  MX_TIM1_Init();
 80016b2:	f000 f9db 	bl	8001a6c <MX_TIM1_Init>
  MX_ADC1_Init();
 80016b6:	f000 f951 	bl	800195c <MX_ADC1_Init>
  MX_TIM8_Init();
 80016ba:	f000 fbb1 	bl	8001e20 <MX_TIM8_Init>
  MX_TIM20_Init();
 80016be:	f000 fc9d 	bl	8001ffc <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 80016c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001874 <main+0x1ec>)
 80016c4:	4a6c      	ldr	r2, [pc, #432]	@ (8001878 <main+0x1f0>)
 80016c6:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80016c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001874 <main+0x1ec>)
 80016ca:	4a6c      	ldr	r2, [pc, #432]	@ (800187c <main+0x1f4>)
 80016cc:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016ce:	4b69      	ldr	r3, [pc, #420]	@ (8001874 <main+0x1ec>)
 80016d0:	2215      	movs	r2, #21
 80016d2:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 200;
 80016d4:	4b67      	ldr	r3, [pc, #412]	@ (8001874 <main+0x1ec>)
 80016d6:	22c8      	movs	r2, #200	@ 0xc8
 80016d8:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80016da:	4969      	ldr	r1, [pc, #420]	@ (8001880 <main+0x1f8>)
 80016dc:	4865      	ldr	r0, [pc, #404]	@ (8001874 <main+0x1ec>)
 80016de:	f7ff fc19 	bl	8000f14 <Modbus_init>

  HAL_TIM_Base_Start_IT(&htim2);
 80016e2:	4868      	ldr	r0, [pc, #416]	@ (8001884 <main+0x1fc>)
 80016e4:	f005 f940 	bl	8006968 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim3);
 80016e8:	4867      	ldr	r0, [pc, #412]	@ (8001888 <main+0x200>)
 80016ea:	f005 f8cd 	bl	8006888 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016ee:	2100      	movs	r1, #0
 80016f0:	4865      	ldr	r0, [pc, #404]	@ (8001888 <main+0x200>)
 80016f2:	f005 fa1f 	bl	8006b34 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 80016f6:	213c      	movs	r1, #60	@ 0x3c
 80016f8:	4864      	ldr	r0, [pc, #400]	@ (800188c <main+0x204>)
 80016fa:	f005 fe49 	bl	8007390 <HAL_TIM_Encoder_Start>

  arm_pid_instance_f32 PID = {0};
 80016fe:	463b      	mov	r3, r7
 8001700:	2224      	movs	r2, #36	@ 0x24
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f009 fc3d 	bl	800af84 <memset>
  PID.Kp = 0.4;
 800170a:	4b61      	ldr	r3, [pc, #388]	@ (8001890 <main+0x208>)
 800170c:	61bb      	str	r3, [r7, #24]
  PID.Ki = 0.0001;
 800170e:	4b61      	ldr	r3, [pc, #388]	@ (8001894 <main+0x20c>)
 8001710:	61fb      	str	r3, [r7, #28]
  PID.Kd = 0;
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  arm_pid_init_f32(&PID, 0);
 8001718:	463b      	mov	r3, r7
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f009 fbfb 	bl	800af18 <arm_pid_init_f32>

  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001722:	2100      	movs	r1, #0
 8001724:	485c      	ldr	r0, [pc, #368]	@ (8001898 <main+0x210>)
 8001726:	f005 fb85 	bl	8006e34 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 800172a:	2104      	movs	r1, #4
 800172c:	485a      	ldr	r0, [pc, #360]	@ (8001898 <main+0x210>)
 800172e:	f005 fb81 	bl	8006e34 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_3);
 8001732:	2108      	movs	r1, #8
 8001734:	4858      	ldr	r0, [pc, #352]	@ (8001898 <main+0x210>)
 8001736:	f005 fb7d 	bl	8006e34 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_4);
 800173a:	210c      	movs	r1, #12
 800173c:	4856      	ldr	r0, [pc, #344]	@ (8001898 <main+0x210>)
 800173e:	f005 fb79 	bl	8006e34 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 8001742:	2100      	movs	r1, #0
 8001744:	4855      	ldr	r0, [pc, #340]	@ (800189c <main+0x214>)
 8001746:	f005 fb75 	bl	8006e34 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 800174a:	2104      	movs	r1, #4
 800174c:	4853      	ldr	r0, [pc, #332]	@ (800189c <main+0x214>)
 800174e:	f005 fb71 	bl	8006e34 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_3);
 8001752:	2108      	movs	r1, #8
 8001754:	4851      	ldr	r0, [pc, #324]	@ (800189c <main+0x214>)
 8001756:	f005 fb6d 	bl	8006e34 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_4);
 800175a:	210c      	movs	r1, #12
 800175c:	484f      	ldr	r0, [pc, #316]	@ (800189c <main+0x214>)
 800175e:	f005 fb69 	bl	8006e34 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_1);
 8001762:	2100      	movs	r1, #0
 8001764:	484e      	ldr	r0, [pc, #312]	@ (80018a0 <main+0x218>)
 8001766:	f005 fb65 	bl	8006e34 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_2);
 800176a:	2104      	movs	r1, #4
 800176c:	484c      	ldr	r0, [pc, #304]	@ (80018a0 <main+0x218>)
 800176e:	f005 fb61 	bl	8006e34 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_3);
 8001772:	2108      	movs	r1, #8
 8001774:	484a      	ldr	r0, [pc, #296]	@ (80018a0 <main+0x218>)
 8001776:	f005 fb5d 	bl	8006e34 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_4);
 800177a:	210c      	movs	r1, #12
 800177c:	4848      	ldr	r0, [pc, #288]	@ (80018a0 <main+0x218>)
 800177e:	f005 fb59 	bl	8006e34 <HAL_TIM_IC_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001782:	217f      	movs	r1, #127	@ 0x7f
 8001784:	4847      	ldr	r0, [pc, #284]	@ (80018a4 <main+0x21c>)
 8001786:	f003 f873 	bl	8004870 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 2);
 800178a:	2202      	movs	r2, #2
 800178c:	4946      	ldr	r1, [pc, #280]	@ (80018a8 <main+0x220>)
 800178e:	4845      	ldr	r0, [pc, #276]	@ (80018a4 <main+0x21c>)
 8001790:	f002 f960 	bl	8003a54 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
 8001794:	4b3d      	ldr	r3, [pc, #244]	@ (800188c <main+0x204>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179a:	4a44      	ldr	r2, [pc, #272]	@ (80018ac <main+0x224>)
 800179c:	6013      	str	r3, [r2, #0]
	  Vfeedback = arm_pid_f32(&PID, err);
 800179e:	4b44      	ldr	r3, [pc, #272]	@ (80018b0 <main+0x228>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff f9ac 	bl	8000b04 <__aeabi_d2f>
 80017ac:	4602      	mov	r2, r0
 80017ae:	463b      	mov	r3, r7
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017b2:	62ba      	str	r2, [r7, #40]	@ 0x28
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80017b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b6:	ed93 7a00 	vldr	s14, [r3]
 80017ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017be:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80017c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80017c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80017ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80017d2:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80017d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80017dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017de:	edd3 7a04 	vldr	s15, [r3, #16]
 80017e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ec:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80017f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    /* Update state */
    S->state[1] = S->state[0];
 80017f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fe:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001804:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe66 	bl	80004e0 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4926      	ldr	r1, [pc, #152]	@ (80018b4 <main+0x22c>)
 800181a:	e9c1 2300 	strd	r2, r3, [r1]

	  Modbus_Protocal_Worker();
 800181e:	f7ff fc05 	bl	800102c <Modbus_Protocal_Worker>
	  is_motor_should_run();
 8001822:	f000 ffe9 	bl	80027f8 <is_motor_should_run>
	  init_motor_cal();
 8001826:	f000 ff72 	bl	800270e <init_motor_cal>
	  remote_recieve();
 800182a:	f000 fddd 	bl	80023e8 <remote_recieve>
	  watch_mode();
 800182e:	f7ff feb1 	bl	8001594 <watch_mode>

	  if(home_trigger == 1){
 8001832:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <main+0x230>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	1e51      	subs	r1, r2, #1
 800183a:	430b      	orrs	r3, r1
 800183c:	d1aa      	bne.n	8001794 <main+0x10c>
		  if(home_timeStamp < HAL_GetTick()){
 800183e:	f001 fcfd 	bl	800323c <HAL_GetTick>
 8001842:	4603      	mov	r3, r0
 8001844:	2200      	movs	r2, #0
 8001846:	461c      	mov	r4, r3
 8001848:	4615      	mov	r5, r2
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <main+0x234>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	42a2      	cmp	r2, r4
 8001852:	41ab      	sbcs	r3, r5
 8001854:	d29e      	bcs.n	8001794 <main+0x10c>
			  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001856:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <main+0x204>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24
			  home_trigger = 0;
 800185e:	4916      	ldr	r1, [pc, #88]	@ (80018b8 <main+0x230>)
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e9c1 2300 	strd	r2, r3, [r1]
			  xAxisPosition = 0;
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <main+0x238>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
 8001872:	e78f      	b.n	8001794 <main+0x10c>
 8001874:	20000c60 	.word	0x20000c60
 8001878:	20000ad4 	.word	0x20000ad4
 800187c:	2000093c 	.word	0x2000093c
 8001880:	20000230 	.word	0x20000230
 8001884:	2000060c 	.word	0x2000060c
 8001888:	200006d8 	.word	0x200006d8
 800188c:	200007a4 	.word	0x200007a4
 8001890:	3ecccccd 	.word	0x3ecccccd
 8001894:	38d1b717 	.word	0x38d1b717
 8001898:	20000540 	.word	0x20000540
 800189c:	20000870 	.word	0x20000870
 80018a0:	20000a08 	.word	0x20000a08
 80018a4:	20000474 	.word	0x20000474
 80018a8:	20000470 	.word	0x20000470
 80018ac:	200003cc 	.word	0x200003cc
 80018b0:	200003e8 	.word	0x200003e8
 80018b4:	200003f0 	.word	0x200003f0
 80018b8:	20000418 	.word	0x20000418
 80018bc:	20000410 	.word	0x20000410
 80018c0:	200003c8 	.word	0x200003c8

080018c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b094      	sub	sp, #80	@ 0x50
 80018c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ca:	f107 0318 	add.w	r3, r7, #24
 80018ce:	2238      	movs	r2, #56	@ 0x38
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f009 fb56 	bl	800af84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f003 ff3a 	bl	8005760 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f6:	2340      	movs	r3, #64	@ 0x40
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fa:	2302      	movs	r3, #2
 80018fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018fe:	2302      	movs	r3, #2
 8001900:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001902:	2304      	movs	r3, #4
 8001904:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001906:	2355      	movs	r3, #85	@ 0x55
 8001908:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800190a:	2302      	movs	r3, #2
 800190c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800190e:	2302      	movs	r3, #2
 8001910:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001912:	2302      	movs	r3, #2
 8001914:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001916:	f107 0318 	add.w	r3, r7, #24
 800191a:	4618      	mov	r0, r3
 800191c:	f003 ffd4 	bl	80058c8 <HAL_RCC_OscConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001926:	f000 feec 	bl	8002702 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192a:	230f      	movs	r3, #15
 800192c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192e:	2303      	movs	r3, #3
 8001930:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2104      	movs	r1, #4
 8001942:	4618      	mov	r0, r3
 8001944:	f004 fad2 	bl	8005eec <HAL_RCC_ClockConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800194e:	f000 fed8 	bl	8002702 <Error_Handler>
  }
}
 8001952:	bf00      	nop
 8001954:	3750      	adds	r7, #80	@ 0x50
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	@ 0x30
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2220      	movs	r2, #32
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f009 fb05 	bl	800af84 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <MX_ADC1_Init+0x104>)
 800197c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001980:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001982:	4b37      	ldr	r3, [pc, #220]	@ (8001a60 <MX_ADC1_Init+0x104>)
 8001984:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001988:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800198a:	4b35      	ldr	r3, [pc, #212]	@ (8001a60 <MX_ADC1_Init+0x104>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001990:	4b33      	ldr	r3, [pc, #204]	@ (8001a60 <MX_ADC1_Init+0x104>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001996:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <MX_ADC1_Init+0x104>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800199c:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <MX_ADC1_Init+0x104>)
 800199e:	2201      	movs	r2, #1
 80019a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a60 <MX_ADC1_Init+0x104>)
 80019a4:	2204      	movs	r2, #4
 80019a6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <MX_ADC1_Init+0x104>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001a60 <MX_ADC1_Init+0x104>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80019b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <MX_ADC1_Init+0x104>)
 80019b6:	2202      	movs	r2, #2
 80019b8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ba:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <MX_ADC1_Init+0x104>)
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019c2:	4b27      	ldr	r3, [pc, #156]	@ (8001a60 <MX_ADC1_Init+0x104>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019c8:	4b25      	ldr	r3, [pc, #148]	@ (8001a60 <MX_ADC1_Init+0x104>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019ce:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <MX_ADC1_Init+0x104>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019d6:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <MX_ADC1_Init+0x104>)
 80019d8:	2200      	movs	r2, #0
 80019da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80019dc:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <MX_ADC1_Init+0x104>)
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019e4:	481e      	ldr	r0, [pc, #120]	@ (8001a60 <MX_ADC1_Init+0x104>)
 80019e6:	f001 fe79 	bl	80036dc <HAL_ADC_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80019f0:	f000 fe87 	bl	8002702 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019fc:	4619      	mov	r1, r3
 80019fe:	4818      	ldr	r0, [pc, #96]	@ (8001a60 <MX_ADC1_Init+0x104>)
 8001a00:	f002 ff98 	bl	8004934 <HAL_ADCEx_MultiModeConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a0a:	f000 fe7a 	bl	8002702 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <MX_ADC1_Init+0x108>)
 8001a10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a12:	2306      	movs	r3, #6
 8001a14:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001a16:	2307      	movs	r3, #7
 8001a18:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a1a:	237f      	movs	r3, #127	@ 0x7f
 8001a1c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480d      	ldr	r0, [pc, #52]	@ (8001a60 <MX_ADC1_Init+0x104>)
 8001a2c:	f002 f904 	bl	8003c38 <HAL_ADC_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001a36:	f000 fe64 	bl	8002702 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <MX_ADC1_Init+0x10c>)
 8001a3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a3e:	230c      	movs	r3, #12
 8001a40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	@ (8001a60 <MX_ADC1_Init+0x104>)
 8001a48:	f002 f8f6 	bl	8003c38 <HAL_ADC_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001a52:	f000 fe56 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	3730      	adds	r7, #48	@ 0x30
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000474 	.word	0x20000474
 8001a64:	04300002 	.word	0x04300002
 8001a68:	08600004 	.word	0x08600004

08001a6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b090      	sub	sp, #64	@ 0x40
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001aaa:	4a4e      	ldr	r2, [pc, #312]	@ (8001be4 <MX_TIM1_Init+0x178>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001aae:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001ab0:	22a9      	movs	r2, #169	@ 0xa9
 8001ab2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001aba:	4b49      	ldr	r3, [pc, #292]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001abc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001ac0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b47      	ldr	r3, [pc, #284]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ac8:	4b45      	ldr	r3, [pc, #276]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	4b44      	ldr	r3, [pc, #272]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ad4:	4842      	ldr	r0, [pc, #264]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001ad6:	f004 fe73 	bl	80067c0 <HAL_TIM_Base_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001ae0:	f000 fe0f 	bl	8002702 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aee:	4619      	mov	r1, r3
 8001af0:	483b      	ldr	r0, [pc, #236]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001af2:	f006 f805 	bl	8007b00 <HAL_TIM_ConfigClockSource>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001afc:	f000 fe01 	bl	8002702 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001b00:	4837      	ldr	r0, [pc, #220]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001b02:	f005 f929 	bl	8006d58 <HAL_TIM_IC_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001b0c:	f000 fdf9 	bl	8002702 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b10:	2304      	movs	r3, #4
 8001b12:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b14:	2350      	movs	r3, #80	@ 0x50
 8001b16:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001b20:	f107 031c 	add.w	r3, r7, #28
 8001b24:	4619      	mov	r1, r3
 8001b26:	482e      	ldr	r0, [pc, #184]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001b28:	f006 f900 	bl	8007d2c <HAL_TIM_SlaveConfigSynchro>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001b32:	f000 fde6 	bl	8002702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4619      	mov	r1, r3
 8001b48:	4825      	ldr	r0, [pc, #148]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001b4a:	f007 fa0b 	bl	8008f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001b54:	f000 fdd5 	bl	8002702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	481c      	ldr	r0, [pc, #112]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001b70:	f005 fe15 	bl	800779e <HAL_TIM_IC_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001b7a:	f000 fdc2 	bl	8002702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b82:	2302      	movs	r3, #2
 8001b84:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b86:	463b      	mov	r3, r7
 8001b88:	2204      	movs	r2, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4814      	ldr	r0, [pc, #80]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001b8e:	f005 fe06 	bl	800779e <HAL_TIM_IC_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001b98:	f000 fdb3 	bl	8002702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001bac:	f005 fdf7 	bl	800779e <HAL_TIM_IC_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001bb6:	f000 fda4 	bl	8002702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	220c      	movs	r2, #12
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4805      	ldr	r0, [pc, #20]	@ (8001be0 <MX_TIM1_Init+0x174>)
 8001bca:	f005 fde8 	bl	800779e <HAL_TIM_IC_ConfigChannel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001bd4:	f000 fd95 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	3740      	adds	r7, #64	@ 0x40
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000540 	.word	0x20000540
 8001be4:	40012c00 	.word	0x40012c00

08001be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bee:	f107 0310 	add.w	r3, r7, #16
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <MX_TIM2_Init+0x98>)
 8001c08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <MX_TIM2_Init+0x98>)
 8001c10:	22a9      	movs	r2, #169	@ 0xa9
 8001c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <MX_TIM2_Init+0x98>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <MX_TIM2_Init+0x98>)
 8001c1c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <MX_TIM2_Init+0x98>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c28:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <MX_TIM2_Init+0x98>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c2e:	4814      	ldr	r0, [pc, #80]	@ (8001c80 <MX_TIM2_Init+0x98>)
 8001c30:	f004 fdc6 	bl	80067c0 <HAL_TIM_Base_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c3a:	f000 fd62 	bl	8002702 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480d      	ldr	r0, [pc, #52]	@ (8001c80 <MX_TIM2_Init+0x98>)
 8001c4c:	f005 ff58 	bl	8007b00 <HAL_TIM_ConfigClockSource>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c56:	f000 fd54 	bl	8002702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4806      	ldr	r0, [pc, #24]	@ (8001c80 <MX_TIM2_Init+0x98>)
 8001c68:	f007 f97c 	bl	8008f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c72:	f000 fd46 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000060c 	.word	0x2000060c

08001c84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08e      	sub	sp, #56	@ 0x38
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]
 8001cb2:	615a      	str	r2, [r3, #20]
 8001cb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d6c <MX_TIM3_Init+0xe8>)
 8001cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8001d70 <MX_TIM3_Init+0xec>)
 8001cba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <MX_TIM3_Init+0xe8>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <MX_TIM3_Init+0xe8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <MX_TIM3_Init+0xe8>)
 8001cca:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001cce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd0:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <MX_TIM3_Init+0xe8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd6:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <MX_TIM3_Init+0xe8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cdc:	4823      	ldr	r0, [pc, #140]	@ (8001d6c <MX_TIM3_Init+0xe8>)
 8001cde:	f004 fd6f 	bl	80067c0 <HAL_TIM_Base_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001ce8:	f000 fd0b 	bl	8002702 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	481c      	ldr	r0, [pc, #112]	@ (8001d6c <MX_TIM3_Init+0xe8>)
 8001cfa:	f005 ff01 	bl	8007b00 <HAL_TIM_ConfigClockSource>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001d04:	f000 fcfd 	bl	8002702 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d08:	4818      	ldr	r0, [pc, #96]	@ (8001d6c <MX_TIM3_Init+0xe8>)
 8001d0a:	f004 fea5 	bl	8006a58 <HAL_TIM_PWM_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001d14:	f000 fcf5 	bl	8002702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	4811      	ldr	r0, [pc, #68]	@ (8001d6c <MX_TIM3_Init+0xe8>)
 8001d28:	f007 f91c 	bl	8008f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d32:	f000 fce6 	bl	8002702 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d36:	2360      	movs	r3, #96	@ 0x60
 8001d38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8001d3a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4807      	ldr	r0, [pc, #28]	@ (8001d6c <MX_TIM3_Init+0xe8>)
 8001d50:	f005 fdc2 	bl	80078d8 <HAL_TIM_PWM_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001d5a:	f000 fcd2 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d5e:	4803      	ldr	r0, [pc, #12]	@ (8001d6c <MX_TIM3_Init+0xe8>)
 8001d60:	f001 f860 	bl	8002e24 <HAL_TIM_MspPostInit>

}
 8001d64:	bf00      	nop
 8001d66:	3738      	adds	r7, #56	@ 0x38
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	200006d8 	.word	0x200006d8
 8001d70:	40000400 	.word	0x40000400

08001d74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	@ 0x30
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	2224      	movs	r2, #36	@ 0x24
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f009 f8fe 	bl	800af84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d88:	463b      	mov	r3, r7
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d92:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001d94:	4a21      	ldr	r2, [pc, #132]	@ (8001e1c <MX_TIM4_Init+0xa8>)
 8001d96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d98:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001da4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001da6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001daa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001db8:	2303      	movs	r3, #3
 8001dba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	4619      	mov	r1, r3
 8001de2:	480d      	ldr	r0, [pc, #52]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001de4:	f005 fa20 	bl	8007228 <HAL_TIM_Encoder_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001dee:	f000 fc88 	bl	8002702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4806      	ldr	r0, [pc, #24]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001e00:	f007 f8b0 	bl	8008f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001e0a:	f000 fc7a 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	3730      	adds	r7, #48	@ 0x30
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200007a4 	.word	0x200007a4
 8001e1c:	40000800 	.word	0x40000800

08001e20 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b090      	sub	sp, #64	@ 0x40
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e50:	463b      	mov	r3, r7
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8001f98 <MX_TIM8_Init+0x178>)
 8001e60:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8001e62:	4b4c      	ldr	r3, [pc, #304]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001e64:	22a9      	movs	r2, #169	@ 0xa9
 8001e66:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e68:	4b4a      	ldr	r3, [pc, #296]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001e6e:	4b49      	ldr	r3, [pc, #292]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001e70:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001e74:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e76:	4b47      	ldr	r3, [pc, #284]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e7c:	4b45      	ldr	r3, [pc, #276]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e82:	4b44      	ldr	r3, [pc, #272]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e88:	4842      	ldr	r0, [pc, #264]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001e8a:	f004 fc99 	bl	80067c0 <HAL_TIM_Base_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001e94:	f000 fc35 	bl	8002702 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	483b      	ldr	r0, [pc, #236]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001ea6:	f005 fe2b 	bl	8007b00 <HAL_TIM_ConfigClockSource>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001eb0:	f000 fc27 	bl	8002702 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001eb4:	4837      	ldr	r0, [pc, #220]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001eb6:	f004 ff4f 	bl	8006d58 <HAL_TIM_IC_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001ec0:	f000 fc1f 	bl	8002702 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ec8:	2350      	movs	r3, #80	@ 0x50
 8001eca:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	4619      	mov	r1, r3
 8001eda:	482e      	ldr	r0, [pc, #184]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001edc:	f005 ff26 	bl	8007d2c <HAL_TIM_SlaveConfigSynchro>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001ee6:	f000 fc0c 	bl	8002702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	4619      	mov	r1, r3
 8001efc:	4825      	ldr	r0, [pc, #148]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001efe:	f007 f831 	bl	8008f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8001f08:	f000 fbfb 	bl	8002702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f10:	2301      	movs	r3, #1
 8001f12:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4619      	mov	r1, r3
 8001f22:	481c      	ldr	r0, [pc, #112]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001f24:	f005 fc3b 	bl	800779e <HAL_TIM_IC_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8001f2e:	f000 fbe8 	bl	8002702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f32:	2302      	movs	r3, #2
 8001f34:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001f36:	2302      	movs	r3, #2
 8001f38:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4814      	ldr	r0, [pc, #80]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001f42:	f005 fc2c 	bl	800779e <HAL_TIM_IC_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001f4c:	f000 fbd9 	bl	8002702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f50:	2300      	movs	r3, #0
 8001f52:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f54:	2301      	movs	r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	480d      	ldr	r0, [pc, #52]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001f60:	f005 fc1d 	bl	800779e <HAL_TIM_IC_ConfigChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM8_Init+0x14e>
  {
    Error_Handler();
 8001f6a:	f000 fbca 	bl	8002702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001f72:	2302      	movs	r3, #2
 8001f74:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001f76:	463b      	mov	r3, r7
 8001f78:	220c      	movs	r2, #12
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <MX_TIM8_Init+0x174>)
 8001f7e:	f005 fc0e 	bl	800779e <HAL_TIM_IC_ConfigChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM8_Init+0x16c>
  {
    Error_Handler();
 8001f88:	f000 fbbb 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	3740      	adds	r7, #64	@ 0x40
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000870 	.word	0x20000870
 8001f98:	40013400 	.word	0x40013400

08001f9c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001fa0:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <MX_TIM16_Init+0x58>)
 8001fa2:	4a15      	ldr	r2, [pc, #84]	@ (8001ff8 <MX_TIM16_Init+0x5c>)
 8001fa4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <MX_TIM16_Init+0x58>)
 8001fa8:	22a9      	movs	r2, #169	@ 0xa9
 8001faa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <MX_TIM16_Init+0x58>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001fb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <MX_TIM16_Init+0x58>)
 8001fb4:	f240 4279 	movw	r2, #1145	@ 0x479
 8001fb8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <MX_TIM16_Init+0x58>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <MX_TIM16_Init+0x58>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <MX_TIM16_Init+0x58>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fcc:	4809      	ldr	r0, [pc, #36]	@ (8001ff4 <MX_TIM16_Init+0x58>)
 8001fce:	f004 fbf7 	bl	80067c0 <HAL_TIM_Base_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001fd8:	f000 fb93 	bl	8002702 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001fdc:	2108      	movs	r1, #8
 8001fde:	4805      	ldr	r0, [pc, #20]	@ (8001ff4 <MX_TIM16_Init+0x58>)
 8001fe0:	f005 f82c 	bl	800703c <HAL_TIM_OnePulse_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001fea:	f000 fb8a 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000093c 	.word	0x2000093c
 8001ff8:	40014400 	.word	0x40014400

08001ffc <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b090      	sub	sp, #64	@ 0x40
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002002:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800202c:	463b      	mov	r3, r7
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002038:	4b4d      	ldr	r3, [pc, #308]	@ (8002170 <MX_TIM20_Init+0x174>)
 800203a:	4a4e      	ldr	r2, [pc, #312]	@ (8002174 <MX_TIM20_Init+0x178>)
 800203c:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 169;
 800203e:	4b4c      	ldr	r3, [pc, #304]	@ (8002170 <MX_TIM20_Init+0x174>)
 8002040:	22a9      	movs	r2, #169	@ 0xa9
 8002042:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002044:	4b4a      	ldr	r3, [pc, #296]	@ (8002170 <MX_TIM20_Init+0x174>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 19999;
 800204a:	4b49      	ldr	r3, [pc, #292]	@ (8002170 <MX_TIM20_Init+0x174>)
 800204c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002050:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002052:	4b47      	ldr	r3, [pc, #284]	@ (8002170 <MX_TIM20_Init+0x174>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8002058:	4b45      	ldr	r3, [pc, #276]	@ (8002170 <MX_TIM20_Init+0x174>)
 800205a:	2200      	movs	r2, #0
 800205c:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205e:	4b44      	ldr	r3, [pc, #272]	@ (8002170 <MX_TIM20_Init+0x174>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002064:	4842      	ldr	r0, [pc, #264]	@ (8002170 <MX_TIM20_Init+0x174>)
 8002066:	f004 fbab 	bl	80067c0 <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 8002070:	f000 fb47 	bl	8002702 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002078:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 800207a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800207e:	4619      	mov	r1, r3
 8002080:	483b      	ldr	r0, [pc, #236]	@ (8002170 <MX_TIM20_Init+0x174>)
 8002082:	f005 fd3d 	bl	8007b00 <HAL_TIM_ConfigClockSource>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM20_Init+0x94>
  {
    Error_Handler();
 800208c:	f000 fb39 	bl	8002702 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim20) != HAL_OK)
 8002090:	4837      	ldr	r0, [pc, #220]	@ (8002170 <MX_TIM20_Init+0x174>)
 8002092:	f004 fe61 	bl	8006d58 <HAL_TIM_IC_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 800209c:	f000 fb31 	bl	8002702 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80020a0:	2304      	movs	r3, #4
 80020a2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80020a4:	2350      	movs	r3, #80	@ 0x50
 80020a6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	4619      	mov	r1, r3
 80020b6:	482e      	ldr	r0, [pc, #184]	@ (8002170 <MX_TIM20_Init+0x174>)
 80020b8:	f005 fe38 	bl	8007d2c <HAL_TIM_SlaveConfigSynchro>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 80020c2:	f000 fb1e 	bl	8002702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	4619      	mov	r1, r3
 80020d8:	4825      	ldr	r0, [pc, #148]	@ (8002170 <MX_TIM20_Init+0x174>)
 80020da:	f006 ff43 	bl	8008f64 <HAL_TIMEx_MasterConfigSynchronization>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM20_Init+0xec>
  {
    Error_Handler();
 80020e4:	f000 fb0d 	bl	8002702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020e8:	2300      	movs	r3, #0
 80020ea:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020ec:	2301      	movs	r3, #1
 80020ee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80020f8:	463b      	mov	r3, r7
 80020fa:	2200      	movs	r2, #0
 80020fc:	4619      	mov	r1, r3
 80020fe:	481c      	ldr	r0, [pc, #112]	@ (8002170 <MX_TIM20_Init+0x174>)
 8002100:	f005 fb4d 	bl	800779e <HAL_TIM_IC_ConfigChannel>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM20_Init+0x112>
  {
    Error_Handler();
 800210a:	f000 fafa 	bl	8002702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800210e:	2302      	movs	r3, #2
 8002110:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002112:	2302      	movs	r3, #2
 8002114:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002116:	463b      	mov	r3, r7
 8002118:	2204      	movs	r2, #4
 800211a:	4619      	mov	r1, r3
 800211c:	4814      	ldr	r0, [pc, #80]	@ (8002170 <MX_TIM20_Init+0x174>)
 800211e:	f005 fb3e 	bl	800779e <HAL_TIM_IC_ConfigChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM20_Init+0x130>
  {
    Error_Handler();
 8002128:	f000 faeb 	bl	8002702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800212c:	2300      	movs	r3, #0
 800212e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002130:	2301      	movs	r3, #1
 8002132:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002134:	463b      	mov	r3, r7
 8002136:	2208      	movs	r2, #8
 8002138:	4619      	mov	r1, r3
 800213a:	480d      	ldr	r0, [pc, #52]	@ (8002170 <MX_TIM20_Init+0x174>)
 800213c:	f005 fb2f 	bl	800779e <HAL_TIM_IC_ConfigChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM20_Init+0x14e>
  {
    Error_Handler();
 8002146:	f000 fadc 	bl	8002702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800214a:	2302      	movs	r3, #2
 800214c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800214e:	2302      	movs	r3, #2
 8002150:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002152:	463b      	mov	r3, r7
 8002154:	220c      	movs	r2, #12
 8002156:	4619      	mov	r1, r3
 8002158:	4805      	ldr	r0, [pc, #20]	@ (8002170 <MX_TIM20_Init+0x174>)
 800215a:	f005 fb20 	bl	800779e <HAL_TIM_IC_ConfigChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM20_Init+0x16c>
  {
    Error_Handler();
 8002164:	f000 facd 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	3740      	adds	r7, #64	@ 0x40
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000a08 	.word	0x20000a08
 8002174:	40015000 	.word	0x40015000

08002178 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800217c:	4b23      	ldr	r3, [pc, #140]	@ (800220c <MX_USART2_UART_Init+0x94>)
 800217e:	4a24      	ldr	r2, [pc, #144]	@ (8002210 <MX_USART2_UART_Init+0x98>)
 8002180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002182:	4b22      	ldr	r3, [pc, #136]	@ (800220c <MX_USART2_UART_Init+0x94>)
 8002184:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800218a:	4b20      	ldr	r3, [pc, #128]	@ (800220c <MX_USART2_UART_Init+0x94>)
 800218c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002190:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002192:	4b1e      	ldr	r3, [pc, #120]	@ (800220c <MX_USART2_UART_Init+0x94>)
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002198:	4b1c      	ldr	r3, [pc, #112]	@ (800220c <MX_USART2_UART_Init+0x94>)
 800219a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800219e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021a0:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <MX_USART2_UART_Init+0x94>)
 80021a2:	220c      	movs	r2, #12
 80021a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a6:	4b19      	ldr	r3, [pc, #100]	@ (800220c <MX_USART2_UART_Init+0x94>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ac:	4b17      	ldr	r3, [pc, #92]	@ (800220c <MX_USART2_UART_Init+0x94>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021b2:	4b16      	ldr	r3, [pc, #88]	@ (800220c <MX_USART2_UART_Init+0x94>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <MX_USART2_UART_Init+0x94>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021be:	4b13      	ldr	r3, [pc, #76]	@ (800220c <MX_USART2_UART_Init+0x94>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021c4:	4811      	ldr	r0, [pc, #68]	@ (800220c <MX_USART2_UART_Init+0x94>)
 80021c6:	f006 ffb3 	bl	8009130 <HAL_UART_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80021d0:	f000 fa97 	bl	8002702 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d4:	2100      	movs	r1, #0
 80021d6:	480d      	ldr	r0, [pc, #52]	@ (800220c <MX_USART2_UART_Init+0x94>)
 80021d8:	f008 fdd3 	bl	800ad82 <HAL_UARTEx_SetTxFifoThreshold>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80021e2:	f000 fa8e 	bl	8002702 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021e6:	2100      	movs	r1, #0
 80021e8:	4808      	ldr	r0, [pc, #32]	@ (800220c <MX_USART2_UART_Init+0x94>)
 80021ea:	f008 fe08 	bl	800adfe <HAL_UARTEx_SetRxFifoThreshold>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80021f4:	f000 fa85 	bl	8002702 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80021f8:	4804      	ldr	r0, [pc, #16]	@ (800220c <MX_USART2_UART_Init+0x94>)
 80021fa:	f008 fd89 	bl	800ad10 <HAL_UARTEx_DisableFifoMode>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002204:	f000 fa7d 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000ad4 	.word	0x20000ad4
 8002210:	40004400 	.word	0x40004400

08002214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800221a:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <MX_DMA_Init+0x70>)
 800221c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221e:	4a19      	ldr	r2, [pc, #100]	@ (8002284 <MX_DMA_Init+0x70>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6493      	str	r3, [r2, #72]	@ 0x48
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <MX_DMA_Init+0x70>)
 8002228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002232:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <MX_DMA_Init+0x70>)
 8002234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002236:	4a13      	ldr	r2, [pc, #76]	@ (8002284 <MX_DMA_Init+0x70>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6493      	str	r3, [r2, #72]	@ 0x48
 800223e:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <MX_DMA_Init+0x70>)
 8002240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	200b      	movs	r0, #11
 8002250:	f002 fd53 	bl	8004cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002254:	200b      	movs	r0, #11
 8002256:	f002 fd6a 	bl	8004d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	200c      	movs	r0, #12
 8002260:	f002 fd4b 	bl	8004cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002264:	200c      	movs	r0, #12
 8002266:	f002 fd62 	bl	8004d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	200d      	movs	r0, #13
 8002270:	f002 fd43 	bl	8004cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002274:	200d      	movs	r0, #13
 8002276:	f002 fd5a 	bl	8004d2e <HAL_NVIC_EnableIRQ>

}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000

08002288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	@ 0x28
 800228c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
 800229c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229e:	4b44      	ldr	r3, [pc, #272]	@ (80023b0 <MX_GPIO_Init+0x128>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	4a43      	ldr	r2, [pc, #268]	@ (80023b0 <MX_GPIO_Init+0x128>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022aa:	4b41      	ldr	r3, [pc, #260]	@ (80023b0 <MX_GPIO_Init+0x128>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022b6:	4b3e      	ldr	r3, [pc, #248]	@ (80023b0 <MX_GPIO_Init+0x128>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	4a3d      	ldr	r2, [pc, #244]	@ (80023b0 <MX_GPIO_Init+0x128>)
 80022bc:	f043 0320 	orr.w	r3, r3, #32
 80022c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022c2:	4b3b      	ldr	r3, [pc, #236]	@ (80023b0 <MX_GPIO_Init+0x128>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	4b38      	ldr	r3, [pc, #224]	@ (80023b0 <MX_GPIO_Init+0x128>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d2:	4a37      	ldr	r2, [pc, #220]	@ (80023b0 <MX_GPIO_Init+0x128>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022da:	4b35      	ldr	r3, [pc, #212]	@ (80023b0 <MX_GPIO_Init+0x128>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	4b32      	ldr	r3, [pc, #200]	@ (80023b0 <MX_GPIO_Init+0x128>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ea:	4a31      	ldr	r2, [pc, #196]	@ (80023b0 <MX_GPIO_Init+0x128>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022f2:	4b2f      	ldr	r3, [pc, #188]	@ (80023b0 <MX_GPIO_Init+0x128>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 80022fe:	2200      	movs	r2, #0
 8002300:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8002304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002308:	f003 f9e0 	bl	80056cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 800230c:	2200      	movs	r2, #0
 800230e:	f246 0140 	movw	r1, #24640	@ 0x6040
 8002312:	4828      	ldr	r0, [pc, #160]	@ (80023b4 <MX_GPIO_Init+0x12c>)
 8002314:	f003 f9da 	bl	80056cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002318:	2200      	movs	r2, #0
 800231a:	2180      	movs	r1, #128	@ 0x80
 800231c:	4826      	ldr	r0, [pc, #152]	@ (80023b8 <MX_GPIO_Init+0x130>)
 800231e:	f003 f9d5 	bl	80056cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002322:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002328:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800232c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	481f      	ldr	r0, [pc, #124]	@ (80023b8 <MX_GPIO_Init+0x130>)
 800233a:	f003 f845 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 800233e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8002342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002344:	2301      	movs	r3, #1
 8002346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800235a:	f003 f835 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6;
 800235e:	f246 0340 	movw	r3, #24640	@ 0x6040
 8002362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002364:	2301      	movs	r3, #1
 8002366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4619      	mov	r1, r3
 8002376:	480f      	ldr	r0, [pc, #60]	@ (80023b4 <MX_GPIO_Init+0x12c>)
 8002378:	f003 f826 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002380:	2301      	movs	r3, #1
 8002382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	2300      	movs	r3, #0
 800238a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4619      	mov	r1, r3
 8002392:	4809      	ldr	r0, [pc, #36]	@ (80023b8 <MX_GPIO_Init+0x130>)
 8002394:	f003 f818 	bl	80053c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	2028      	movs	r0, #40	@ 0x28
 800239e:	f002 fcac 	bl	8004cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023a2:	2028      	movs	r0, #40	@ 0x28
 80023a4:	f002 fcc3 	bl	8004d2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023a8:	bf00      	nop
 80023aa:	3728      	adds	r7, #40	@ 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	48000400 	.word	0x48000400
 80023b8:	48000800 	.word	0x48000800

080023bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a06      	ldr	r2, [pc, #24]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d105      	bne.n	80023d8 <HAL_TIM_PeriodElapsedCallback+0x1c>
        registerFrame[0x00].U16 = 22881;
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80023ce:	f645 1261 	movw	r2, #22881	@ 0x5961
 80023d2:	801a      	strh	r2, [r3, #0]
        sendall();
 80023d4:	f7ff f894 	bl	8001500 <sendall>
    }
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	2000060c 	.word	0x2000060c
 80023e4:	20000230 	.word	0x20000230

080023e8 <remote_recieve>:

void remote_recieve(){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	ch2_Rise = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_3);
 80023ec:	4b74      	ldr	r3, [pc, #464]	@ (80025c0 <remote_recieve+0x1d8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	4b73      	ldr	r3, [pc, #460]	@ (80025c4 <remote_recieve+0x1dc>)
 80023f6:	801a      	strh	r2, [r3, #0]
	ch2_Fall = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_4);
 80023f8:	4b71      	ldr	r3, [pc, #452]	@ (80025c0 <remote_recieve+0x1d8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	b29a      	uxth	r2, r3
 8002400:	4b71      	ldr	r3, [pc, #452]	@ (80025c8 <remote_recieve+0x1e0>)
 8002402:	801a      	strh	r2, [r3, #0]
	ch2_dt = ch2_Fall - ch2_Rise;
 8002404:	4b70      	ldr	r3, [pc, #448]	@ (80025c8 <remote_recieve+0x1e0>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b6e      	ldr	r3, [pc, #440]	@ (80025c4 <remote_recieve+0x1dc>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	4a6e      	ldr	r2, [pc, #440]	@ (80025cc <remote_recieve+0x1e4>)
 8002412:	6013      	str	r3, [r2, #0]
	if(ch2_Rise>ch2_Fall)
 8002414:	4b6b      	ldr	r3, [pc, #428]	@ (80025c4 <remote_recieve+0x1dc>)
 8002416:	881a      	ldrh	r2, [r3, #0]
 8002418:	4b6b      	ldr	r3, [pc, #428]	@ (80025c8 <remote_recieve+0x1e0>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d907      	bls.n	8002430 <remote_recieve+0x48>
		ch2_xPosition = ch2_dt + 19999 ;
 8002420:	4b6a      	ldr	r3, [pc, #424]	@ (80025cc <remote_recieve+0x1e4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8002428:	331f      	adds	r3, #31
 800242a:	4a69      	ldr	r2, [pc, #420]	@ (80025d0 <remote_recieve+0x1e8>)
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e003      	b.n	8002438 <remote_recieve+0x50>
	else
		ch2_xPosition = ch2_dt;
 8002430:	4b66      	ldr	r3, [pc, #408]	@ (80025cc <remote_recieve+0x1e4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a66      	ldr	r2, [pc, #408]	@ (80025d0 <remote_recieve+0x1e8>)
 8002436:	6013      	str	r3, [r2, #0]

	ch3_Rise = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_1);
 8002438:	4b66      	ldr	r3, [pc, #408]	@ (80025d4 <remote_recieve+0x1ec>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800243e:	b29a      	uxth	r2, r3
 8002440:	4b65      	ldr	r3, [pc, #404]	@ (80025d8 <remote_recieve+0x1f0>)
 8002442:	801a      	strh	r2, [r3, #0]
	ch3_Fall = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_2);
 8002444:	4b63      	ldr	r3, [pc, #396]	@ (80025d4 <remote_recieve+0x1ec>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244a:	b29a      	uxth	r2, r3
 800244c:	4b63      	ldr	r3, [pc, #396]	@ (80025dc <remote_recieve+0x1f4>)
 800244e:	801a      	strh	r2, [r3, #0]
	ch3_dt = ch3_Fall - ch3_Rise;
 8002450:	4b62      	ldr	r3, [pc, #392]	@ (80025dc <remote_recieve+0x1f4>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4b60      	ldr	r3, [pc, #384]	@ (80025d8 <remote_recieve+0x1f0>)
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	4a60      	ldr	r2, [pc, #384]	@ (80025e0 <remote_recieve+0x1f8>)
 800245e:	6013      	str	r3, [r2, #0]
	if(ch3_Rise>ch3_Fall)
 8002460:	4b5d      	ldr	r3, [pc, #372]	@ (80025d8 <remote_recieve+0x1f0>)
 8002462:	881a      	ldrh	r2, [r3, #0]
 8002464:	4b5d      	ldr	r3, [pc, #372]	@ (80025dc <remote_recieve+0x1f4>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d907      	bls.n	800247c <remote_recieve+0x94>
		ch3_stepUp = ch3_dt + 19999 ;
 800246c:	4b5c      	ldr	r3, [pc, #368]	@ (80025e0 <remote_recieve+0x1f8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8002474:	331f      	adds	r3, #31
 8002476:	4a5b      	ldr	r2, [pc, #364]	@ (80025e4 <remote_recieve+0x1fc>)
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e003      	b.n	8002484 <remote_recieve+0x9c>
	else
		ch3_stepUp = ch3_dt;
 800247c:	4b58      	ldr	r3, [pc, #352]	@ (80025e0 <remote_recieve+0x1f8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a58      	ldr	r2, [pc, #352]	@ (80025e4 <remote_recieve+0x1fc>)
 8002482:	6013      	str	r3, [r2, #0]

	ch4_Rise = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_3);
 8002484:	4b53      	ldr	r3, [pc, #332]	@ (80025d4 <remote_recieve+0x1ec>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248a:	b29a      	uxth	r2, r3
 800248c:	4b56      	ldr	r3, [pc, #344]	@ (80025e8 <remote_recieve+0x200>)
 800248e:	801a      	strh	r2, [r3, #0]
	ch4_Fall = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_4);
 8002490:	4b50      	ldr	r3, [pc, #320]	@ (80025d4 <remote_recieve+0x1ec>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	b29a      	uxth	r2, r3
 8002498:	4b54      	ldr	r3, [pc, #336]	@ (80025ec <remote_recieve+0x204>)
 800249a:	801a      	strh	r2, [r3, #0]
	ch4_dt = ch4_Fall - ch4_Rise;
 800249c:	4b53      	ldr	r3, [pc, #332]	@ (80025ec <remote_recieve+0x204>)
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b51      	ldr	r3, [pc, #324]	@ (80025e8 <remote_recieve+0x200>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	4a51      	ldr	r2, [pc, #324]	@ (80025f0 <remote_recieve+0x208>)
 80024aa:	6013      	str	r3, [r2, #0]
	if(ch4_Rise>ch4_Fall)
 80024ac:	4b4e      	ldr	r3, [pc, #312]	@ (80025e8 <remote_recieve+0x200>)
 80024ae:	881a      	ldrh	r2, [r3, #0]
 80024b0:	4b4e      	ldr	r3, [pc, #312]	@ (80025ec <remote_recieve+0x204>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d907      	bls.n	80024c8 <remote_recieve+0xe0>
		ch4_stepDown = ch4_dt + 19999 ;
 80024b8:	4b4d      	ldr	r3, [pc, #308]	@ (80025f0 <remote_recieve+0x208>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80024c0:	331f      	adds	r3, #31
 80024c2:	4a4c      	ldr	r2, [pc, #304]	@ (80025f4 <remote_recieve+0x20c>)
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e003      	b.n	80024d0 <remote_recieve+0xe8>
	else
		ch4_stepDown = ch4_dt;
 80024c8:	4b49      	ldr	r3, [pc, #292]	@ (80025f0 <remote_recieve+0x208>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a49      	ldr	r2, [pc, #292]	@ (80025f4 <remote_recieve+0x20c>)
 80024ce:	6013      	str	r3, [r2, #0]

	ch5_Rise = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1);
 80024d0:	4b3b      	ldr	r3, [pc, #236]	@ (80025c0 <remote_recieve+0x1d8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	4b47      	ldr	r3, [pc, #284]	@ (80025f8 <remote_recieve+0x210>)
 80024da:	801a      	strh	r2, [r3, #0]
	ch5_Fall = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_2);
 80024dc:	4b38      	ldr	r3, [pc, #224]	@ (80025c0 <remote_recieve+0x1d8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b45      	ldr	r3, [pc, #276]	@ (80025fc <remote_recieve+0x214>)
 80024e6:	801a      	strh	r2, [r3, #0]
	ch5_dt = ch5_Fall - ch4_Rise;
 80024e8:	4b44      	ldr	r3, [pc, #272]	@ (80025fc <remote_recieve+0x214>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b3e      	ldr	r3, [pc, #248]	@ (80025e8 <remote_recieve+0x200>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	4a42      	ldr	r2, [pc, #264]	@ (8002600 <remote_recieve+0x218>)
 80024f6:	6013      	str	r3, [r2, #0]
	if(ch5_Rise>ch5_Fall)
 80024f8:	4b3f      	ldr	r3, [pc, #252]	@ (80025f8 <remote_recieve+0x210>)
 80024fa:	881a      	ldrh	r2, [r3, #0]
 80024fc:	4b3f      	ldr	r3, [pc, #252]	@ (80025fc <remote_recieve+0x214>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d907      	bls.n	8002514 <remote_recieve+0x12c>
		ch5_saveShelves = ch5_dt + 19999 ;
 8002504:	4b3e      	ldr	r3, [pc, #248]	@ (8002600 <remote_recieve+0x218>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 800250c:	331f      	adds	r3, #31
 800250e:	4a3d      	ldr	r2, [pc, #244]	@ (8002604 <remote_recieve+0x21c>)
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e003      	b.n	800251c <remote_recieve+0x134>
	else
		ch5_saveShelves = ch5_dt;
 8002514:	4b3a      	ldr	r3, [pc, #232]	@ (8002600 <remote_recieve+0x218>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a3a      	ldr	r2, [pc, #232]	@ (8002604 <remote_recieve+0x21c>)
 800251a:	6013      	str	r3, [r2, #0]

	ch6_Rise = __HAL_TIM_GET_COMPARE(&htim20,TIM_CHANNEL_1);
 800251c:	4b3a      	ldr	r3, [pc, #232]	@ (8002608 <remote_recieve+0x220>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002522:	b29a      	uxth	r2, r3
 8002524:	4b39      	ldr	r3, [pc, #228]	@ (800260c <remote_recieve+0x224>)
 8002526:	801a      	strh	r2, [r3, #0]
	ch6_Fall = __HAL_TIM_GET_COMPARE(&htim20,TIM_CHANNEL_2);
 8002528:	4b37      	ldr	r3, [pc, #220]	@ (8002608 <remote_recieve+0x220>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252e:	b29a      	uxth	r2, r3
 8002530:	4b37      	ldr	r3, [pc, #220]	@ (8002610 <remote_recieve+0x228>)
 8002532:	801a      	strh	r2, [r3, #0]
	ch6_dt = ch6_Fall - ch6_Rise;
 8002534:	4b36      	ldr	r3, [pc, #216]	@ (8002610 <remote_recieve+0x228>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	4b34      	ldr	r3, [pc, #208]	@ (800260c <remote_recieve+0x224>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	4a34      	ldr	r2, [pc, #208]	@ (8002614 <remote_recieve+0x22c>)
 8002542:	6013      	str	r3, [r2, #0]
	if(ch6_Rise>ch6_Fall)
 8002544:	4b31      	ldr	r3, [pc, #196]	@ (800260c <remote_recieve+0x224>)
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	4b31      	ldr	r3, [pc, #196]	@ (8002610 <remote_recieve+0x228>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d907      	bls.n	8002560 <remote_recieve+0x178>
		ch6_selectShelves1 = ch6_dt + 19999 ;
 8002550:	4b30      	ldr	r3, [pc, #192]	@ (8002614 <remote_recieve+0x22c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8002558:	331f      	adds	r3, #31
 800255a:	4a2f      	ldr	r2, [pc, #188]	@ (8002618 <remote_recieve+0x230>)
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e003      	b.n	8002568 <remote_recieve+0x180>
	else
		ch6_selectShelves1 = ch6_dt;
 8002560:	4b2c      	ldr	r3, [pc, #176]	@ (8002614 <remote_recieve+0x22c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2c      	ldr	r2, [pc, #176]	@ (8002618 <remote_recieve+0x230>)
 8002566:	6013      	str	r3, [r2, #0]

	ch7_Rise = __HAL_TIM_GET_COMPARE(&htim20,TIM_CHANNEL_3);
 8002568:	4b27      	ldr	r3, [pc, #156]	@ (8002608 <remote_recieve+0x220>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256e:	b29a      	uxth	r2, r3
 8002570:	4b2a      	ldr	r3, [pc, #168]	@ (800261c <remote_recieve+0x234>)
 8002572:	801a      	strh	r2, [r3, #0]
	ch7_Fall = __HAL_TIM_GET_COMPARE(&htim20,TIM_CHANNEL_4);
 8002574:	4b24      	ldr	r3, [pc, #144]	@ (8002608 <remote_recieve+0x220>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	b29a      	uxth	r2, r3
 800257c:	4b28      	ldr	r3, [pc, #160]	@ (8002620 <remote_recieve+0x238>)
 800257e:	801a      	strh	r2, [r3, #0]
	ch7_dt = ch7_Fall - ch7_Rise;
 8002580:	4b27      	ldr	r3, [pc, #156]	@ (8002620 <remote_recieve+0x238>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b25      	ldr	r3, [pc, #148]	@ (800261c <remote_recieve+0x234>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	4a25      	ldr	r2, [pc, #148]	@ (8002624 <remote_recieve+0x23c>)
 800258e:	6013      	str	r3, [r2, #0]
	if(ch7_Rise>ch7_Fall)
 8002590:	4b22      	ldr	r3, [pc, #136]	@ (800261c <remote_recieve+0x234>)
 8002592:	881a      	ldrh	r2, [r3, #0]
 8002594:	4b22      	ldr	r3, [pc, #136]	@ (8002620 <remote_recieve+0x238>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d907      	bls.n	80025ac <remote_recieve+0x1c4>
		ch7_selectShelves2 = ch7_dt + 19999 ;
 800259c:	4b21      	ldr	r3, [pc, #132]	@ (8002624 <remote_recieve+0x23c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80025a4:	331f      	adds	r3, #31
 80025a6:	4a20      	ldr	r2, [pc, #128]	@ (8002628 <remote_recieve+0x240>)
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e003      	b.n	80025b4 <remote_recieve+0x1cc>
	else
		ch7_selectShelves2 = ch7_dt;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002624 <remote_recieve+0x23c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002628 <remote_recieve+0x240>)
 80025b2:	6013      	str	r3, [r2, #0]

	x_axis_control_by_remote();
 80025b4:	f000 f966 	bl	8002884 <x_axis_control_by_remote>
	z_axis_control_by_remote();
 80025b8:	f000 f9aa 	bl	8002910 <z_axis_control_by_remote>
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000540 	.word	0x20000540
 80025c4:	20000430 	.word	0x20000430
 80025c8:	20000432 	.word	0x20000432
 80025cc:	2000042c 	.word	0x2000042c
 80025d0:	20000428 	.word	0x20000428
 80025d4:	20000870 	.word	0x20000870
 80025d8:	2000043c 	.word	0x2000043c
 80025dc:	2000043e 	.word	0x2000043e
 80025e0:	20000438 	.word	0x20000438
 80025e4:	20000434 	.word	0x20000434
 80025e8:	20000448 	.word	0x20000448
 80025ec:	2000044a 	.word	0x2000044a
 80025f0:	20000444 	.word	0x20000444
 80025f4:	20000440 	.word	0x20000440
 80025f8:	20000454 	.word	0x20000454
 80025fc:	20000456 	.word	0x20000456
 8002600:	20000450 	.word	0x20000450
 8002604:	2000044c 	.word	0x2000044c
 8002608:	20000a08 	.word	0x20000a08
 800260c:	20000460 	.word	0x20000460
 8002610:	20000462 	.word	0x20000462
 8002614:	2000045c 	.word	0x2000045c
 8002618:	20000458 	.word	0x20000458
 800261c:	2000046c 	.word	0x2000046c
 8002620:	2000046e 	.word	0x2000046e
 8002624:	20000468 	.word	0x20000468
 8002628:	20000464 	.word	0x20000464

0800262c <motor_run>:

void motor_run(uint64_t pwm, uint8_t dir){
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	71fb      	strb	r3, [r7, #7]
	if(dir == 1){
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d116      	bne.n	800266e <motor_run+0x42>
		if(isMotorCanMoveUp == 1){
 8002640:	4b22      	ldr	r3, [pc, #136]	@ (80026cc <motor_run+0xa0>)
 8002642:	f993 3000 	ldrsb.w	r3, [r3]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d13c      	bne.n	80026c4 <motor_run+0x98>
			usePWM = pwm;
 800264a:	4921      	ldr	r1, [pc, #132]	@ (80026d0 <motor_run+0xa4>)
 800264c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002650:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, usePWM);
 8002654:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <motor_run+0xa4>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	491e      	ldr	r1, [pc, #120]	@ (80026d4 <motor_run+0xa8>)
 800265c:	6809      	ldr	r1, [r1, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	634b      	str	r3, [r1, #52]	@ 0x34
			motor_moveup();
 8002662:	f000 f85b 	bl	800271c <motor_moveup>
			motoring = 1;
 8002666:	4b1c      	ldr	r3, [pc, #112]	@ (80026d8 <motor_run+0xac>)
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]
	else{
		usePWM = 0;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, usePWM);
		motoring = 0;
	}
}
 800266c:	e02a      	b.n	80026c4 <motor_run+0x98>
	else if(dir == 2){
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d116      	bne.n	80026a2 <motor_run+0x76>
		if(isMotorCanMoveDown == 1){
 8002674:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <motor_run+0xb0>)
 8002676:	f993 3000 	ldrsb.w	r3, [r3]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d122      	bne.n	80026c4 <motor_run+0x98>
			usePWM = pwm;
 800267e:	4914      	ldr	r1, [pc, #80]	@ (80026d0 <motor_run+0xa4>)
 8002680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002684:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, usePWM);
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <motor_run+0xa4>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	4911      	ldr	r1, [pc, #68]	@ (80026d4 <motor_run+0xa8>)
 8002690:	6809      	ldr	r1, [r1, #0]
 8002692:	4613      	mov	r3, r2
 8002694:	634b      	str	r3, [r1, #52]	@ 0x34
			motor_movedown();
 8002696:	f000 f853 	bl	8002740 <motor_movedown>
			motoring = 2;
 800269a:	4b0f      	ldr	r3, [pc, #60]	@ (80026d8 <motor_run+0xac>)
 800269c:	2202      	movs	r2, #2
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	e010      	b.n	80026c4 <motor_run+0x98>
		usePWM = 0;
 80026a2:	490b      	ldr	r1, [pc, #44]	@ (80026d0 <motor_run+0xa4>)
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	e9c1 2300 	strd	r2, r3, [r1]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, usePWM);
 80026b0:	4b07      	ldr	r3, [pc, #28]	@ (80026d0 <motor_run+0xa4>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	4907      	ldr	r1, [pc, #28]	@ (80026d4 <motor_run+0xa8>)
 80026b8:	6809      	ldr	r1, [r1, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	634b      	str	r3, [r1, #52]	@ 0x34
		motoring = 0;
 80026be:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <motor_run+0xac>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000409 	.word	0x20000409
 80026d0:	200003f8 	.word	0x200003f8
 80026d4:	200006d8 	.word	0x200006d8
 80026d8:	200003e4 	.word	0x200003e4
 80026dc:	2000040a 	.word	0x2000040a

080026e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t mode)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	80fb      	strh	r3, [r7, #6]
	if(mode == 1)
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d104      	bne.n	80026fa <HAL_GPIO_EXTI_Callback+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80026f0:	2120      	movs	r1, #32
 80026f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026f6:	f003 f801 	bl	80056fc <HAL_GPIO_TogglePin>
	}
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002706:	b672      	cpsid	i
}
 8002708:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800270a:	bf00      	nop
 800270c:	e7fd      	b.n	800270a <Error_Handler+0x8>

0800270e <init_motor_cal>:
 */
#include "globalVar.h"
#include "math.h"


void init_motor_cal(){
 800270e:	b580      	push	{r7, lr}
 8002710:	af00      	add	r7, sp, #0
	motor_basic_cal();
 8002712:	f000 f829 	bl	8002768 <motor_basic_cal>
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <motor_moveup>:

void motor_moveup(){
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8002720:	2201      	movs	r2, #1
 8002722:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002726:	4805      	ldr	r0, [pc, #20]	@ (800273c <motor_moveup+0x20>)
 8002728:	f002 ffd0 	bl	80056cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 800272c:	2200      	movs	r2, #0
 800272e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002732:	4802      	ldr	r0, [pc, #8]	@ (800273c <motor_moveup+0x20>)
 8002734:	f002 ffca 	bl	80056cc <HAL_GPIO_WritePin>
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	48000400 	.word	0x48000400

08002740 <motor_movedown>:

void motor_movedown(){
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8002744:	2200      	movs	r2, #0
 8002746:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800274a:	4805      	ldr	r0, [pc, #20]	@ (8002760 <motor_movedown+0x20>)
 800274c:	f002 ffbe 	bl	80056cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8002750:	2201      	movs	r2, #1
 8002752:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002756:	4802      	ldr	r0, [pc, #8]	@ (8002760 <motor_movedown+0x20>)
 8002758:	f002 ffb8 	bl	80056cc <HAL_GPIO_WritePin>
}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}
 8002760:	48000400 	.word	0x48000400
 8002764:	00000000 	.word	0x00000000

08002768 <motor_basic_cal>:

void motor_basic_cal(){
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
	//QEI per round
	QEIOfRound = QEIReadRaw % 8192;
 800276c:	4b1c      	ldr	r3, [pc, #112]	@ (80027e0 <motor_basic_cal+0x78>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002774:	4a1b      	ldr	r2, [pc, #108]	@ (80027e4 <motor_basic_cal+0x7c>)
 8002776:	6013      	str	r3, [r2, #0]
	//degree per round
	degreePerRound = (QEIOfRound * 360.0) / 8192.0;
 8002778:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <motor_basic_cal+0x7c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fe8d 	bl	800049c <__aeabi_ui2d>
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	4b18      	ldr	r3, [pc, #96]	@ (80027e8 <motor_basic_cal+0x80>)
 8002788:	f7fd ff02 	bl	8000590 <__aeabi_dmul>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <motor_basic_cal+0x84>)
 800279a:	f7fe f823 	bl	80007e4 <__aeabi_ddiv>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4913      	ldr	r1, [pc, #76]	@ (80027f0 <motor_basic_cal+0x88>)
 80027a4:	e9c1 2300 	strd	r2, r3, [r1]
	//position on z-zxis
	linearPos = ((25.01093 * M_PI) / 8192.0) * QEIReadRaw; //24.95
 80027a8:	4b0d      	ldr	r3, [pc, #52]	@ (80027e0 <motor_basic_cal+0x78>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fe75 	bl	800049c <__aeabi_ui2d>
 80027b2:	a309      	add	r3, pc, #36	@ (adr r3, 80027d8 <motor_basic_cal+0x70>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f7fd feea 	bl	8000590 <__aeabi_dmul>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	f7fe f99e 	bl	8000b04 <__aeabi_d2f>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4a0a      	ldr	r2, [pc, #40]	@ (80027f4 <motor_basic_cal+0x8c>)
 80027cc:	6013      	str	r3, [r2, #0]
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	f3af 8000 	nop.w
 80027d8:	f032ca4c 	.word	0xf032ca4c
 80027dc:	3f83a4be 	.word	0x3f83a4be
 80027e0:	200003cc 	.word	0x200003cc
 80027e4:	200003d0 	.word	0x200003d0
 80027e8:	40768000 	.word	0x40768000
 80027ec:	40c00000 	.word	0x40c00000
 80027f0:	200003d8 	.word	0x200003d8
 80027f4:	200003e0 	.word	0x200003e0

080027f8 <is_motor_should_run>:

void is_motor_should_run(){
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
	// motor can move up and down
	if(ADC_RawRead[0] < 4090 && ADC_RawRead[1] < 4090){
 80027fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <is_motor_should_run+0x80>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	f640 72f9 	movw	r2, #4089	@ 0xff9
 8002804:	4293      	cmp	r3, r2
 8002806:	d80c      	bhi.n	8002822 <is_motor_should_run+0x2a>
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <is_motor_should_run+0x80>)
 800280a:	885b      	ldrh	r3, [r3, #2]
 800280c:	f640 72f9 	movw	r2, #4089	@ 0xff9
 8002810:	4293      	cmp	r3, r2
 8002812:	d806      	bhi.n	8002822 <is_motor_should_run+0x2a>
		isMotorCanMoveUp = 1;
 8002814:	4b19      	ldr	r3, [pc, #100]	@ (800287c <is_motor_should_run+0x84>)
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
		isMotorCanMoveDown = 1;
 800281a:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <is_motor_should_run+0x88>)
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e025      	b.n	800286e <is_motor_should_run+0x76>
	}
	// motor can only move up
	else if(ADC_RawRead[0] > 4090 && ADC_RawRead[1] < 4090){
 8002822:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <is_motor_should_run+0x80>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	f640 72fa 	movw	r2, #4090	@ 0xffa
 800282a:	4293      	cmp	r3, r2
 800282c:	d90c      	bls.n	8002848 <is_motor_should_run+0x50>
 800282e:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <is_motor_should_run+0x80>)
 8002830:	885b      	ldrh	r3, [r3, #2]
 8002832:	f640 72f9 	movw	r2, #4089	@ 0xff9
 8002836:	4293      	cmp	r3, r2
 8002838:	d806      	bhi.n	8002848 <is_motor_should_run+0x50>
		isMotorCanMoveUp = 1;
 800283a:	4b10      	ldr	r3, [pc, #64]	@ (800287c <is_motor_should_run+0x84>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
		isMotorCanMoveDown = 0;
 8002840:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <is_motor_should_run+0x88>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e012      	b.n	800286e <is_motor_should_run+0x76>
	}
	//motor can only move down
	else if(ADC_RawRead[0] < 4090 && ADC_RawRead[1] > 4090){
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <is_motor_should_run+0x80>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	f640 72f9 	movw	r2, #4089	@ 0xff9
 8002850:	4293      	cmp	r3, r2
 8002852:	d80c      	bhi.n	800286e <is_motor_should_run+0x76>
 8002854:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <is_motor_should_run+0x80>)
 8002856:	885b      	ldrh	r3, [r3, #2]
 8002858:	f640 72fa 	movw	r2, #4090	@ 0xffa
 800285c:	4293      	cmp	r3, r2
 800285e:	d906      	bls.n	800286e <is_motor_should_run+0x76>
		isMotorCanMoveUp = 0;
 8002860:	4b06      	ldr	r3, [pc, #24]	@ (800287c <is_motor_should_run+0x84>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
		isMotorCanMoveDown = 1;
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <is_motor_should_run+0x88>)
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
	}

}
 800286c:	e7ff      	b.n	800286e <is_motor_should_run+0x76>
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	20000470 	.word	0x20000470
 800287c:	20000409 	.word	0x20000409
 8002880:	2000040a 	.word	0x2000040a

08002884 <x_axis_control_by_remote>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_SET);
	}
}

void x_axis_control_by_remote(){
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	ch2_timestamp = HAL_GetTick();
 8002888:	f000 fcd8 	bl	800323c <HAL_GetTick>
 800288c:	4603      	mov	r3, r0
 800288e:	4a1d      	ldr	r2, [pc, #116]	@ (8002904 <x_axis_control_by_remote+0x80>)
 8002890:	6013      	str	r3, [r2, #0]
	if(ch2_timestamp < HAL_GetTick()){
 8002892:	f000 fcd3 	bl	800323c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <x_axis_control_by_remote+0x80>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d92f      	bls.n	8002900 <x_axis_control_by_remote+0x7c>
		if(ch2_xPosition < 1410 && ch2_xPosition > 920 && xAxisPosition > -100){
 80028a0:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <x_axis_control_by_remote+0x84>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f240 5281 	movw	r2, #1409	@ 0x581
 80028a8:	4293      	cmp	r3, r2
 80028aa:	dc0f      	bgt.n	80028cc <x_axis_control_by_remote+0x48>
 80028ac:	4b16      	ldr	r3, [pc, #88]	@ (8002908 <x_axis_control_by_remote+0x84>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80028b4:	dd0a      	ble.n	80028cc <x_axis_control_by_remote+0x48>
 80028b6:	4b15      	ldr	r3, [pc, #84]	@ (800290c <x_axis_control_by_remote+0x88>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 80028be:	db05      	blt.n	80028cc <x_axis_control_by_remote+0x48>
			xAxisPosition -= 1;
 80028c0:	4b12      	ldr	r3, [pc, #72]	@ (800290c <x_axis_control_by_remote+0x88>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	4a11      	ldr	r2, [pc, #68]	@ (800290c <x_axis_control_by_remote+0x88>)
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e013      	b.n	80028f4 <x_axis_control_by_remote+0x70>
		}
		else if(ch2_xPosition > 1450 && ch2_xPosition < 1960 && xAxisPosition < 100){
 80028cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <x_axis_control_by_remote+0x84>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 80028d4:	4293      	cmp	r3, r2
 80028d6:	dd0d      	ble.n	80028f4 <x_axis_control_by_remote+0x70>
 80028d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002908 <x_axis_control_by_remote+0x84>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f5b3 6ff5 	cmp.w	r3, #1960	@ 0x7a8
 80028e0:	da08      	bge.n	80028f4 <x_axis_control_by_remote+0x70>
 80028e2:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <x_axis_control_by_remote+0x88>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b63      	cmp	r3, #99	@ 0x63
 80028e8:	dc04      	bgt.n	80028f4 <x_axis_control_by_remote+0x70>
			xAxisPosition += 1;
 80028ea:	4b08      	ldr	r3, [pc, #32]	@ (800290c <x_axis_control_by_remote+0x88>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3301      	adds	r3, #1
 80028f0:	4a06      	ldr	r2, [pc, #24]	@ (800290c <x_axis_control_by_remote+0x88>)
 80028f2:	6013      	str	r3, [r2, #0]
		}
		ch2_timestamp = HAL_GetTick() + 100;
 80028f4:	f000 fca2 	bl	800323c <HAL_GetTick>
 80028f8:	4603      	mov	r3, r0
 80028fa:	3364      	adds	r3, #100	@ 0x64
 80028fc:	4a01      	ldr	r2, [pc, #4]	@ (8002904 <x_axis_control_by_remote+0x80>)
 80028fe:	6013      	str	r3, [r2, #0]
	}
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000420 	.word	0x20000420
 8002908:	20000428 	.word	0x20000428
 800290c:	200003c8 	.word	0x200003c8

08002910 <z_axis_control_by_remote>:

void z_axis_control_by_remote(){
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
	if(modeSelection == 0){
 8002914:	4b22      	ldr	r3, [pc, #136]	@ (80029a0 <z_axis_control_by_remote+0x90>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d13f      	bne.n	800299c <z_axis_control_by_remote+0x8c>
		if(ch3_stepUp > 1900){
 800291c:	4b21      	ldr	r3, [pc, #132]	@ (80029a4 <z_axis_control_by_remote+0x94>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f240 726c 	movw	r2, #1900	@ 0x76c
 8002924:	4293      	cmp	r3, r2
 8002926:	dd10      	ble.n	800294a <z_axis_control_by_remote+0x3a>
			thispwm = 20000;
 8002928:	491f      	ldr	r1, [pc, #124]	@ (80029a8 <z_axis_control_by_remote+0x98>)
 800292a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9c1 2300 	strd	r2, r3, [r1]
			motorDirection = 1;
 8002936:	4b1d      	ldr	r3, [pc, #116]	@ (80029ac <z_axis_control_by_remote+0x9c>)
 8002938:	2201      	movs	r2, #1
 800293a:	701a      	strb	r2, [r3, #0]
			motor_run(thispwm, 1);
 800293c:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <z_axis_control_by_remote+0x98>)
 800293e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002942:	2201      	movs	r2, #1
 8002944:	f7ff fe72 	bl	800262c <motor_run>
				motor_run(0, 0);
				motorDirection = 0;
			}
		}
	}
}
 8002948:	e028      	b.n	800299c <z_axis_control_by_remote+0x8c>
		else if(ch4_stepDown > 1900){
 800294a:	4b19      	ldr	r3, [pc, #100]	@ (80029b0 <z_axis_control_by_remote+0xa0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f240 726c 	movw	r2, #1900	@ 0x76c
 8002952:	4293      	cmp	r3, r2
 8002954:	dd10      	ble.n	8002978 <z_axis_control_by_remote+0x68>
			thispwm = 15000;
 8002956:	4914      	ldr	r1, [pc, #80]	@ (80029a8 <z_axis_control_by_remote+0x98>)
 8002958:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	e9c1 2300 	strd	r2, r3, [r1]
			motorDirection = -1;
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <z_axis_control_by_remote+0x9c>)
 8002966:	22ff      	movs	r2, #255	@ 0xff
 8002968:	701a      	strb	r2, [r3, #0]
			motor_run(thispwm, 2);
 800296a:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <z_axis_control_by_remote+0x98>)
 800296c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002970:	2202      	movs	r2, #2
 8002972:	f7ff fe5b 	bl	800262c <motor_run>
}
 8002976:	e011      	b.n	800299c <z_axis_control_by_remote+0x8c>
			if(modeSelection == 0){
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <z_axis_control_by_remote+0x90>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10d      	bne.n	800299c <z_axis_control_by_remote+0x8c>
				thispwm = 0;
 8002980:	4909      	ldr	r1, [pc, #36]	@ (80029a8 <z_axis_control_by_remote+0x98>)
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	e9c1 2300 	strd	r2, r3, [r1]
				motor_run(0, 0);
 800298e:	2100      	movs	r1, #0
 8002990:	2000      	movs	r0, #0
 8002992:	f7ff fe4b 	bl	800262c <motor_run>
				motorDirection = 0;
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <z_axis_control_by_remote+0x9c>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200003c0 	.word	0x200003c0
 80029a4:	20000434 	.word	0x20000434
 80029a8:	20000400 	.word	0x20000400
 80029ac:	20000408 	.word	0x20000408
 80029b0:	20000440 	.word	0x20000440

080029b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <HAL_MspInit+0x44>)
 80029bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029be:	4a0e      	ldr	r2, [pc, #56]	@ (80029f8 <HAL_MspInit+0x44>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80029c6:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <HAL_MspInit+0x44>)
 80029c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <HAL_MspInit+0x44>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d6:	4a08      	ldr	r2, [pc, #32]	@ (80029f8 <HAL_MspInit+0x44>)
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_MspInit+0x44>)
 80029e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80029ea:	f002 ff5d 	bl	80058a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b09e      	sub	sp, #120	@ 0x78
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	2254      	movs	r2, #84	@ 0x54
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f008 fab1 	bl	800af84 <memset>
  if(hadc->Instance==ADC1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a2a:	d15f      	bne.n	8002aec <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002a2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a30:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002a32:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002a36:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a38:	f107 0310 	add.w	r3, r7, #16
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f003 fc71 	bl	8006324 <HAL_RCCEx_PeriphCLKConfig>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002a48:	f7ff fe5b 	bl	8002702 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002a4c:	4b29      	ldr	r3, [pc, #164]	@ (8002af4 <HAL_ADC_MspInit+0xf8>)
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a50:	4a28      	ldr	r2, [pc, #160]	@ (8002af4 <HAL_ADC_MspInit+0xf8>)
 8002a52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a58:	4b26      	ldr	r3, [pc, #152]	@ (8002af4 <HAL_ADC_MspInit+0xf8>)
 8002a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a64:	4b23      	ldr	r3, [pc, #140]	@ (8002af4 <HAL_ADC_MspInit+0xf8>)
 8002a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a68:	4a22      	ldr	r2, [pc, #136]	@ (8002af4 <HAL_ADC_MspInit+0xf8>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a70:	4b20      	ldr	r3, [pc, #128]	@ (8002af4 <HAL_ADC_MspInit+0xf8>)
 8002a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a80:	2303      	movs	r3, #3
 8002a82:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a92:	f002 fc99 	bl	80053c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8002a96:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <HAL_ADC_MspInit+0xfc>)
 8002a98:	4a18      	ldr	r2, [pc, #96]	@ (8002afc <HAL_ADC_MspInit+0x100>)
 8002a9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a9c:	4b16      	ldr	r3, [pc, #88]	@ (8002af8 <HAL_ADC_MspInit+0xfc>)
 8002a9e:	2205      	movs	r2, #5
 8002aa0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa2:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <HAL_ADC_MspInit+0xfc>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa8:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <HAL_ADC_MspInit+0xfc>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aae:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <HAL_ADC_MspInit+0xfc>)
 8002ab0:	2280      	movs	r2, #128	@ 0x80
 8002ab2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ab4:	4b10      	ldr	r3, [pc, #64]	@ (8002af8 <HAL_ADC_MspInit+0xfc>)
 8002ab6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002aba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002abc:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <HAL_ADC_MspInit+0xfc>)
 8002abe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ac2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <HAL_ADC_MspInit+0xfc>)
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002aca:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <HAL_ADC_MspInit+0xfc>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ad0:	4809      	ldr	r0, [pc, #36]	@ (8002af8 <HAL_ADC_MspInit+0xfc>)
 8002ad2:	f002 f947 	bl	8004d64 <HAL_DMA_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002adc:	f7ff fe11 	bl	8002702 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a05      	ldr	r2, [pc, #20]	@ (8002af8 <HAL_ADC_MspInit+0xfc>)
 8002ae4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ae6:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <HAL_ADC_MspInit+0xfc>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aec:	bf00      	nop
 8002aee:	3778      	adds	r7, #120	@ 0x78
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	200004e0 	.word	0x200004e0
 8002afc:	40020030 	.word	0x40020030

08002b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b094      	sub	sp, #80	@ 0x50
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a97      	ldr	r2, [pc, #604]	@ (8002d7c <HAL_TIM_Base_MspInit+0x27c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d130      	bne.n	8002b84 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b22:	4b97      	ldr	r3, [pc, #604]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b26:	4a96      	ldr	r2, [pc, #600]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002b28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b2e:	4b94      	ldr	r3, [pc, #592]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b3a:	4b91      	ldr	r3, [pc, #580]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3e:	4a90      	ldr	r2, [pc, #576]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b46:	4b8e      	ldr	r3, [pc, #568]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8002b52:	2305      	movs	r3, #5
 8002b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	2302      	movs	r3, #2
 8002b58:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b62:	2302      	movs	r3, #2
 8002b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b66:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4885      	ldr	r0, [pc, #532]	@ (8002d84 <HAL_TIM_Base_MspInit+0x284>)
 8002b6e:	f002 fc2b 	bl	80053c8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	2019      	movs	r0, #25
 8002b78:	f002 f8bf 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002b7c:	2019      	movs	r0, #25
 8002b7e:	f002 f8d6 	bl	8004d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8002b82:	e0f7      	b.n	8002d74 <HAL_TIM_Base_MspInit+0x274>
  else if(htim_base->Instance==TIM2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b8c:	d114      	bne.n	8002bb8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b92:	4a7b      	ldr	r2, [pc, #492]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b9a:	4b79      	ldr	r3, [pc, #484]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	201c      	movs	r0, #28
 8002bac:	f002 f8a5 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bb0:	201c      	movs	r0, #28
 8002bb2:	f002 f8bc 	bl	8004d2e <HAL_NVIC_EnableIRQ>
}
 8002bb6:	e0dd      	b.n	8002d74 <HAL_TIM_Base_MspInit+0x274>
  else if(htim_base->Instance==TIM3)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a72      	ldr	r2, [pc, #456]	@ (8002d88 <HAL_TIM_Base_MspInit+0x288>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d129      	bne.n	8002c16 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bc2:	4b6f      	ldr	r3, [pc, #444]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	4a6e      	ldr	r2, [pc, #440]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bce:	4b6c      	ldr	r3, [pc, #432]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	4b69      	ldr	r3, [pc, #420]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bde:	4a68      	ldr	r2, [pc, #416]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002be6:	4b66      	ldr	r3, [pc, #408]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c02:	2302      	movs	r3, #2
 8002c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c06:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c10:	f002 fbda 	bl	80053c8 <HAL_GPIO_Init>
}
 8002c14:	e0ae      	b.n	8002d74 <HAL_TIM_Base_MspInit+0x274>
  else if(htim_base->Instance==TIM8)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a5c      	ldr	r2, [pc, #368]	@ (8002d8c <HAL_TIM_Base_MspInit+0x28c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d145      	bne.n	8002cac <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c20:	4b57      	ldr	r3, [pc, #348]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c24:	4a56      	ldr	r2, [pc, #344]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002c26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c2c:	4b54      	ldr	r3, [pc, #336]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c38:	4b51      	ldr	r3, [pc, #324]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3c:	4a50      	ldr	r2, [pc, #320]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c44:	4b4e      	ldr	r3, [pc, #312]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	623b      	str	r3, [r7, #32]
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c50:	4b4b      	ldr	r3, [pc, #300]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c54:	4a4a      	ldr	r2, [pc, #296]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002c56:	f043 0302 	orr.w	r3, r3, #2
 8002c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c5c:	4b48      	ldr	r3, [pc, #288]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c68:	2340      	movs	r3, #64	@ 0x40
 8002c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c74:	2300      	movs	r3, #0
 8002c76:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002c78:	2304      	movs	r3, #4
 8002c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c80:	4619      	mov	r1, r3
 8002c82:	4840      	ldr	r0, [pc, #256]	@ (8002d84 <HAL_TIM_Base_MspInit+0x284>)
 8002c84:	f002 fba0 	bl	80053c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2300      	movs	r3, #0
 8002c98:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002c9a:	230a      	movs	r3, #10
 8002c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	483a      	ldr	r0, [pc, #232]	@ (8002d90 <HAL_TIM_Base_MspInit+0x290>)
 8002ca6:	f002 fb8f 	bl	80053c8 <HAL_GPIO_Init>
}
 8002caa:	e063      	b.n	8002d74 <HAL_TIM_Base_MspInit+0x274>
  else if(htim_base->Instance==TIM16)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a38      	ldr	r2, [pc, #224]	@ (8002d94 <HAL_TIM_Base_MspInit+0x294>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d114      	bne.n	8002ce0 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002cb6:	4b32      	ldr	r3, [pc, #200]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cba:	4a31      	ldr	r2, [pc, #196]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2019      	movs	r0, #25
 8002cd4:	f002 f811 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002cd8:	2019      	movs	r0, #25
 8002cda:	f002 f828 	bl	8004d2e <HAL_NVIC_EnableIRQ>
}
 8002cde:	e049      	b.n	8002d74 <HAL_TIM_Base_MspInit+0x274>
  else if(htim_base->Instance==TIM20)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d98 <HAL_TIM_Base_MspInit+0x298>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d144      	bne.n	8002d74 <HAL_TIM_Base_MspInit+0x274>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002cea:	4b25      	ldr	r3, [pc, #148]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cee:	4a24      	ldr	r2, [pc, #144]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002cf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cf6:	4b22      	ldr	r3, [pc, #136]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d02:	4b1f      	ldr	r3, [pc, #124]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d06:	4a1e      	ldr	r2, [pc, #120]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d1a:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1e:	4a18      	ldr	r2, [pc, #96]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d26:	4b16      	ldr	r3, [pc, #88]	@ (8002d80 <HAL_TIM_Base_MspInit+0x280>)
 8002d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d32:	2304      	movs	r3, #4
 8002d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8002d42:	2303      	movs	r3, #3
 8002d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d46:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4810      	ldr	r0, [pc, #64]	@ (8002d90 <HAL_TIM_Base_MspInit+0x290>)
 8002d4e:	f002 fb3b 	bl	80053c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d60:	2300      	movs	r3, #0
 8002d62:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002d64:	2306      	movs	r3, #6
 8002d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d68:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4805      	ldr	r0, [pc, #20]	@ (8002d84 <HAL_TIM_Base_MspInit+0x284>)
 8002d70:	f002 fb2a 	bl	80053c8 <HAL_GPIO_Init>
}
 8002d74:	bf00      	nop
 8002d76:	3750      	adds	r7, #80	@ 0x50
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40021000 	.word	0x40021000
 8002d84:	48000800 	.word	0x48000800
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40013400 	.word	0x40013400
 8002d90:	48000400 	.word	0x48000400
 8002d94:	40014400 	.word	0x40014400
 8002d98:	40015000 	.word	0x40015000

08002d9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	@ 0x28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	f107 0314 	add.w	r3, r7, #20
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a18      	ldr	r2, [pc, #96]	@ (8002e1c <HAL_TIM_Encoder_MspInit+0x80>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d129      	bne.n	8002e12 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dbe:	4b18      	ldr	r3, [pc, #96]	@ (8002e20 <HAL_TIM_Encoder_MspInit+0x84>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc2:	4a17      	ldr	r2, [pc, #92]	@ (8002e20 <HAL_TIM_Encoder_MspInit+0x84>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <HAL_TIM_Encoder_MspInit+0x84>)
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	4b12      	ldr	r3, [pc, #72]	@ (8002e20 <HAL_TIM_Encoder_MspInit+0x84>)
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	4a11      	ldr	r2, [pc, #68]	@ (8002e20 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002de2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e20 <HAL_TIM_Encoder_MspInit+0x84>)
 8002de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002dee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df4:	2302      	movs	r3, #2
 8002df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002e00:	230a      	movs	r3, #10
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e0e:	f002 fadb 	bl	80053c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e12:	bf00      	nop
 8002e14:	3728      	adds	r7, #40	@ 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40021000 	.word	0x40021000

08002e24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 030c 	add.w	r3, r7, #12
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a11      	ldr	r2, [pc, #68]	@ (8002e88 <HAL_TIM_MspPostInit+0x64>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d11b      	bne.n	8002e7e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e46:	4b11      	ldr	r3, [pc, #68]	@ (8002e8c <HAL_TIM_MspPostInit+0x68>)
 8002e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4a:	4a10      	ldr	r2, [pc, #64]	@ (8002e8c <HAL_TIM_MspPostInit+0x68>)
 8002e4c:	f043 0302 	orr.w	r3, r3, #2
 8002e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e52:	4b0e      	ldr	r3, [pc, #56]	@ (8002e8c <HAL_TIM_MspPostInit+0x68>)
 8002e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e5e:	2310      	movs	r3, #16
 8002e60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e72:	f107 030c 	add.w	r3, r7, #12
 8002e76:	4619      	mov	r1, r3
 8002e78:	4805      	ldr	r0, [pc, #20]	@ (8002e90 <HAL_TIM_MspPostInit+0x6c>)
 8002e7a:	f002 faa5 	bl	80053c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e7e:	bf00      	nop
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	48000400 	.word	0x48000400

08002e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b09e      	sub	sp, #120	@ 0x78
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eac:	f107 0310 	add.w	r3, r7, #16
 8002eb0:	2254      	movs	r2, #84	@ 0x54
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f008 f865 	bl	800af84 <memset>
  if(huart->Instance==USART2)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff4 <HAL_UART_MspInit+0x160>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	f040 8092 	bne.w	8002fea <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ece:	f107 0310 	add.w	r3, r7, #16
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 fa26 	bl	8006324 <HAL_RCCEx_PeriphCLKConfig>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ede:	f7ff fc10 	bl	8002702 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ee2:	4b45      	ldr	r3, [pc, #276]	@ (8002ff8 <HAL_UART_MspInit+0x164>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee6:	4a44      	ldr	r2, [pc, #272]	@ (8002ff8 <HAL_UART_MspInit+0x164>)
 8002ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eee:	4b42      	ldr	r3, [pc, #264]	@ (8002ff8 <HAL_UART_MspInit+0x164>)
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff8 <HAL_UART_MspInit+0x164>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	4a3e      	ldr	r2, [pc, #248]	@ (8002ff8 <HAL_UART_MspInit+0x164>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f06:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff8 <HAL_UART_MspInit+0x164>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f12:	230c      	movs	r3, #12
 8002f14:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f16:	2302      	movs	r3, #2
 8002f18:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f22:	2307      	movs	r3, #7
 8002f24:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f26:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f30:	f002 fa4a 	bl	80053c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8002f34:	4b31      	ldr	r3, [pc, #196]	@ (8002ffc <HAL_UART_MspInit+0x168>)
 8002f36:	4a32      	ldr	r2, [pc, #200]	@ (8003000 <HAL_UART_MspInit+0x16c>)
 8002f38:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002f3a:	4b30      	ldr	r3, [pc, #192]	@ (8002ffc <HAL_UART_MspInit+0x168>)
 8002f3c:	221b      	movs	r2, #27
 8002f3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f40:	4b2e      	ldr	r3, [pc, #184]	@ (8002ffc <HAL_UART_MspInit+0x168>)
 8002f42:	2210      	movs	r2, #16
 8002f44:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f46:	4b2d      	ldr	r3, [pc, #180]	@ (8002ffc <HAL_UART_MspInit+0x168>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ffc <HAL_UART_MspInit+0x168>)
 8002f4e:	2280      	movs	r2, #128	@ 0x80
 8002f50:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f52:	4b2a      	ldr	r3, [pc, #168]	@ (8002ffc <HAL_UART_MspInit+0x168>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f58:	4b28      	ldr	r3, [pc, #160]	@ (8002ffc <HAL_UART_MspInit+0x168>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f5e:	4b27      	ldr	r3, [pc, #156]	@ (8002ffc <HAL_UART_MspInit+0x168>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f64:	4b25      	ldr	r3, [pc, #148]	@ (8002ffc <HAL_UART_MspInit+0x168>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f6a:	4824      	ldr	r0, [pc, #144]	@ (8002ffc <HAL_UART_MspInit+0x168>)
 8002f6c:	f001 fefa 	bl	8004d64 <HAL_DMA_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002f76:	f7ff fbc4 	bl	8002702 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ffc <HAL_UART_MspInit+0x168>)
 8002f7e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f80:	4a1e      	ldr	r2, [pc, #120]	@ (8002ffc <HAL_UART_MspInit+0x168>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8002f86:	4b1f      	ldr	r3, [pc, #124]	@ (8003004 <HAL_UART_MspInit+0x170>)
 8002f88:	4a1f      	ldr	r2, [pc, #124]	@ (8003008 <HAL_UART_MspInit+0x174>)
 8002f8a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003004 <HAL_UART_MspInit+0x170>)
 8002f8e:	221a      	movs	r2, #26
 8002f90:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f92:	4b1c      	ldr	r3, [pc, #112]	@ (8003004 <HAL_UART_MspInit+0x170>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f98:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <HAL_UART_MspInit+0x170>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f9e:	4b19      	ldr	r3, [pc, #100]	@ (8003004 <HAL_UART_MspInit+0x170>)
 8002fa0:	2280      	movs	r2, #128	@ 0x80
 8002fa2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fa4:	4b17      	ldr	r3, [pc, #92]	@ (8003004 <HAL_UART_MspInit+0x170>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002faa:	4b16      	ldr	r3, [pc, #88]	@ (8003004 <HAL_UART_MspInit+0x170>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002fb0:	4b14      	ldr	r3, [pc, #80]	@ (8003004 <HAL_UART_MspInit+0x170>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fb6:	4b13      	ldr	r3, [pc, #76]	@ (8003004 <HAL_UART_MspInit+0x170>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fbc:	4811      	ldr	r0, [pc, #68]	@ (8003004 <HAL_UART_MspInit+0x170>)
 8002fbe:	f001 fed1 	bl	8004d64 <HAL_DMA_Init>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002fc8:	f7ff fb9b 	bl	8002702 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a0d      	ldr	r2, [pc, #52]	@ (8003004 <HAL_UART_MspInit+0x170>)
 8002fd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8003004 <HAL_UART_MspInit+0x170>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2100      	movs	r1, #0
 8002fde:	2026      	movs	r0, #38	@ 0x26
 8002fe0:	f001 fe8b 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fe4:	2026      	movs	r0, #38	@ 0x26
 8002fe6:	f001 fea2 	bl	8004d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002fea:	bf00      	nop
 8002fec:	3778      	adds	r7, #120	@ 0x78
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40004400 	.word	0x40004400
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	20000ba0 	.word	0x20000ba0
 8003000:	40020008 	.word	0x40020008
 8003004:	20000c00 	.word	0x20000c00
 8003008:	4002001c 	.word	0x4002001c

0800300c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <NMI_Handler+0x4>

08003014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <HardFault_Handler+0x4>

0800301c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <MemManage_Handler+0x4>

08003024 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <BusFault_Handler+0x4>

0800302c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <UsageFault_Handler+0x4>

08003034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003062:	f000 f8d9 	bl	8003218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003070:	4802      	ldr	r0, [pc, #8]	@ (800307c <DMA1_Channel1_IRQHandler+0x10>)
 8003072:	f002 f85a 	bl	800512a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000ba0 	.word	0x20000ba0

08003080 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003084:	4802      	ldr	r0, [pc, #8]	@ (8003090 <DMA1_Channel2_IRQHandler+0x10>)
 8003086:	f002 f850 	bl	800512a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000c00 	.word	0x20000c00

08003094 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003098:	4802      	ldr	r0, [pc, #8]	@ (80030a4 <DMA1_Channel3_IRQHandler+0x10>)
 800309a:	f002 f846 	bl	800512a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	200004e0 	.word	0x200004e0

080030a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030ac:	4803      	ldr	r0, [pc, #12]	@ (80030bc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80030ae:	f004 f9fd 	bl	80074ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80030b2:	4803      	ldr	r0, [pc, #12]	@ (80030c0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80030b4:	f004 f9fa 	bl	80074ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000540 	.word	0x20000540
 80030c0:	2000093c 	.word	0x2000093c

080030c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030c8:	4802      	ldr	r0, [pc, #8]	@ (80030d4 <TIM2_IRQHandler+0x10>)
 80030ca:	f004 f9ef 	bl	80074ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	2000060c 	.word	0x2000060c

080030d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030dc:	4802      	ldr	r0, [pc, #8]	@ (80030e8 <USART2_IRQHandler+0x10>)
 80030de:	f006 fa0d 	bl	80094fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000ad4 	.word	0x20000ad4

080030ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80030f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80030f4:	f002 fb1c 	bl	8005730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}

080030fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <SystemInit+0x20>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003106:	4a05      	ldr	r2, [pc, #20]	@ (800311c <SystemInit+0x20>)
 8003108:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800310c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003120:	480d      	ldr	r0, [pc, #52]	@ (8003158 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003122:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003124:	f7ff ffea 	bl	80030fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003128:	480c      	ldr	r0, [pc, #48]	@ (800315c <LoopForever+0x6>)
  ldr r1, =_edata
 800312a:	490d      	ldr	r1, [pc, #52]	@ (8003160 <LoopForever+0xa>)
  ldr r2, =_sidata
 800312c:	4a0d      	ldr	r2, [pc, #52]	@ (8003164 <LoopForever+0xe>)
  movs r3, #0
 800312e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003130:	e002      	b.n	8003138 <LoopCopyDataInit>

08003132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003136:	3304      	adds	r3, #4

08003138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800313a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800313c:	d3f9      	bcc.n	8003132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800313e:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003140:	4c0a      	ldr	r4, [pc, #40]	@ (800316c <LoopForever+0x16>)
  movs r3, #0
 8003142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003144:	e001      	b.n	800314a <LoopFillZerobss>

08003146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003148:	3204      	adds	r2, #4

0800314a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800314a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800314c:	d3fb      	bcc.n	8003146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800314e:	f007 ff21 	bl	800af94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003152:	f7fe fa99 	bl	8001688 <main>

08003156 <LoopForever>:

LoopForever:
    b LoopForever
 8003156:	e7fe      	b.n	8003156 <LoopForever>
  ldr   r0, =_estack
 8003158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800315c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003160:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8003164:	0800b158 	.word	0x0800b158
  ldr r2, =_sbss
 8003168:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800316c:	2000113c 	.word	0x2000113c

08003170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003170:	e7fe      	b.n	8003170 <ADC1_2_IRQHandler>

08003172 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800317c:	2003      	movs	r0, #3
 800317e:	f001 fdb1 	bl	8004ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003182:	2000      	movs	r0, #0
 8003184:	f000 f80e 	bl	80031a4 <HAL_InitTick>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	71fb      	strb	r3, [r7, #7]
 8003192:	e001      	b.n	8003198 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003194:	f7ff fc0e 	bl	80029b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003198:	79fb      	ldrb	r3, [r7, #7]

}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80031b0:	4b16      	ldr	r3, [pc, #88]	@ (800320c <HAL_InitTick+0x68>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d022      	beq.n	80031fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80031b8:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <HAL_InitTick+0x6c>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b13      	ldr	r3, [pc, #76]	@ (800320c <HAL_InitTick+0x68>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80031c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	4618      	mov	r0, r3
 80031ce:	f001 fdbc 	bl	8004d4a <HAL_SYSTICK_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	d809      	bhi.n	80031f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031de:	2200      	movs	r2, #0
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	f04f 30ff 	mov.w	r0, #4294967295
 80031e6:	f001 fd88 	bl	8004cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003214 <HAL_InitTick+0x70>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	e007      	b.n	8003202 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
 80031f6:	e004      	b.n	8003202 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	e001      	b.n	8003202 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000208 	.word	0x20000208
 8003210:	20000200 	.word	0x20000200
 8003214:	20000204 	.word	0x20000204

08003218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800321c:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <HAL_IncTick+0x1c>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_IncTick+0x20>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4413      	add	r3, r2
 8003226:	4a03      	ldr	r2, [pc, #12]	@ (8003234 <HAL_IncTick+0x1c>)
 8003228:	6013      	str	r3, [r2, #0]
}
 800322a:	bf00      	nop
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	20001138 	.word	0x20001138
 8003238:	20000208 	.word	0x20000208

0800323c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return uwTick;
 8003240:	4b03      	ldr	r3, [pc, #12]	@ (8003250 <HAL_GetTick+0x14>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20001138 	.word	0x20001138

08003254 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	609a      	str	r2, [r3, #8]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3360      	adds	r3, #96	@ 0x60
 80032ce:	461a      	mov	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <LL_ADC_SetOffset+0x44>)
 80032de:	4013      	ands	r3, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	03fff000 	.word	0x03fff000

08003304 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3360      	adds	r3, #96	@ 0x60
 8003312:	461a      	mov	r2, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3360      	adds	r3, #96	@ 0x60
 8003340:	461a      	mov	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	431a      	orrs	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003366:	b480      	push	{r7}
 8003368:	b087      	sub	sp, #28
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3360      	adds	r3, #96	@ 0x60
 8003376:	461a      	mov	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	431a      	orrs	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003390:	bf00      	nop
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3360      	adds	r3, #96	@ 0x60
 80033ac:	461a      	mov	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	615a      	str	r2, [r3, #20]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800341e:	b480      	push	{r7}
 8003420:	b087      	sub	sp, #28
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3330      	adds	r3, #48	@ 0x30
 800342e:	461a      	mov	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	4413      	add	r3, r2
 800343c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	211f      	movs	r1, #31
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	401a      	ands	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	0e9b      	lsrs	r3, r3, #26
 8003456:	f003 011f 	and.w	r1, r3, #31
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	fa01 f303 	lsl.w	r3, r1, r3
 8003464:	431a      	orrs	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003476:	b480      	push	{r7}
 8003478:	b087      	sub	sp, #28
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	3314      	adds	r3, #20
 8003486:	461a      	mov	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	0e5b      	lsrs	r3, r3, #25
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	4413      	add	r3, r2
 8003494:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	0d1b      	lsrs	r3, r3, #20
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2107      	movs	r1, #7
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	401a      	ands	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	0d1b      	lsrs	r3, r3, #20
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	431a      	orrs	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f003 0318 	and.w	r3, r3, #24
 80034ee:	4908      	ldr	r1, [pc, #32]	@ (8003510 <LL_ADC_SetChannelSingleDiff+0x44>)
 80034f0:	40d9      	lsrs	r1, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	400b      	ands	r3, r1
 80034f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fa:	431a      	orrs	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	0007ffff 	.word	0x0007ffff

08003514 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 031f 	and.w	r3, r3, #31
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003540:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6093      	str	r3, [r2, #8]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003568:	d101      	bne.n	800356e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800358c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003590:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035b8:	d101      	bne.n	80035be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035e0:	f043 0201 	orr.w	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003604:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003608:	f043 0202 	orr.w	r2, r3, #2
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <LL_ADC_IsEnabled+0x18>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <LL_ADC_IsEnabled+0x1a>
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d101      	bne.n	800365a <LL_ADC_IsDisableOngoing+0x18>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <LL_ADC_IsDisableOngoing+0x1a>
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003678:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800367c:	f043 0204 	orr.w	r2, r3, #4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d101      	bne.n	80036a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d101      	bne.n	80036ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b089      	sub	sp, #36	@ 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e1a9      	b.n	8003a4a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff f979 	bl	80029fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff19 	bl	8003554 <LL_ADC_IsDeepPowerDownEnabled>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff feff 	bl	8003530 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff34 	bl	80035a4 <LL_ADC_IsInternalRegulatorEnabled>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d115      	bne.n	800376e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff ff18 	bl	800357c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800374c:	4b9c      	ldr	r3, [pc, #624]	@ (80039c0 <HAL_ADC_Init+0x2e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	4a9c      	ldr	r2, [pc, #624]	@ (80039c4 <HAL_ADC_Init+0x2e8>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	3301      	adds	r3, #1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003760:	e002      	b.n	8003768 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3b01      	subs	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f9      	bne.n	8003762 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff ff16 	bl	80035a4 <LL_ADC_IsInternalRegulatorEnabled>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10d      	bne.n	800379a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003782:	f043 0210 	orr.w	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378e:	f043 0201 	orr.w	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff ff76 	bl	8003690 <LL_ADC_REG_IsConversionOngoing>
 80037a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 8142 	bne.w	8003a38 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f040 813e 	bne.w	8003a38 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80037c4:	f043 0202 	orr.w	r2, r3, #2
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff23 	bl	800361c <LL_ADC_IsEnabled>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d141      	bne.n	8003860 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037e4:	d004      	beq.n	80037f0 <HAL_ADC_Init+0x114>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a77      	ldr	r2, [pc, #476]	@ (80039c8 <HAL_ADC_Init+0x2ec>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10f      	bne.n	8003810 <HAL_ADC_Init+0x134>
 80037f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80037f4:	f7ff ff12 	bl	800361c <LL_ADC_IsEnabled>
 80037f8:	4604      	mov	r4, r0
 80037fa:	4873      	ldr	r0, [pc, #460]	@ (80039c8 <HAL_ADC_Init+0x2ec>)
 80037fc:	f7ff ff0e 	bl	800361c <LL_ADC_IsEnabled>
 8003800:	4603      	mov	r3, r0
 8003802:	4323      	orrs	r3, r4
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e012      	b.n	8003836 <HAL_ADC_Init+0x15a>
 8003810:	486e      	ldr	r0, [pc, #440]	@ (80039cc <HAL_ADC_Init+0x2f0>)
 8003812:	f7ff ff03 	bl	800361c <LL_ADC_IsEnabled>
 8003816:	4604      	mov	r4, r0
 8003818:	486d      	ldr	r0, [pc, #436]	@ (80039d0 <HAL_ADC_Init+0x2f4>)
 800381a:	f7ff feff 	bl	800361c <LL_ADC_IsEnabled>
 800381e:	4603      	mov	r3, r0
 8003820:	431c      	orrs	r4, r3
 8003822:	486c      	ldr	r0, [pc, #432]	@ (80039d4 <HAL_ADC_Init+0x2f8>)
 8003824:	f7ff fefa 	bl	800361c <LL_ADC_IsEnabled>
 8003828:	4603      	mov	r3, r0
 800382a:	4323      	orrs	r3, r4
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d012      	beq.n	8003860 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003842:	d004      	beq.n	800384e <HAL_ADC_Init+0x172>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a5f      	ldr	r2, [pc, #380]	@ (80039c8 <HAL_ADC_Init+0x2ec>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_ADC_Init+0x176>
 800384e:	4a62      	ldr	r2, [pc, #392]	@ (80039d8 <HAL_ADC_Init+0x2fc>)
 8003850:	e000      	b.n	8003854 <HAL_ADC_Init+0x178>
 8003852:	4a62      	ldr	r2, [pc, #392]	@ (80039dc <HAL_ADC_Init+0x300>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f7ff fcfa 	bl	8003254 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	7f5b      	ldrb	r3, [r3, #29]
 8003864:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800386a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003870:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003876:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800387e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800388a:	2b01      	cmp	r3, #1
 800388c:	d106      	bne.n	800389c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	3b01      	subs	r3, #1
 8003894:	045b      	lsls	r3, r3, #17
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d009      	beq.n	80038b8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	4b48      	ldr	r3, [pc, #288]	@ (80039e0 <HAL_ADC_Init+0x304>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	69b9      	ldr	r1, [r7, #24]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fee5 	bl	80036b6 <LL_ADC_INJ_IsConversionOngoing>
 80038ec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d17f      	bne.n	80039f4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d17c      	bne.n	80039f4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038fe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003906:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003916:	f023 0302 	bic.w	r3, r3, #2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	69b9      	ldr	r1, [r7, #24]
 8003920:	430b      	orrs	r3, r1
 8003922:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d017      	beq.n	800395c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800393a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003944:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003948:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6911      	ldr	r1, [r2, #16]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	430b      	orrs	r3, r1
 8003956:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800395a:	e013      	b.n	8003984 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800396a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800397c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003980:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800398a:	2b01      	cmp	r3, #1
 800398c:	d12a      	bne.n	80039e4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003998:	f023 0304 	bic.w	r3, r3, #4
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80039a4:	4311      	orrs	r1, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80039aa:	4311      	orrs	r1, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039b0:	430a      	orrs	r2, r1
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	e019      	b.n	80039f4 <HAL_ADC_Init+0x318>
 80039c0:	20000200 	.word	0x20000200
 80039c4:	053e2d63 	.word	0x053e2d63
 80039c8:	50000100 	.word	0x50000100
 80039cc:	50000400 	.word	0x50000400
 80039d0:	50000500 	.word	0x50000500
 80039d4:	50000600 	.word	0x50000600
 80039d8:	50000300 	.word	0x50000300
 80039dc:	50000700 	.word	0x50000700
 80039e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10c      	bne.n	8003a16 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	f023 010f 	bic.w	r1, r3, #15
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	1e5a      	subs	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a14:	e007      	b.n	8003a26 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 020f 	bic.w	r2, r2, #15
 8003a24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a36:	e007      	b.n	8003a48 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3c:	f043 0210 	orr.w	r2, r3, #16
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3724      	adds	r7, #36	@ 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd90      	pop	{r4, r7, pc}
 8003a52:	bf00      	nop

08003a54 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a68:	d004      	beq.n	8003a74 <HAL_ADC_Start_DMA+0x20>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a5a      	ldr	r2, [pc, #360]	@ (8003bd8 <HAL_ADC_Start_DMA+0x184>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d101      	bne.n	8003a78 <HAL_ADC_Start_DMA+0x24>
 8003a74:	4b59      	ldr	r3, [pc, #356]	@ (8003bdc <HAL_ADC_Start_DMA+0x188>)
 8003a76:	e000      	b.n	8003a7a <HAL_ADC_Start_DMA+0x26>
 8003a78:	4b59      	ldr	r3, [pc, #356]	@ (8003be0 <HAL_ADC_Start_DMA+0x18c>)
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fd4a 	bl	8003514 <LL_ADC_GetMultimode>
 8003a80:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fe02 	bl	8003690 <LL_ADC_REG_IsConversionOngoing>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f040 809b 	bne.w	8003bca <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ADC_Start_DMA+0x4e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e096      	b.n	8003bd0 <HAL_ADC_Start_DMA+0x17c>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a4d      	ldr	r2, [pc, #308]	@ (8003be4 <HAL_ADC_Start_DMA+0x190>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d008      	beq.n	8003ac6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b05      	cmp	r3, #5
 8003abe:	d002      	beq.n	8003ac6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b09      	cmp	r3, #9
 8003ac4:	d17a      	bne.n	8003bbc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fcf6 	bl	80044b8 <ADC_Enable>
 8003acc:	4603      	mov	r3, r0
 8003ace:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d16d      	bne.n	8003bb2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ada:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a3a      	ldr	r2, [pc, #232]	@ (8003bd8 <HAL_ADC_Start_DMA+0x184>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_ADC_Start_DMA+0xb4>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3b      	ldr	r2, [pc, #236]	@ (8003be8 <HAL_ADC_Start_DMA+0x194>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d002      	beq.n	8003b04 <HAL_ADC_Start_DMA+0xb0>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	e003      	b.n	8003b0c <HAL_ADC_Start_DMA+0xb8>
 8003b04:	4b39      	ldr	r3, [pc, #228]	@ (8003bec <HAL_ADC_Start_DMA+0x198>)
 8003b06:	e001      	b.n	8003b0c <HAL_ADC_Start_DMA+0xb8>
 8003b08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d002      	beq.n	8003b1a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d105      	bne.n	8003b26 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d006      	beq.n	8003b40 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b36:	f023 0206 	bic.w	r2, r3, #6
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003b3e:	e002      	b.n	8003b46 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4a:	4a29      	ldr	r2, [pc, #164]	@ (8003bf0 <HAL_ADC_Start_DMA+0x19c>)
 8003b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b52:	4a28      	ldr	r2, [pc, #160]	@ (8003bf4 <HAL_ADC_Start_DMA+0x1a0>)
 8003b54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5a:	4a27      	ldr	r2, [pc, #156]	@ (8003bf8 <HAL_ADC_Start_DMA+0x1a4>)
 8003b5c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	221c      	movs	r2, #28
 8003b64:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0210 	orr.w	r2, r2, #16
 8003b7c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3340      	adds	r3, #64	@ 0x40
 8003b98:	4619      	mov	r1, r3
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f001 f989 	bl	8004eb4 <HAL_DMA_Start_IT>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fd5c 	bl	8003668 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003bb0:	e00d      	b.n	8003bce <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003bba:	e008      	b.n	8003bce <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003bc8:	e001      	b.n	8003bce <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	50000100 	.word	0x50000100
 8003bdc:	50000300 	.word	0x50000300
 8003be0:	50000700 	.word	0x50000700
 8003be4:	50000600 	.word	0x50000600
 8003be8:	50000500 	.word	0x50000500
 8003bec:	50000400 	.word	0x50000400
 8003bf0:	080046a3 	.word	0x080046a3
 8003bf4:	0800477b 	.word	0x0800477b
 8003bf8:	08004797 	.word	0x08004797

08003bfc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b0b6      	sub	sp, #216	@ 0xd8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d102      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x24>
 8003c56:	2302      	movs	r3, #2
 8003c58:	f000 bc13 	b.w	8004482 <HAL_ADC_ConfigChannel+0x84a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fd11 	bl	8003690 <LL_ADC_REG_IsConversionOngoing>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 83f3 	bne.w	800445c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f7ff fbcb 	bl	800341e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fcff 	bl	8003690 <LL_ADC_REG_IsConversionOngoing>
 8003c92:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fd0b 	bl	80036b6 <LL_ADC_INJ_IsConversionOngoing>
 8003ca0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ca4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f040 81d9 	bne.w	8004060 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f040 81d4 	bne.w	8004060 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cc0:	d10f      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f7ff fbd2 	bl	8003476 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fb79 	bl	80033d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ce0:	e00e      	b.n	8003d00 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6819      	ldr	r1, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f7ff fbc1 	bl	8003476 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fb69 	bl	80033d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	08db      	lsrs	r3, r3, #3
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d022      	beq.n	8003d68 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6919      	ldr	r1, [r3, #16]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d32:	f7ff fac3 	bl	80032bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6919      	ldr	r1, [r3, #16]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f7ff fb0f 	bl	8003366 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d102      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x126>
 8003d58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d5c:	e000      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x128>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	461a      	mov	r2, r3
 8003d62:	f7ff fb1b 	bl	800339c <LL_ADC_SetOffsetSaturation>
 8003d66:	e17b      	b.n	8004060 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fac8 	bl	8003304 <LL_ADC_GetOffsetChannel>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x15c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fabd 	bl	8003304 <LL_ADC_GetOffsetChannel>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	0e9b      	lsrs	r3, r3, #26
 8003d8e:	f003 021f 	and.w	r2, r3, #31
 8003d92:	e01e      	b.n	8003dd2 <HAL_ADC_ConfigChannel+0x19a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fab2 	bl	8003304 <LL_ADC_GetOffsetChannel>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003db6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003dba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	e004      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003dc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d105      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x1b2>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	0e9b      	lsrs	r3, r3, #26
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	e018      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x1e4>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003df6:	fa93 f3a3 	rbit	r3, r3
 8003dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003e0e:	2320      	movs	r3, #32
 8003e10:	e004      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003e12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d106      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fa81 	bl	8003330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2101      	movs	r1, #1
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fa65 	bl	8003304 <LL_ADC_GetOffsetChannel>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x222>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fa5a 	bl	8003304 <LL_ADC_GetOffsetChannel>
 8003e50:	4603      	mov	r3, r0
 8003e52:	0e9b      	lsrs	r3, r3, #26
 8003e54:	f003 021f 	and.w	r2, r3, #31
 8003e58:	e01e      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x260>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fa4f 	bl	8003304 <LL_ADC_GetOffsetChannel>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003e78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	e004      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003e8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e90:	fab3 f383 	clz	r3, r3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x278>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	0e9b      	lsrs	r3, r3, #26
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	e018      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x2aa>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ebc:	fa93 f3a3 	rbit	r3, r3
 8003ec0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ec8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	e004      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003edc:	fab3 f383 	clz	r3, r3
 8003ee0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d106      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	2101      	movs	r1, #1
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fa1e 	bl	8003330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2102      	movs	r1, #2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff fa02 	bl	8003304 <LL_ADC_GetOffsetChannel>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x2e8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2102      	movs	r1, #2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff f9f7 	bl	8003304 <LL_ADC_GetOffsetChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	0e9b      	lsrs	r3, r3, #26
 8003f1a:	f003 021f 	and.w	r2, r3, #31
 8003f1e:	e01e      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x326>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2102      	movs	r1, #2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff f9ec 	bl	8003304 <LL_ADC_GetOffsetChannel>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003f4e:	2320      	movs	r3, #32
 8003f50:	e004      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003f52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x33e>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	0e9b      	lsrs	r3, r3, #26
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	e016      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x36c>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f82:	fa93 f3a3 	rbit	r3, r3
 8003f86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003f88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003f96:	2320      	movs	r3, #32
 8003f98:	e004      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d106      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2200      	movs	r2, #0
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff f9bd 	bl	8003330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2103      	movs	r1, #3
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff f9a1 	bl	8003304 <LL_ADC_GetOffsetChannel>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x3aa>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2103      	movs	r1, #3
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff f996 	bl	8003304 <LL_ADC_GetOffsetChannel>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	0e9b      	lsrs	r3, r3, #26
 8003fdc:	f003 021f 	and.w	r2, r3, #31
 8003fe0:	e017      	b.n	8004012 <HAL_ADC_ConfigChannel+0x3da>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2103      	movs	r1, #3
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff f98b 	bl	8003304 <LL_ADC_GetOffsetChannel>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ff4:	fa93 f3a3 	rbit	r3, r3
 8003ff8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003ffa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ffc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003ffe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004004:	2320      	movs	r3, #32
 8004006:	e003      	b.n	8004010 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004008:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401a:	2b00      	cmp	r3, #0
 800401c:	d105      	bne.n	800402a <HAL_ADC_ConfigChannel+0x3f2>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	0e9b      	lsrs	r3, r3, #26
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	e011      	b.n	800404e <HAL_ADC_ConfigChannel+0x416>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004030:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004032:	fa93 f3a3 	rbit	r3, r3
 8004036:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800403a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800403c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004042:	2320      	movs	r3, #32
 8004044:	e003      	b.n	800404e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004048:	fab3 f383 	clz	r3, r3
 800404c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800404e:	429a      	cmp	r2, r3
 8004050:	d106      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	2103      	movs	r1, #3
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff f968 	bl	8003330 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fad9 	bl	800361c <LL_ADC_IsEnabled>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 813d 	bne.w	80042ec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6819      	ldr	r1, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	461a      	mov	r2, r3
 8004080:	f7ff fa24 	bl	80034cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4aa2      	ldr	r2, [pc, #648]	@ (8004314 <HAL_ADC_ConfigChannel+0x6dc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	f040 812e 	bne.w	80042ec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x480>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	3301      	adds	r3, #1
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2b09      	cmp	r3, #9
 80040ae:	bf94      	ite	ls
 80040b0:	2301      	movls	r3, #1
 80040b2:	2300      	movhi	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e019      	b.n	80040ec <HAL_ADC_ConfigChannel+0x4b4>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80040c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80040ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80040d0:	2320      	movs	r3, #32
 80040d2:	e003      	b.n	80040dc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80040d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	2b09      	cmp	r3, #9
 80040e4:	bf94      	ite	ls
 80040e6:	2301      	movls	r3, #1
 80040e8:	2300      	movhi	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d079      	beq.n	80041e4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d107      	bne.n	800410c <HAL_ADC_ConfigChannel+0x4d4>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	0e9b      	lsrs	r3, r3, #26
 8004102:	3301      	adds	r3, #1
 8004104:	069b      	lsls	r3, r3, #26
 8004106:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800410a:	e015      	b.n	8004138 <HAL_ADC_ConfigChannel+0x500>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800411a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800411c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800411e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004124:	2320      	movs	r3, #32
 8004126:	e003      	b.n	8004130 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	3301      	adds	r3, #1
 8004132:	069b      	lsls	r3, r3, #26
 8004134:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x520>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	0e9b      	lsrs	r3, r3, #26
 800414a:	3301      	adds	r3, #1
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	2101      	movs	r1, #1
 8004152:	fa01 f303 	lsl.w	r3, r1, r3
 8004156:	e017      	b.n	8004188 <HAL_ADC_ConfigChannel+0x550>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004160:	fa93 f3a3 	rbit	r3, r3
 8004164:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004168:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800416a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004170:	2320      	movs	r3, #32
 8004172:	e003      	b.n	800417c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	3301      	adds	r3, #1
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	ea42 0103 	orr.w	r1, r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x576>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	0e9b      	lsrs	r3, r3, #26
 800419e:	3301      	adds	r3, #1
 80041a0:	f003 021f 	and.w	r2, r3, #31
 80041a4:	4613      	mov	r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	4413      	add	r3, r2
 80041aa:	051b      	lsls	r3, r3, #20
 80041ac:	e018      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x5a8>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80041bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80041c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80041c6:	2320      	movs	r3, #32
 80041c8:	e003      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80041ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041cc:	fab3 f383 	clz	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	3301      	adds	r3, #1
 80041d4:	f003 021f 	and.w	r2, r3, #31
 80041d8:	4613      	mov	r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	4413      	add	r3, r2
 80041de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041e0:	430b      	orrs	r3, r1
 80041e2:	e07e      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x5c8>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	0e9b      	lsrs	r3, r3, #26
 80041f6:	3301      	adds	r3, #1
 80041f8:	069b      	lsls	r3, r3, #26
 80041fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041fe:	e015      	b.n	800422c <HAL_ADC_ConfigChannel+0x5f4>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800420e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004210:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004218:	2320      	movs	r3, #32
 800421a:	e003      	b.n	8004224 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800421c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	3301      	adds	r3, #1
 8004226:	069b      	lsls	r3, r3, #26
 8004228:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <HAL_ADC_ConfigChannel+0x614>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	3301      	adds	r3, #1
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	e017      	b.n	800427c <HAL_ADC_ConfigChannel+0x644>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	61fb      	str	r3, [r7, #28]
  return result;
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004264:	2320      	movs	r3, #32
 8004266:	e003      	b.n	8004270 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2101      	movs	r1, #1
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	ea42 0103 	orr.w	r1, r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10d      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x670>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	0e9b      	lsrs	r3, r3, #26
 8004292:	3301      	adds	r3, #1
 8004294:	f003 021f 	and.w	r2, r3, #31
 8004298:	4613      	mov	r3, r2
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	4413      	add	r3, r2
 800429e:	3b1e      	subs	r3, #30
 80042a0:	051b      	lsls	r3, r3, #20
 80042a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	e01b      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x6a8>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	613b      	str	r3, [r7, #16]
  return result;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	e003      	b.n	80042cc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	f003 021f 	and.w	r2, r3, #31
 80042d2:	4613      	mov	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	4413      	add	r3, r2
 80042d8:	3b1e      	subs	r3, #30
 80042da:	051b      	lsls	r3, r3, #20
 80042dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042e6:	4619      	mov	r1, r3
 80042e8:	f7ff f8c5 	bl	8003476 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b09      	ldr	r3, [pc, #36]	@ (8004318 <HAL_ADC_ConfigChannel+0x6e0>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80be 	beq.w	8004476 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004302:	d004      	beq.n	800430e <HAL_ADC_ConfigChannel+0x6d6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a04      	ldr	r2, [pc, #16]	@ (800431c <HAL_ADC_ConfigChannel+0x6e4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10a      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x6ec>
 800430e:	4b04      	ldr	r3, [pc, #16]	@ (8004320 <HAL_ADC_ConfigChannel+0x6e8>)
 8004310:	e009      	b.n	8004326 <HAL_ADC_ConfigChannel+0x6ee>
 8004312:	bf00      	nop
 8004314:	407f0000 	.word	0x407f0000
 8004318:	80080000 	.word	0x80080000
 800431c:	50000100 	.word	0x50000100
 8004320:	50000300 	.word	0x50000300
 8004324:	4b59      	ldr	r3, [pc, #356]	@ (800448c <HAL_ADC_ConfigChannel+0x854>)
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe ffba 	bl	80032a0 <LL_ADC_GetCommonPathInternalCh>
 800432c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a56      	ldr	r2, [pc, #344]	@ (8004490 <HAL_ADC_ConfigChannel+0x858>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d004      	beq.n	8004344 <HAL_ADC_ConfigChannel+0x70c>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a55      	ldr	r2, [pc, #340]	@ (8004494 <HAL_ADC_ConfigChannel+0x85c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d13a      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004348:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d134      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004358:	d005      	beq.n	8004366 <HAL_ADC_ConfigChannel+0x72e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a4e      	ldr	r2, [pc, #312]	@ (8004498 <HAL_ADC_ConfigChannel+0x860>)
 8004360:	4293      	cmp	r3, r2
 8004362:	f040 8085 	bne.w	8004470 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800436e:	d004      	beq.n	800437a <HAL_ADC_ConfigChannel+0x742>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a49      	ldr	r2, [pc, #292]	@ (800449c <HAL_ADC_ConfigChannel+0x864>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d101      	bne.n	800437e <HAL_ADC_ConfigChannel+0x746>
 800437a:	4a49      	ldr	r2, [pc, #292]	@ (80044a0 <HAL_ADC_ConfigChannel+0x868>)
 800437c:	e000      	b.n	8004380 <HAL_ADC_ConfigChannel+0x748>
 800437e:	4a43      	ldr	r2, [pc, #268]	@ (800448c <HAL_ADC_ConfigChannel+0x854>)
 8004380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004384:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f7fe ff75 	bl	800327a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004390:	4b44      	ldr	r3, [pc, #272]	@ (80044a4 <HAL_ADC_ConfigChannel+0x86c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	099b      	lsrs	r3, r3, #6
 8004396:	4a44      	ldr	r2, [pc, #272]	@ (80044a8 <HAL_ADC_ConfigChannel+0x870>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	099b      	lsrs	r3, r3, #6
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	4613      	mov	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043aa:	e002      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f9      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043b8:	e05a      	b.n	8004470 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a3b      	ldr	r2, [pc, #236]	@ (80044ac <HAL_ADC_ConfigChannel+0x874>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d125      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d11f      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a31      	ldr	r2, [pc, #196]	@ (800449c <HAL_ADC_ConfigChannel+0x864>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d104      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x7ac>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a34      	ldr	r2, [pc, #208]	@ (80044b0 <HAL_ADC_ConfigChannel+0x878>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d047      	beq.n	8004474 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043ec:	d004      	beq.n	80043f8 <HAL_ADC_ConfigChannel+0x7c0>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2a      	ldr	r2, [pc, #168]	@ (800449c <HAL_ADC_ConfigChannel+0x864>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d101      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x7c4>
 80043f8:	4a29      	ldr	r2, [pc, #164]	@ (80044a0 <HAL_ADC_ConfigChannel+0x868>)
 80043fa:	e000      	b.n	80043fe <HAL_ADC_ConfigChannel+0x7c6>
 80043fc:	4a23      	ldr	r2, [pc, #140]	@ (800448c <HAL_ADC_ConfigChannel+0x854>)
 80043fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f7fe ff36 	bl	800327a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800440e:	e031      	b.n	8004474 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a27      	ldr	r2, [pc, #156]	@ (80044b4 <HAL_ADC_ConfigChannel+0x87c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d12d      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800441a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800441e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d127      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1c      	ldr	r2, [pc, #112]	@ (800449c <HAL_ADC_ConfigChannel+0x864>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004438:	d004      	beq.n	8004444 <HAL_ADC_ConfigChannel+0x80c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a17      	ldr	r2, [pc, #92]	@ (800449c <HAL_ADC_ConfigChannel+0x864>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d101      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x810>
 8004444:	4a16      	ldr	r2, [pc, #88]	@ (80044a0 <HAL_ADC_ConfigChannel+0x868>)
 8004446:	e000      	b.n	800444a <HAL_ADC_ConfigChannel+0x812>
 8004448:	4a10      	ldr	r2, [pc, #64]	@ (800448c <HAL_ADC_ConfigChannel+0x854>)
 800444a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800444e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f7fe ff10 	bl	800327a <LL_ADC_SetCommonPathInternalCh>
 800445a:	e00c      	b.n	8004476 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800446e:	e002      	b.n	8004476 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004470:	bf00      	nop
 8004472:	e000      	b.n	8004476 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004474:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800447e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004482:	4618      	mov	r0, r3
 8004484:	37d8      	adds	r7, #216	@ 0xd8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	50000700 	.word	0x50000700
 8004490:	c3210000 	.word	0xc3210000
 8004494:	90c00010 	.word	0x90c00010
 8004498:	50000600 	.word	0x50000600
 800449c:	50000100 	.word	0x50000100
 80044a0:	50000300 	.word	0x50000300
 80044a4:	20000200 	.word	0x20000200
 80044a8:	053e2d63 	.word	0x053e2d63
 80044ac:	c7520000 	.word	0xc7520000
 80044b0:	50000500 	.word	0x50000500
 80044b4:	cb840000 	.word	0xcb840000

080044b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff f8a7 	bl	800361c <LL_ADC_IsEnabled>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d176      	bne.n	80045c2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	4b3c      	ldr	r3, [pc, #240]	@ (80045cc <ADC_Enable+0x114>)
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e6:	f043 0210 	orr.w	r2, r3, #16
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f2:	f043 0201 	orr.w	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e062      	b.n	80045c4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff f862 	bl	80035cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004510:	d004      	beq.n	800451c <ADC_Enable+0x64>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2e      	ldr	r2, [pc, #184]	@ (80045d0 <ADC_Enable+0x118>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d101      	bne.n	8004520 <ADC_Enable+0x68>
 800451c:	4b2d      	ldr	r3, [pc, #180]	@ (80045d4 <ADC_Enable+0x11c>)
 800451e:	e000      	b.n	8004522 <ADC_Enable+0x6a>
 8004520:	4b2d      	ldr	r3, [pc, #180]	@ (80045d8 <ADC_Enable+0x120>)
 8004522:	4618      	mov	r0, r3
 8004524:	f7fe febc 	bl	80032a0 <LL_ADC_GetCommonPathInternalCh>
 8004528:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800452a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800452e:	2b00      	cmp	r3, #0
 8004530:	d013      	beq.n	800455a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004532:	4b2a      	ldr	r3, [pc, #168]	@ (80045dc <ADC_Enable+0x124>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	099b      	lsrs	r3, r3, #6
 8004538:	4a29      	ldr	r2, [pc, #164]	@ (80045e0 <ADC_Enable+0x128>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	099b      	lsrs	r3, r3, #6
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	4613      	mov	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800454c:	e002      	b.n	8004554 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	3b01      	subs	r3, #1
 8004552:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f9      	bne.n	800454e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800455a:	f7fe fe6f 	bl	800323c <HAL_GetTick>
 800455e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004560:	e028      	b.n	80045b4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff f858 	bl	800361c <LL_ADC_IsEnabled>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff f828 	bl	80035cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800457c:	f7fe fe5e 	bl	800323c <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d914      	bls.n	80045b4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d00d      	beq.n	80045b4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459c:	f043 0210 	orr.w	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a8:	f043 0201 	orr.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e007      	b.n	80045c4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d1cf      	bne.n	8004562 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	8000003f 	.word	0x8000003f
 80045d0:	50000100 	.word	0x50000100
 80045d4:	50000300 	.word	0x50000300
 80045d8:	50000700 	.word	0x50000700
 80045dc:	20000200 	.word	0x20000200
 80045e0:	053e2d63 	.word	0x053e2d63

080045e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff f826 	bl	8003642 <LL_ADC_IsDisableOngoing>
 80045f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff f80d 	bl	800361c <LL_ADC_IsEnabled>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d047      	beq.n	8004698 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d144      	bne.n	8004698 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 030d 	and.w	r3, r3, #13
 8004618:	2b01      	cmp	r3, #1
 800461a:	d10c      	bne.n	8004636 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe ffe7 	bl	80035f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2203      	movs	r2, #3
 800462c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800462e:	f7fe fe05 	bl	800323c <HAL_GetTick>
 8004632:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004634:	e029      	b.n	800468a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463a:	f043 0210 	orr.w	r2, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004646:	f043 0201 	orr.w	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e023      	b.n	800469a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004652:	f7fe fdf3 	bl	800323c <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d914      	bls.n	800468a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00d      	beq.n	800468a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004672:	f043 0210 	orr.w	r2, r3, #16
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800467e:	f043 0201 	orr.w	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e007      	b.n	800469a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1dc      	bne.n	8004652 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d14b      	bne.n	8004754 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d021      	beq.n	800471a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe fe8c 	bl	80033f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d032      	beq.n	800474c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d12b      	bne.n	800474c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d11f      	bne.n	800474c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004710:	f043 0201 	orr.w	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004718:	e018      	b.n	800474c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d111      	bne.n	800474c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d105      	bne.n	800474c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004744:	f043 0201 	orr.w	r2, r3, #1
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff fa55 	bl	8003bfc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004752:	e00e      	b.n	8004772 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7ff fa5f 	bl	8003c24 <HAL_ADC_ErrorCallback>
}
 8004766:	e004      	b.n	8004772 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
}
 8004772:	bf00      	nop
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004786:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7ff fa41 	bl	8003c10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b4:	f043 0204 	orr.w	r2, r3, #4
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7ff fa31 	bl	8003c24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <LL_ADC_IsEnabled>:
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <LL_ADC_IsEnabled+0x18>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <LL_ADC_IsEnabled+0x1a>
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <LL_ADC_StartCalibration>:
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004802:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800480c:	4313      	orrs	r3, r2
 800480e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	609a      	str	r2, [r3, #8]
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <LL_ADC_IsCalibrationOnGoing>:
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004832:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004836:	d101      	bne.n	800483c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <LL_ADC_REG_IsConversionOngoing>:
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b04      	cmp	r3, #4
 800485c:	d101      	bne.n	8004862 <LL_ADC_REG_IsConversionOngoing+0x18>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_ADCEx_Calibration_Start+0x1c>
 8004888:	2302      	movs	r3, #2
 800488a:	e04d      	b.n	8004928 <HAL_ADCEx_Calibration_Start+0xb8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff fea5 	bl	80045e4 <ADC_Disable>
 800489a:	4603      	mov	r3, r0
 800489c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d136      	bne.n	8004912 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80048ac:	f023 0302 	bic.w	r3, r3, #2
 80048b0:	f043 0202 	orr.w	r2, r3, #2
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ff96 	bl	80047f0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048c4:	e014      	b.n	80048f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4a18      	ldr	r2, [pc, #96]	@ (8004930 <HAL_ADCEx_Calibration_Start+0xc0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d90d      	bls.n	80048f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d8:	f023 0312 	bic.w	r3, r3, #18
 80048dc:	f043 0210 	orr.w	r2, r3, #16
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e01b      	b.n	8004928 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff ff94 	bl	8004822 <LL_ADC_IsCalibrationOnGoing>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e2      	bne.n	80048c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004904:	f023 0303 	bic.w	r3, r3, #3
 8004908:	f043 0201 	orr.w	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004910:	e005      	b.n	800491e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004916:	f043 0210 	orr.w	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004926:	7bfb      	ldrb	r3, [r7, #15]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	0004de01 	.word	0x0004de01

08004934 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004934:	b590      	push	{r4, r7, lr}
 8004936:	b0a1      	sub	sp, #132	@ 0x84
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800494e:	2302      	movs	r3, #2
 8004950:	e0e7      	b.n	8004b22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800495a:	2300      	movs	r3, #0
 800495c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800495e:	2300      	movs	r3, #0
 8004960:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800496a:	d102      	bne.n	8004972 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800496c:	4b6f      	ldr	r3, [pc, #444]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	e009      	b.n	8004986 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a6e      	ldr	r2, [pc, #440]	@ (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d102      	bne.n	8004982 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800497c:	4b6d      	ldr	r3, [pc, #436]	@ (8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	e001      	b.n	8004986 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004990:	f043 0220 	orr.w	r2, r3, #32
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0be      	b.n	8004b22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff ff4f 	bl	800484a <LL_ADC_REG_IsConversionOngoing>
 80049ac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff ff49 	bl	800484a <LL_ADC_REG_IsConversionOngoing>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f040 80a0 	bne.w	8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80049c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 809c 	bne.w	8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049d0:	d004      	beq.n	80049dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a55      	ldr	r2, [pc, #340]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d101      	bne.n	80049e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80049dc:	4b56      	ldr	r3, [pc, #344]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80049de:	e000      	b.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80049e0:	4b56      	ldr	r3, [pc, #344]	@ (8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80049e2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d04b      	beq.n	8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80049ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80049fe:	035b      	lsls	r3, r3, #13
 8004a00:	430b      	orrs	r3, r1
 8004a02:	431a      	orrs	r2, r3
 8004a04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a10:	d004      	beq.n	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a45      	ldr	r2, [pc, #276]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d10f      	bne.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004a1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004a20:	f7ff fed3 	bl	80047ca <LL_ADC_IsEnabled>
 8004a24:	4604      	mov	r4, r0
 8004a26:	4841      	ldr	r0, [pc, #260]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a28:	f7ff fecf 	bl	80047ca <LL_ADC_IsEnabled>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4323      	orrs	r3, r4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	e012      	b.n	8004a62 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004a3c:	483c      	ldr	r0, [pc, #240]	@ (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a3e:	f7ff fec4 	bl	80047ca <LL_ADC_IsEnabled>
 8004a42:	4604      	mov	r4, r0
 8004a44:	483b      	ldr	r0, [pc, #236]	@ (8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a46:	f7ff fec0 	bl	80047ca <LL_ADC_IsEnabled>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	431c      	orrs	r4, r3
 8004a4e:	483c      	ldr	r0, [pc, #240]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a50:	f7ff febb 	bl	80047ca <LL_ADC_IsEnabled>
 8004a54:	4603      	mov	r3, r0
 8004a56:	4323      	orrs	r3, r4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d056      	beq.n	8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a6e:	f023 030f 	bic.w	r3, r3, #15
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	6811      	ldr	r1, [r2, #0]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	6892      	ldr	r2, [r2, #8]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a80:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a82:	e047      	b.n	8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004a84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a98:	d004      	beq.n	8004aa4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a23      	ldr	r2, [pc, #140]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d10f      	bne.n	8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004aa4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004aa8:	f7ff fe8f 	bl	80047ca <LL_ADC_IsEnabled>
 8004aac:	4604      	mov	r4, r0
 8004aae:	481f      	ldr	r0, [pc, #124]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ab0:	f7ff fe8b 	bl	80047ca <LL_ADC_IsEnabled>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4323      	orrs	r3, r4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e012      	b.n	8004aea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004ac4:	481a      	ldr	r0, [pc, #104]	@ (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004ac6:	f7ff fe80 	bl	80047ca <LL_ADC_IsEnabled>
 8004aca:	4604      	mov	r4, r0
 8004acc:	4819      	ldr	r0, [pc, #100]	@ (8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004ace:	f7ff fe7c 	bl	80047ca <LL_ADC_IsEnabled>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	431c      	orrs	r4, r3
 8004ad6:	481a      	ldr	r0, [pc, #104]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004ad8:	f7ff fe77 	bl	80047ca <LL_ADC_IsEnabled>
 8004adc:	4603      	mov	r3, r0
 8004ade:	4323      	orrs	r3, r4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d012      	beq.n	8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004af6:	f023 030f 	bic.w	r3, r3, #15
 8004afa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004afc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004afe:	e009      	b.n	8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b04:	f043 0220 	orr.w	r2, r3, #32
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004b12:	e000      	b.n	8004b16 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3784      	adds	r7, #132	@ 0x84
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd90      	pop	{r4, r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	50000100 	.word	0x50000100
 8004b30:	50000400 	.word	0x50000400
 8004b34:	50000500 	.word	0x50000500
 8004b38:	50000300 	.word	0x50000300
 8004b3c:	50000700 	.word	0x50000700
 8004b40:	50000600 	.word	0x50000600

08004b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b54:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b60:	4013      	ands	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b76:	4a04      	ldr	r2, [pc, #16]	@ (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	60d3      	str	r3, [r2, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b90:	4b04      	ldr	r3, [pc, #16]	@ (8004ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	f003 0307 	and.w	r3, r3, #7
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	db0b      	blt.n	8004bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	f003 021f 	and.w	r2, r3, #31
 8004bc0:	4907      	ldr	r1, [pc, #28]	@ (8004be0 <__NVIC_EnableIRQ+0x38>)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	2001      	movs	r0, #1
 8004bca:	fa00 f202 	lsl.w	r2, r0, r2
 8004bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000e100 	.word	0xe000e100

08004be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	6039      	str	r1, [r7, #0]
 8004bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	db0a      	blt.n	8004c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	490c      	ldr	r1, [pc, #48]	@ (8004c30 <__NVIC_SetPriority+0x4c>)
 8004bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c02:	0112      	lsls	r2, r2, #4
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	440b      	add	r3, r1
 8004c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c0c:	e00a      	b.n	8004c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	4908      	ldr	r1, [pc, #32]	@ (8004c34 <__NVIC_SetPriority+0x50>)
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	3b04      	subs	r3, #4
 8004c1c:	0112      	lsls	r2, r2, #4
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	440b      	add	r3, r1
 8004c22:	761a      	strb	r2, [r3, #24]
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	e000e100 	.word	0xe000e100
 8004c34:	e000ed00 	.word	0xe000ed00

08004c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	@ 0x24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f1c3 0307 	rsb	r3, r3, #7
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	bf28      	it	cs
 8004c56:	2304      	movcs	r3, #4
 8004c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	d902      	bls.n	8004c68 <NVIC_EncodePriority+0x30>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3b03      	subs	r3, #3
 8004c66:	e000      	b.n	8004c6a <NVIC_EncodePriority+0x32>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43da      	mvns	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c80:	f04f 31ff 	mov.w	r1, #4294967295
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8a:	43d9      	mvns	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	4313      	orrs	r3, r2
         );
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3724      	adds	r7, #36	@ 0x24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cb0:	d301      	bcc.n	8004cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e00f      	b.n	8004cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <SysTick_Config+0x40>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cbe:	210f      	movs	r1, #15
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	f7ff ff8e 	bl	8004be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cc8:	4b05      	ldr	r3, [pc, #20]	@ (8004ce0 <SysTick_Config+0x40>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cce:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <SysTick_Config+0x40>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	e000e010 	.word	0xe000e010

08004ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ff29 	bl	8004b44 <__NVIC_SetPriorityGrouping>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b086      	sub	sp, #24
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	4603      	mov	r3, r0
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d08:	f7ff ff40 	bl	8004b8c <__NVIC_GetPriorityGrouping>
 8004d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	6978      	ldr	r0, [r7, #20]
 8004d14:	f7ff ff90 	bl	8004c38 <NVIC_EncodePriority>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff5f 	bl	8004be4 <__NVIC_SetPriority>
}
 8004d26:	bf00      	nop
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	4603      	mov	r3, r0
 8004d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff ff33 	bl	8004ba8 <__NVIC_EnableIRQ>
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff ffa4 	bl	8004ca0 <SysTick_Config>
 8004d58:	4603      	mov	r3, r0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e08d      	b.n	8004e92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4b47      	ldr	r3, [pc, #284]	@ (8004e9c <HAL_DMA_Init+0x138>)
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d80f      	bhi.n	8004da2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	4b45      	ldr	r3, [pc, #276]	@ (8004ea0 <HAL_DMA_Init+0x13c>)
 8004d8a:	4413      	add	r3, r2
 8004d8c:	4a45      	ldr	r2, [pc, #276]	@ (8004ea4 <HAL_DMA_Init+0x140>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	009a      	lsls	r2, r3, #2
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a42      	ldr	r2, [pc, #264]	@ (8004ea8 <HAL_DMA_Init+0x144>)
 8004d9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004da0:	e00e      	b.n	8004dc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	4b40      	ldr	r3, [pc, #256]	@ (8004eac <HAL_DMA_Init+0x148>)
 8004daa:	4413      	add	r3, r2
 8004dac:	4a3d      	ldr	r2, [pc, #244]	@ (8004ea4 <HAL_DMA_Init+0x140>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	009a      	lsls	r2, r3, #2
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a3c      	ldr	r2, [pc, #240]	@ (8004eb0 <HAL_DMA_Init+0x14c>)
 8004dbe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fa76 	bl	8005304 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e20:	d102      	bne.n	8004e28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d010      	beq.n	8004e68 <HAL_DMA_Init+0x104>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d80c      	bhi.n	8004e68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa96 	bl	8005380 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e64:	605a      	str	r2, [r3, #4]
 8004e66:	e008      	b.n	8004e7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40020407 	.word	0x40020407
 8004ea0:	bffdfff8 	.word	0xbffdfff8
 8004ea4:	cccccccd 	.word	0xcccccccd
 8004ea8:	40020000 	.word	0x40020000
 8004eac:	bffdfbf8 	.word	0xbffdfbf8
 8004eb0:	40020400 	.word	0x40020400

08004eb4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_DMA_Start_IT+0x20>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e066      	b.n	8004fa2 <HAL_DMA_Start_IT+0xee>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d155      	bne.n	8004f94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0201 	bic.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f9bb 	bl	8005288 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 020e 	orr.w	r2, r2, #14
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e00f      	b.n	8004f4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0204 	bic.w	r2, r2, #4
 8004f3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 020a 	orr.w	r2, r2, #10
 8004f4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f68:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e005      	b.n	8004fa0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b085      	sub	sp, #20
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d005      	beq.n	8004fce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
 8004fcc:	e037      	b.n	800503e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 020e 	bic.w	r2, r2, #14
 8004fdc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005002:	f003 021f 	and.w	r2, r3, #31
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	2101      	movs	r1, #1
 800500c:	fa01 f202 	lsl.w	r2, r1, r2
 8005010:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800501a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00c      	beq.n	800503e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005032:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800503c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d00d      	beq.n	8005090 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2204      	movs	r2, #4
 8005078:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
 800508e:	e047      	b.n	8005120 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 020e 	bic.w	r2, r2, #14
 800509e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0201 	bic.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c4:	f003 021f 	and.w	r2, r3, #31
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	2101      	movs	r1, #1
 80050ce:	fa01 f202 	lsl.w	r2, r1, r2
 80050d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00c      	beq.n	8005100 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	4798      	blx	r3
    }
  }
  return status;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	2204      	movs	r2, #4
 800514c:	409a      	lsls	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d026      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x7a>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d021      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0204 	bic.w	r2, r2, #4
 800517c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005182:	f003 021f 	and.w	r2, r3, #31
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	2104      	movs	r1, #4
 800518c:	fa01 f202 	lsl.w	r2, r1, r2
 8005190:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005196:	2b00      	cmp	r3, #0
 8005198:	d071      	beq.n	800527e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80051a2:	e06c      	b.n	800527e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a8:	f003 031f 	and.w	r3, r3, #31
 80051ac:	2202      	movs	r2, #2
 80051ae:	409a      	lsls	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d02e      	beq.n	8005216 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d029      	beq.n	8005216 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10b      	bne.n	80051e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 020a 	bic.w	r2, r2, #10
 80051de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ec:	f003 021f 	and.w	r2, r3, #31
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f4:	2102      	movs	r1, #2
 80051f6:	fa01 f202 	lsl.w	r2, r1, r2
 80051fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005208:	2b00      	cmp	r3, #0
 800520a:	d038      	beq.n	800527e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005214:	e033      	b.n	800527e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	2208      	movs	r2, #8
 8005220:	409a      	lsls	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4013      	ands	r3, r2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d02a      	beq.n	8005280 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d025      	beq.n	8005280 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 020e 	bic.w	r2, r2, #14
 8005242:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005248:	f003 021f 	and.w	r2, r3, #31
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005250:	2101      	movs	r1, #1
 8005252:	fa01 f202 	lsl.w	r2, r1, r2
 8005256:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800527e:	bf00      	nop
 8005280:	bf00      	nop
}
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800529e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b6:	f003 021f 	and.w	r2, r3, #31
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	2101      	movs	r1, #1
 80052c0:	fa01 f202 	lsl.w	r2, r1, r2
 80052c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d108      	bne.n	80052e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052e6:	e007      	b.n	80052f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	60da      	str	r2, [r3, #12]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	4b16      	ldr	r3, [pc, #88]	@ (800536c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005314:	429a      	cmp	r2, r3
 8005316:	d802      	bhi.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005318:	4b15      	ldr	r3, [pc, #84]	@ (8005370 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	e001      	b.n	8005322 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800531e:	4b15      	ldr	r3, [pc, #84]	@ (8005374 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005320:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	3b08      	subs	r3, #8
 800532e:	4a12      	ldr	r2, [pc, #72]	@ (8005378 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533c:	089b      	lsrs	r3, r3, #2
 800533e:	009a      	lsls	r2, r3, #2
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	461a      	mov	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a0b      	ldr	r2, [pc, #44]	@ (800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800534e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	2201      	movs	r2, #1
 8005358:	409a      	lsls	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40020407 	.word	0x40020407
 8005370:	40020800 	.word	0x40020800
 8005374:	40020820 	.word	0x40020820
 8005378:	cccccccd 	.word	0xcccccccd
 800537c:	40020880 	.word	0x40020880

08005380 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4b0b      	ldr	r3, [pc, #44]	@ (80053c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	461a      	mov	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a08      	ldr	r2, [pc, #32]	@ (80053c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80053a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2201      	movs	r2, #1
 80053ae:	409a      	lsls	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	1000823f 	.word	0x1000823f
 80053c4:	40020940 	.word	0x40020940

080053c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053d6:	e15a      	b.n	800568e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	2101      	movs	r1, #1
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	4013      	ands	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 814c 	beq.w	8005688 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d005      	beq.n	8005408 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005404:	2b02      	cmp	r3, #2
 8005406:	d130      	bne.n	800546a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	2203      	movs	r2, #3
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4013      	ands	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800543e:	2201      	movs	r2, #1
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43db      	mvns	r3, r3
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4013      	ands	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	091b      	lsrs	r3, r3, #4
 8005454:	f003 0201 	and.w	r2, r3, #1
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b03      	cmp	r3, #3
 8005474:	d017      	beq.n	80054a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	2203      	movs	r2, #3
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43db      	mvns	r3, r3
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4013      	ands	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d123      	bne.n	80054fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	08da      	lsrs	r2, r3, #3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3208      	adds	r2, #8
 80054ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	220f      	movs	r2, #15
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43db      	mvns	r3, r3
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4013      	ands	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	08da      	lsrs	r2, r3, #3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3208      	adds	r2, #8
 80054f4:	6939      	ldr	r1, [r7, #16]
 80054f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	2203      	movs	r2, #3
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	43db      	mvns	r3, r3
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4013      	ands	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 0203 	and.w	r2, r3, #3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 80a6 	beq.w	8005688 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553c:	4b5b      	ldr	r3, [pc, #364]	@ (80056ac <HAL_GPIO_Init+0x2e4>)
 800553e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005540:	4a5a      	ldr	r2, [pc, #360]	@ (80056ac <HAL_GPIO_Init+0x2e4>)
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	6613      	str	r3, [r2, #96]	@ 0x60
 8005548:	4b58      	ldr	r3, [pc, #352]	@ (80056ac <HAL_GPIO_Init+0x2e4>)
 800554a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005554:	4a56      	ldr	r2, [pc, #344]	@ (80056b0 <HAL_GPIO_Init+0x2e8>)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	089b      	lsrs	r3, r3, #2
 800555a:	3302      	adds	r3, #2
 800555c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005560:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	220f      	movs	r2, #15
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4013      	ands	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800557e:	d01f      	beq.n	80055c0 <HAL_GPIO_Init+0x1f8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a4c      	ldr	r2, [pc, #304]	@ (80056b4 <HAL_GPIO_Init+0x2ec>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d019      	beq.n	80055bc <HAL_GPIO_Init+0x1f4>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a4b      	ldr	r2, [pc, #300]	@ (80056b8 <HAL_GPIO_Init+0x2f0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d013      	beq.n	80055b8 <HAL_GPIO_Init+0x1f0>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a4a      	ldr	r2, [pc, #296]	@ (80056bc <HAL_GPIO_Init+0x2f4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00d      	beq.n	80055b4 <HAL_GPIO_Init+0x1ec>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a49      	ldr	r2, [pc, #292]	@ (80056c0 <HAL_GPIO_Init+0x2f8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <HAL_GPIO_Init+0x1e8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a48      	ldr	r2, [pc, #288]	@ (80056c4 <HAL_GPIO_Init+0x2fc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d101      	bne.n	80055ac <HAL_GPIO_Init+0x1e4>
 80055a8:	2305      	movs	r3, #5
 80055aa:	e00a      	b.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055ac:	2306      	movs	r3, #6
 80055ae:	e008      	b.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055b0:	2304      	movs	r3, #4
 80055b2:	e006      	b.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055b4:	2303      	movs	r3, #3
 80055b6:	e004      	b.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e002      	b.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055c0:	2300      	movs	r3, #0
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	f002 0203 	and.w	r2, r2, #3
 80055c8:	0092      	lsls	r2, r2, #2
 80055ca:	4093      	lsls	r3, r2
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055d2:	4937      	ldr	r1, [pc, #220]	@ (80056b0 <HAL_GPIO_Init+0x2e8>)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	089b      	lsrs	r3, r3, #2
 80055d8:	3302      	adds	r3, #2
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055e0:	4b39      	ldr	r3, [pc, #228]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	43db      	mvns	r3, r3
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4013      	ands	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005604:	4a30      	ldr	r2, [pc, #192]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800560a:	4b2f      	ldr	r3, [pc, #188]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	43db      	mvns	r3, r3
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4013      	ands	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800562e:	4a26      	ldr	r2, [pc, #152]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005634:	4b24      	ldr	r3, [pc, #144]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	43db      	mvns	r3, r3
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4013      	ands	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005658:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800565e:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	43db      	mvns	r3, r3
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4013      	ands	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005682:	4a11      	ldr	r2, [pc, #68]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	3301      	adds	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	f47f ae9d 	bne.w	80053d8 <HAL_GPIO_Init+0x10>
  }
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	40021000 	.word	0x40021000
 80056b0:	40010000 	.word	0x40010000
 80056b4:	48000400 	.word	0x48000400
 80056b8:	48000800 	.word	0x48000800
 80056bc:	48000c00 	.word	0x48000c00
 80056c0:	48001000 	.word	0x48001000
 80056c4:	48001400 	.word	0x48001400
 80056c8:	40010400 	.word	0x40010400

080056cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	807b      	strh	r3, [r7, #2]
 80056d8:	4613      	mov	r3, r2
 80056da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056dc:	787b      	ldrb	r3, [r7, #1]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056e2:	887a      	ldrh	r2, [r7, #2]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056e8:	e002      	b.n	80056f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056ea:	887a      	ldrh	r2, [r7, #2]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4013      	ands	r3, r2
 8005714:	041a      	lsls	r2, r3, #16
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	43d9      	mvns	r1, r3
 800571a:	887b      	ldrh	r3, [r7, #2]
 800571c:	400b      	ands	r3, r1
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	619a      	str	r2, [r3, #24]
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800573a:	4b08      	ldr	r3, [pc, #32]	@ (800575c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800573c:	695a      	ldr	r2, [r3, #20]
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d006      	beq.n	8005754 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005746:	4a05      	ldr	r2, [pc, #20]	@ (800575c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800574c:	88fb      	ldrh	r3, [r7, #6]
 800574e:	4618      	mov	r0, r3
 8005750:	f7fc ffc6 	bl	80026e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005754:	bf00      	nop
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40010400 	.word	0x40010400

08005760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d141      	bne.n	80057f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800576e:	4b4b      	ldr	r3, [pc, #300]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577a:	d131      	bne.n	80057e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800577c:	4b47      	ldr	r3, [pc, #284]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005782:	4a46      	ldr	r2, [pc, #280]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005788:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800578c:	4b43      	ldr	r3, [pc, #268]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005794:	4a41      	ldr	r2, [pc, #260]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005796:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800579a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800579c:	4b40      	ldr	r3, [pc, #256]	@ (80058a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2232      	movs	r2, #50	@ 0x32
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	4a3f      	ldr	r2, [pc, #252]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057a8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ac:	0c9b      	lsrs	r3, r3, #18
 80057ae:	3301      	adds	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057b2:	e002      	b.n	80057ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057ba:	4b38      	ldr	r3, [pc, #224]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057c6:	d102      	bne.n	80057ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f2      	bne.n	80057b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057ce:	4b33      	ldr	r3, [pc, #204]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057da:	d158      	bne.n	800588e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e057      	b.n	8005890 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057e0:	4b2e      	ldr	r3, [pc, #184]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057e6:	4a2d      	ldr	r2, [pc, #180]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80057f0:	e04d      	b.n	800588e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057f8:	d141      	bne.n	800587e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057fa:	4b28      	ldr	r3, [pc, #160]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005806:	d131      	bne.n	800586c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005808:	4b24      	ldr	r3, [pc, #144]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800580a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800580e:	4a23      	ldr	r2, [pc, #140]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005814:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005818:	4b20      	ldr	r3, [pc, #128]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005820:	4a1e      	ldr	r2, [pc, #120]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005822:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005826:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005828:	4b1d      	ldr	r3, [pc, #116]	@ (80058a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2232      	movs	r2, #50	@ 0x32
 800582e:	fb02 f303 	mul.w	r3, r2, r3
 8005832:	4a1c      	ldr	r2, [pc, #112]	@ (80058a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005834:	fba2 2303 	umull	r2, r3, r2, r3
 8005838:	0c9b      	lsrs	r3, r3, #18
 800583a:	3301      	adds	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800583e:	e002      	b.n	8005846 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3b01      	subs	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005846:	4b15      	ldr	r3, [pc, #84]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800584e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005852:	d102      	bne.n	800585a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f2      	bne.n	8005840 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800585a:	4b10      	ldr	r3, [pc, #64]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005866:	d112      	bne.n	800588e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e011      	b.n	8005890 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800586c:	4b0b      	ldr	r3, [pc, #44]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005872:	4a0a      	ldr	r2, [pc, #40]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800587c:	e007      	b.n	800588e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800587e:	4b07      	ldr	r3, [pc, #28]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005886:	4a05      	ldr	r2, [pc, #20]	@ (800589c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005888:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800588c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	40007000 	.word	0x40007000
 80058a0:	20000200 	.word	0x20000200
 80058a4:	431bde83 	.word	0x431bde83

080058a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80058ac:	4b05      	ldr	r3, [pc, #20]	@ (80058c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	4a04      	ldr	r2, [pc, #16]	@ (80058c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058b6:	6093      	str	r3, [r2, #8]
}
 80058b8:	bf00      	nop
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40007000 	.word	0x40007000

080058c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e2fe      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d075      	beq.n	80059d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058e6:	4b97      	ldr	r3, [pc, #604]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
 80058ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058f0:	4b94      	ldr	r3, [pc, #592]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b0c      	cmp	r3, #12
 80058fe:	d102      	bne.n	8005906 <HAL_RCC_OscConfig+0x3e>
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d002      	beq.n	800590c <HAL_RCC_OscConfig+0x44>
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d10b      	bne.n	8005924 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800590c:	4b8d      	ldr	r3, [pc, #564]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d05b      	beq.n	80059d0 <HAL_RCC_OscConfig+0x108>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d157      	bne.n	80059d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e2d9      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800592c:	d106      	bne.n	800593c <HAL_RCC_OscConfig+0x74>
 800592e:	4b85      	ldr	r3, [pc, #532]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a84      	ldr	r2, [pc, #528]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	e01d      	b.n	8005978 <HAL_RCC_OscConfig+0xb0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005944:	d10c      	bne.n	8005960 <HAL_RCC_OscConfig+0x98>
 8005946:	4b7f      	ldr	r3, [pc, #508]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a7e      	ldr	r2, [pc, #504]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 800594c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	4b7c      	ldr	r3, [pc, #496]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a7b      	ldr	r2, [pc, #492]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e00b      	b.n	8005978 <HAL_RCC_OscConfig+0xb0>
 8005960:	4b78      	ldr	r3, [pc, #480]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a77      	ldr	r2, [pc, #476]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	4b75      	ldr	r3, [pc, #468]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a74      	ldr	r2, [pc, #464]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d013      	beq.n	80059a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fd fc5c 	bl	800323c <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005988:	f7fd fc58 	bl	800323c <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	@ 0x64
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e29e      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800599a:	4b6a      	ldr	r3, [pc, #424]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0xc0>
 80059a6:	e014      	b.n	80059d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a8:	f7fd fc48 	bl	800323c <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b0:	f7fd fc44 	bl	800323c <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b64      	cmp	r3, #100	@ 0x64
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e28a      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059c2:	4b60      	ldr	r3, [pc, #384]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0xe8>
 80059ce:	e000      	b.n	80059d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d075      	beq.n	8005aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059de:	4b59      	ldr	r3, [pc, #356]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059e8:	4b56      	ldr	r3, [pc, #344]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b0c      	cmp	r3, #12
 80059f6:	d102      	bne.n	80059fe <HAL_RCC_OscConfig+0x136>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d002      	beq.n	8005a04 <HAL_RCC_OscConfig+0x13c>
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d11f      	bne.n	8005a44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a04:	4b4f      	ldr	r3, [pc, #316]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_RCC_OscConfig+0x154>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e25d      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a1c:	4b49      	ldr	r3, [pc, #292]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	061b      	lsls	r3, r3, #24
 8005a2a:	4946      	ldr	r1, [pc, #280]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a30:	4b45      	ldr	r3, [pc, #276]	@ (8005b48 <HAL_RCC_OscConfig+0x280>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fd fbb5 	bl	80031a4 <HAL_InitTick>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d043      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e249      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d023      	beq.n	8005a94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a3c      	ldr	r2, [pc, #240]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a58:	f7fd fbf0 	bl	800323c <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a60:	f7fd fbec 	bl	800323c <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e232      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a72:	4b34      	ldr	r3, [pc, #208]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7e:	4b31      	ldr	r3, [pc, #196]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	061b      	lsls	r3, r3, #24
 8005a8c:	492d      	ldr	r1, [pc, #180]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	604b      	str	r3, [r1, #4]
 8005a92:	e01a      	b.n	8005aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a94:	4b2b      	ldr	r3, [pc, #172]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a2a      	ldr	r2, [pc, #168]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005a9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fd fbcc 	bl	800323c <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa8:	f7fd fbc8 	bl	800323c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e20e      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005aba:	4b22      	ldr	r3, [pc, #136]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x1e0>
 8005ac6:	e000      	b.n	8005aca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ac8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d041      	beq.n	8005b5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d01c      	beq.n	8005b18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ade:	4b19      	ldr	r3, [pc, #100]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ae4:	4a17      	ldr	r2, [pc, #92]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005ae6:	f043 0301 	orr.w	r3, r3, #1
 8005aea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aee:	f7fd fba5 	bl	800323c <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005af6:	f7fd fba1 	bl	800323c <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e1e7      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b08:	4b0e      	ldr	r3, [pc, #56]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0ef      	beq.n	8005af6 <HAL_RCC_OscConfig+0x22e>
 8005b16:	e020      	b.n	8005b5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b18:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b1e:	4a09      	ldr	r2, [pc, #36]	@ (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fd fb88 	bl	800323c <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b2e:	e00d      	b.n	8005b4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b30:	f7fd fb84 	bl	800323c <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d906      	bls.n	8005b4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e1ca      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
 8005b42:	bf00      	nop
 8005b44:	40021000 	.word	0x40021000
 8005b48:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b4c:	4b8c      	ldr	r3, [pc, #560]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1ea      	bne.n	8005b30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80a6 	beq.w	8005cb4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b6c:	4b84      	ldr	r3, [pc, #528]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_RCC_OscConfig+0x2b4>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <HAL_RCC_OscConfig+0x2b6>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00d      	beq.n	8005b9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b82:	4b7f      	ldr	r3, [pc, #508]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b86:	4a7e      	ldr	r2, [pc, #504]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b9e:	4b79      	ldr	r3, [pc, #484]	@ (8005d84 <HAL_RCC_OscConfig+0x4bc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d118      	bne.n	8005bdc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005baa:	4b76      	ldr	r3, [pc, #472]	@ (8005d84 <HAL_RCC_OscConfig+0x4bc>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a75      	ldr	r2, [pc, #468]	@ (8005d84 <HAL_RCC_OscConfig+0x4bc>)
 8005bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb6:	f7fd fb41 	bl	800323c <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bbe:	f7fd fb3d 	bl	800323c <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e183      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd0:	4b6c      	ldr	r3, [pc, #432]	@ (8005d84 <HAL_RCC_OscConfig+0x4bc>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d108      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x32e>
 8005be4:	4b66      	ldr	r3, [pc, #408]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bea:	4a65      	ldr	r2, [pc, #404]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bf4:	e024      	b.n	8005c40 <HAL_RCC_OscConfig+0x378>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	2b05      	cmp	r3, #5
 8005bfc:	d110      	bne.n	8005c20 <HAL_RCC_OscConfig+0x358>
 8005bfe:	4b60      	ldr	r3, [pc, #384]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c04:	4a5e      	ldr	r2, [pc, #376]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005c06:	f043 0304 	orr.w	r3, r3, #4
 8005c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c0e:	4b5c      	ldr	r3, [pc, #368]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c14:	4a5a      	ldr	r2, [pc, #360]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005c16:	f043 0301 	orr.w	r3, r3, #1
 8005c1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c1e:	e00f      	b.n	8005c40 <HAL_RCC_OscConfig+0x378>
 8005c20:	4b57      	ldr	r3, [pc, #348]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c26:	4a56      	ldr	r2, [pc, #344]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c30:	4b53      	ldr	r3, [pc, #332]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c36:	4a52      	ldr	r2, [pc, #328]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005c38:	f023 0304 	bic.w	r3, r3, #4
 8005c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d016      	beq.n	8005c76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c48:	f7fd faf8 	bl	800323c <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c4e:	e00a      	b.n	8005c66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c50:	f7fd faf4 	bl	800323c <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e138      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c66:	4b46      	ldr	r3, [pc, #280]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0ed      	beq.n	8005c50 <HAL_RCC_OscConfig+0x388>
 8005c74:	e015      	b.n	8005ca2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c76:	f7fd fae1 	bl	800323c <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c7c:	e00a      	b.n	8005c94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7e:	f7fd fadd 	bl	800323c <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e121      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c94:	4b3a      	ldr	r3, [pc, #232]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1ed      	bne.n	8005c7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ca2:	7ffb      	ldrb	r3, [r7, #31]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d105      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca8:	4b35      	ldr	r3, [pc, #212]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cac:	4a34      	ldr	r2, [pc, #208]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005cae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cb2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d03c      	beq.n	8005d3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01c      	beq.n	8005d02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cce:	4a2c      	ldr	r2, [pc, #176]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd8:	f7fd fab0 	bl	800323c <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ce0:	f7fd faac 	bl	800323c <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e0f2      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cf2:	4b23      	ldr	r3, [pc, #140]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0ef      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x418>
 8005d00:	e01b      	b.n	8005d3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d02:	4b1f      	ldr	r3, [pc, #124]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d08:	4a1d      	ldr	r2, [pc, #116]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d12:	f7fd fa93 	bl	800323c <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d1a:	f7fd fa8f 	bl	800323c <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e0d5      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d2c:	4b14      	ldr	r3, [pc, #80]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1ef      	bne.n	8005d1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 80c9 	beq.w	8005ed6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d44:	4b0e      	ldr	r3, [pc, #56]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f003 030c 	and.w	r3, r3, #12
 8005d4c:	2b0c      	cmp	r3, #12
 8005d4e:	f000 8083 	beq.w	8005e58 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d15e      	bne.n	8005e18 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d5a:	4b09      	ldr	r3, [pc, #36]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a08      	ldr	r2, [pc, #32]	@ (8005d80 <HAL_RCC_OscConfig+0x4b8>)
 8005d60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d66:	f7fd fa69 	bl	800323c <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d6c:	e00c      	b.n	8005d88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6e:	f7fd fa65 	bl	800323c <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d905      	bls.n	8005d88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e0ab      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
 8005d80:	40021000 	.word	0x40021000
 8005d84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d88:	4b55      	ldr	r3, [pc, #340]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1ec      	bne.n	8005d6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d94:	4b52      	ldr	r3, [pc, #328]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	4b52      	ldr	r3, [pc, #328]	@ (8005ee4 <HAL_RCC_OscConfig+0x61c>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6a11      	ldr	r1, [r2, #32]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005da4:	3a01      	subs	r2, #1
 8005da6:	0112      	lsls	r2, r2, #4
 8005da8:	4311      	orrs	r1, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005dae:	0212      	lsls	r2, r2, #8
 8005db0:	4311      	orrs	r1, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005db6:	0852      	lsrs	r2, r2, #1
 8005db8:	3a01      	subs	r2, #1
 8005dba:	0552      	lsls	r2, r2, #21
 8005dbc:	4311      	orrs	r1, r2
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005dc2:	0852      	lsrs	r2, r2, #1
 8005dc4:	3a01      	subs	r2, #1
 8005dc6:	0652      	lsls	r2, r2, #25
 8005dc8:	4311      	orrs	r1, r2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dce:	06d2      	lsls	r2, r2, #27
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	4943      	ldr	r1, [pc, #268]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dd8:	4b41      	ldr	r3, [pc, #260]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a40      	ldr	r2, [pc, #256]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005dde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005de2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005de4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	4a3d      	ldr	r2, [pc, #244]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fd fa24 	bl	800323c <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df8:	f7fd fa20 	bl	800323c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e066      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e0a:	4b35      	ldr	r3, [pc, #212]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCC_OscConfig+0x530>
 8005e16:	e05e      	b.n	8005ed6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e18:	4b31      	ldr	r3, [pc, #196]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a30      	ldr	r2, [pc, #192]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e24:	f7fd fa0a 	bl	800323c <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e2c:	f7fd fa06 	bl	800323c <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e04c      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e3e:	4b28      	ldr	r3, [pc, #160]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1f0      	bne.n	8005e2c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e4a:	4b25      	ldr	r3, [pc, #148]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	4924      	ldr	r1, [pc, #144]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005e50:	4b25      	ldr	r3, [pc, #148]	@ (8005ee8 <HAL_RCC_OscConfig+0x620>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	60cb      	str	r3, [r1, #12]
 8005e56:	e03e      	b.n	8005ed6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e039      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e64:	4b1e      	ldr	r3, [pc, #120]	@ (8005ee0 <HAL_RCC_OscConfig+0x618>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f003 0203 	and.w	r2, r3, #3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d12c      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	3b01      	subs	r3, #1
 8005e84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d123      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e94:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d11b      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d113      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb4:	085b      	lsrs	r3, r3, #1
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d109      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d001      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	019f800c 	.word	0x019f800c
 8005ee8:	feeefffc 	.word	0xfeeefffc

08005eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e11e      	b.n	8006142 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f04:	4b91      	ldr	r3, [pc, #580]	@ (800614c <HAL_RCC_ClockConfig+0x260>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d910      	bls.n	8005f34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f12:	4b8e      	ldr	r3, [pc, #568]	@ (800614c <HAL_RCC_ClockConfig+0x260>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f023 020f 	bic.w	r2, r3, #15
 8005f1a:	498c      	ldr	r1, [pc, #560]	@ (800614c <HAL_RCC_ClockConfig+0x260>)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f22:	4b8a      	ldr	r3, [pc, #552]	@ (800614c <HAL_RCC_ClockConfig+0x260>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d001      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e106      	b.n	8006142 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d073      	beq.n	8006028 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d129      	bne.n	8005f9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f48:	4b81      	ldr	r3, [pc, #516]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0f4      	b.n	8006142 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f58:	f000 f99e 	bl	8006298 <RCC_GetSysClockFreqFromPLLSource>
 8005f5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4a7c      	ldr	r2, [pc, #496]	@ (8006154 <HAL_RCC_ClockConfig+0x268>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d93f      	bls.n	8005fe6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f66:	4b7a      	ldr	r3, [pc, #488]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d033      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d12f      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f86:	4b72      	ldr	r3, [pc, #456]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f8e:	4a70      	ldr	r2, [pc, #448]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8005f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f96:	2380      	movs	r3, #128	@ 0x80
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e024      	b.n	8005fe6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d107      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fa4:	4b6a      	ldr	r3, [pc, #424]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d109      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0c6      	b.n	8006142 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fb4:	4b66      	ldr	r3, [pc, #408]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0be      	b.n	8006142 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005fc4:	f000 f8ce 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 8005fc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4a61      	ldr	r2, [pc, #388]	@ (8006154 <HAL_RCC_ClockConfig+0x268>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d909      	bls.n	8005fe6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fda:	4a5d      	ldr	r2, [pc, #372]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8005fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005fe2:	2380      	movs	r3, #128	@ 0x80
 8005fe4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f023 0203 	bic.w	r2, r3, #3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	4957      	ldr	r1, [pc, #348]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff8:	f7fd f920 	bl	800323c <HAL_GetTick>
 8005ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffe:	e00a      	b.n	8006016 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006000:	f7fd f91c 	bl	800323c <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800600e:	4293      	cmp	r3, r2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e095      	b.n	8006142 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006016:	4b4e      	ldr	r3, [pc, #312]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 020c 	and.w	r2, r3, #12
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	429a      	cmp	r2, r3
 8006026:	d1eb      	bne.n	8006000 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d023      	beq.n	800607c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006040:	4b43      	ldr	r3, [pc, #268]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	4a42      	ldr	r2, [pc, #264]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8006046:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800604a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006058:	4b3d      	ldr	r3, [pc, #244]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006060:	4a3b      	ldr	r2, [pc, #236]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8006062:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006066:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006068:	4b39      	ldr	r3, [pc, #228]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	4936      	ldr	r1, [pc, #216]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8006076:	4313      	orrs	r3, r2
 8006078:	608b      	str	r3, [r1, #8]
 800607a:	e008      	b.n	800608e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b80      	cmp	r3, #128	@ 0x80
 8006080:	d105      	bne.n	800608e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006082:	4b33      	ldr	r3, [pc, #204]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	4a32      	ldr	r2, [pc, #200]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8006088:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800608c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800608e:	4b2f      	ldr	r3, [pc, #188]	@ (800614c <HAL_RCC_ClockConfig+0x260>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d21d      	bcs.n	80060d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609c:	4b2b      	ldr	r3, [pc, #172]	@ (800614c <HAL_RCC_ClockConfig+0x260>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f023 020f 	bic.w	r2, r3, #15
 80060a4:	4929      	ldr	r1, [pc, #164]	@ (800614c <HAL_RCC_ClockConfig+0x260>)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80060ac:	f7fd f8c6 	bl	800323c <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b2:	e00a      	b.n	80060ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b4:	f7fd f8c2 	bl	800323c <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e03b      	b.n	8006142 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ca:	4b20      	ldr	r3, [pc, #128]	@ (800614c <HAL_RCC_ClockConfig+0x260>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d1ed      	bne.n	80060b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4917      	ldr	r1, [pc, #92]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006102:	4b13      	ldr	r3, [pc, #76]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	490f      	ldr	r1, [pc, #60]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 8006112:	4313      	orrs	r3, r2
 8006114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006116:	f000 f825 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 800611a:	4602      	mov	r2, r0
 800611c:	4b0c      	ldr	r3, [pc, #48]	@ (8006150 <HAL_RCC_ClockConfig+0x264>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	091b      	lsrs	r3, r3, #4
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	490c      	ldr	r1, [pc, #48]	@ (8006158 <HAL_RCC_ClockConfig+0x26c>)
 8006128:	5ccb      	ldrb	r3, [r1, r3]
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	fa22 f303 	lsr.w	r3, r2, r3
 8006132:	4a0a      	ldr	r2, [pc, #40]	@ (800615c <HAL_RCC_ClockConfig+0x270>)
 8006134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006136:	4b0a      	ldr	r3, [pc, #40]	@ (8006160 <HAL_RCC_ClockConfig+0x274>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7fd f832 	bl	80031a4 <HAL_InitTick>
 8006140:	4603      	mov	r3, r0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	40022000 	.word	0x40022000
 8006150:	40021000 	.word	0x40021000
 8006154:	04c4b400 	.word	0x04c4b400
 8006158:	0800b108 	.word	0x0800b108
 800615c:	20000200 	.word	0x20000200
 8006160:	20000204 	.word	0x20000204

08006164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800616a:	4b2c      	ldr	r3, [pc, #176]	@ (800621c <HAL_RCC_GetSysClockFreq+0xb8>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 030c 	and.w	r3, r3, #12
 8006172:	2b04      	cmp	r3, #4
 8006174:	d102      	bne.n	800617c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006176:	4b2a      	ldr	r3, [pc, #168]	@ (8006220 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	e047      	b.n	800620c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800617c:	4b27      	ldr	r3, [pc, #156]	@ (800621c <HAL_RCC_GetSysClockFreq+0xb8>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f003 030c 	and.w	r3, r3, #12
 8006184:	2b08      	cmp	r3, #8
 8006186:	d102      	bne.n	800618e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006188:	4b26      	ldr	r3, [pc, #152]	@ (8006224 <HAL_RCC_GetSysClockFreq+0xc0>)
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	e03e      	b.n	800620c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800618e:	4b23      	ldr	r3, [pc, #140]	@ (800621c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 030c 	and.w	r3, r3, #12
 8006196:	2b0c      	cmp	r3, #12
 8006198:	d136      	bne.n	8006208 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800619a:	4b20      	ldr	r3, [pc, #128]	@ (800621c <HAL_RCC_GetSysClockFreq+0xb8>)
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061a4:	4b1d      	ldr	r3, [pc, #116]	@ (800621c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	091b      	lsrs	r3, r3, #4
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	3301      	adds	r3, #1
 80061b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d10c      	bne.n	80061d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061b8:	4a1a      	ldr	r2, [pc, #104]	@ (8006224 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c0:	4a16      	ldr	r2, [pc, #88]	@ (800621c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061c2:	68d2      	ldr	r2, [r2, #12]
 80061c4:	0a12      	lsrs	r2, r2, #8
 80061c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061ca:	fb02 f303 	mul.w	r3, r2, r3
 80061ce:	617b      	str	r3, [r7, #20]
      break;
 80061d0:	e00c      	b.n	80061ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061d2:	4a13      	ldr	r2, [pc, #76]	@ (8006220 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	4a10      	ldr	r2, [pc, #64]	@ (800621c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061dc:	68d2      	ldr	r2, [r2, #12]
 80061de:	0a12      	lsrs	r2, r2, #8
 80061e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061e4:	fb02 f303 	mul.w	r3, r2, r3
 80061e8:	617b      	str	r3, [r7, #20]
      break;
 80061ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061ec:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	0e5b      	lsrs	r3, r3, #25
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	3301      	adds	r3, #1
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	fbb2 f3f3 	udiv	r3, r2, r3
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	e001      	b.n	800620c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800620c:	693b      	ldr	r3, [r7, #16]
}
 800620e:	4618      	mov	r0, r3
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40021000 	.word	0x40021000
 8006220:	00f42400 	.word	0x00f42400
 8006224:	016e3600 	.word	0x016e3600

08006228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800622c:	4b03      	ldr	r3, [pc, #12]	@ (800623c <HAL_RCC_GetHCLKFreq+0x14>)
 800622e:	681b      	ldr	r3, [r3, #0]
}
 8006230:	4618      	mov	r0, r3
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000200 	.word	0x20000200

08006240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006244:	f7ff fff0 	bl	8006228 <HAL_RCC_GetHCLKFreq>
 8006248:	4602      	mov	r2, r0
 800624a:	4b06      	ldr	r3, [pc, #24]	@ (8006264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	0a1b      	lsrs	r3, r3, #8
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	4904      	ldr	r1, [pc, #16]	@ (8006268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006256:	5ccb      	ldrb	r3, [r1, r3]
 8006258:	f003 031f 	and.w	r3, r3, #31
 800625c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006260:	4618      	mov	r0, r3
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40021000 	.word	0x40021000
 8006268:	0800b118 	.word	0x0800b118

0800626c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006270:	f7ff ffda 	bl	8006228 <HAL_RCC_GetHCLKFreq>
 8006274:	4602      	mov	r2, r0
 8006276:	4b06      	ldr	r3, [pc, #24]	@ (8006290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	0adb      	lsrs	r3, r3, #11
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	4904      	ldr	r1, [pc, #16]	@ (8006294 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006282:	5ccb      	ldrb	r3, [r1, r3]
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800628c:	4618      	mov	r0, r3
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40021000 	.word	0x40021000
 8006294:	0800b118 	.word	0x0800b118

08006298 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800629e:	4b1e      	ldr	r3, [pc, #120]	@ (8006318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	091b      	lsrs	r3, r3, #4
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	3301      	adds	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d10c      	bne.n	80062d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062bc:	4a17      	ldr	r2, [pc, #92]	@ (800631c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c4:	4a14      	ldr	r2, [pc, #80]	@ (8006318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062c6:	68d2      	ldr	r2, [r2, #12]
 80062c8:	0a12      	lsrs	r2, r2, #8
 80062ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
 80062d2:	617b      	str	r3, [r7, #20]
    break;
 80062d4:	e00c      	b.n	80062f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062d6:	4a12      	ldr	r2, [pc, #72]	@ (8006320 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	fbb2 f3f3 	udiv	r3, r2, r3
 80062de:	4a0e      	ldr	r2, [pc, #56]	@ (8006318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062e0:	68d2      	ldr	r2, [r2, #12]
 80062e2:	0a12      	lsrs	r2, r2, #8
 80062e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062e8:	fb02 f303 	mul.w	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]
    break;
 80062ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062f0:	4b09      	ldr	r3, [pc, #36]	@ (8006318 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	0e5b      	lsrs	r3, r3, #25
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	3301      	adds	r3, #1
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	fbb2 f3f3 	udiv	r3, r2, r3
 8006308:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800630a:	687b      	ldr	r3, [r7, #4]
}
 800630c:	4618      	mov	r0, r3
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	40021000 	.word	0x40021000
 800631c:	016e3600 	.word	0x016e3600
 8006320:	00f42400 	.word	0x00f42400

08006324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800632c:	2300      	movs	r3, #0
 800632e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006330:	2300      	movs	r3, #0
 8006332:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8098 	beq.w	8006472 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006342:	2300      	movs	r3, #0
 8006344:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006346:	4b43      	ldr	r3, [pc, #268]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800634a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10d      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006352:	4b40      	ldr	r3, [pc, #256]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006356:	4a3f      	ldr	r2, [pc, #252]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800635c:	6593      	str	r3, [r2, #88]	@ 0x58
 800635e:	4b3d      	ldr	r3, [pc, #244]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006366:	60bb      	str	r3, [r7, #8]
 8006368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800636a:	2301      	movs	r3, #1
 800636c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800636e:	4b3a      	ldr	r3, [pc, #232]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a39      	ldr	r2, [pc, #228]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006378:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800637a:	f7fc ff5f 	bl	800323c <HAL_GetTick>
 800637e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006380:	e009      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006382:	f7fc ff5b 	bl	800323c <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d902      	bls.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	74fb      	strb	r3, [r7, #19]
        break;
 8006394:	e005      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006396:	4b30      	ldr	r3, [pc, #192]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0ef      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063a2:	7cfb      	ldrb	r3, [r7, #19]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d159      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01e      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d019      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063c4:	4b23      	ldr	r3, [pc, #140]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063d0:	4b20      	ldr	r3, [pc, #128]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063f0:	4a18      	ldr	r2, [pc, #96]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d016      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006402:	f7fc ff1b 	bl	800323c <HAL_GetTick>
 8006406:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006408:	e00b      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800640a:	f7fc ff17 	bl	800323c <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006418:	4293      	cmp	r3, r2
 800641a:	d902      	bls.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	74fb      	strb	r3, [r7, #19]
            break;
 8006420:	e006      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006422:	4b0c      	ldr	r3, [pc, #48]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0ec      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006430:	7cfb      	ldrb	r3, [r7, #19]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006436:	4b07      	ldr	r3, [pc, #28]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006444:	4903      	ldr	r1, [pc, #12]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800644c:	e008      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800644e:	7cfb      	ldrb	r3, [r7, #19]
 8006450:	74bb      	strb	r3, [r7, #18]
 8006452:	e005      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006454:	40021000 	.word	0x40021000
 8006458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645c:	7cfb      	ldrb	r3, [r7, #19]
 800645e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006460:	7c7b      	ldrb	r3, [r7, #17]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d105      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006466:	4ba7      	ldr	r3, [pc, #668]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800646a:	4aa6      	ldr	r2, [pc, #664]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800646c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006470:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800647e:	4ba1      	ldr	r3, [pc, #644]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006484:	f023 0203 	bic.w	r2, r3, #3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	499d      	ldr	r1, [pc, #628]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064a0:	4b98      	ldr	r3, [pc, #608]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a6:	f023 020c 	bic.w	r2, r3, #12
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	4995      	ldr	r1, [pc, #596]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0304 	and.w	r3, r3, #4
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064c2:	4b90      	ldr	r3, [pc, #576]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	498c      	ldr	r1, [pc, #560]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064e4:	4b87      	ldr	r3, [pc, #540]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	4984      	ldr	r1, [pc, #528]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006506:	4b7f      	ldr	r3, [pc, #508]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	497b      	ldr	r1, [pc, #492]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006516:	4313      	orrs	r3, r2
 8006518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006528:	4b76      	ldr	r3, [pc, #472]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	4973      	ldr	r1, [pc, #460]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006538:	4313      	orrs	r3, r2
 800653a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800654a:	4b6e      	ldr	r3, [pc, #440]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006550:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	496a      	ldr	r1, [pc, #424]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800656c:	4b65      	ldr	r3, [pc, #404]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800656e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006572:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	4962      	ldr	r1, [pc, #392]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657c:	4313      	orrs	r3, r2
 800657e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800658e:	4b5d      	ldr	r3, [pc, #372]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006594:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	4959      	ldr	r1, [pc, #356]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065b0:	4b54      	ldr	r3, [pc, #336]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065b6:	f023 0203 	bic.w	r2, r3, #3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065be:	4951      	ldr	r1, [pc, #324]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065d2:	4b4c      	ldr	r3, [pc, #304]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e0:	4948      	ldr	r1, [pc, #288]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d015      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065f4:	4b43      	ldr	r3, [pc, #268]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006602:	4940      	ldr	r1, [pc, #256]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006604:	4313      	orrs	r3, r2
 8006606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006612:	d105      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006614:	4b3b      	ldr	r3, [pc, #236]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	4a3a      	ldr	r2, [pc, #232]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800661e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006628:	2b00      	cmp	r3, #0
 800662a:	d015      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800662c:	4b35      	ldr	r3, [pc, #212]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006632:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800663a:	4932      	ldr	r1, [pc, #200]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663c:	4313      	orrs	r3, r2
 800663e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800664a:	d105      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800664c:	4b2d      	ldr	r3, [pc, #180]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	4a2c      	ldr	r2, [pc, #176]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006656:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d015      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006664:	4b27      	ldr	r3, [pc, #156]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800666a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006672:	4924      	ldr	r1, [pc, #144]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006674:	4313      	orrs	r3, r2
 8006676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006682:	d105      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006684:	4b1f      	ldr	r3, [pc, #124]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	4a1e      	ldr	r2, [pc, #120]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800668e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d015      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800669c:	4b19      	ldr	r3, [pc, #100]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066aa:	4916      	ldr	r1, [pc, #88]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ba:	d105      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066bc:	4b11      	ldr	r3, [pc, #68]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	4a10      	ldr	r2, [pc, #64]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d019      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e2:	4908      	ldr	r1, [pc, #32]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066f2:	d109      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066f4:	4b03      	ldr	r3, [pc, #12]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4a02      	ldr	r2, [pc, #8]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066fe:	60d3      	str	r3, [r2, #12]
 8006700:	e002      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006702:	bf00      	nop
 8006704:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d015      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006714:	4b29      	ldr	r3, [pc, #164]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800671a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006722:	4926      	ldr	r1, [pc, #152]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006724:	4313      	orrs	r3, r2
 8006726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006732:	d105      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006734:	4b21      	ldr	r3, [pc, #132]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4a20      	ldr	r2, [pc, #128]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800673a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800673e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d015      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800674c:	4b1b      	ldr	r3, [pc, #108]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006752:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800675a:	4918      	ldr	r1, [pc, #96]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800676a:	d105      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800676c:	4b13      	ldr	r3, [pc, #76]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	4a12      	ldr	r2, [pc, #72]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006776:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d015      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006784:	4b0d      	ldr	r3, [pc, #52]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006786:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800678a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006792:	490a      	ldr	r1, [pc, #40]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800679e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067a2:	d105      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067a4:	4b05      	ldr	r3, [pc, #20]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	4a04      	ldr	r2, [pc, #16]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40021000 	.word	0x40021000

080067c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e054      	b.n	800687c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d111      	bne.n	8006802 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f002 fb46 	bl	8008e78 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d102      	bne.n	80067fa <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a23      	ldr	r2, [pc, #140]	@ (8006884 <HAL_TIM_Base_Init+0xc4>)
 80067f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2202      	movs	r2, #2
 8006806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3304      	adds	r3, #4
 8006812:	4619      	mov	r1, r3
 8006814:	4610      	mov	r0, r2
 8006816:	f001 fc85 	bl	8008124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	08002b01 	.word	0x08002b01

08006888 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b01      	cmp	r3, #1
 800689a:	d001      	beq.n	80068a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e04c      	b.n	800693a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a26      	ldr	r2, [pc, #152]	@ (8006948 <HAL_TIM_Base_Start+0xc0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d022      	beq.n	80068f8 <HAL_TIM_Base_Start+0x70>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ba:	d01d      	beq.n	80068f8 <HAL_TIM_Base_Start+0x70>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a22      	ldr	r2, [pc, #136]	@ (800694c <HAL_TIM_Base_Start+0xc4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d018      	beq.n	80068f8 <HAL_TIM_Base_Start+0x70>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a21      	ldr	r2, [pc, #132]	@ (8006950 <HAL_TIM_Base_Start+0xc8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d013      	beq.n	80068f8 <HAL_TIM_Base_Start+0x70>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006954 <HAL_TIM_Base_Start+0xcc>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00e      	beq.n	80068f8 <HAL_TIM_Base_Start+0x70>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1e      	ldr	r2, [pc, #120]	@ (8006958 <HAL_TIM_Base_Start+0xd0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d009      	beq.n	80068f8 <HAL_TIM_Base_Start+0x70>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1c      	ldr	r2, [pc, #112]	@ (800695c <HAL_TIM_Base_Start+0xd4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d004      	beq.n	80068f8 <HAL_TIM_Base_Start+0x70>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006960 <HAL_TIM_Base_Start+0xd8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d115      	bne.n	8006924 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	4b19      	ldr	r3, [pc, #100]	@ (8006964 <HAL_TIM_Base_Start+0xdc>)
 8006900:	4013      	ands	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b06      	cmp	r3, #6
 8006908:	d015      	beq.n	8006936 <HAL_TIM_Base_Start+0xae>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006910:	d011      	beq.n	8006936 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0201 	orr.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006922:	e008      	b.n	8006936 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	e000      	b.n	8006938 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40012c00 	.word	0x40012c00
 800694c:	40000400 	.word	0x40000400
 8006950:	40000800 	.word	0x40000800
 8006954:	40000c00 	.word	0x40000c00
 8006958:	40013400 	.word	0x40013400
 800695c:	40014000 	.word	0x40014000
 8006960:	40015000 	.word	0x40015000
 8006964:	00010007 	.word	0x00010007

08006968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d001      	beq.n	8006980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e054      	b.n	8006a2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a26      	ldr	r2, [pc, #152]	@ (8006a38 <HAL_TIM_Base_Start_IT+0xd0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d022      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069aa:	d01d      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a22      	ldr	r2, [pc, #136]	@ (8006a3c <HAL_TIM_Base_Start_IT+0xd4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d018      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a21      	ldr	r2, [pc, #132]	@ (8006a40 <HAL_TIM_Base_Start_IT+0xd8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d013      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a44 <HAL_TIM_Base_Start_IT+0xdc>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00e      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006a48 <HAL_TIM_Base_Start_IT+0xe0>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d009      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a4c <HAL_TIM_Base_Start_IT+0xe4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006a50 <HAL_TIM_Base_Start_IT+0xe8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d115      	bne.n	8006a14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	4b19      	ldr	r3, [pc, #100]	@ (8006a54 <HAL_TIM_Base_Start_IT+0xec>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b06      	cmp	r3, #6
 80069f8:	d015      	beq.n	8006a26 <HAL_TIM_Base_Start_IT+0xbe>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a00:	d011      	beq.n	8006a26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f042 0201 	orr.w	r2, r2, #1
 8006a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a12:	e008      	b.n	8006a26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e000      	b.n	8006a28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	40012c00 	.word	0x40012c00
 8006a3c:	40000400 	.word	0x40000400
 8006a40:	40000800 	.word	0x40000800
 8006a44:	40000c00 	.word	0x40000c00
 8006a48:	40013400 	.word	0x40013400
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40015000 	.word	0x40015000
 8006a54:	00010007 	.word	0x00010007

08006a58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e054      	b.n	8006b14 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d111      	bne.n	8006a9a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f002 f9fa 	bl	8008e78 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d102      	bne.n	8006a92 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a23      	ldr	r2, [pc, #140]	@ (8006b1c <HAL_TIM_PWM_Init+0xc4>)
 8006a90:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4610      	mov	r0, r2
 8006aae:	f001 fb39 	bl	8008124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	08006b21 	.word	0x08006b21

08006b20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d109      	bne.n	8006b58 <HAL_TIM_PWM_Start+0x24>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	bf14      	ite	ne
 8006b50:	2301      	movne	r3, #1
 8006b52:	2300      	moveq	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	e03c      	b.n	8006bd2 <HAL_TIM_PWM_Start+0x9e>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d109      	bne.n	8006b72 <HAL_TIM_PWM_Start+0x3e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	bf14      	ite	ne
 8006b6a:	2301      	movne	r3, #1
 8006b6c:	2300      	moveq	r3, #0
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	e02f      	b.n	8006bd2 <HAL_TIM_PWM_Start+0x9e>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d109      	bne.n	8006b8c <HAL_TIM_PWM_Start+0x58>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	bf14      	ite	ne
 8006b84:	2301      	movne	r3, #1
 8006b86:	2300      	moveq	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	e022      	b.n	8006bd2 <HAL_TIM_PWM_Start+0x9e>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b0c      	cmp	r3, #12
 8006b90:	d109      	bne.n	8006ba6 <HAL_TIM_PWM_Start+0x72>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	bf14      	ite	ne
 8006b9e:	2301      	movne	r3, #1
 8006ba0:	2300      	moveq	r3, #0
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	e015      	b.n	8006bd2 <HAL_TIM_PWM_Start+0x9e>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b10      	cmp	r3, #16
 8006baa:	d109      	bne.n	8006bc0 <HAL_TIM_PWM_Start+0x8c>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	bf14      	ite	ne
 8006bb8:	2301      	movne	r3, #1
 8006bba:	2300      	moveq	r3, #0
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	e008      	b.n	8006bd2 <HAL_TIM_PWM_Start+0x9e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	bf14      	ite	ne
 8006bcc:	2301      	movne	r3, #1
 8006bce:	2300      	moveq	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e0a6      	b.n	8006d28 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <HAL_TIM_PWM_Start+0xb6>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006be8:	e023      	b.n	8006c32 <HAL_TIM_PWM_Start+0xfe>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	d104      	bne.n	8006bfa <HAL_TIM_PWM_Start+0xc6>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bf8:	e01b      	b.n	8006c32 <HAL_TIM_PWM_Start+0xfe>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d104      	bne.n	8006c0a <HAL_TIM_PWM_Start+0xd6>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c08:	e013      	b.n	8006c32 <HAL_TIM_PWM_Start+0xfe>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b0c      	cmp	r3, #12
 8006c0e:	d104      	bne.n	8006c1a <HAL_TIM_PWM_Start+0xe6>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c18:	e00b      	b.n	8006c32 <HAL_TIM_PWM_Start+0xfe>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b10      	cmp	r3, #16
 8006c1e:	d104      	bne.n	8006c2a <HAL_TIM_PWM_Start+0xf6>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c28:	e003      	b.n	8006c32 <HAL_TIM_PWM_Start+0xfe>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2201      	movs	r2, #1
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f002 f8f6 	bl	8008e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a3a      	ldr	r2, [pc, #232]	@ (8006d30 <HAL_TIM_PWM_Start+0x1fc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d018      	beq.n	8006c7c <HAL_TIM_PWM_Start+0x148>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a39      	ldr	r2, [pc, #228]	@ (8006d34 <HAL_TIM_PWM_Start+0x200>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d013      	beq.n	8006c7c <HAL_TIM_PWM_Start+0x148>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a37      	ldr	r2, [pc, #220]	@ (8006d38 <HAL_TIM_PWM_Start+0x204>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00e      	beq.n	8006c7c <HAL_TIM_PWM_Start+0x148>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a36      	ldr	r2, [pc, #216]	@ (8006d3c <HAL_TIM_PWM_Start+0x208>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d009      	beq.n	8006c7c <HAL_TIM_PWM_Start+0x148>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a34      	ldr	r2, [pc, #208]	@ (8006d40 <HAL_TIM_PWM_Start+0x20c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d004      	beq.n	8006c7c <HAL_TIM_PWM_Start+0x148>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a33      	ldr	r2, [pc, #204]	@ (8006d44 <HAL_TIM_PWM_Start+0x210>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d101      	bne.n	8006c80 <HAL_TIM_PWM_Start+0x14c>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <HAL_TIM_PWM_Start+0x14e>
 8006c80:	2300      	movs	r3, #0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d007      	beq.n	8006c96 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a25      	ldr	r2, [pc, #148]	@ (8006d30 <HAL_TIM_PWM_Start+0x1fc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d022      	beq.n	8006ce6 <HAL_TIM_PWM_Start+0x1b2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca8:	d01d      	beq.n	8006ce6 <HAL_TIM_PWM_Start+0x1b2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a26      	ldr	r2, [pc, #152]	@ (8006d48 <HAL_TIM_PWM_Start+0x214>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d018      	beq.n	8006ce6 <HAL_TIM_PWM_Start+0x1b2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a24      	ldr	r2, [pc, #144]	@ (8006d4c <HAL_TIM_PWM_Start+0x218>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d013      	beq.n	8006ce6 <HAL_TIM_PWM_Start+0x1b2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a23      	ldr	r2, [pc, #140]	@ (8006d50 <HAL_TIM_PWM_Start+0x21c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00e      	beq.n	8006ce6 <HAL_TIM_PWM_Start+0x1b2>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a19      	ldr	r2, [pc, #100]	@ (8006d34 <HAL_TIM_PWM_Start+0x200>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d009      	beq.n	8006ce6 <HAL_TIM_PWM_Start+0x1b2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a18      	ldr	r2, [pc, #96]	@ (8006d38 <HAL_TIM_PWM_Start+0x204>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d004      	beq.n	8006ce6 <HAL_TIM_PWM_Start+0x1b2>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a18      	ldr	r2, [pc, #96]	@ (8006d44 <HAL_TIM_PWM_Start+0x210>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d115      	bne.n	8006d12 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	4b19      	ldr	r3, [pc, #100]	@ (8006d54 <HAL_TIM_PWM_Start+0x220>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b06      	cmp	r3, #6
 8006cf6:	d015      	beq.n	8006d24 <HAL_TIM_PWM_Start+0x1f0>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cfe:	d011      	beq.n	8006d24 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0201 	orr.w	r2, r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d10:	e008      	b.n	8006d24 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0201 	orr.w	r2, r2, #1
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	e000      	b.n	8006d26 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40012c00 	.word	0x40012c00
 8006d34:	40013400 	.word	0x40013400
 8006d38:	40014000 	.word	0x40014000
 8006d3c:	40014400 	.word	0x40014400
 8006d40:	40014800 	.word	0x40014800
 8006d44:	40015000 	.word	0x40015000
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	40000800 	.word	0x40000800
 8006d50:	40000c00 	.word	0x40000c00
 8006d54:	00010007 	.word	0x00010007

08006d58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e054      	b.n	8006e14 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d111      	bne.n	8006d9a <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f002 f87a 	bl	8008e78 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a23      	ldr	r2, [pc, #140]	@ (8006e1c <HAL_TIM_IC_Init+0xc4>)
 8006d90:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3304      	adds	r3, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f001 f9b9 	bl	8008124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	08006e21 	.word	0x08006e21

08006e20 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d104      	bne.n	8006e4e <HAL_TIM_IC_Start+0x1a>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	e023      	b.n	8006e96 <HAL_TIM_IC_Start+0x62>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d104      	bne.n	8006e5e <HAL_TIM_IC_Start+0x2a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	e01b      	b.n	8006e96 <HAL_TIM_IC_Start+0x62>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d104      	bne.n	8006e6e <HAL_TIM_IC_Start+0x3a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	e013      	b.n	8006e96 <HAL_TIM_IC_Start+0x62>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b0c      	cmp	r3, #12
 8006e72:	d104      	bne.n	8006e7e <HAL_TIM_IC_Start+0x4a>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	e00b      	b.n	8006e96 <HAL_TIM_IC_Start+0x62>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d104      	bne.n	8006e8e <HAL_TIM_IC_Start+0x5a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	e003      	b.n	8006e96 <HAL_TIM_IC_Start+0x62>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d104      	bne.n	8006ea8 <HAL_TIM_IC_Start+0x74>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	e013      	b.n	8006ed0 <HAL_TIM_IC_Start+0x9c>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	d104      	bne.n	8006eb8 <HAL_TIM_IC_Start+0x84>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	e00b      	b.n	8006ed0 <HAL_TIM_IC_Start+0x9c>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d104      	bne.n	8006ec8 <HAL_TIM_IC_Start+0x94>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e003      	b.n	8006ed0 <HAL_TIM_IC_Start+0x9c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d102      	bne.n	8006ede <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d001      	beq.n	8006ee2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e097      	b.n	8007012 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d104      	bne.n	8006ef2 <HAL_TIM_IC_Start+0xbe>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ef0:	e023      	b.n	8006f3a <HAL_TIM_IC_Start+0x106>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d104      	bne.n	8006f02 <HAL_TIM_IC_Start+0xce>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f00:	e01b      	b.n	8006f3a <HAL_TIM_IC_Start+0x106>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d104      	bne.n	8006f12 <HAL_TIM_IC_Start+0xde>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f10:	e013      	b.n	8006f3a <HAL_TIM_IC_Start+0x106>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b0c      	cmp	r3, #12
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_IC_Start+0xee>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f20:	e00b      	b.n	8006f3a <HAL_TIM_IC_Start+0x106>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_IC_Start+0xfe>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f30:	e003      	b.n	8006f3a <HAL_TIM_IC_Start+0x106>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d104      	bne.n	8006f4a <HAL_TIM_IC_Start+0x116>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f48:	e013      	b.n	8006f72 <HAL_TIM_IC_Start+0x13e>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d104      	bne.n	8006f5a <HAL_TIM_IC_Start+0x126>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f58:	e00b      	b.n	8006f72 <HAL_TIM_IC_Start+0x13e>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d104      	bne.n	8006f6a <HAL_TIM_IC_Start+0x136>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f68:	e003      	b.n	8006f72 <HAL_TIM_IC_Start+0x13e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2201      	movs	r2, #1
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 ff56 	bl	8008e2c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a25      	ldr	r2, [pc, #148]	@ (800701c <HAL_TIM_IC_Start+0x1e8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d022      	beq.n	8006fd0 <HAL_TIM_IC_Start+0x19c>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f92:	d01d      	beq.n	8006fd0 <HAL_TIM_IC_Start+0x19c>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a21      	ldr	r2, [pc, #132]	@ (8007020 <HAL_TIM_IC_Start+0x1ec>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d018      	beq.n	8006fd0 <HAL_TIM_IC_Start+0x19c>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a20      	ldr	r2, [pc, #128]	@ (8007024 <HAL_TIM_IC_Start+0x1f0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d013      	beq.n	8006fd0 <HAL_TIM_IC_Start+0x19c>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a1e      	ldr	r2, [pc, #120]	@ (8007028 <HAL_TIM_IC_Start+0x1f4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00e      	beq.n	8006fd0 <HAL_TIM_IC_Start+0x19c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800702c <HAL_TIM_IC_Start+0x1f8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d009      	beq.n	8006fd0 <HAL_TIM_IC_Start+0x19c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8007030 <HAL_TIM_IC_Start+0x1fc>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_TIM_IC_Start+0x19c>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a1a      	ldr	r2, [pc, #104]	@ (8007034 <HAL_TIM_IC_Start+0x200>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d115      	bne.n	8006ffc <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	4b18      	ldr	r3, [pc, #96]	@ (8007038 <HAL_TIM_IC_Start+0x204>)
 8006fd8:	4013      	ands	r3, r2
 8006fda:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b06      	cmp	r3, #6
 8006fe0:	d015      	beq.n	800700e <HAL_TIM_IC_Start+0x1da>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe8:	d011      	beq.n	800700e <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffa:	e008      	b.n	800700e <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	e000      	b.n	8007010 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	40012c00 	.word	0x40012c00
 8007020:	40000400 	.word	0x40000400
 8007024:	40000800 	.word	0x40000800
 8007028:	40000c00 	.word	0x40000c00
 800702c:	40013400 	.word	0x40013400
 8007030:	40014000 	.word	0x40014000
 8007034:	40015000 	.word	0x40015000
 8007038:	00010007 	.word	0x00010007

0800703c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e04c      	b.n	80070ea <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d111      	bne.n	8007080 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 ff07 	bl	8008e78 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d102      	bne.n	8007078 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1f      	ldr	r2, [pc, #124]	@ (80070f4 <HAL_TIM_OnePulse_Init+0xb8>)
 8007076:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3304      	adds	r3, #4
 8007090:	4619      	mov	r1, r3
 8007092:	4610      	mov	r0, r2
 8007094:	f001 f846 	bl	8008124 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0208 	bic.w	r2, r2, #8
 80070a6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6819      	ldr	r1, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	080070f9 	.word	0x080070f9

080070f8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800711c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007124:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800712c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007134:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d108      	bne.n	800714e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d105      	bne.n	800714e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007142:	7b7b      	ldrb	r3, [r7, #13]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d102      	bne.n	800714e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007148:	7b3b      	ldrb	r3, [r7, #12]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d001      	beq.n	8007152 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e059      	b.n	8007206 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2202      	movs	r2, #2
 8007156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2202      	movs	r2, #2
 800715e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2202      	movs	r2, #2
 8007166:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2202      	movs	r2, #2
 800716e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f042 0202 	orr.w	r2, r2, #2
 8007180:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0204 	orr.w	r2, r2, #4
 8007190:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2201      	movs	r2, #1
 8007198:	2100      	movs	r1, #0
 800719a:	4618      	mov	r0, r3
 800719c:	f001 fe46 	bl	8008e2c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2201      	movs	r2, #1
 80071a6:	2104      	movs	r1, #4
 80071a8:	4618      	mov	r0, r3
 80071aa:	f001 fe3f 	bl	8008e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a17      	ldr	r2, [pc, #92]	@ (8007210 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d018      	beq.n	80071ea <HAL_TIM_OnePulse_Start_IT+0xde>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a15      	ldr	r2, [pc, #84]	@ (8007214 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d013      	beq.n	80071ea <HAL_TIM_OnePulse_Start_IT+0xde>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a14      	ldr	r2, [pc, #80]	@ (8007218 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00e      	beq.n	80071ea <HAL_TIM_OnePulse_Start_IT+0xde>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a12      	ldr	r2, [pc, #72]	@ (800721c <HAL_TIM_OnePulse_Start_IT+0x110>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d009      	beq.n	80071ea <HAL_TIM_OnePulse_Start_IT+0xde>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a11      	ldr	r2, [pc, #68]	@ (8007220 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d004      	beq.n	80071ea <HAL_TIM_OnePulse_Start_IT+0xde>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a0f      	ldr	r2, [pc, #60]	@ (8007224 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d101      	bne.n	80071ee <HAL_TIM_OnePulse_Start_IT+0xe2>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d007      	beq.n	8007204 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007202:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	40012c00 	.word	0x40012c00
 8007214:	40013400 	.word	0x40013400
 8007218:	40014000 	.word	0x40014000
 800721c:	40014400 	.word	0x40014400
 8007220:	40014800 	.word	0x40014800
 8007224:	40015000 	.word	0x40015000

08007228 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e0a2      	b.n	8007382 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d111      	bne.n	800726c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 fe11 	bl	8008e78 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800725a:	2b00      	cmp	r3, #0
 800725c:	d102      	bne.n	8007264 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a4a      	ldr	r2, [pc, #296]	@ (800738c <HAL_TIM_Encoder_Init+0x164>)
 8007262:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007282:	f023 0307 	bic.w	r3, r3, #7
 8007286:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3304      	adds	r3, #4
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f000 ff46 	bl	8008124 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072c0:	f023 0303 	bic.w	r3, r3, #3
 80072c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	021b      	lsls	r3, r3, #8
 80072d0:	4313      	orrs	r3, r2
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80072de:	f023 030c 	bic.w	r3, r3, #12
 80072e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	4313      	orrs	r3, r2
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	011a      	lsls	r2, r3, #4
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	031b      	lsls	r3, r3, #12
 800730e:	4313      	orrs	r3, r2
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800731c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007324:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	4313      	orrs	r3, r2
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	4313      	orrs	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	08002d9d 	.word	0x08002d9d

08007390 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d110      	bne.n	80073e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d102      	bne.n	80073cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80073c6:	7b7b      	ldrb	r3, [r7, #13]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d001      	beq.n	80073d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e069      	b.n	80074a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073e0:	e031      	b.n	8007446 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d110      	bne.n	800740a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d102      	bne.n	80073f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80073ee:	7b3b      	ldrb	r3, [r7, #12]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d001      	beq.n	80073f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e055      	b.n	80074a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007408:	e01d      	b.n	8007446 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800740a:	7bfb      	ldrb	r3, [r7, #15]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d108      	bne.n	8007422 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d105      	bne.n	8007422 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007416:	7b7b      	ldrb	r3, [r7, #13]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d102      	bne.n	8007422 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800741c:	7b3b      	ldrb	r3, [r7, #12]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d001      	beq.n	8007426 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e03e      	b.n	80074a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2202      	movs	r2, #2
 800742a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2202      	movs	r2, #2
 800743a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2202      	movs	r2, #2
 8007442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_TIM_Encoder_Start+0xc4>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2b04      	cmp	r3, #4
 8007450:	d008      	beq.n	8007464 <HAL_TIM_Encoder_Start+0xd4>
 8007452:	e00f      	b.n	8007474 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2201      	movs	r2, #1
 800745a:	2100      	movs	r1, #0
 800745c:	4618      	mov	r0, r3
 800745e:	f001 fce5 	bl	8008e2c <TIM_CCxChannelCmd>
      break;
 8007462:	e016      	b.n	8007492 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2201      	movs	r2, #1
 800746a:	2104      	movs	r1, #4
 800746c:	4618      	mov	r0, r3
 800746e:	f001 fcdd 	bl	8008e2c <TIM_CCxChannelCmd>
      break;
 8007472:	e00e      	b.n	8007492 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2201      	movs	r2, #1
 800747a:	2100      	movs	r1, #0
 800747c:	4618      	mov	r0, r3
 800747e:	f001 fcd5 	bl	8008e2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2201      	movs	r2, #1
 8007488:	2104      	movs	r1, #4
 800748a:	4618      	mov	r0, r3
 800748c:	f001 fcce 	bl	8008e2c <TIM_CCxChannelCmd>
      break;
 8007490:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f042 0201 	orr.w	r2, r2, #1
 80074a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d026      	beq.n	800751c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d021      	beq.n	800751c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f06f 0202 	mvn.w	r2, #2
 80074e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	4798      	blx	r3
 8007500:	e009      	b.n	8007516 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	d026      	beq.n	8007574 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d021      	beq.n	8007574 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f06f 0204 	mvn.w	r2, #4
 8007538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2202      	movs	r2, #2
 800753e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800754a:	2b00      	cmp	r3, #0
 800754c:	d005      	beq.n	800755a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	4798      	blx	r3
 8007558:	e009      	b.n	800756e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d026      	beq.n	80075cc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b00      	cmp	r3, #0
 8007586:	d021      	beq.n	80075cc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0208 	mvn.w	r2, #8
 8007590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2204      	movs	r2, #4
 8007596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d005      	beq.n	80075b2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	4798      	blx	r3
 80075b0:	e009      	b.n	80075c6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d026      	beq.n	8007624 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d021      	beq.n	8007624 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0210 	mvn.w	r2, #16
 80075e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2208      	movs	r2, #8
 80075ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d005      	beq.n	800760a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	4798      	blx	r3
 8007608:	e009      	b.n	800761e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00e      	beq.n	800764c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d009      	beq.n	800764c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f06f 0201 	mvn.w	r2, #1
 8007640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007652:	2b00      	cmp	r3, #0
 8007654:	d104      	bne.n	8007660 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00e      	beq.n	800767e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007666:	2b00      	cmp	r3, #0
 8007668:	d009      	beq.n	800767e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00e      	beq.n	80076a6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800769a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00e      	beq.n	80076ce <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d009      	beq.n	80076ce <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80076c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f003 0320 	and.w	r3, r3, #32
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00e      	beq.n	80076f6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 0320 	and.w	r3, r3, #32
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f06f 0220 	mvn.w	r2, #32
 80076ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00e      	beq.n	800771e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00e      	beq.n	8007746 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d009      	beq.n	8007746 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800773a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00e      	beq.n	800776e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d009      	beq.n	800776e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00e      	beq.n	8007796 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800778a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b086      	sub	sp, #24
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_TIM_IC_ConfigChannel+0x1e>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e088      	b.n	80078ce <HAL_TIM_IC_ConfigChannel+0x130>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d11b      	bne.n	8007802 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80077da:	f001 f961 	bl	8008aa0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699a      	ldr	r2, [r3, #24]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 020c 	bic.w	r2, r2, #12
 80077ec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6999      	ldr	r1, [r3, #24]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	619a      	str	r2, [r3, #24]
 8007800:	e060      	b.n	80078c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b04      	cmp	r3, #4
 8007806:	d11c      	bne.n	8007842 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007818:	f001 f9e5 	bl	8008be6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699a      	ldr	r2, [r3, #24]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800782a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6999      	ldr	r1, [r3, #24]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	021a      	lsls	r2, r3, #8
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	619a      	str	r2, [r3, #24]
 8007840:	e040      	b.n	80078c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b08      	cmp	r3, #8
 8007846:	d11b      	bne.n	8007880 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007858:	f001 fa32 	bl	8008cc0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69da      	ldr	r2, [r3, #28]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 020c 	bic.w	r2, r2, #12
 800786a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69d9      	ldr	r1, [r3, #28]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	61da      	str	r2, [r3, #28]
 800787e:	e021      	b.n	80078c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b0c      	cmp	r3, #12
 8007884:	d11c      	bne.n	80078c0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007896:	f001 fa4f 	bl	8008d38 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69da      	ldr	r2, [r3, #28]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80078a8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69d9      	ldr	r1, [r3, #28]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	021a      	lsls	r2, r3, #8
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	61da      	str	r2, [r3, #28]
 80078be:	e001      	b.n	80078c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d101      	bne.n	80078f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078f2:	2302      	movs	r3, #2
 80078f4:	e0ff      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b14      	cmp	r3, #20
 8007902:	f200 80f0 	bhi.w	8007ae6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007906:	a201      	add	r2, pc, #4	@ (adr r2, 800790c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	08007961 	.word	0x08007961
 8007910:	08007ae7 	.word	0x08007ae7
 8007914:	08007ae7 	.word	0x08007ae7
 8007918:	08007ae7 	.word	0x08007ae7
 800791c:	080079a1 	.word	0x080079a1
 8007920:	08007ae7 	.word	0x08007ae7
 8007924:	08007ae7 	.word	0x08007ae7
 8007928:	08007ae7 	.word	0x08007ae7
 800792c:	080079e3 	.word	0x080079e3
 8007930:	08007ae7 	.word	0x08007ae7
 8007934:	08007ae7 	.word	0x08007ae7
 8007938:	08007ae7 	.word	0x08007ae7
 800793c:	08007a23 	.word	0x08007a23
 8007940:	08007ae7 	.word	0x08007ae7
 8007944:	08007ae7 	.word	0x08007ae7
 8007948:	08007ae7 	.word	0x08007ae7
 800794c:	08007a65 	.word	0x08007a65
 8007950:	08007ae7 	.word	0x08007ae7
 8007954:	08007ae7 	.word	0x08007ae7
 8007958:	08007ae7 	.word	0x08007ae7
 800795c:	08007aa5 	.word	0x08007aa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68b9      	ldr	r1, [r7, #8]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fc90 	bl	800828c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0208 	orr.w	r2, r2, #8
 800797a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0204 	bic.w	r2, r2, #4
 800798a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6999      	ldr	r1, [r3, #24]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	691a      	ldr	r2, [r3, #16]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	619a      	str	r2, [r3, #24]
      break;
 800799e:	e0a5      	b.n	8007aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fd0a 	bl	80083c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699a      	ldr	r2, [r3, #24]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699a      	ldr	r2, [r3, #24]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6999      	ldr	r1, [r3, #24]
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	021a      	lsls	r2, r3, #8
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	619a      	str	r2, [r3, #24]
      break;
 80079e0:	e084      	b.n	8007aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68b9      	ldr	r1, [r7, #8]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fd7d 	bl	80084e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69da      	ldr	r2, [r3, #28]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f042 0208 	orr.w	r2, r2, #8
 80079fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69da      	ldr	r2, [r3, #28]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 0204 	bic.w	r2, r2, #4
 8007a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69d9      	ldr	r1, [r3, #28]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	61da      	str	r2, [r3, #28]
      break;
 8007a20:	e064      	b.n	8007aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 fdef 	bl	800860c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69da      	ldr	r2, [r3, #28]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69d9      	ldr	r1, [r3, #28]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	021a      	lsls	r2, r3, #8
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	61da      	str	r2, [r3, #28]
      break;
 8007a62:	e043      	b.n	8007aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fe62 	bl	8008734 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f042 0208 	orr.w	r2, r2, #8
 8007a7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0204 	bic.w	r2, r2, #4
 8007a8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007aa2:	e023      	b.n	8007aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 feac 	bl	8008808 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007abe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ace:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	021a      	lsls	r2, r3, #8
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007ae4:	e002      	b.n	8007aec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop

08007b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d101      	bne.n	8007b1c <HAL_TIM_ConfigClockSource+0x1c>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e0f6      	b.n	8007d0a <HAL_TIM_ConfigClockSource+0x20a>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007b3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a6f      	ldr	r2, [pc, #444]	@ (8007d14 <HAL_TIM_ConfigClockSource+0x214>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	f000 80c1 	beq.w	8007cde <HAL_TIM_ConfigClockSource+0x1de>
 8007b5c:	4a6d      	ldr	r2, [pc, #436]	@ (8007d14 <HAL_TIM_ConfigClockSource+0x214>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	f200 80c6 	bhi.w	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b64:	4a6c      	ldr	r2, [pc, #432]	@ (8007d18 <HAL_TIM_ConfigClockSource+0x218>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	f000 80b9 	beq.w	8007cde <HAL_TIM_ConfigClockSource+0x1de>
 8007b6c:	4a6a      	ldr	r2, [pc, #424]	@ (8007d18 <HAL_TIM_ConfigClockSource+0x218>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	f200 80be 	bhi.w	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b74:	4a69      	ldr	r2, [pc, #420]	@ (8007d1c <HAL_TIM_ConfigClockSource+0x21c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	f000 80b1 	beq.w	8007cde <HAL_TIM_ConfigClockSource+0x1de>
 8007b7c:	4a67      	ldr	r2, [pc, #412]	@ (8007d1c <HAL_TIM_ConfigClockSource+0x21c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	f200 80b6 	bhi.w	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b84:	4a66      	ldr	r2, [pc, #408]	@ (8007d20 <HAL_TIM_ConfigClockSource+0x220>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	f000 80a9 	beq.w	8007cde <HAL_TIM_ConfigClockSource+0x1de>
 8007b8c:	4a64      	ldr	r2, [pc, #400]	@ (8007d20 <HAL_TIM_ConfigClockSource+0x220>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	f200 80ae 	bhi.w	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b94:	4a63      	ldr	r2, [pc, #396]	@ (8007d24 <HAL_TIM_ConfigClockSource+0x224>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	f000 80a1 	beq.w	8007cde <HAL_TIM_ConfigClockSource+0x1de>
 8007b9c:	4a61      	ldr	r2, [pc, #388]	@ (8007d24 <HAL_TIM_ConfigClockSource+0x224>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	f200 80a6 	bhi.w	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ba4:	4a60      	ldr	r2, [pc, #384]	@ (8007d28 <HAL_TIM_ConfigClockSource+0x228>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	f000 8099 	beq.w	8007cde <HAL_TIM_ConfigClockSource+0x1de>
 8007bac:	4a5e      	ldr	r2, [pc, #376]	@ (8007d28 <HAL_TIM_ConfigClockSource+0x228>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	f200 809e 	bhi.w	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007bb8:	f000 8091 	beq.w	8007cde <HAL_TIM_ConfigClockSource+0x1de>
 8007bbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007bc0:	f200 8096 	bhi.w	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bc8:	f000 8089 	beq.w	8007cde <HAL_TIM_ConfigClockSource+0x1de>
 8007bcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bd0:	f200 808e 	bhi.w	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bd8:	d03e      	beq.n	8007c58 <HAL_TIM_ConfigClockSource+0x158>
 8007bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bde:	f200 8087 	bhi.w	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007be6:	f000 8086 	beq.w	8007cf6 <HAL_TIM_ConfigClockSource+0x1f6>
 8007bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bee:	d87f      	bhi.n	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bf0:	2b70      	cmp	r3, #112	@ 0x70
 8007bf2:	d01a      	beq.n	8007c2a <HAL_TIM_ConfigClockSource+0x12a>
 8007bf4:	2b70      	cmp	r3, #112	@ 0x70
 8007bf6:	d87b      	bhi.n	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bf8:	2b60      	cmp	r3, #96	@ 0x60
 8007bfa:	d050      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x19e>
 8007bfc:	2b60      	cmp	r3, #96	@ 0x60
 8007bfe:	d877      	bhi.n	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c00:	2b50      	cmp	r3, #80	@ 0x50
 8007c02:	d03c      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x17e>
 8007c04:	2b50      	cmp	r3, #80	@ 0x50
 8007c06:	d873      	bhi.n	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c08:	2b40      	cmp	r3, #64	@ 0x40
 8007c0a:	d058      	beq.n	8007cbe <HAL_TIM_ConfigClockSource+0x1be>
 8007c0c:	2b40      	cmp	r3, #64	@ 0x40
 8007c0e:	d86f      	bhi.n	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c10:	2b30      	cmp	r3, #48	@ 0x30
 8007c12:	d064      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x1de>
 8007c14:	2b30      	cmp	r3, #48	@ 0x30
 8007c16:	d86b      	bhi.n	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c18:	2b20      	cmp	r3, #32
 8007c1a:	d060      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x1de>
 8007c1c:	2b20      	cmp	r3, #32
 8007c1e:	d867      	bhi.n	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d05c      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x1de>
 8007c24:	2b10      	cmp	r3, #16
 8007c26:	d05a      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x1de>
 8007c28:	e062      	b.n	8007cf0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c3a:	f001 f8d7 	bl	8008dec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	609a      	str	r2, [r3, #8]
      break;
 8007c56:	e04f      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c68:	f001 f8c0 	bl	8008dec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	689a      	ldr	r2, [r3, #8]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c7a:	609a      	str	r2, [r3, #8]
      break;
 8007c7c:	e03c      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f000 ff7c 	bl	8008b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2150      	movs	r1, #80	@ 0x50
 8007c96:	4618      	mov	r0, r3
 8007c98:	f001 f88b 	bl	8008db2 <TIM_ITRx_SetConfig>
      break;
 8007c9c:	e02c      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007caa:	461a      	mov	r2, r3
 8007cac:	f000 ffd8 	bl	8008c60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2160      	movs	r1, #96	@ 0x60
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f001 f87b 	bl	8008db2 <TIM_ITRx_SetConfig>
      break;
 8007cbc:	e01c      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f000 ff5c 	bl	8008b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2140      	movs	r1, #64	@ 0x40
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f001 f86b 	bl	8008db2 <TIM_ITRx_SetConfig>
      break;
 8007cdc:	e00c      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4610      	mov	r0, r2
 8007cea:	f001 f862 	bl	8008db2 <TIM_ITRx_SetConfig>
      break;
 8007cee:	e003      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf4:	e000      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007cf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	00100070 	.word	0x00100070
 8007d18:	00100060 	.word	0x00100060
 8007d1c:	00100050 	.word	0x00100050
 8007d20:	00100040 	.word	0x00100040
 8007d24:	00100030 	.word	0x00100030
 8007d28:	00100020 	.word	0x00100020

08007d2c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d101      	bne.n	8007d44 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007d40:	2302      	movs	r3, #2
 8007d42:	e031      	b.n	8007da8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fdc2 	bl	80088e0 <TIM_SlaveTimer_SetConfig>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e018      	b.n	8007da8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d84:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d94:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e14a      	b.n	8008116 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	f040 80dd 	bne.w	8008048 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007e8e:	7afb      	ldrb	r3, [r7, #11]
 8007e90:	2b1f      	cmp	r3, #31
 8007e92:	f200 80d6 	bhi.w	8008042 <HAL_TIM_RegisterCallback+0x1de>
 8007e96:	a201      	add	r2, pc, #4	@ (adr r2, 8007e9c <HAL_TIM_RegisterCallback+0x38>)
 8007e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9c:	08007f1d 	.word	0x08007f1d
 8007ea0:	08007f25 	.word	0x08007f25
 8007ea4:	08007f2d 	.word	0x08007f2d
 8007ea8:	08007f35 	.word	0x08007f35
 8007eac:	08007f3d 	.word	0x08007f3d
 8007eb0:	08007f45 	.word	0x08007f45
 8007eb4:	08007f4d 	.word	0x08007f4d
 8007eb8:	08007f55 	.word	0x08007f55
 8007ebc:	08007f5d 	.word	0x08007f5d
 8007ec0:	08007f65 	.word	0x08007f65
 8007ec4:	08007f6d 	.word	0x08007f6d
 8007ec8:	08007f75 	.word	0x08007f75
 8007ecc:	08007f7d 	.word	0x08007f7d
 8007ed0:	08007f85 	.word	0x08007f85
 8007ed4:	08007f8f 	.word	0x08007f8f
 8007ed8:	08007f99 	.word	0x08007f99
 8007edc:	08007fa3 	.word	0x08007fa3
 8007ee0:	08007fad 	.word	0x08007fad
 8007ee4:	08007fb7 	.word	0x08007fb7
 8007ee8:	08007fc1 	.word	0x08007fc1
 8007eec:	08007fcb 	.word	0x08007fcb
 8007ef0:	08007fd5 	.word	0x08007fd5
 8007ef4:	08007fdf 	.word	0x08007fdf
 8007ef8:	08007fe9 	.word	0x08007fe9
 8007efc:	08007ff3 	.word	0x08007ff3
 8007f00:	08007ffd 	.word	0x08007ffd
 8007f04:	08008007 	.word	0x08008007
 8007f08:	08008011 	.word	0x08008011
 8007f0c:	0800801b 	.word	0x0800801b
 8007f10:	08008025 	.word	0x08008025
 8007f14:	0800802f 	.word	0x0800802f
 8007f18:	08008039 	.word	0x08008039
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007f22:	e0f7      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007f2a:	e0f3      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007f32:	e0ef      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007f3a:	e0eb      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007f42:	e0e7      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007f4a:	e0e3      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007f52:	e0df      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007f5a:	e0db      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007f62:	e0d7      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007f6a:	e0d3      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007f72:	e0cf      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007f7a:	e0cb      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007f82:	e0c7      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007f8c:	e0c2      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007f96:	e0bd      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007fa0:	e0b8      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007faa:	e0b3      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007fb4:	e0ae      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007fbe:	e0a9      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007fc8:	e0a4      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007fd2:	e09f      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007fdc:	e09a      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007fe6:	e095      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007ff0:	e090      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007ffa:	e08b      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008004:	e086      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800800e:	e081      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008018:	e07c      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008022:	e077      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800802c:	e072      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008036:	e06d      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008040:	e068      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	75fb      	strb	r3, [r7, #23]
        break;
 8008046:	e065      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d15d      	bne.n	8008110 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008054:	7afb      	ldrb	r3, [r7, #11]
 8008056:	2b0d      	cmp	r3, #13
 8008058:	d857      	bhi.n	800810a <HAL_TIM_RegisterCallback+0x2a6>
 800805a:	a201      	add	r2, pc, #4	@ (adr r2, 8008060 <HAL_TIM_RegisterCallback+0x1fc>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	08008099 	.word	0x08008099
 8008064:	080080a1 	.word	0x080080a1
 8008068:	080080a9 	.word	0x080080a9
 800806c:	080080b1 	.word	0x080080b1
 8008070:	080080b9 	.word	0x080080b9
 8008074:	080080c1 	.word	0x080080c1
 8008078:	080080c9 	.word	0x080080c9
 800807c:	080080d1 	.word	0x080080d1
 8008080:	080080d9 	.word	0x080080d9
 8008084:	080080e1 	.word	0x080080e1
 8008088:	080080e9 	.word	0x080080e9
 800808c:	080080f1 	.word	0x080080f1
 8008090:	080080f9 	.word	0x080080f9
 8008094:	08008101 	.word	0x08008101
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800809e:	e039      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80080a6:	e035      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80080ae:	e031      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80080b6:	e02d      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80080be:	e029      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80080c6:	e025      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80080ce:	e021      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80080d6:	e01d      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80080de:	e019      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80080e6:	e015      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80080ee:	e011      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80080f6:	e00d      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80080fe:	e009      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008108:	e004      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	75fb      	strb	r3, [r7, #23]
        break;
 800810e:	e001      	b.n	8008114 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008114:	7dfb      	ldrb	r3, [r7, #23]
}
 8008116:	4618      	mov	r0, r3
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop

08008124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a4c      	ldr	r2, [pc, #304]	@ (8008268 <TIM_Base_SetConfig+0x144>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d017      	beq.n	800816c <TIM_Base_SetConfig+0x48>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008142:	d013      	beq.n	800816c <TIM_Base_SetConfig+0x48>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a49      	ldr	r2, [pc, #292]	@ (800826c <TIM_Base_SetConfig+0x148>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00f      	beq.n	800816c <TIM_Base_SetConfig+0x48>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a48      	ldr	r2, [pc, #288]	@ (8008270 <TIM_Base_SetConfig+0x14c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d00b      	beq.n	800816c <TIM_Base_SetConfig+0x48>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a47      	ldr	r2, [pc, #284]	@ (8008274 <TIM_Base_SetConfig+0x150>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d007      	beq.n	800816c <TIM_Base_SetConfig+0x48>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a46      	ldr	r2, [pc, #280]	@ (8008278 <TIM_Base_SetConfig+0x154>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d003      	beq.n	800816c <TIM_Base_SetConfig+0x48>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a45      	ldr	r2, [pc, #276]	@ (800827c <TIM_Base_SetConfig+0x158>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d108      	bne.n	800817e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a39      	ldr	r2, [pc, #228]	@ (8008268 <TIM_Base_SetConfig+0x144>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d023      	beq.n	80081ce <TIM_Base_SetConfig+0xaa>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818c:	d01f      	beq.n	80081ce <TIM_Base_SetConfig+0xaa>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a36      	ldr	r2, [pc, #216]	@ (800826c <TIM_Base_SetConfig+0x148>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d01b      	beq.n	80081ce <TIM_Base_SetConfig+0xaa>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a35      	ldr	r2, [pc, #212]	@ (8008270 <TIM_Base_SetConfig+0x14c>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d017      	beq.n	80081ce <TIM_Base_SetConfig+0xaa>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a34      	ldr	r2, [pc, #208]	@ (8008274 <TIM_Base_SetConfig+0x150>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d013      	beq.n	80081ce <TIM_Base_SetConfig+0xaa>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a33      	ldr	r2, [pc, #204]	@ (8008278 <TIM_Base_SetConfig+0x154>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00f      	beq.n	80081ce <TIM_Base_SetConfig+0xaa>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a33      	ldr	r2, [pc, #204]	@ (8008280 <TIM_Base_SetConfig+0x15c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00b      	beq.n	80081ce <TIM_Base_SetConfig+0xaa>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a32      	ldr	r2, [pc, #200]	@ (8008284 <TIM_Base_SetConfig+0x160>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d007      	beq.n	80081ce <TIM_Base_SetConfig+0xaa>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a31      	ldr	r2, [pc, #196]	@ (8008288 <TIM_Base_SetConfig+0x164>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d003      	beq.n	80081ce <TIM_Base_SetConfig+0xaa>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a2c      	ldr	r2, [pc, #176]	@ (800827c <TIM_Base_SetConfig+0x158>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d108      	bne.n	80081e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	4313      	orrs	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	689a      	ldr	r2, [r3, #8]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a18      	ldr	r2, [pc, #96]	@ (8008268 <TIM_Base_SetConfig+0x144>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d013      	beq.n	8008234 <TIM_Base_SetConfig+0x110>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a1a      	ldr	r2, [pc, #104]	@ (8008278 <TIM_Base_SetConfig+0x154>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00f      	beq.n	8008234 <TIM_Base_SetConfig+0x110>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a1a      	ldr	r2, [pc, #104]	@ (8008280 <TIM_Base_SetConfig+0x15c>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d00b      	beq.n	8008234 <TIM_Base_SetConfig+0x110>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a19      	ldr	r2, [pc, #100]	@ (8008284 <TIM_Base_SetConfig+0x160>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d007      	beq.n	8008234 <TIM_Base_SetConfig+0x110>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a18      	ldr	r2, [pc, #96]	@ (8008288 <TIM_Base_SetConfig+0x164>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d003      	beq.n	8008234 <TIM_Base_SetConfig+0x110>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a13      	ldr	r2, [pc, #76]	@ (800827c <TIM_Base_SetConfig+0x158>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d103      	bne.n	800823c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b01      	cmp	r3, #1
 800824c:	d105      	bne.n	800825a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f023 0201 	bic.w	r2, r3, #1
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	611a      	str	r2, [r3, #16]
  }
}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	40012c00 	.word	0x40012c00
 800826c:	40000400 	.word	0x40000400
 8008270:	40000800 	.word	0x40000800
 8008274:	40000c00 	.word	0x40000c00
 8008278:	40013400 	.word	0x40013400
 800827c:	40015000 	.word	0x40015000
 8008280:	40014000 	.word	0x40014000
 8008284:	40014400 	.word	0x40014400
 8008288:	40014800 	.word	0x40014800

0800828c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	f023 0201 	bic.w	r2, r3, #1
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f023 0303 	bic.w	r3, r3, #3
 80082c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f023 0302 	bic.w	r3, r3, #2
 80082d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a30      	ldr	r2, [pc, #192]	@ (80083a8 <TIM_OC1_SetConfig+0x11c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d013      	beq.n	8008314 <TIM_OC1_SetConfig+0x88>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a2f      	ldr	r2, [pc, #188]	@ (80083ac <TIM_OC1_SetConfig+0x120>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00f      	beq.n	8008314 <TIM_OC1_SetConfig+0x88>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a2e      	ldr	r2, [pc, #184]	@ (80083b0 <TIM_OC1_SetConfig+0x124>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00b      	beq.n	8008314 <TIM_OC1_SetConfig+0x88>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a2d      	ldr	r2, [pc, #180]	@ (80083b4 <TIM_OC1_SetConfig+0x128>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d007      	beq.n	8008314 <TIM_OC1_SetConfig+0x88>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a2c      	ldr	r2, [pc, #176]	@ (80083b8 <TIM_OC1_SetConfig+0x12c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d003      	beq.n	8008314 <TIM_OC1_SetConfig+0x88>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a2b      	ldr	r2, [pc, #172]	@ (80083bc <TIM_OC1_SetConfig+0x130>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d10c      	bne.n	800832e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	f023 0308 	bic.w	r3, r3, #8
 800831a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	4313      	orrs	r3, r2
 8008324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f023 0304 	bic.w	r3, r3, #4
 800832c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a1d      	ldr	r2, [pc, #116]	@ (80083a8 <TIM_OC1_SetConfig+0x11c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d013      	beq.n	800835e <TIM_OC1_SetConfig+0xd2>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a1c      	ldr	r2, [pc, #112]	@ (80083ac <TIM_OC1_SetConfig+0x120>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d00f      	beq.n	800835e <TIM_OC1_SetConfig+0xd2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a1b      	ldr	r2, [pc, #108]	@ (80083b0 <TIM_OC1_SetConfig+0x124>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00b      	beq.n	800835e <TIM_OC1_SetConfig+0xd2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a1a      	ldr	r2, [pc, #104]	@ (80083b4 <TIM_OC1_SetConfig+0x128>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d007      	beq.n	800835e <TIM_OC1_SetConfig+0xd2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a19      	ldr	r2, [pc, #100]	@ (80083b8 <TIM_OC1_SetConfig+0x12c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d003      	beq.n	800835e <TIM_OC1_SetConfig+0xd2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a18      	ldr	r2, [pc, #96]	@ (80083bc <TIM_OC1_SetConfig+0x130>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d111      	bne.n	8008382 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800836c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4313      	orrs	r3, r2
 8008376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4313      	orrs	r3, r2
 8008380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	621a      	str	r2, [r3, #32]
}
 800839c:	bf00      	nop
 800839e:	371c      	adds	r7, #28
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	40012c00 	.word	0x40012c00
 80083ac:	40013400 	.word	0x40013400
 80083b0:	40014000 	.word	0x40014000
 80083b4:	40014400 	.word	0x40014400
 80083b8:	40014800 	.word	0x40014800
 80083bc:	40015000 	.word	0x40015000

080083c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	f023 0210 	bic.w	r2, r3, #16
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	4313      	orrs	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	f023 0320 	bic.w	r3, r3, #32
 800840e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a2c      	ldr	r2, [pc, #176]	@ (80084d0 <TIM_OC2_SetConfig+0x110>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d007      	beq.n	8008434 <TIM_OC2_SetConfig+0x74>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a2b      	ldr	r2, [pc, #172]	@ (80084d4 <TIM_OC2_SetConfig+0x114>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d003      	beq.n	8008434 <TIM_OC2_SetConfig+0x74>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a2a      	ldr	r2, [pc, #168]	@ (80084d8 <TIM_OC2_SetConfig+0x118>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d10d      	bne.n	8008450 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800843a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	4313      	orrs	r3, r2
 8008446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800844e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a1f      	ldr	r2, [pc, #124]	@ (80084d0 <TIM_OC2_SetConfig+0x110>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d013      	beq.n	8008480 <TIM_OC2_SetConfig+0xc0>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a1e      	ldr	r2, [pc, #120]	@ (80084d4 <TIM_OC2_SetConfig+0x114>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00f      	beq.n	8008480 <TIM_OC2_SetConfig+0xc0>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a1e      	ldr	r2, [pc, #120]	@ (80084dc <TIM_OC2_SetConfig+0x11c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d00b      	beq.n	8008480 <TIM_OC2_SetConfig+0xc0>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a1d      	ldr	r2, [pc, #116]	@ (80084e0 <TIM_OC2_SetConfig+0x120>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d007      	beq.n	8008480 <TIM_OC2_SetConfig+0xc0>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a1c      	ldr	r2, [pc, #112]	@ (80084e4 <TIM_OC2_SetConfig+0x124>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d003      	beq.n	8008480 <TIM_OC2_SetConfig+0xc0>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a17      	ldr	r2, [pc, #92]	@ (80084d8 <TIM_OC2_SetConfig+0x118>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d113      	bne.n	80084a8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800848e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	4313      	orrs	r3, r2
 800849a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	621a      	str	r2, [r3, #32]
}
 80084c2:	bf00      	nop
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	40012c00 	.word	0x40012c00
 80084d4:	40013400 	.word	0x40013400
 80084d8:	40015000 	.word	0x40015000
 80084dc:	40014000 	.word	0x40014000
 80084e0:	40014400 	.word	0x40014400
 80084e4:	40014800 	.word	0x40014800

080084e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b087      	sub	sp, #28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800851a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0303 	bic.w	r3, r3, #3
 8008522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4313      	orrs	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	021b      	lsls	r3, r3, #8
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	4313      	orrs	r3, r2
 8008540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a2b      	ldr	r2, [pc, #172]	@ (80085f4 <TIM_OC3_SetConfig+0x10c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d007      	beq.n	800855a <TIM_OC3_SetConfig+0x72>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a2a      	ldr	r2, [pc, #168]	@ (80085f8 <TIM_OC3_SetConfig+0x110>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d003      	beq.n	800855a <TIM_OC3_SetConfig+0x72>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a29      	ldr	r2, [pc, #164]	@ (80085fc <TIM_OC3_SetConfig+0x114>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d10d      	bne.n	8008576 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a1e      	ldr	r2, [pc, #120]	@ (80085f4 <TIM_OC3_SetConfig+0x10c>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d013      	beq.n	80085a6 <TIM_OC3_SetConfig+0xbe>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a1d      	ldr	r2, [pc, #116]	@ (80085f8 <TIM_OC3_SetConfig+0x110>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d00f      	beq.n	80085a6 <TIM_OC3_SetConfig+0xbe>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a1d      	ldr	r2, [pc, #116]	@ (8008600 <TIM_OC3_SetConfig+0x118>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00b      	beq.n	80085a6 <TIM_OC3_SetConfig+0xbe>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a1c      	ldr	r2, [pc, #112]	@ (8008604 <TIM_OC3_SetConfig+0x11c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d007      	beq.n	80085a6 <TIM_OC3_SetConfig+0xbe>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a1b      	ldr	r2, [pc, #108]	@ (8008608 <TIM_OC3_SetConfig+0x120>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d003      	beq.n	80085a6 <TIM_OC3_SetConfig+0xbe>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a16      	ldr	r2, [pc, #88]	@ (80085fc <TIM_OC3_SetConfig+0x114>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d113      	bne.n	80085ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	621a      	str	r2, [r3, #32]
}
 80085e8:	bf00      	nop
 80085ea:	371c      	adds	r7, #28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	40012c00 	.word	0x40012c00
 80085f8:	40013400 	.word	0x40013400
 80085fc:	40015000 	.word	0x40015000
 8008600:	40014000 	.word	0x40014000
 8008604:	40014400 	.word	0x40014400
 8008608:	40014800 	.word	0x40014800

0800860c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800863a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800863e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	021b      	lsls	r3, r3, #8
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4313      	orrs	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800865a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	031b      	lsls	r3, r3, #12
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	4313      	orrs	r3, r2
 8008666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a2c      	ldr	r2, [pc, #176]	@ (800871c <TIM_OC4_SetConfig+0x110>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d007      	beq.n	8008680 <TIM_OC4_SetConfig+0x74>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a2b      	ldr	r2, [pc, #172]	@ (8008720 <TIM_OC4_SetConfig+0x114>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d003      	beq.n	8008680 <TIM_OC4_SetConfig+0x74>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a2a      	ldr	r2, [pc, #168]	@ (8008724 <TIM_OC4_SetConfig+0x118>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d10d      	bne.n	800869c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	031b      	lsls	r3, r3, #12
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	4313      	orrs	r3, r2
 8008692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800869a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a1f      	ldr	r2, [pc, #124]	@ (800871c <TIM_OC4_SetConfig+0x110>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d013      	beq.n	80086cc <TIM_OC4_SetConfig+0xc0>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a1e      	ldr	r2, [pc, #120]	@ (8008720 <TIM_OC4_SetConfig+0x114>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d00f      	beq.n	80086cc <TIM_OC4_SetConfig+0xc0>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008728 <TIM_OC4_SetConfig+0x11c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d00b      	beq.n	80086cc <TIM_OC4_SetConfig+0xc0>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a1d      	ldr	r2, [pc, #116]	@ (800872c <TIM_OC4_SetConfig+0x120>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d007      	beq.n	80086cc <TIM_OC4_SetConfig+0xc0>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a1c      	ldr	r2, [pc, #112]	@ (8008730 <TIM_OC4_SetConfig+0x124>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d003      	beq.n	80086cc <TIM_OC4_SetConfig+0xc0>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a17      	ldr	r2, [pc, #92]	@ (8008724 <TIM_OC4_SetConfig+0x118>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d113      	bne.n	80086f4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086da:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	019b      	lsls	r3, r3, #6
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	019b      	lsls	r3, r3, #6
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	621a      	str	r2, [r3, #32]
}
 800870e:	bf00      	nop
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	40012c00 	.word	0x40012c00
 8008720:	40013400 	.word	0x40013400
 8008724:	40015000 	.word	0x40015000
 8008728:	40014000 	.word	0x40014000
 800872c:	40014400 	.word	0x40014400
 8008730:	40014800 	.word	0x40014800

08008734 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800875a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008778:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	041b      	lsls	r3, r3, #16
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	4313      	orrs	r3, r2
 8008784:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a19      	ldr	r2, [pc, #100]	@ (80087f0 <TIM_OC5_SetConfig+0xbc>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d013      	beq.n	80087b6 <TIM_OC5_SetConfig+0x82>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a18      	ldr	r2, [pc, #96]	@ (80087f4 <TIM_OC5_SetConfig+0xc0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00f      	beq.n	80087b6 <TIM_OC5_SetConfig+0x82>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a17      	ldr	r2, [pc, #92]	@ (80087f8 <TIM_OC5_SetConfig+0xc4>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00b      	beq.n	80087b6 <TIM_OC5_SetConfig+0x82>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a16      	ldr	r2, [pc, #88]	@ (80087fc <TIM_OC5_SetConfig+0xc8>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d007      	beq.n	80087b6 <TIM_OC5_SetConfig+0x82>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a15      	ldr	r2, [pc, #84]	@ (8008800 <TIM_OC5_SetConfig+0xcc>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d003      	beq.n	80087b6 <TIM_OC5_SetConfig+0x82>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a14      	ldr	r2, [pc, #80]	@ (8008804 <TIM_OC5_SetConfig+0xd0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d109      	bne.n	80087ca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	021b      	lsls	r3, r3, #8
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	621a      	str	r2, [r3, #32]
}
 80087e4:	bf00      	nop
 80087e6:	371c      	adds	r7, #28
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	40012c00 	.word	0x40012c00
 80087f4:	40013400 	.word	0x40013400
 80087f8:	40014000 	.word	0x40014000
 80087fc:	40014400 	.word	0x40014400
 8008800:	40014800 	.word	0x40014800
 8008804:	40015000 	.word	0x40015000

08008808 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800882e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800883a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	021b      	lsls	r3, r3, #8
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800884e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	051b      	lsls	r3, r3, #20
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a1a      	ldr	r2, [pc, #104]	@ (80088c8 <TIM_OC6_SetConfig+0xc0>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d013      	beq.n	800888c <TIM_OC6_SetConfig+0x84>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a19      	ldr	r2, [pc, #100]	@ (80088cc <TIM_OC6_SetConfig+0xc4>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d00f      	beq.n	800888c <TIM_OC6_SetConfig+0x84>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a18      	ldr	r2, [pc, #96]	@ (80088d0 <TIM_OC6_SetConfig+0xc8>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d00b      	beq.n	800888c <TIM_OC6_SetConfig+0x84>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a17      	ldr	r2, [pc, #92]	@ (80088d4 <TIM_OC6_SetConfig+0xcc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d007      	beq.n	800888c <TIM_OC6_SetConfig+0x84>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a16      	ldr	r2, [pc, #88]	@ (80088d8 <TIM_OC6_SetConfig+0xd0>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d003      	beq.n	800888c <TIM_OC6_SetConfig+0x84>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a15      	ldr	r2, [pc, #84]	@ (80088dc <TIM_OC6_SetConfig+0xd4>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d109      	bne.n	80088a0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008892:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	029b      	lsls	r3, r3, #10
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	4313      	orrs	r3, r2
 800889e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	621a      	str	r2, [r3, #32]
}
 80088ba:	bf00      	nop
 80088bc:	371c      	adds	r7, #28
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	40012c00 	.word	0x40012c00
 80088cc:	40013400 	.word	0x40013400
 80088d0:	40014000 	.word	0x40014000
 80088d4:	40014400 	.word	0x40014400
 80088d8:	40014800 	.word	0x40014800
 80088dc:	40015000 	.word	0x40015000

080088e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80088fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008900:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	4313      	orrs	r3, r2
 800890a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008912:	f023 0307 	bic.w	r3, r3, #7
 8008916:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4313      	orrs	r3, r2
 8008920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	4a56      	ldr	r2, [pc, #344]	@ (8008a88 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008930:	4293      	cmp	r3, r2
 8008932:	f000 80a2 	beq.w	8008a7a <TIM_SlaveTimer_SetConfig+0x19a>
 8008936:	4a54      	ldr	r2, [pc, #336]	@ (8008a88 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008938:	4293      	cmp	r3, r2
 800893a:	f200 809b 	bhi.w	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 800893e:	4a53      	ldr	r2, [pc, #332]	@ (8008a8c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8008940:	4293      	cmp	r3, r2
 8008942:	f000 809a 	beq.w	8008a7a <TIM_SlaveTimer_SetConfig+0x19a>
 8008946:	4a51      	ldr	r2, [pc, #324]	@ (8008a8c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8008948:	4293      	cmp	r3, r2
 800894a:	f200 8093 	bhi.w	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 800894e:	4a50      	ldr	r2, [pc, #320]	@ (8008a90 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008950:	4293      	cmp	r3, r2
 8008952:	f000 8092 	beq.w	8008a7a <TIM_SlaveTimer_SetConfig+0x19a>
 8008956:	4a4e      	ldr	r2, [pc, #312]	@ (8008a90 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008958:	4293      	cmp	r3, r2
 800895a:	f200 808b 	bhi.w	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 800895e:	4a4d      	ldr	r2, [pc, #308]	@ (8008a94 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008960:	4293      	cmp	r3, r2
 8008962:	f000 808a 	beq.w	8008a7a <TIM_SlaveTimer_SetConfig+0x19a>
 8008966:	4a4b      	ldr	r2, [pc, #300]	@ (8008a94 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	f200 8083 	bhi.w	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 800896e:	4a4a      	ldr	r2, [pc, #296]	@ (8008a98 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	f000 8082 	beq.w	8008a7a <TIM_SlaveTimer_SetConfig+0x19a>
 8008976:	4a48      	ldr	r2, [pc, #288]	@ (8008a98 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d87b      	bhi.n	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 800897c:	4a47      	ldr	r2, [pc, #284]	@ (8008a9c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d07b      	beq.n	8008a7a <TIM_SlaveTimer_SetConfig+0x19a>
 8008982:	4a46      	ldr	r2, [pc, #280]	@ (8008a9c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d875      	bhi.n	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 8008988:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800898c:	d075      	beq.n	8008a7a <TIM_SlaveTimer_SetConfig+0x19a>
 800898e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008992:	d86f      	bhi.n	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 8008994:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008998:	d06f      	beq.n	8008a7a <TIM_SlaveTimer_SetConfig+0x19a>
 800899a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800899e:	d869      	bhi.n	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 80089a0:	2b70      	cmp	r3, #112	@ 0x70
 80089a2:	d01a      	beq.n	80089da <TIM_SlaveTimer_SetConfig+0xfa>
 80089a4:	2b70      	cmp	r3, #112	@ 0x70
 80089a6:	d865      	bhi.n	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 80089a8:	2b60      	cmp	r3, #96	@ 0x60
 80089aa:	d059      	beq.n	8008a60 <TIM_SlaveTimer_SetConfig+0x180>
 80089ac:	2b60      	cmp	r3, #96	@ 0x60
 80089ae:	d861      	bhi.n	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 80089b0:	2b50      	cmp	r3, #80	@ 0x50
 80089b2:	d04b      	beq.n	8008a4c <TIM_SlaveTimer_SetConfig+0x16c>
 80089b4:	2b50      	cmp	r3, #80	@ 0x50
 80089b6:	d85d      	bhi.n	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 80089b8:	2b40      	cmp	r3, #64	@ 0x40
 80089ba:	d019      	beq.n	80089f0 <TIM_SlaveTimer_SetConfig+0x110>
 80089bc:	2b40      	cmp	r3, #64	@ 0x40
 80089be:	d859      	bhi.n	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 80089c0:	2b30      	cmp	r3, #48	@ 0x30
 80089c2:	d05a      	beq.n	8008a7a <TIM_SlaveTimer_SetConfig+0x19a>
 80089c4:	2b30      	cmp	r3, #48	@ 0x30
 80089c6:	d855      	bhi.n	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 80089c8:	2b20      	cmp	r3, #32
 80089ca:	d056      	beq.n	8008a7a <TIM_SlaveTimer_SetConfig+0x19a>
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	d851      	bhi.n	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d052      	beq.n	8008a7a <TIM_SlaveTimer_SetConfig+0x19a>
 80089d4:	2b10      	cmp	r3, #16
 80089d6:	d050      	beq.n	8008a7a <TIM_SlaveTimer_SetConfig+0x19a>
 80089d8:	e04c      	b.n	8008a74 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80089ea:	f000 f9ff 	bl	8008dec <TIM_ETR_SetConfig>
      break;
 80089ee:	e045      	b.n	8008a7c <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b05      	cmp	r3, #5
 80089f6:	d004      	beq.n	8008a02 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80089fc:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8008a00:	d101      	bne.n	8008a06 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e03b      	b.n	8008a7e <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6a1a      	ldr	r2, [r3, #32]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 0201 	bic.w	r2, r2, #1
 8008a1c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a2c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	011b      	lsls	r3, r3, #4
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	621a      	str	r2, [r3, #32]
      break;
 8008a4a:	e017      	b.n	8008a7c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f000 f895 	bl	8008b88 <TIM_TI1_ConfigInputStage>
      break;
 8008a5e:	e00d      	b.n	8008a7c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	f000 f8f7 	bl	8008c60 <TIM_TI2_ConfigInputStage>
      break;
 8008a72:	e003      	b.n	8008a7c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	75fb      	strb	r3, [r7, #23]
      break;
 8008a78:	e000      	b.n	8008a7c <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8008a7a:	bf00      	nop
  }

  return status;
 8008a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	00100070 	.word	0x00100070
 8008a8c:	00100060 	.word	0x00100060
 8008a90:	00100050 	.word	0x00100050
 8008a94:	00100040 	.word	0x00100040
 8008a98:	00100030 	.word	0x00100030
 8008a9c:	00100020 	.word	0x00100020

08008aa0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	f023 0201 	bic.w	r2, r3, #1
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4a28      	ldr	r2, [pc, #160]	@ (8008b6c <TIM_TI1_SetConfig+0xcc>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d01b      	beq.n	8008b06 <TIM_TI1_SetConfig+0x66>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad4:	d017      	beq.n	8008b06 <TIM_TI1_SetConfig+0x66>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4a25      	ldr	r2, [pc, #148]	@ (8008b70 <TIM_TI1_SetConfig+0xd0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d013      	beq.n	8008b06 <TIM_TI1_SetConfig+0x66>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4a24      	ldr	r2, [pc, #144]	@ (8008b74 <TIM_TI1_SetConfig+0xd4>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d00f      	beq.n	8008b06 <TIM_TI1_SetConfig+0x66>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4a23      	ldr	r2, [pc, #140]	@ (8008b78 <TIM_TI1_SetConfig+0xd8>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d00b      	beq.n	8008b06 <TIM_TI1_SetConfig+0x66>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4a22      	ldr	r2, [pc, #136]	@ (8008b7c <TIM_TI1_SetConfig+0xdc>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d007      	beq.n	8008b06 <TIM_TI1_SetConfig+0x66>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	4a21      	ldr	r2, [pc, #132]	@ (8008b80 <TIM_TI1_SetConfig+0xe0>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d003      	beq.n	8008b06 <TIM_TI1_SetConfig+0x66>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	4a20      	ldr	r2, [pc, #128]	@ (8008b84 <TIM_TI1_SetConfig+0xe4>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d101      	bne.n	8008b0a <TIM_TI1_SetConfig+0x6a>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <TIM_TI1_SetConfig+0x6c>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d008      	beq.n	8008b22 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f023 0303 	bic.w	r3, r3, #3
 8008b16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	e003      	b.n	8008b2a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f043 0301 	orr.w	r3, r3, #1
 8008b28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	011b      	lsls	r3, r3, #4
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f023 030a 	bic.w	r3, r3, #10
 8008b44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	f003 030a 	and.w	r3, r3, #10
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	621a      	str	r2, [r3, #32]
}
 8008b5e:	bf00      	nop
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	40012c00 	.word	0x40012c00
 8008b70:	40000400 	.word	0x40000400
 8008b74:	40000800 	.word	0x40000800
 8008b78:	40000c00 	.word	0x40000c00
 8008b7c:	40013400 	.word	0x40013400
 8008b80:	40014000 	.word	0x40014000
 8008b84:	40015000 	.word	0x40015000

08008b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6a1b      	ldr	r3, [r3, #32]
 8008b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	f023 0201 	bic.w	r2, r3, #1
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	011b      	lsls	r3, r3, #4
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f023 030a 	bic.w	r3, r3, #10
 8008bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	621a      	str	r2, [r3, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b087      	sub	sp, #28
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
 8008bf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	f023 0210 	bic.w	r2, r3, #16
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	021b      	lsls	r3, r3, #8
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	031b      	lsls	r3, r3, #12
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c38:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	011b      	lsls	r3, r3, #4
 8008c3e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	621a      	str	r2, [r3, #32]
}
 8008c54:	bf00      	nop
 8008c56:	371c      	adds	r7, #28
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	f023 0210 	bic.w	r2, r3, #16
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	031b      	lsls	r3, r3, #12
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	011b      	lsls	r3, r3, #4
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	621a      	str	r2, [r3, #32]
}
 8008cb4:	bf00      	nop
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f023 0303 	bic.w	r3, r3, #3
 8008cec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cfc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	011b      	lsls	r3, r3, #4
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008d10:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	021b      	lsls	r3, r3, #8
 8008d16:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	621a      	str	r2, [r3, #32]
}
 8008d2c:	bf00      	nop
 8008d2e:	371c      	adds	r7, #28
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d76:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	031b      	lsls	r3, r3, #12
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008d8a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	031b      	lsls	r3, r3, #12
 8008d90:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	621a      	str	r2, [r3, #32]
}
 8008da6:	bf00      	nop
 8008da8:	371c      	adds	r7, #28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b085      	sub	sp, #20
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	f043 0307 	orr.w	r3, r3, #7
 8008dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	609a      	str	r2, [r3, #8]
}
 8008de0:	bf00      	nop
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	021a      	lsls	r2, r3, #8
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	609a      	str	r2, [r3, #8]
}
 8008e20:	bf00      	nop
 8008e22:	371c      	adds	r7, #28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	f003 031f 	and.w	r3, r3, #31
 8008e3e:	2201      	movs	r2, #1
 8008e40:	fa02 f303 	lsl.w	r3, r2, r3
 8008e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6a1a      	ldr	r2, [r3, #32]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	43db      	mvns	r3, r3
 8008e4e:	401a      	ands	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a1a      	ldr	r2, [r3, #32]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f003 031f 	and.w	r3, r3, #31
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	fa01 f303 	lsl.w	r3, r1, r3
 8008e64:	431a      	orrs	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	621a      	str	r2, [r3, #32]
}
 8008e6a:	bf00      	nop
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
	...

08008e78 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a26      	ldr	r2, [pc, #152]	@ (8008f1c <TIM_ResetCallback+0xa4>)
 8008e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a25      	ldr	r2, [pc, #148]	@ (8008f20 <TIM_ResetCallback+0xa8>)
 8008e8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a24      	ldr	r2, [pc, #144]	@ (8008f24 <TIM_ResetCallback+0xac>)
 8008e94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a23      	ldr	r2, [pc, #140]	@ (8008f28 <TIM_ResetCallback+0xb0>)
 8008e9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a22      	ldr	r2, [pc, #136]	@ (8008f2c <TIM_ResetCallback+0xb4>)
 8008ea4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a21      	ldr	r2, [pc, #132]	@ (8008f30 <TIM_ResetCallback+0xb8>)
 8008eac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a20      	ldr	r2, [pc, #128]	@ (8008f34 <TIM_ResetCallback+0xbc>)
 8008eb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a1f      	ldr	r2, [pc, #124]	@ (8008f38 <TIM_ResetCallback+0xc0>)
 8008ebc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8008f3c <TIM_ResetCallback+0xc4>)
 8008ec4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a1d      	ldr	r2, [pc, #116]	@ (8008f40 <TIM_ResetCallback+0xc8>)
 8008ecc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f44 <TIM_ResetCallback+0xcc>)
 8008ed4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a1b      	ldr	r2, [pc, #108]	@ (8008f48 <TIM_ResetCallback+0xd0>)
 8008edc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8008f4c <TIM_ResetCallback+0xd4>)
 8008ee4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a19      	ldr	r2, [pc, #100]	@ (8008f50 <TIM_ResetCallback+0xd8>)
 8008eec:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a18      	ldr	r2, [pc, #96]	@ (8008f54 <TIM_ResetCallback+0xdc>)
 8008ef4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a17      	ldr	r2, [pc, #92]	@ (8008f58 <TIM_ResetCallback+0xe0>)
 8008efc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a16      	ldr	r2, [pc, #88]	@ (8008f5c <TIM_ResetCallback+0xe4>)
 8008f04:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a15      	ldr	r2, [pc, #84]	@ (8008f60 <TIM_ResetCallback+0xe8>)
 8008f0c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	080023bd 	.word	0x080023bd
 8008f20:	08007db1 	.word	0x08007db1
 8008f24:	08007e29 	.word	0x08007e29
 8008f28:	08007e3d 	.word	0x08007e3d
 8008f2c:	08007dd9 	.word	0x08007dd9
 8008f30:	08007ded 	.word	0x08007ded
 8008f34:	08007dc5 	.word	0x08007dc5
 8008f38:	08007e01 	.word	0x08007e01
 8008f3c:	08007e15 	.word	0x08007e15
 8008f40:	08007e51 	.word	0x08007e51
 8008f44:	08009091 	.word	0x08009091
 8008f48:	080090a5 	.word	0x080090a5
 8008f4c:	080090b9 	.word	0x080090b9
 8008f50:	080090cd 	.word	0x080090cd
 8008f54:	080090e1 	.word	0x080090e1
 8008f58:	080090f5 	.word	0x080090f5
 8008f5c:	08009109 	.word	0x08009109
 8008f60:	0800911d 	.word	0x0800911d

08008f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d101      	bne.n	8008f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e074      	b.n	8009066 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a34      	ldr	r2, [pc, #208]	@ (8009074 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d009      	beq.n	8008fba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a33      	ldr	r2, [pc, #204]	@ (8009078 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d004      	beq.n	8008fba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a31      	ldr	r2, [pc, #196]	@ (800907c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d108      	bne.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008fc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a21      	ldr	r2, [pc, #132]	@ (8009074 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d022      	beq.n	800903a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ffc:	d01d      	beq.n	800903a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a1f      	ldr	r2, [pc, #124]	@ (8009080 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d018      	beq.n	800903a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a1d      	ldr	r2, [pc, #116]	@ (8009084 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d013      	beq.n	800903a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a1c      	ldr	r2, [pc, #112]	@ (8009088 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d00e      	beq.n	800903a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a15      	ldr	r2, [pc, #84]	@ (8009078 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d009      	beq.n	800903a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a18      	ldr	r2, [pc, #96]	@ (800908c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d004      	beq.n	800903a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a11      	ldr	r2, [pc, #68]	@ (800907c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d10c      	bne.n	8009054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	4313      	orrs	r3, r2
 800904a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	40012c00 	.word	0x40012c00
 8009078:	40013400 	.word	0x40013400
 800907c:	40015000 	.word	0x40015000
 8009080:	40000400 	.word	0x40000400
 8009084:	40000800 	.word	0x40000800
 8009088:	40000c00 	.word	0x40000c00
 800908c:	40014000 	.word	0x40014000

08009090 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e050      	b.n	80091e4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009148:	2b00      	cmp	r3, #0
 800914a:	d114      	bne.n	8009176 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fdc5 	bl	8009ce4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009160:	2b00      	cmp	r3, #0
 8009162:	d103      	bne.n	800916c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a21      	ldr	r2, [pc, #132]	@ (80091ec <HAL_UART_Init+0xbc>)
 8009168:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2224      	movs	r2, #36	@ 0x24
 800917a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0201 	bic.w	r2, r2, #1
 800918c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f001 f8f2 	bl	800a380 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fdf3 	bl	8009d88 <UART_SetConfig>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d101      	bne.n	80091ac <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e01b      	b.n	80091e4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	689a      	ldr	r2, [r3, #8]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f042 0201 	orr.w	r2, r2, #1
 80091da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f001 f971 	bl	800a4c4 <UART_CheckIdleState>
 80091e2:	4603      	mov	r3, r0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	08002e95 	.word	0x08002e95

080091f0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	460b      	mov	r3, r1
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d109      	bne.n	800921c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800920e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e09c      	b.n	8009356 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009222:	2b20      	cmp	r3, #32
 8009224:	d16c      	bne.n	8009300 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009226:	7afb      	ldrb	r3, [r7, #11]
 8009228:	2b0c      	cmp	r3, #12
 800922a:	d85e      	bhi.n	80092ea <HAL_UART_RegisterCallback+0xfa>
 800922c:	a201      	add	r2, pc, #4	@ (adr r2, 8009234 <HAL_UART_RegisterCallback+0x44>)
 800922e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009232:	bf00      	nop
 8009234:	08009269 	.word	0x08009269
 8009238:	08009273 	.word	0x08009273
 800923c:	0800927d 	.word	0x0800927d
 8009240:	08009287 	.word	0x08009287
 8009244:	08009291 	.word	0x08009291
 8009248:	0800929b 	.word	0x0800929b
 800924c:	080092a5 	.word	0x080092a5
 8009250:	080092af 	.word	0x080092af
 8009254:	080092b9 	.word	0x080092b9
 8009258:	080092c3 	.word	0x080092c3
 800925c:	080092cd 	.word	0x080092cd
 8009260:	080092d7 	.word	0x080092d7
 8009264:	080092e1 	.word	0x080092e1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009270:	e070      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800927a:	e06b      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009284:	e066      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800928e:	e061      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009298:	e05c      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80092a2:	e057      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80092ac:	e052      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80092b6:	e04d      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80092c0:	e048      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80092ca:	e043      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80092d4:	e03e      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80092de:	e039      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80092e8:	e034      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	75fb      	strb	r3, [r7, #23]
        break;
 80092fe:	e029      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009306:	2b00      	cmp	r3, #0
 8009308:	d11a      	bne.n	8009340 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	2b0b      	cmp	r3, #11
 800930e:	d002      	beq.n	8009316 <HAL_UART_RegisterCallback+0x126>
 8009310:	2b0c      	cmp	r3, #12
 8009312:	d005      	beq.n	8009320 <HAL_UART_RegisterCallback+0x130>
 8009314:	e009      	b.n	800932a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800931e:	e019      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009328:	e014      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009330:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	75fb      	strb	r3, [r7, #23]
        break;
 800933e:	e009      	b.n	8009354 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009346:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009354:	7dfb      	ldrb	r3, [r7, #23]
}
 8009356:	4618      	mov	r0, r3
 8009358:	371c      	adds	r7, #28
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop

08009364 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08a      	sub	sp, #40	@ 0x28
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	4613      	mov	r3, r2
 8009370:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009378:	2b20      	cmp	r3, #32
 800937a:	d167      	bne.n	800944c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d002      	beq.n	8009388 <HAL_UART_Transmit_DMA+0x24>
 8009382:	88fb      	ldrh	r3, [r7, #6]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e060      	b.n	800944e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	88fa      	ldrh	r2, [r7, #6]
 8009396:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	88fa      	ldrh	r2, [r7, #6]
 800939e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2221      	movs	r2, #33	@ 0x21
 80093ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d028      	beq.n	800940c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093be:	4a26      	ldr	r2, [pc, #152]	@ (8009458 <HAL_UART_Transmit_DMA+0xf4>)
 80093c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093c6:	4a25      	ldr	r2, [pc, #148]	@ (800945c <HAL_UART_Transmit_DMA+0xf8>)
 80093c8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093ce:	4a24      	ldr	r2, [pc, #144]	@ (8009460 <HAL_UART_Transmit_DMA+0xfc>)
 80093d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093d6:	2200      	movs	r2, #0
 80093d8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e2:	4619      	mov	r1, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3328      	adds	r3, #40	@ 0x28
 80093ea:	461a      	mov	r2, r3
 80093ec:	88fb      	ldrh	r3, [r7, #6]
 80093ee:	f7fb fd61 	bl	8004eb4 <HAL_DMA_Start_IT>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d009      	beq.n	800940c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2210      	movs	r2, #16
 80093fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2220      	movs	r2, #32
 8009404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e020      	b.n	800944e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2240      	movs	r2, #64	@ 0x40
 8009412:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3308      	adds	r3, #8
 800941a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	613b      	str	r3, [r7, #16]
   return(result);
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800942a:	627b      	str	r3, [r7, #36]	@ 0x24
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3308      	adds	r3, #8
 8009432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009434:	623a      	str	r2, [r7, #32]
 8009436:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	69f9      	ldr	r1, [r7, #28]
 800943a:	6a3a      	ldr	r2, [r7, #32]
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	61bb      	str	r3, [r7, #24]
   return(result);
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e5      	bne.n	8009414 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	e000      	b.n	800944e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800944c:	2302      	movs	r3, #2
  }
}
 800944e:	4618      	mov	r0, r3
 8009450:	3728      	adds	r7, #40	@ 0x28
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	0800a98f 	.word	0x0800a98f
 800945c:	0800aa2d 	.word	0x0800aa2d
 8009460:	0800abc7 	.word	0x0800abc7

08009464 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b08a      	sub	sp, #40	@ 0x28
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	4613      	mov	r3, r2
 8009470:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009478:	2b20      	cmp	r3, #32
 800947a:	d137      	bne.n	80094ec <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d002      	beq.n	8009488 <HAL_UART_Receive_DMA+0x24>
 8009482:	88fb      	ldrh	r3, [r7, #6]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e030      	b.n	80094ee <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a18      	ldr	r2, [pc, #96]	@ (80094f8 <HAL_UART_Receive_DMA+0x94>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d01f      	beq.n	80094dc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d018      	beq.n	80094dc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	e853 3f00 	ldrex	r3, [r3]
 80094b6:	613b      	str	r3, [r7, #16]
   return(result);
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80094be:	627b      	str	r3, [r7, #36]	@ 0x24
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	461a      	mov	r2, r3
 80094c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c8:	623b      	str	r3, [r7, #32]
 80094ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094cc:	69f9      	ldr	r1, [r7, #28]
 80094ce:	6a3a      	ldr	r2, [r7, #32]
 80094d0:	e841 2300 	strex	r3, r2, [r1]
 80094d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1e6      	bne.n	80094aa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80094dc:	88fb      	ldrh	r3, [r7, #6]
 80094de:	461a      	mov	r2, r3
 80094e0:	68b9      	ldr	r1, [r7, #8]
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f001 f906 	bl	800a6f4 <UART_Start_Receive_DMA>
 80094e8:	4603      	mov	r3, r0
 80094ea:	e000      	b.n	80094ee <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094ec:	2302      	movs	r3, #2
  }
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3728      	adds	r7, #40	@ 0x28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	40008000 	.word	0x40008000

080094fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b0ba      	sub	sp, #232	@ 0xe8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	69db      	ldr	r3, [r3, #28]
 800950a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009522:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009526:	f640 030f 	movw	r3, #2063	@ 0x80f
 800952a:	4013      	ands	r3, r2
 800952c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009534:	2b00      	cmp	r3, #0
 8009536:	d11b      	bne.n	8009570 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800953c:	f003 0320 	and.w	r3, r3, #32
 8009540:	2b00      	cmp	r3, #0
 8009542:	d015      	beq.n	8009570 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009548:	f003 0320 	and.w	r3, r3, #32
 800954c:	2b00      	cmp	r3, #0
 800954e:	d105      	bne.n	800955c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d009      	beq.n	8009570 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 82f3 	beq.w	8009b4c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	4798      	blx	r3
      }
      return;
 800956e:	e2ed      	b.n	8009b4c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 8129 	beq.w	80097cc <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800957a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800957e:	4b90      	ldr	r3, [pc, #576]	@ (80097c0 <HAL_UART_IRQHandler+0x2c4>)
 8009580:	4013      	ands	r3, r2
 8009582:	2b00      	cmp	r3, #0
 8009584:	d106      	bne.n	8009594 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009586:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800958a:	4b8e      	ldr	r3, [pc, #568]	@ (80097c4 <HAL_UART_IRQHandler+0x2c8>)
 800958c:	4013      	ands	r3, r2
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 811c 	beq.w	80097cc <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d011      	beq.n	80095c4 <HAL_UART_IRQHandler+0xc8>
 80095a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00b      	beq.n	80095c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2201      	movs	r2, #1
 80095b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ba:	f043 0201 	orr.w	r2, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095c8:	f003 0302 	and.w	r3, r3, #2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d011      	beq.n	80095f4 <HAL_UART_IRQHandler+0xf8>
 80095d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00b      	beq.n	80095f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2202      	movs	r2, #2
 80095e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ea:	f043 0204 	orr.w	r2, r3, #4
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095f8:	f003 0304 	and.w	r3, r3, #4
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d011      	beq.n	8009624 <HAL_UART_IRQHandler+0x128>
 8009600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00b      	beq.n	8009624 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2204      	movs	r2, #4
 8009612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800961a:	f043 0202 	orr.w	r2, r3, #2
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009628:	f003 0308 	and.w	r3, r3, #8
 800962c:	2b00      	cmp	r3, #0
 800962e:	d017      	beq.n	8009660 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009634:	f003 0320 	and.w	r3, r3, #32
 8009638:	2b00      	cmp	r3, #0
 800963a:	d105      	bne.n	8009648 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800963c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009640:	4b5f      	ldr	r3, [pc, #380]	@ (80097c0 <HAL_UART_IRQHandler+0x2c4>)
 8009642:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00b      	beq.n	8009660 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2208      	movs	r2, #8
 800964e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009656:	f043 0208 	orr.w	r2, r3, #8
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009668:	2b00      	cmp	r3, #0
 800966a:	d012      	beq.n	8009692 <HAL_UART_IRQHandler+0x196>
 800966c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009670:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00c      	beq.n	8009692 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009688:	f043 0220 	orr.w	r2, r3, #32
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 8259 	beq.w	8009b50 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800969e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a2:	f003 0320 	and.w	r3, r3, #32
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d013      	beq.n	80096d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096ae:	f003 0320 	and.w	r3, r3, #32
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d105      	bne.n	80096c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d007      	beq.n	80096d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096e6:	2b40      	cmp	r3, #64	@ 0x40
 80096e8:	d005      	beq.n	80096f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80096ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d058      	beq.n	80097a8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 f8e3 	bl	800a8c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009706:	2b40      	cmp	r3, #64	@ 0x40
 8009708:	d148      	bne.n	800979c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3308      	adds	r3, #8
 8009710:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009714:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009720:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3308      	adds	r3, #8
 8009732:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009736:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800973a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009742:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800974e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1d9      	bne.n	800970a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800975c:	2b00      	cmp	r3, #0
 800975e:	d017      	beq.n	8009790 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009766:	4a18      	ldr	r2, [pc, #96]	@ (80097c8 <HAL_UART_IRQHandler+0x2cc>)
 8009768:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009770:	4618      	mov	r0, r3
 8009772:	f7fb fc73 	bl	800505c <HAL_DMA_Abort_IT>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01f      	beq.n	80097bc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800978a:	4610      	mov	r0, r2
 800978c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800978e:	e015      	b.n	80097bc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800979a:	e00f      	b.n	80097bc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a6:	e009      	b.n	80097bc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80097ba:	e1c9      	b.n	8009b50 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097bc:	bf00      	nop
    return;
 80097be:	e1c7      	b.n	8009b50 <HAL_UART_IRQHandler+0x654>
 80097c0:	10000001 	.word	0x10000001
 80097c4:	04000120 	.word	0x04000120
 80097c8:	0800ac4b 	.word	0x0800ac4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	f040 8157 	bne.w	8009a84 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097da:	f003 0310 	and.w	r3, r3, #16
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 8150 	beq.w	8009a84 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 8149 	beq.w	8009a84 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2210      	movs	r2, #16
 80097f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009804:	2b40      	cmp	r3, #64	@ 0x40
 8009806:	f040 80bd 	bne.w	8009984 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8199 	beq.w	8009b54 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009828:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800982c:	429a      	cmp	r2, r3
 800982e:	f080 8191 	bcs.w	8009b54 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009838:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 0320 	and.w	r3, r3, #32
 800984a:	2b00      	cmp	r3, #0
 800984c:	f040 8087 	bne.w	800995e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009858:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009864:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800986c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800987a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800987e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009886:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800988a:	e841 2300 	strex	r3, r2, [r1]
 800988e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1da      	bne.n	8009850 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3308      	adds	r3, #8
 80098a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80098aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098ac:	f023 0301 	bic.w	r3, r3, #1
 80098b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3308      	adds	r3, #8
 80098ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80098be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80098c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80098c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80098ca:	e841 2300 	strex	r3, r2, [r1]
 80098ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80098d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1e1      	bne.n	800989a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3308      	adds	r3, #8
 80098dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098e0:	e853 3f00 	ldrex	r3, [r3]
 80098e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80098e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3308      	adds	r3, #8
 80098f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80098fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80098fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009900:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1e3      	bne.n	80098d6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2220      	movs	r2, #32
 8009912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800992a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800992c:	f023 0310 	bic.w	r3, r3, #16
 8009930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	461a      	mov	r2, r3
 800993a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800993e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009940:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009944:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800994c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e4      	bne.n	800991c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009958:	4618      	mov	r0, r3
 800995a:	f7fb fb26 	bl	8004faa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2202      	movs	r2, #2
 8009962:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009976:	b292      	uxth	r2, r2
 8009978:	1a8a      	subs	r2, r1, r2
 800997a:	b292      	uxth	r2, r2
 800997c:	4611      	mov	r1, r2
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009982:	e0e7      	b.n	8009b54 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009990:	b29b      	uxth	r3, r3
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800999e:	b29b      	uxth	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 80d9 	beq.w	8009b58 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80099a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 80d4 	beq.w	8009b58 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b8:	e853 3f00 	ldrex	r3, [r3]
 80099bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	461a      	mov	r2, r3
 80099ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80099d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80099d4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e4      	bne.n	80099b0 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	623b      	str	r3, [r7, #32]
   return(result);
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099fc:	f023 0301 	bic.w	r3, r3, #1
 8009a00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	3308      	adds	r3, #8
 8009a0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a16:	e841 2300 	strex	r3, r2, [r1]
 8009a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1e1      	bne.n	80099e6 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2220      	movs	r2, #32
 8009a26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	e853 3f00 	ldrex	r3, [r3]
 8009a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f023 0310 	bic.w	r3, r3, #16
 8009a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009a58:	61fb      	str	r3, [r7, #28]
 8009a5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	69b9      	ldr	r1, [r7, #24]
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	617b      	str	r3, [r7, #20]
   return(result);
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e4      	bne.n	8009a36 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009a78:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a82:	e069      	b.n	8009b58 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d010      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x5b6>
 8009a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00a      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009aa4:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ab0:	e055      	b.n	8009b5e <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d014      	beq.n	8009ae8 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d105      	bne.n	8009ad6 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ace:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d008      	beq.n	8009ae8 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d03e      	beq.n	8009b5c <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	4798      	blx	r3
    }
    return;
 8009ae6:	e039      	b.n	8009b5c <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d009      	beq.n	8009b08 <HAL_UART_IRQHandler+0x60c>
 8009af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f001 f8ba 	bl	800ac7a <UART_EndTransmit_IT>
    return;
 8009b06:	e02a      	b.n	8009b5e <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00b      	beq.n	8009b2c <HAL_UART_IRQHandler+0x630>
 8009b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d005      	beq.n	8009b2c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b2a:	e018      	b.n	8009b5e <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d012      	beq.n	8009b5e <HAL_UART_IRQHandler+0x662>
 8009b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	da0e      	bge.n	8009b5e <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b4a:	e008      	b.n	8009b5e <HAL_UART_IRQHandler+0x662>
      return;
 8009b4c:	bf00      	nop
 8009b4e:	e006      	b.n	8009b5e <HAL_UART_IRQHandler+0x662>
    return;
 8009b50:	bf00      	nop
 8009b52:	e004      	b.n	8009b5e <HAL_UART_IRQHandler+0x662>
      return;
 8009b54:	bf00      	nop
 8009b56:	e002      	b.n	8009b5e <HAL_UART_IRQHandler+0x662>
      return;
 8009b58:	bf00      	nop
 8009b5a:	e000      	b.n	8009b5e <HAL_UART_IRQHandler+0x662>
    return;
 8009b5c:	bf00      	nop
  }
}
 8009b5e:	37e8      	adds	r7, #232	@ 0xe8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a09      	ldr	r2, [pc, #36]	@ (8009c50 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d009      	beq.n	8009c44 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	430a      	orrs	r2, r1
 8009c42:	615a      	str	r2, [r3, #20]
  }
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	40008000 	.word	0x40008000

08009c54 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a18      	ldr	r2, [pc, #96]	@ (8009cc4 <HAL_UART_EnableReceiverTimeout+0x70>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d027      	beq.n	8009cb6 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	d120      	bne.n	8009cb2 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d101      	bne.n	8009c7e <HAL_UART_EnableReceiverTimeout+0x2a>
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	e01c      	b.n	8009cb8 <HAL_UART_EnableReceiverTimeout+0x64>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2224      	movs	r2, #36	@ 0x24
 8009c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009c9c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2220      	movs	r2, #32
 8009ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e002      	b.n	8009cb8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	e000      	b.n	8009cb8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
  }
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	40008000 	.word	0x40008000

08009cc8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
	...

08009ce4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a1a      	ldr	r2, [pc, #104]	@ (8009d58 <UART_InitCallbacksToDefault+0x74>)
 8009cf0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a19      	ldr	r2, [pc, #100]	@ (8009d5c <UART_InitCallbacksToDefault+0x78>)
 8009cf8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a18      	ldr	r2, [pc, #96]	@ (8009d60 <UART_InitCallbacksToDefault+0x7c>)
 8009d00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a17      	ldr	r2, [pc, #92]	@ (8009d64 <UART_InitCallbacksToDefault+0x80>)
 8009d08:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a16      	ldr	r2, [pc, #88]	@ (8009d68 <UART_InitCallbacksToDefault+0x84>)
 8009d10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a15      	ldr	r2, [pc, #84]	@ (8009d6c <UART_InitCallbacksToDefault+0x88>)
 8009d18:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a14      	ldr	r2, [pc, #80]	@ (8009d70 <UART_InitCallbacksToDefault+0x8c>)
 8009d20:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a13      	ldr	r2, [pc, #76]	@ (8009d74 <UART_InitCallbacksToDefault+0x90>)
 8009d28:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a12      	ldr	r2, [pc, #72]	@ (8009d78 <UART_InitCallbacksToDefault+0x94>)
 8009d30:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a11      	ldr	r2, [pc, #68]	@ (8009d7c <UART_InitCallbacksToDefault+0x98>)
 8009d38:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a10      	ldr	r2, [pc, #64]	@ (8009d80 <UART_InitCallbacksToDefault+0x9c>)
 8009d40:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a0f      	ldr	r2, [pc, #60]	@ (8009d84 <UART_InitCallbacksToDefault+0xa0>)
 8009d48:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	08009b79 	.word	0x08009b79
 8009d5c:	08009b65 	.word	0x08009b65
 8009d60:	08009ba1 	.word	0x08009ba1
 8009d64:	08009b8d 	.word	0x08009b8d
 8009d68:	08009bb5 	.word	0x08009bb5
 8009d6c:	08009bc9 	.word	0x08009bc9
 8009d70:	08009bdd 	.word	0x08009bdd
 8009d74:	08009bf1 	.word	0x08009bf1
 8009d78:	0800acd5 	.word	0x0800acd5
 8009d7c:	0800ace9 	.word	0x0800ace9
 8009d80:	0800acfd 	.word	0x0800acfd
 8009d84:	08009c05 	.word	0x08009c05

08009d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d8c:	b08c      	sub	sp, #48	@ 0x30
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	689a      	ldr	r2, [r3, #8]
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	431a      	orrs	r2, r3
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	431a      	orrs	r2, r3
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	69db      	ldr	r3, [r3, #28]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	4baa      	ldr	r3, [pc, #680]	@ (800a060 <UART_SetConfig+0x2d8>)
 8009db8:	4013      	ands	r3, r2
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	6812      	ldr	r2, [r2, #0]
 8009dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dc0:	430b      	orrs	r3, r1
 8009dc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	68da      	ldr	r2, [r3, #12]
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a9f      	ldr	r2, [pc, #636]	@ (800a064 <UART_SetConfig+0x2dc>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d004      	beq.n	8009df4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009df0:	4313      	orrs	r3, r2
 8009df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009dfe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	6812      	ldr	r2, [r2, #0]
 8009e06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e08:	430b      	orrs	r3, r1
 8009e0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e12:	f023 010f 	bic.w	r1, r3, #15
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a90      	ldr	r2, [pc, #576]	@ (800a068 <UART_SetConfig+0x2e0>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d125      	bne.n	8009e78 <UART_SetConfig+0xf0>
 8009e2c:	4b8f      	ldr	r3, [pc, #572]	@ (800a06c <UART_SetConfig+0x2e4>)
 8009e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e32:	f003 0303 	and.w	r3, r3, #3
 8009e36:	2b03      	cmp	r3, #3
 8009e38:	d81a      	bhi.n	8009e70 <UART_SetConfig+0xe8>
 8009e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e40 <UART_SetConfig+0xb8>)
 8009e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e40:	08009e51 	.word	0x08009e51
 8009e44:	08009e61 	.word	0x08009e61
 8009e48:	08009e59 	.word	0x08009e59
 8009e4c:	08009e69 	.word	0x08009e69
 8009e50:	2301      	movs	r3, #1
 8009e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e56:	e116      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009e58:	2302      	movs	r3, #2
 8009e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e5e:	e112      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009e60:	2304      	movs	r3, #4
 8009e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e66:	e10e      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009e68:	2308      	movs	r3, #8
 8009e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e6e:	e10a      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009e70:	2310      	movs	r3, #16
 8009e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e76:	e106      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a7c      	ldr	r2, [pc, #496]	@ (800a070 <UART_SetConfig+0x2e8>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d138      	bne.n	8009ef4 <UART_SetConfig+0x16c>
 8009e82:	4b7a      	ldr	r3, [pc, #488]	@ (800a06c <UART_SetConfig+0x2e4>)
 8009e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e88:	f003 030c 	and.w	r3, r3, #12
 8009e8c:	2b0c      	cmp	r3, #12
 8009e8e:	d82d      	bhi.n	8009eec <UART_SetConfig+0x164>
 8009e90:	a201      	add	r2, pc, #4	@ (adr r2, 8009e98 <UART_SetConfig+0x110>)
 8009e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e96:	bf00      	nop
 8009e98:	08009ecd 	.word	0x08009ecd
 8009e9c:	08009eed 	.word	0x08009eed
 8009ea0:	08009eed 	.word	0x08009eed
 8009ea4:	08009eed 	.word	0x08009eed
 8009ea8:	08009edd 	.word	0x08009edd
 8009eac:	08009eed 	.word	0x08009eed
 8009eb0:	08009eed 	.word	0x08009eed
 8009eb4:	08009eed 	.word	0x08009eed
 8009eb8:	08009ed5 	.word	0x08009ed5
 8009ebc:	08009eed 	.word	0x08009eed
 8009ec0:	08009eed 	.word	0x08009eed
 8009ec4:	08009eed 	.word	0x08009eed
 8009ec8:	08009ee5 	.word	0x08009ee5
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ed2:	e0d8      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eda:	e0d4      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009edc:	2304      	movs	r3, #4
 8009ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee2:	e0d0      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009ee4:	2308      	movs	r3, #8
 8009ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eea:	e0cc      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009eec:	2310      	movs	r3, #16
 8009eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ef2:	e0c8      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a5e      	ldr	r2, [pc, #376]	@ (800a074 <UART_SetConfig+0x2ec>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d125      	bne.n	8009f4a <UART_SetConfig+0x1c2>
 8009efe:	4b5b      	ldr	r3, [pc, #364]	@ (800a06c <UART_SetConfig+0x2e4>)
 8009f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f08:	2b30      	cmp	r3, #48	@ 0x30
 8009f0a:	d016      	beq.n	8009f3a <UART_SetConfig+0x1b2>
 8009f0c:	2b30      	cmp	r3, #48	@ 0x30
 8009f0e:	d818      	bhi.n	8009f42 <UART_SetConfig+0x1ba>
 8009f10:	2b20      	cmp	r3, #32
 8009f12:	d00a      	beq.n	8009f2a <UART_SetConfig+0x1a2>
 8009f14:	2b20      	cmp	r3, #32
 8009f16:	d814      	bhi.n	8009f42 <UART_SetConfig+0x1ba>
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <UART_SetConfig+0x19a>
 8009f1c:	2b10      	cmp	r3, #16
 8009f1e:	d008      	beq.n	8009f32 <UART_SetConfig+0x1aa>
 8009f20:	e00f      	b.n	8009f42 <UART_SetConfig+0x1ba>
 8009f22:	2300      	movs	r3, #0
 8009f24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f28:	e0ad      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f30:	e0a9      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009f32:	2304      	movs	r3, #4
 8009f34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f38:	e0a5      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009f3a:	2308      	movs	r3, #8
 8009f3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f40:	e0a1      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009f42:	2310      	movs	r3, #16
 8009f44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f48:	e09d      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a4a      	ldr	r2, [pc, #296]	@ (800a078 <UART_SetConfig+0x2f0>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d125      	bne.n	8009fa0 <UART_SetConfig+0x218>
 8009f54:	4b45      	ldr	r3, [pc, #276]	@ (800a06c <UART_SetConfig+0x2e4>)
 8009f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009f5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f60:	d016      	beq.n	8009f90 <UART_SetConfig+0x208>
 8009f62:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f64:	d818      	bhi.n	8009f98 <UART_SetConfig+0x210>
 8009f66:	2b80      	cmp	r3, #128	@ 0x80
 8009f68:	d00a      	beq.n	8009f80 <UART_SetConfig+0x1f8>
 8009f6a:	2b80      	cmp	r3, #128	@ 0x80
 8009f6c:	d814      	bhi.n	8009f98 <UART_SetConfig+0x210>
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d002      	beq.n	8009f78 <UART_SetConfig+0x1f0>
 8009f72:	2b40      	cmp	r3, #64	@ 0x40
 8009f74:	d008      	beq.n	8009f88 <UART_SetConfig+0x200>
 8009f76:	e00f      	b.n	8009f98 <UART_SetConfig+0x210>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f7e:	e082      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009f80:	2302      	movs	r3, #2
 8009f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f86:	e07e      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009f88:	2304      	movs	r3, #4
 8009f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f8e:	e07a      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009f90:	2308      	movs	r3, #8
 8009f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f96:	e076      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009f98:	2310      	movs	r3, #16
 8009f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f9e:	e072      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a35      	ldr	r2, [pc, #212]	@ (800a07c <UART_SetConfig+0x2f4>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d12a      	bne.n	800a000 <UART_SetConfig+0x278>
 8009faa:	4b30      	ldr	r3, [pc, #192]	@ (800a06c <UART_SetConfig+0x2e4>)
 8009fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fb8:	d01a      	beq.n	8009ff0 <UART_SetConfig+0x268>
 8009fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fbe:	d81b      	bhi.n	8009ff8 <UART_SetConfig+0x270>
 8009fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fc4:	d00c      	beq.n	8009fe0 <UART_SetConfig+0x258>
 8009fc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fca:	d815      	bhi.n	8009ff8 <UART_SetConfig+0x270>
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d003      	beq.n	8009fd8 <UART_SetConfig+0x250>
 8009fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fd4:	d008      	beq.n	8009fe8 <UART_SetConfig+0x260>
 8009fd6:	e00f      	b.n	8009ff8 <UART_SetConfig+0x270>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fde:	e052      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fe6:	e04e      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009fe8:	2304      	movs	r3, #4
 8009fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fee:	e04a      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009ff0:	2308      	movs	r3, #8
 8009ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ff6:	e046      	b.n	800a086 <UART_SetConfig+0x2fe>
 8009ff8:	2310      	movs	r3, #16
 8009ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ffe:	e042      	b.n	800a086 <UART_SetConfig+0x2fe>
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a17      	ldr	r2, [pc, #92]	@ (800a064 <UART_SetConfig+0x2dc>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d13a      	bne.n	800a080 <UART_SetConfig+0x2f8>
 800a00a:	4b18      	ldr	r3, [pc, #96]	@ (800a06c <UART_SetConfig+0x2e4>)
 800a00c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a010:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a014:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a018:	d01a      	beq.n	800a050 <UART_SetConfig+0x2c8>
 800a01a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a01e:	d81b      	bhi.n	800a058 <UART_SetConfig+0x2d0>
 800a020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a024:	d00c      	beq.n	800a040 <UART_SetConfig+0x2b8>
 800a026:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a02a:	d815      	bhi.n	800a058 <UART_SetConfig+0x2d0>
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d003      	beq.n	800a038 <UART_SetConfig+0x2b0>
 800a030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a034:	d008      	beq.n	800a048 <UART_SetConfig+0x2c0>
 800a036:	e00f      	b.n	800a058 <UART_SetConfig+0x2d0>
 800a038:	2300      	movs	r3, #0
 800a03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a03e:	e022      	b.n	800a086 <UART_SetConfig+0x2fe>
 800a040:	2302      	movs	r3, #2
 800a042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a046:	e01e      	b.n	800a086 <UART_SetConfig+0x2fe>
 800a048:	2304      	movs	r3, #4
 800a04a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a04e:	e01a      	b.n	800a086 <UART_SetConfig+0x2fe>
 800a050:	2308      	movs	r3, #8
 800a052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a056:	e016      	b.n	800a086 <UART_SetConfig+0x2fe>
 800a058:	2310      	movs	r3, #16
 800a05a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a05e:	e012      	b.n	800a086 <UART_SetConfig+0x2fe>
 800a060:	cfff69f3 	.word	0xcfff69f3
 800a064:	40008000 	.word	0x40008000
 800a068:	40013800 	.word	0x40013800
 800a06c:	40021000 	.word	0x40021000
 800a070:	40004400 	.word	0x40004400
 800a074:	40004800 	.word	0x40004800
 800a078:	40004c00 	.word	0x40004c00
 800a07c:	40005000 	.word	0x40005000
 800a080:	2310      	movs	r3, #16
 800a082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4aae      	ldr	r2, [pc, #696]	@ (800a344 <UART_SetConfig+0x5bc>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	f040 8097 	bne.w	800a1c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a092:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a096:	2b08      	cmp	r3, #8
 800a098:	d823      	bhi.n	800a0e2 <UART_SetConfig+0x35a>
 800a09a:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a0 <UART_SetConfig+0x318>)
 800a09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a0:	0800a0c5 	.word	0x0800a0c5
 800a0a4:	0800a0e3 	.word	0x0800a0e3
 800a0a8:	0800a0cd 	.word	0x0800a0cd
 800a0ac:	0800a0e3 	.word	0x0800a0e3
 800a0b0:	0800a0d3 	.word	0x0800a0d3
 800a0b4:	0800a0e3 	.word	0x0800a0e3
 800a0b8:	0800a0e3 	.word	0x0800a0e3
 800a0bc:	0800a0e3 	.word	0x0800a0e3
 800a0c0:	0800a0db 	.word	0x0800a0db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0c4:	f7fc f8bc 	bl	8006240 <HAL_RCC_GetPCLK1Freq>
 800a0c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0ca:	e010      	b.n	800a0ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0cc:	4b9e      	ldr	r3, [pc, #632]	@ (800a348 <UART_SetConfig+0x5c0>)
 800a0ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0d0:	e00d      	b.n	800a0ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0d2:	f7fc f847 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 800a0d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0d8:	e009      	b.n	800a0ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0e0:	e005      	b.n	800a0ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a0ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 8130 	beq.w	800a356 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fa:	4a94      	ldr	r2, [pc, #592]	@ (800a34c <UART_SetConfig+0x5c4>)
 800a0fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a100:	461a      	mov	r2, r3
 800a102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a104:	fbb3 f3f2 	udiv	r3, r3, r2
 800a108:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	4613      	mov	r3, r2
 800a110:	005b      	lsls	r3, r3, #1
 800a112:	4413      	add	r3, r2
 800a114:	69ba      	ldr	r2, [r7, #24]
 800a116:	429a      	cmp	r2, r3
 800a118:	d305      	bcc.n	800a126 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a120:	69ba      	ldr	r2, [r7, #24]
 800a122:	429a      	cmp	r2, r3
 800a124:	d903      	bls.n	800a12e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a12c:	e113      	b.n	800a356 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a130:	2200      	movs	r2, #0
 800a132:	60bb      	str	r3, [r7, #8]
 800a134:	60fa      	str	r2, [r7, #12]
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a13a:	4a84      	ldr	r2, [pc, #528]	@ (800a34c <UART_SetConfig+0x5c4>)
 800a13c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a140:	b29b      	uxth	r3, r3
 800a142:	2200      	movs	r2, #0
 800a144:	603b      	str	r3, [r7, #0]
 800a146:	607a      	str	r2, [r7, #4]
 800a148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a14c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a150:	f7f6 fd28 	bl	8000ba4 <__aeabi_uldivmod>
 800a154:	4602      	mov	r2, r0
 800a156:	460b      	mov	r3, r1
 800a158:	4610      	mov	r0, r2
 800a15a:	4619      	mov	r1, r3
 800a15c:	f04f 0200 	mov.w	r2, #0
 800a160:	f04f 0300 	mov.w	r3, #0
 800a164:	020b      	lsls	r3, r1, #8
 800a166:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a16a:	0202      	lsls	r2, r0, #8
 800a16c:	6979      	ldr	r1, [r7, #20]
 800a16e:	6849      	ldr	r1, [r1, #4]
 800a170:	0849      	lsrs	r1, r1, #1
 800a172:	2000      	movs	r0, #0
 800a174:	460c      	mov	r4, r1
 800a176:	4605      	mov	r5, r0
 800a178:	eb12 0804 	adds.w	r8, r2, r4
 800a17c:	eb43 0905 	adc.w	r9, r3, r5
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	469a      	mov	sl, r3
 800a188:	4693      	mov	fp, r2
 800a18a:	4652      	mov	r2, sl
 800a18c:	465b      	mov	r3, fp
 800a18e:	4640      	mov	r0, r8
 800a190:	4649      	mov	r1, r9
 800a192:	f7f6 fd07 	bl	8000ba4 <__aeabi_uldivmod>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4613      	mov	r3, r2
 800a19c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1a4:	d308      	bcc.n	800a1b8 <UART_SetConfig+0x430>
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1ac:	d204      	bcs.n	800a1b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6a3a      	ldr	r2, [r7, #32]
 800a1b4:	60da      	str	r2, [r3, #12]
 800a1b6:	e0ce      	b.n	800a356 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1be:	e0ca      	b.n	800a356 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1c8:	d166      	bne.n	800a298 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a1ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1ce:	2b08      	cmp	r3, #8
 800a1d0:	d827      	bhi.n	800a222 <UART_SetConfig+0x49a>
 800a1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d8 <UART_SetConfig+0x450>)
 800a1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d8:	0800a1fd 	.word	0x0800a1fd
 800a1dc:	0800a205 	.word	0x0800a205
 800a1e0:	0800a20d 	.word	0x0800a20d
 800a1e4:	0800a223 	.word	0x0800a223
 800a1e8:	0800a213 	.word	0x0800a213
 800a1ec:	0800a223 	.word	0x0800a223
 800a1f0:	0800a223 	.word	0x0800a223
 800a1f4:	0800a223 	.word	0x0800a223
 800a1f8:	0800a21b 	.word	0x0800a21b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1fc:	f7fc f820 	bl	8006240 <HAL_RCC_GetPCLK1Freq>
 800a200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a202:	e014      	b.n	800a22e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a204:	f7fc f832 	bl	800626c <HAL_RCC_GetPCLK2Freq>
 800a208:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a20a:	e010      	b.n	800a22e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a20c:	4b4e      	ldr	r3, [pc, #312]	@ (800a348 <UART_SetConfig+0x5c0>)
 800a20e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a210:	e00d      	b.n	800a22e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a212:	f7fb ffa7 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 800a216:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a218:	e009      	b.n	800a22e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a21a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a21e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a220:	e005      	b.n	800a22e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a222:	2300      	movs	r3, #0
 800a224:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a22c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 8090 	beq.w	800a356 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a23a:	4a44      	ldr	r2, [pc, #272]	@ (800a34c <UART_SetConfig+0x5c4>)
 800a23c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a240:	461a      	mov	r2, r3
 800a242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a244:	fbb3 f3f2 	udiv	r3, r3, r2
 800a248:	005a      	lsls	r2, r3, #1
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	085b      	lsrs	r3, r3, #1
 800a250:	441a      	add	r2, r3
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	fbb2 f3f3 	udiv	r3, r2, r3
 800a25a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	2b0f      	cmp	r3, #15
 800a260:	d916      	bls.n	800a290 <UART_SetConfig+0x508>
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a268:	d212      	bcs.n	800a290 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	f023 030f 	bic.w	r3, r3, #15
 800a272:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	085b      	lsrs	r3, r3, #1
 800a278:	b29b      	uxth	r3, r3
 800a27a:	f003 0307 	and.w	r3, r3, #7
 800a27e:	b29a      	uxth	r2, r3
 800a280:	8bfb      	ldrh	r3, [r7, #30]
 800a282:	4313      	orrs	r3, r2
 800a284:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	8bfa      	ldrh	r2, [r7, #30]
 800a28c:	60da      	str	r2, [r3, #12]
 800a28e:	e062      	b.n	800a356 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a296:	e05e      	b.n	800a356 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a298:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a29c:	2b08      	cmp	r3, #8
 800a29e:	d828      	bhi.n	800a2f2 <UART_SetConfig+0x56a>
 800a2a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a8 <UART_SetConfig+0x520>)
 800a2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a6:	bf00      	nop
 800a2a8:	0800a2cd 	.word	0x0800a2cd
 800a2ac:	0800a2d5 	.word	0x0800a2d5
 800a2b0:	0800a2dd 	.word	0x0800a2dd
 800a2b4:	0800a2f3 	.word	0x0800a2f3
 800a2b8:	0800a2e3 	.word	0x0800a2e3
 800a2bc:	0800a2f3 	.word	0x0800a2f3
 800a2c0:	0800a2f3 	.word	0x0800a2f3
 800a2c4:	0800a2f3 	.word	0x0800a2f3
 800a2c8:	0800a2eb 	.word	0x0800a2eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2cc:	f7fb ffb8 	bl	8006240 <HAL_RCC_GetPCLK1Freq>
 800a2d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2d2:	e014      	b.n	800a2fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2d4:	f7fb ffca 	bl	800626c <HAL_RCC_GetPCLK2Freq>
 800a2d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2da:	e010      	b.n	800a2fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2dc:	4b1a      	ldr	r3, [pc, #104]	@ (800a348 <UART_SetConfig+0x5c0>)
 800a2de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2e0:	e00d      	b.n	800a2fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2e2:	f7fb ff3f 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 800a2e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2e8:	e009      	b.n	800a2fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2f0:	e005      	b.n	800a2fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a2fc:	bf00      	nop
    }

    if (pclk != 0U)
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a300:	2b00      	cmp	r3, #0
 800a302:	d028      	beq.n	800a356 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a308:	4a10      	ldr	r2, [pc, #64]	@ (800a34c <UART_SetConfig+0x5c4>)
 800a30a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a30e:	461a      	mov	r2, r3
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	fbb3 f2f2 	udiv	r2, r3, r2
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	085b      	lsrs	r3, r3, #1
 800a31c:	441a      	add	r2, r3
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	fbb2 f3f3 	udiv	r3, r2, r3
 800a326:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	2b0f      	cmp	r3, #15
 800a32c:	d910      	bls.n	800a350 <UART_SetConfig+0x5c8>
 800a32e:	6a3b      	ldr	r3, [r7, #32]
 800a330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a334:	d20c      	bcs.n	800a350 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	b29a      	uxth	r2, r3
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	60da      	str	r2, [r3, #12]
 800a340:	e009      	b.n	800a356 <UART_SetConfig+0x5ce>
 800a342:	bf00      	nop
 800a344:	40008000 	.word	0x40008000
 800a348:	00f42400 	.word	0x00f42400
 800a34c:	0800b120 	.word	0x0800b120
      }
      else
      {
        ret = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2201      	movs	r2, #1
 800a35a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	2201      	movs	r2, #1
 800a362:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2200      	movs	r2, #0
 800a36a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	2200      	movs	r2, #0
 800a370:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a372:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a376:	4618      	mov	r0, r3
 800a378:	3730      	adds	r7, #48	@ 0x30
 800a37a:	46bd      	mov	sp, r7
 800a37c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a38c:	f003 0308 	and.w	r3, r3, #8
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00a      	beq.n	800a3aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00a      	beq.n	800a3cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d0:	f003 0302 	and.w	r3, r3, #2
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00a      	beq.n	800a3ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f2:	f003 0304 	and.w	r3, r3, #4
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a414:	f003 0310 	and.w	r3, r3, #16
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00a      	beq.n	800a432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a436:	f003 0320 	and.w	r3, r3, #32
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00a      	beq.n	800a454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d01a      	beq.n	800a496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a47a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a47e:	d10a      	bne.n	800a496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	430a      	orrs	r2, r1
 800a494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00a      	beq.n	800a4b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	605a      	str	r2, [r3, #4]
  }
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b098      	sub	sp, #96	@ 0x60
 800a4c8:	af02      	add	r7, sp, #8
 800a4ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4d4:	f7f8 feb2 	bl	800323c <HAL_GetTick>
 800a4d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 0308 	and.w	r3, r3, #8
 800a4e4:	2b08      	cmp	r3, #8
 800a4e6:	d12f      	bne.n	800a548 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f88e 	bl	800a618 <UART_WaitOnFlagUntilTimeout>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d022      	beq.n	800a548 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50a:	e853 3f00 	ldrex	r3, [r3]
 800a50e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a516:	653b      	str	r3, [r7, #80]	@ 0x50
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	461a      	mov	r2, r3
 800a51e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a520:	647b      	str	r3, [r7, #68]	@ 0x44
 800a522:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a524:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a528:	e841 2300 	strex	r3, r2, [r1]
 800a52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a52e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1e6      	bne.n	800a502 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2220      	movs	r2, #32
 800a538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e063      	b.n	800a610 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 0304 	and.w	r3, r3, #4
 800a552:	2b04      	cmp	r3, #4
 800a554:	d149      	bne.n	800a5ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a556:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a55e:	2200      	movs	r2, #0
 800a560:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f857 	bl	800a618 <UART_WaitOnFlagUntilTimeout>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d03c      	beq.n	800a5ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	623b      	str	r3, [r7, #32]
   return(result);
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	461a      	mov	r2, r3
 800a58c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a58e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a590:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e6      	bne.n	800a570 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	e853 3f00 	ldrex	r3, [r3]
 800a5b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f023 0301 	bic.w	r3, r3, #1
 800a5b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	3308      	adds	r3, #8
 800a5c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5c2:	61fa      	str	r2, [r7, #28]
 800a5c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c6:	69b9      	ldr	r1, [r7, #24]
 800a5c8:	69fa      	ldr	r2, [r7, #28]
 800a5ca:	e841 2300 	strex	r3, r2, [r1]
 800a5ce:	617b      	str	r3, [r7, #20]
   return(result);
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1e5      	bne.n	800a5a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2220      	movs	r2, #32
 800a5da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e012      	b.n	800a610 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3758      	adds	r7, #88	@ 0x58
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	603b      	str	r3, [r7, #0]
 800a624:	4613      	mov	r3, r2
 800a626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a628:	e04f      	b.n	800a6ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a630:	d04b      	beq.n	800a6ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a632:	f7f8 fe03 	bl	800323c <HAL_GetTick>
 800a636:	4602      	mov	r2, r0
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d302      	bcc.n	800a648 <UART_WaitOnFlagUntilTimeout+0x30>
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e04e      	b.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	d037      	beq.n	800a6ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	2b80      	cmp	r3, #128	@ 0x80
 800a65e:	d034      	beq.n	800a6ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2b40      	cmp	r3, #64	@ 0x40
 800a664:	d031      	beq.n	800a6ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	f003 0308 	and.w	r3, r3, #8
 800a670:	2b08      	cmp	r3, #8
 800a672:	d110      	bne.n	800a696 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2208      	movs	r2, #8
 800a67a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 f920 	bl	800a8c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2208      	movs	r2, #8
 800a686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e029      	b.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	69db      	ldr	r3, [r3, #28]
 800a69c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6a4:	d111      	bne.n	800a6ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f906 	bl	800a8c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e00f      	b.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	69da      	ldr	r2, [r3, #28]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	bf0c      	ite	eq
 800a6da:	2301      	moveq	r3, #1
 800a6dc:	2300      	movne	r3, #0
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	79fb      	ldrb	r3, [r7, #7]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d0a0      	beq.n	800a62a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b096      	sub	sp, #88	@ 0x58
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	4613      	mov	r3, r2
 800a700:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	88fa      	ldrh	r2, [r7, #6]
 800a70c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2222      	movs	r2, #34	@ 0x22
 800a71c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a726:	2b00      	cmp	r3, #0
 800a728:	d02d      	beq.n	800a786 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a730:	4a40      	ldr	r2, [pc, #256]	@ (800a834 <UART_Start_Receive_DMA+0x140>)
 800a732:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a73a:	4a3f      	ldr	r2, [pc, #252]	@ (800a838 <UART_Start_Receive_DMA+0x144>)
 800a73c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a744:	4a3d      	ldr	r2, [pc, #244]	@ (800a83c <UART_Start_Receive_DMA+0x148>)
 800a746:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a74e:	2200      	movs	r2, #0
 800a750:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3324      	adds	r3, #36	@ 0x24
 800a75e:	4619      	mov	r1, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a764:	461a      	mov	r2, r3
 800a766:	88fb      	ldrh	r3, [r7, #6]
 800a768:	f7fa fba4 	bl	8004eb4 <HAL_DMA_Start_IT>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d009      	beq.n	800a786 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2210      	movs	r2, #16
 800a776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2220      	movs	r2, #32
 800a77e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e051      	b.n	800a82a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d018      	beq.n	800a7c0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a796:	e853 3f00 	ldrex	r3, [r3]
 800a79a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7b4:	e841 2300 	strex	r3, r2, [r1]
 800a7b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a7ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1e6      	bne.n	800a78e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3308      	adds	r3, #8
 800a7c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ca:	e853 3f00 	ldrex	r3, [r3]
 800a7ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	f043 0301 	orr.w	r3, r3, #1
 800a7d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3308      	adds	r3, #8
 800a7de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7e0:	637a      	str	r2, [r7, #52]	@ 0x34
 800a7e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a7e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7e8:	e841 2300 	strex	r3, r2, [r1]
 800a7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1e5      	bne.n	800a7c0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3308      	adds	r3, #8
 800a7fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	e853 3f00 	ldrex	r3, [r3]
 800a802:	613b      	str	r3, [r7, #16]
   return(result);
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a80a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	3308      	adds	r3, #8
 800a812:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a814:	623a      	str	r2, [r7, #32]
 800a816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a818:	69f9      	ldr	r1, [r7, #28]
 800a81a:	6a3a      	ldr	r2, [r7, #32]
 800a81c:	e841 2300 	strex	r3, r2, [r1]
 800a820:	61bb      	str	r3, [r7, #24]
   return(result);
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1e5      	bne.n	800a7f4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3758      	adds	r7, #88	@ 0x58
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	0800aa4d 	.word	0x0800aa4d
 800a838:	0800ab81 	.word	0x0800ab81
 800a83c:	0800abc7 	.word	0x0800abc7

0800a840 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a840:	b480      	push	{r7}
 800a842:	b08f      	sub	sp, #60	@ 0x3c
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	e853 3f00 	ldrex	r3, [r3]
 800a854:	61fb      	str	r3, [r7, #28]
   return(result);
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a85c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a868:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a86c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a86e:	e841 2300 	strex	r3, r2, [r1]
 800a872:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1e6      	bne.n	800a848 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3308      	adds	r3, #8
 800a880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	e853 3f00 	ldrex	r3, [r3]
 800a888:	60bb      	str	r3, [r7, #8]
   return(result);
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a890:	633b      	str	r3, [r7, #48]	@ 0x30
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	3308      	adds	r3, #8
 800a898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a89a:	61ba      	str	r2, [r7, #24]
 800a89c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89e:	6979      	ldr	r1, [r7, #20]
 800a8a0:	69ba      	ldr	r2, [r7, #24]
 800a8a2:	e841 2300 	strex	r3, r2, [r1]
 800a8a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1e5      	bne.n	800a87a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2220      	movs	r2, #32
 800a8b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a8b6:	bf00      	nop
 800a8b8:	373c      	adds	r7, #60	@ 0x3c
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr

0800a8c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8c2:	b480      	push	{r7}
 800a8c4:	b095      	sub	sp, #84	@ 0x54
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d2:	e853 3f00 	ldrex	r3, [r3]
 800a8d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8f0:	e841 2300 	strex	r3, r2, [r1]
 800a8f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1e6      	bne.n	800a8ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3308      	adds	r3, #8
 800a902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	e853 3f00 	ldrex	r3, [r3]
 800a90a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a912:	f023 0301 	bic.w	r3, r3, #1
 800a916:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3308      	adds	r3, #8
 800a91e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a920:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a928:	e841 2300 	strex	r3, r2, [r1]
 800a92c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1e3      	bne.n	800a8fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d118      	bne.n	800a96e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	e853 3f00 	ldrex	r3, [r3]
 800a948:	60bb      	str	r3, [r7, #8]
   return(result);
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f023 0310 	bic.w	r3, r3, #16
 800a950:	647b      	str	r3, [r7, #68]	@ 0x44
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	461a      	mov	r2, r3
 800a958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a95a:	61bb      	str	r3, [r7, #24]
 800a95c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95e:	6979      	ldr	r1, [r7, #20]
 800a960:	69ba      	ldr	r2, [r7, #24]
 800a962:	e841 2300 	strex	r3, r2, [r1]
 800a966:	613b      	str	r3, [r7, #16]
   return(result);
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1e6      	bne.n	800a93c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2220      	movs	r2, #32
 800a972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a982:	bf00      	nop
 800a984:	3754      	adds	r7, #84	@ 0x54
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b090      	sub	sp, #64	@ 0x40
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a99a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0320 	and.w	r3, r3, #32
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d137      	bne.n	800aa1a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3308      	adds	r3, #8
 800a9b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9bc:	e853 3f00 	ldrex	r3, [r3]
 800a9c0:	623b      	str	r3, [r7, #32]
   return(result);
 800a9c2:	6a3b      	ldr	r3, [r7, #32]
 800a9c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	3308      	adds	r3, #8
 800a9d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9d2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9da:	e841 2300 	strex	r3, r2, [r1]
 800a9de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1e5      	bne.n	800a9b2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	e853 3f00 	ldrex	r3, [r3]
 800a9f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	461a      	mov	r2, r3
 800aa02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa04:	61fb      	str	r3, [r7, #28]
 800aa06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa08:	69b9      	ldr	r1, [r7, #24]
 800aa0a:	69fa      	ldr	r2, [r7, #28]
 800aa0c:	e841 2300 	strex	r3, r2, [r1]
 800aa10:	617b      	str	r3, [r7, #20]
   return(result);
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e6      	bne.n	800a9e6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa18:	e004      	b.n	800aa24 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800aa1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa20:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800aa22:	4798      	blx	r3
}
 800aa24:	bf00      	nop
 800aa26:	3740      	adds	r7, #64	@ 0x40
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa44:	bf00      	nop
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b09c      	sub	sp, #112	@ 0x70
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa58:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 0320 	and.w	r3, r3, #32
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d171      	bne.n	800ab4c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800aa68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa78:	e853 3f00 	ldrex	r3, [r3]
 800aa7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa84:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa96:	e841 2300 	strex	r3, r2, [r1]
 800aa9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1e6      	bne.n	800aa70 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaac:	e853 3f00 	ldrex	r3, [r3]
 800aab0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab4:	f023 0301 	bic.w	r3, r3, #1
 800aab8:	667b      	str	r3, [r7, #100]	@ 0x64
 800aaba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3308      	adds	r3, #8
 800aac0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aac2:	647a      	str	r2, [r7, #68]	@ 0x44
 800aac4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aaca:	e841 2300 	strex	r3, r2, [r1]
 800aace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1e5      	bne.n	800aaa2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	3308      	adds	r3, #8
 800aadc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae0:	e853 3f00 	ldrex	r3, [r3]
 800aae4:	623b      	str	r3, [r7, #32]
   return(result);
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaec:	663b      	str	r3, [r7, #96]	@ 0x60
 800aaee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aaf6:	633a      	str	r2, [r7, #48]	@ 0x30
 800aaf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aafc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aafe:	e841 2300 	strex	r3, r2, [r1]
 800ab02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1e5      	bne.n	800aad6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab0c:	2220      	movs	r2, #32
 800ab0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d118      	bne.n	800ab4c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	e853 3f00 	ldrex	r3, [r3]
 800ab26:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f023 0310 	bic.w	r3, r3, #16
 800ab2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	461a      	mov	r2, r3
 800ab36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab38:	61fb      	str	r3, [r7, #28]
 800ab3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3c:	69b9      	ldr	r1, [r7, #24]
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	e841 2300 	strex	r3, r2, [r1]
 800ab44:	617b      	str	r3, [r7, #20]
   return(result);
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e6      	bne.n	800ab1a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab4e:	2200      	movs	r2, #0
 800ab50:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d109      	bne.n	800ab6e <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800ab5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ab60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab62:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ab66:	4611      	mov	r1, r2
 800ab68:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab6a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab6c:	e004      	b.n	800ab78 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800ab6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab74:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab76:	4798      	blx	r3
}
 800ab78:	bf00      	nop
 800ab7a:	3770      	adds	r7, #112	@ 0x70
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab8c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2201      	movs	r2, #1
 800ab92:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d10b      	bne.n	800abb4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800aba8:	0852      	lsrs	r2, r2, #1
 800abaa:	b292      	uxth	r2, r2
 800abac:	4611      	mov	r1, r2
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abb2:	e004      	b.n	800abbe <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	4798      	blx	r3
}
 800abbe:	bf00      	nop
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b086      	sub	sp, #24
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abd2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abda:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abee:	2b80      	cmp	r3, #128	@ 0x80
 800abf0:	d109      	bne.n	800ac06 <UART_DMAError+0x40>
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	2b21      	cmp	r3, #33	@ 0x21
 800abf6:	d106      	bne.n	800ac06 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ac00:	6978      	ldr	r0, [r7, #20]
 800ac02:	f7ff fe1d 	bl	800a840 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac10:	2b40      	cmp	r3, #64	@ 0x40
 800ac12:	d109      	bne.n	800ac28 <UART_DMAError+0x62>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2b22      	cmp	r3, #34	@ 0x22
 800ac18:	d106      	bne.n	800ac28 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ac22:	6978      	ldr	r0, [r7, #20]
 800ac24:	f7ff fe4d 	bl	800a8c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac2e:	f043 0210 	orr.w	r2, r3, #16
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac3e:	6978      	ldr	r0, [r7, #20]
 800ac40:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac42:	bf00      	nop
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac72:	bf00      	nop
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b088      	sub	sp, #32
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	e853 3f00 	ldrex	r3, [r3]
 800ac8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac96:	61fb      	str	r3, [r7, #28]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	61bb      	str	r3, [r7, #24]
 800aca2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca4:	6979      	ldr	r1, [r7, #20]
 800aca6:	69ba      	ldr	r2, [r7, #24]
 800aca8:	e841 2300 	strex	r3, r2, [r1]
 800acac:	613b      	str	r3, [r7, #16]
   return(result);
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1e6      	bne.n	800ac82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2220      	movs	r2, #32
 800acb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800accc:	bf00      	nop
 800acce:	3720      	adds	r7, #32
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d101      	bne.n	800ad26 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad22:	2302      	movs	r3, #2
 800ad24:	e027      	b.n	800ad76 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2201      	movs	r2, #1
 800ad2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2224      	movs	r2, #36	@ 0x24
 800ad32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f022 0201 	bic.w	r2, r2, #1
 800ad4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2220      	movs	r2, #32
 800ad68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b084      	sub	sp, #16
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d101      	bne.n	800ad9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad96:	2302      	movs	r3, #2
 800ad98:	e02d      	b.n	800adf6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2224      	movs	r2, #36	@ 0x24
 800ada6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f022 0201 	bic.w	r2, r2, #1
 800adc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	430a      	orrs	r2, r1
 800add4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f850 	bl	800ae7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2220      	movs	r2, #32
 800ade8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d101      	bne.n	800ae16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae12:	2302      	movs	r3, #2
 800ae14:	e02d      	b.n	800ae72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2224      	movs	r2, #36	@ 0x24
 800ae22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f022 0201 	bic.w	r2, r2, #1
 800ae3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	683a      	ldr	r2, [r7, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f812 	bl	800ae7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2220      	movs	r2, #32
 800ae64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d108      	bne.n	800ae9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae9c:	e031      	b.n	800af02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae9e:	2308      	movs	r3, #8
 800aea0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aea2:	2308      	movs	r3, #8
 800aea4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	0e5b      	lsrs	r3, r3, #25
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	f003 0307 	and.w	r3, r3, #7
 800aeb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	0f5b      	lsrs	r3, r3, #29
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	f003 0307 	and.w	r3, r3, #7
 800aec4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
 800aec8:	7b3a      	ldrb	r2, [r7, #12]
 800aeca:	4911      	ldr	r1, [pc, #68]	@ (800af10 <UARTEx_SetNbDataToProcess+0x94>)
 800aecc:	5c8a      	ldrb	r2, [r1, r2]
 800aece:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aed2:	7b3a      	ldrb	r2, [r7, #12]
 800aed4:	490f      	ldr	r1, [pc, #60]	@ (800af14 <UARTEx_SetNbDataToProcess+0x98>)
 800aed6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aed8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aedc:	b29a      	uxth	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	7b7a      	ldrb	r2, [r7, #13]
 800aee8:	4909      	ldr	r1, [pc, #36]	@ (800af10 <UARTEx_SetNbDataToProcess+0x94>)
 800aeea:	5c8a      	ldrb	r2, [r1, r2]
 800aeec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aef0:	7b7a      	ldrb	r2, [r7, #13]
 800aef2:	4908      	ldr	r1, [pc, #32]	@ (800af14 <UARTEx_SetNbDataToProcess+0x98>)
 800aef4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aef6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af02:	bf00      	nop
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	0800b138 	.word	0x0800b138
 800af14:	0800b140 	.word	0x0800b140

0800af18 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	ed93 7a06 	vldr	s14, [r3, #24]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	edd3 7a07 	vldr	s15, [r3, #28]
 800af2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	edd3 7a08 	vldr	s15, [r3, #32]
 800af38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	edd3 7a06 	vldr	s15, [r3, #24]
 800af48:	eeb1 7a67 	vneg.f32	s14, s15
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	edd3 7a08 	vldr	s15, [r3, #32]
 800af52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a1a      	ldr	r2, [r3, #32]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d006      	beq.n	800af7c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	330c      	adds	r3, #12
 800af72:	220c      	movs	r2, #12
 800af74:	2100      	movs	r1, #0
 800af76:	4618      	mov	r0, r3
 800af78:	f000 f804 	bl	800af84 <memset>
  }

}
 800af7c:	bf00      	nop
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <memset>:
 800af84:	4402      	add	r2, r0
 800af86:	4603      	mov	r3, r0
 800af88:	4293      	cmp	r3, r2
 800af8a:	d100      	bne.n	800af8e <memset+0xa>
 800af8c:	4770      	bx	lr
 800af8e:	f803 1b01 	strb.w	r1, [r3], #1
 800af92:	e7f9      	b.n	800af88 <memset+0x4>

0800af94 <__libc_init_array>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	4d0d      	ldr	r5, [pc, #52]	@ (800afcc <__libc_init_array+0x38>)
 800af98:	4c0d      	ldr	r4, [pc, #52]	@ (800afd0 <__libc_init_array+0x3c>)
 800af9a:	1b64      	subs	r4, r4, r5
 800af9c:	10a4      	asrs	r4, r4, #2
 800af9e:	2600      	movs	r6, #0
 800afa0:	42a6      	cmp	r6, r4
 800afa2:	d109      	bne.n	800afb8 <__libc_init_array+0x24>
 800afa4:	4d0b      	ldr	r5, [pc, #44]	@ (800afd4 <__libc_init_array+0x40>)
 800afa6:	4c0c      	ldr	r4, [pc, #48]	@ (800afd8 <__libc_init_array+0x44>)
 800afa8:	f000 f8a2 	bl	800b0f0 <_init>
 800afac:	1b64      	subs	r4, r4, r5
 800afae:	10a4      	asrs	r4, r4, #2
 800afb0:	2600      	movs	r6, #0
 800afb2:	42a6      	cmp	r6, r4
 800afb4:	d105      	bne.n	800afc2 <__libc_init_array+0x2e>
 800afb6:	bd70      	pop	{r4, r5, r6, pc}
 800afb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afbc:	4798      	blx	r3
 800afbe:	3601      	adds	r6, #1
 800afc0:	e7ee      	b.n	800afa0 <__libc_init_array+0xc>
 800afc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afc6:	4798      	blx	r3
 800afc8:	3601      	adds	r6, #1
 800afca:	e7f2      	b.n	800afb2 <__libc_init_array+0x1e>
 800afcc:	0800b150 	.word	0x0800b150
 800afd0:	0800b150 	.word	0x0800b150
 800afd4:	0800b150 	.word	0x0800b150
 800afd8:	0800b154 	.word	0x0800b154

0800afdc <memcpy>:
 800afdc:	440a      	add	r2, r1
 800afde:	4291      	cmp	r1, r2
 800afe0:	f100 33ff 	add.w	r3, r0, #4294967295
 800afe4:	d100      	bne.n	800afe8 <memcpy+0xc>
 800afe6:	4770      	bx	lr
 800afe8:	b510      	push	{r4, lr}
 800afea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aff2:	4291      	cmp	r1, r2
 800aff4:	d1f9      	bne.n	800afea <memcpy+0xe>
 800aff6:	bd10      	pop	{r4, pc}

0800aff8 <floor>:
 800aff8:	ec51 0b10 	vmov	r0, r1, d0
 800affc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b004:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b008:	2e13      	cmp	r6, #19
 800b00a:	460c      	mov	r4, r1
 800b00c:	4605      	mov	r5, r0
 800b00e:	4680      	mov	r8, r0
 800b010:	dc34      	bgt.n	800b07c <floor+0x84>
 800b012:	2e00      	cmp	r6, #0
 800b014:	da17      	bge.n	800b046 <floor+0x4e>
 800b016:	a332      	add	r3, pc, #200	@ (adr r3, 800b0e0 <floor+0xe8>)
 800b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01c:	f7f5 f902 	bl	8000224 <__adddf3>
 800b020:	2200      	movs	r2, #0
 800b022:	2300      	movs	r3, #0
 800b024:	f7f5 fd44 	bl	8000ab0 <__aeabi_dcmpgt>
 800b028:	b150      	cbz	r0, 800b040 <floor+0x48>
 800b02a:	2c00      	cmp	r4, #0
 800b02c:	da55      	bge.n	800b0da <floor+0xe2>
 800b02e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b032:	432c      	orrs	r4, r5
 800b034:	2500      	movs	r5, #0
 800b036:	42ac      	cmp	r4, r5
 800b038:	4c2b      	ldr	r4, [pc, #172]	@ (800b0e8 <floor+0xf0>)
 800b03a:	bf08      	it	eq
 800b03c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b040:	4621      	mov	r1, r4
 800b042:	4628      	mov	r0, r5
 800b044:	e023      	b.n	800b08e <floor+0x96>
 800b046:	4f29      	ldr	r7, [pc, #164]	@ (800b0ec <floor+0xf4>)
 800b048:	4137      	asrs	r7, r6
 800b04a:	ea01 0307 	and.w	r3, r1, r7
 800b04e:	4303      	orrs	r3, r0
 800b050:	d01d      	beq.n	800b08e <floor+0x96>
 800b052:	a323      	add	r3, pc, #140	@ (adr r3, 800b0e0 <floor+0xe8>)
 800b054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b058:	f7f5 f8e4 	bl	8000224 <__adddf3>
 800b05c:	2200      	movs	r2, #0
 800b05e:	2300      	movs	r3, #0
 800b060:	f7f5 fd26 	bl	8000ab0 <__aeabi_dcmpgt>
 800b064:	2800      	cmp	r0, #0
 800b066:	d0eb      	beq.n	800b040 <floor+0x48>
 800b068:	2c00      	cmp	r4, #0
 800b06a:	bfbe      	ittt	lt
 800b06c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b070:	4133      	asrlt	r3, r6
 800b072:	18e4      	addlt	r4, r4, r3
 800b074:	ea24 0407 	bic.w	r4, r4, r7
 800b078:	2500      	movs	r5, #0
 800b07a:	e7e1      	b.n	800b040 <floor+0x48>
 800b07c:	2e33      	cmp	r6, #51	@ 0x33
 800b07e:	dd0a      	ble.n	800b096 <floor+0x9e>
 800b080:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b084:	d103      	bne.n	800b08e <floor+0x96>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	f7f5 f8cb 	bl	8000224 <__adddf3>
 800b08e:	ec41 0b10 	vmov	d0, r0, r1
 800b092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b096:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b09a:	f04f 37ff 	mov.w	r7, #4294967295
 800b09e:	40df      	lsrs	r7, r3
 800b0a0:	4207      	tst	r7, r0
 800b0a2:	d0f4      	beq.n	800b08e <floor+0x96>
 800b0a4:	a30e      	add	r3, pc, #56	@ (adr r3, 800b0e0 <floor+0xe8>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f7f5 f8bb 	bl	8000224 <__adddf3>
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f7f5 fcfd 	bl	8000ab0 <__aeabi_dcmpgt>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d0c2      	beq.n	800b040 <floor+0x48>
 800b0ba:	2c00      	cmp	r4, #0
 800b0bc:	da0a      	bge.n	800b0d4 <floor+0xdc>
 800b0be:	2e14      	cmp	r6, #20
 800b0c0:	d101      	bne.n	800b0c6 <floor+0xce>
 800b0c2:	3401      	adds	r4, #1
 800b0c4:	e006      	b.n	800b0d4 <floor+0xdc>
 800b0c6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	40b3      	lsls	r3, r6
 800b0ce:	441d      	add	r5, r3
 800b0d0:	4545      	cmp	r5, r8
 800b0d2:	d3f6      	bcc.n	800b0c2 <floor+0xca>
 800b0d4:	ea25 0507 	bic.w	r5, r5, r7
 800b0d8:	e7b2      	b.n	800b040 <floor+0x48>
 800b0da:	2500      	movs	r5, #0
 800b0dc:	462c      	mov	r4, r5
 800b0de:	e7af      	b.n	800b040 <floor+0x48>
 800b0e0:	8800759c 	.word	0x8800759c
 800b0e4:	7e37e43c 	.word	0x7e37e43c
 800b0e8:	bff00000 	.word	0xbff00000
 800b0ec:	000fffff 	.word	0x000fffff

0800b0f0 <_init>:
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f2:	bf00      	nop
 800b0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f6:	bc08      	pop	{r3}
 800b0f8:	469e      	mov	lr, r3
 800b0fa:	4770      	bx	lr

0800b0fc <_fini>:
 800b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fe:	bf00      	nop
 800b100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b102:	bc08      	pop	{r3}
 800b104:	469e      	mov	lr, r3
 800b106:	4770      	bx	lr
