
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006098  08006098  00007098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d8  080060d8  0000820c  2**0
                  CONTENTS
  4 .ARM          00000008  080060d8  080060d8  000070d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060e0  080060e0  0000820c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e0  080060e0  000070e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060e4  080060e4  000070e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  080060e8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b0  2000020c  080062f4  0000820c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  080062f4  00008bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015492  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c0  00000000  00000000  0001d6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  0001ff90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d61  00000000  00000000  000210a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263d1  00000000  00000000  00021e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145a0  00000000  00000000  000481d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc0da  00000000  00000000  0005c772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015884c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ac  00000000  00000000  00158890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0015d13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006080 	.word	0x08006080

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	08006080 	.word	0x08006080

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800050c:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2201      	movs	r2, #1
 8000512:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000514:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	691b      	ldr	r3, [r3, #16]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f042 0201 	orr.w	r2, r2, #1
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000228 	.word	0x20000228

08000548 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <modbus_3t5_Timeout+0x1c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	755a      	strb	r2, [r3, #21]

}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	20000228 	.word	0x20000228

08000568 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f004 fc23 	bl	8004dbc <HAL_UART_GetError>
 8000576:	4603      	mov	r3, r0
 8000578:	2b20      	cmp	r3, #32
 800057a:	d101      	bne.n	8000580 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800057c:	f7ff ffc4 	bl	8000508 <modbus_1t5_Timeout>

	}
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000592:	4a25      	ldr	r2, [pc, #148]	@ (8000628 <Modbus_init+0xa0>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <Modbus_init+0xa0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <Modbus_init+0xa4>)
 80005a6:	210e      	movs	r1, #14
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fa09 	bl	80039c0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	2110      	movs	r1, #16
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 fbab 	bl	8004d10 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fbc2 	bl	8004d48 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a19      	ldr	r2, [pc, #100]	@ (8000630 <Modbus_init+0xa8>)
 80005ca:	2104      	movs	r1, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fe89 	bl	80042e4 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80005d2:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <Modbus_init+0xa0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <Modbus_init+0xa0>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <Modbus_init+0xa0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80005e4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80005e8:	4413      	add	r3, r2
 80005ea:	3302      	adds	r3, #2
 80005ec:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80005f0:	4619      	mov	r1, r3
 80005f2:	f003 ffb1 	bl	8004558 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <Modbus_init+0xa0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b01      	cmp	r3, #1
 8000604:	d10c      	bne.n	8000620 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <Modbus_init+0xa0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fd7f 	bl	8003110 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000612:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <Modbus_init+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fe58 	bl	80032d0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000228 	.word	0x20000228
 800062c:	08000549 	.word	0x08000549
 8000630:	08000569 	.word	0x08000569

08000634 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000640:	23ff      	movs	r3, #255	@ 0xff
 8000642:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000644:	23ff      	movs	r3, #255	@ 0xff
 8000646:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000648:	e013      	b.n	8000672 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	4053      	eors	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800065a:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <CRC16+0x64>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4053      	eors	r3, r2
 8000666:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <CRC16+0x68>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000672:	883b      	ldrh	r3, [r7, #0]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	803a      	strh	r2, [r7, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e6      	bne.n	800064a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b21b      	sxth	r3, r3
 800068a:	b29b      	uxth	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000100 	.word	0x20000100
 800069c:	20000000 	.word	0x20000000

080006a0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006a6:	4b7e      	ldr	r3, [pc, #504]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	7ddb      	ldrb	r3, [r3, #23]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80a      	bhi.n	80006c8 <Modbus_Protocal_Worker+0x28>
 80006b2:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <Modbus_Protocal_Worker+0x18>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	080006d3 	.word	0x080006d3
 80006bc:	08000867 	.word	0x08000867
 80006c0:	0800075f 	.word	0x0800075f
 80006c4:	080007a3 	.word	0x080007a3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006c8:	4b75      	ldr	r3, [pc, #468]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2201      	movs	r2, #1
 80006ce:	75da      	strb	r2, [r3, #23]
		break;
 80006d0:	e0e1      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80006d2:	4b73      	ldr	r3, [pc, #460]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80006de:	4b70      	ldr	r3, [pc, #448]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2202      	movs	r2, #2
 80006e4:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80006e6:	f000 f9cd 	bl	8000a84 <Modbus_Emission>
 80006ea:	e018      	b.n	800071e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80006ec:	4b6c      	ldr	r3, [pc, #432]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80006f6:	4b6a      	ldr	r3, [pc, #424]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000700:	b29b      	uxth	r3, r3
 8000702:	429a      	cmp	r2, r3
 8000704:	d00b      	beq.n	800071e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000706:	4b66      	ldr	r3, [pc, #408]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800070e:	4b64      	ldr	r3, [pc, #400]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000716:	4b62      	ldr	r3, [pc, #392]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2203      	movs	r2, #3
 800071c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800071e:	4b60      	ldr	r3, [pc, #384]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000728:	2b20      	cmp	r3, #32
 800072a:	f040 80ad 	bne.w	8000888 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800072e:	4b5c      	ldr	r3, [pc, #368]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000738:	4b59      	ldr	r3, [pc, #356]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800073e:	4b58      	ldr	r3, [pc, #352]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b57      	ldr	r3, [pc, #348]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800074a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800074e:	4413      	add	r3, r2
 8000750:	3302      	adds	r3, #2
 8000752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000756:	4619      	mov	r1, r3
 8000758:	f003 fefe 	bl	8004558 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800075c:	e094      	b.n	8000888 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800075e:	4b50      	ldr	r3, [pc, #320]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7d1b      	ldrb	r3, [r3, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 8091 	beq.w	800088c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800076a:	4b4d      	ldr	r3, [pc, #308]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	22fe      	movs	r2, #254	@ 0xfe
 8000770:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000772:	4b4b      	ldr	r3, [pc, #300]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800077c:	4b48      	ldr	r3, [pc, #288]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800078c:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800078e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000790:	1a8a      	subs	r2, r1, r2
 8000792:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8000794:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000798:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2204      	movs	r2, #4
 800079e:	75da      	strb	r2, [r3, #23]
		}
		break;
 80007a0:	e074      	b.n	800088c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007a2:	4b3f      	ldr	r3, [pc, #252]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80007aa:	f113 0f02 	cmn.w	r3, #2
 80007ae:	d150      	bne.n	8000852 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007b0:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007b8:	4b39      	ldr	r3, [pc, #228]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80007c0:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007c8:	3b02      	subs	r3, #2
 80007ca:	4619      	mov	r1, r3
 80007cc:	4610      	mov	r0, r2
 80007ce:	f7ff ff31 	bl	8000634 <CRC16>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007d6:	793a      	ldrb	r2, [r7, #4]
 80007d8:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007e4:	3b02      	subs	r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d10c      	bne.n	800080a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007f0:	797a      	ldrb	r2, [r7, #5]
 80007f2:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007fe:	3b01      	subs	r3, #1
 8000800:	440b      	add	r3, r1
 8000802:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000806:	429a      	cmp	r2, r3
 8000808:	d004      	beq.n	8000814 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	22ff      	movs	r2, #255	@ 0xff
 8000810:	759a      	strb	r2, [r3, #22]
				break;
 8000812:	e040      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d113      	bne.n	800084e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000836:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000840:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000842:	461a      	mov	r2, r3
 8000844:	f005 fc0e 	bl	8006064 <memcpy>

			//execute command
			Modbus_frame_response();
 8000848:	f000 f904 	bl	8000a54 <Modbus_frame_response>
 800084c:	e001      	b.n	8000852 <Modbus_Protocal_Worker+0x1b2>
				break;
 800084e:	bf00      	nop
					}
		break;


	}
}
 8000850:	e021      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	7d5b      	ldrb	r3, [r3, #21]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d019      	beq.n	8000890 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	75da      	strb	r2, [r3, #23]
		break;
 8000864:	e014      	b.n	8000890 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000870:	2b20      	cmp	r3, #32
 8000872:	d10f      	bne.n	8000894 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	75da      	strb	r2, [r3, #23]
		break;
 8000886:	e005      	b.n	8000894 <Modbus_Protocal_Worker+0x1f4>
		break;
 8000888:	bf00      	nop
 800088a:	e004      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 800088c:	bf00      	nop
 800088e:	e002      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000890:	bf00      	nop
 8000892:	e000      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000894:	bf00      	nop
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000228 	.word	0x20000228

080008a4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	7e5b      	ldrb	r3, [r3, #25]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008b6:	6812      	ldr	r2, [r2, #0]
 80008b8:	7e92      	ldrb	r2, [r2, #26]
 80008ba:	4413      	add	r3, r2
 80008bc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d903      	bls.n	80008d2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f000 f8a0 	bl	8000a10 <ModbusErrorReply>
			 return;
 80008d0:	e023      	b.n	800091a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	440b      	add	r3, r1
 80008e2:	7ed2      	ldrb	r2, [r2, #27]
 80008e4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6859      	ldr	r1, [r3, #4]
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	440b      	add	r3, r1
 80008f6:	7f12      	ldrb	r2, [r2, #28]
 80008f8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8000902:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8000908:	2208      	movs	r2, #8
 800090a:	4619      	mov	r1, r3
 800090c:	f005 fbaa 	bl	8006064 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2205      	movs	r2, #5
 8000916:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000228 	.word	0x20000228

08000924 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <modbusRead1Register+0xe8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	7edb      	ldrb	r3, [r3, #27]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	4a35      	ldr	r2, [pc, #212]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	7f12      	ldrb	r2, [r2, #28]
 800093a:	4413      	add	r3, r2
 800093c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800093e:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	7e5b      	ldrb	r3, [r3, #25]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	4a30      	ldr	r2, [pc, #192]	@ (8000a0c <modbusRead1Register+0xe8>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	7e92      	ldrb	r2, [r2, #26]
 800094e:	4413      	add	r3, r2
 8000950:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <modbusRead1Register+0x3a>
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	2b7d      	cmp	r3, #125	@ 0x7d
 800095c:	d903      	bls.n	8000966 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f856 	bl	8000a10 <ModbusErrorReply>
		 return;
 8000964:	e04e      	b.n	8000a04 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <modbusRead1Register+0xe8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	429a      	cmp	r2, r3
 8000970:	d808      	bhi.n	8000984 <modbusRead1Register+0x60>
 8000972:	88ba      	ldrh	r2, [r7, #4]
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4413      	add	r3, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <modbusRead1Register+0xe8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	429a      	cmp	r2, r3
 8000982:	d903      	bls.n	800098c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000984:	2002      	movs	r0, #2
 8000986:	f000 f843 	bl	8000a10 <ModbusErrorReply>
		 return;
 800098a:	e03b      	b.n	8000a04 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <modbusRead1Register+0xe8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2203      	movs	r2, #3
 8000992:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <modbusRead1Register+0xe8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009a6:	2400      	movs	r4, #0
 80009a8:	e020      	b.n	80009ec <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	4423      	add	r3, r4
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	18d1      	adds	r1, r2, r3
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	1c63      	adds	r3, r4, #1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	7849      	ldrb	r1, [r1, #1]
 80009c2:	4413      	add	r3, r2
 80009c4:	460a      	mov	r2, r1
 80009c6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	4423      	add	r3, r4
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	18d1      	adds	r1, r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0063      	lsls	r3, r4, #1
 80009de:	3303      	adds	r3, #3
 80009e0:	7809      	ldrb	r1, [r1, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80009ea:	3401      	adds	r4, #1
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	429c      	cmp	r4, r3
 80009f0:	dbdb      	blt.n	80009aa <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000228 	.word	0x20000228

08000a10 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7e1a      	ldrb	r2, [r3, #24]
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000228 	.word	0x20000228

08000a54 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <Modbus_frame_response+0x2c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d004      	beq.n	8000a6c <Modbus_frame_response+0x18>
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d105      	bne.n	8000a72 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000a66:	f7ff ff1d 	bl	80008a4 <modbusWrite1Register>
		break;
 8000a6a:	e006      	b.n	8000a7a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000a6c:	f7ff ff5a 	bl	8000924 <modbusRead1Register>
		break;
 8000a70:	e003      	b.n	8000a7a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff ffcc 	bl	8000a10 <ModbusErrorReply>
		break;
 8000a78:	bf00      	nop

	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000228 	.word	0x20000228

08000a84 <Modbus_Emission>:

void Modbus_Emission()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000a8a:	4b38      	ldr	r3, [pc, #224]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a94:	2b20      	cmp	r3, #32
 8000a96:	d15d      	bne.n	8000b54 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000a98:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000aae:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f005 facf 	bl	8006064 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3203      	adds	r2, #3
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000adc:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f7ff fd9f 	bl	8000634 <CRC16>
 8000af6:	4603      	mov	r3, r0
 8000af8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b06:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b08:	7939      	ldrb	r1, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b1e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b20:	7979      	ldrb	r1, [r7, #5]
 8000b22:	4413      	add	r3, r2
 8000b24:	460a      	mov	r2, r1
 8000b26:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b34:	2b20      	cmp	r3, #32
 8000b36:	d10d      	bne.n	8000b54 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b4a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f003 fc82 	bl	8004458 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	755a      	strb	r2, [r3, #21]

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000228 	.word	0x20000228

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b74:	f000 fbc7 	bl	8001306 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b78:	f000 f82a 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7c:	f000 f972 	bl	8000e64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b80:	f000 f93e 	bl	8000e00 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b84:	f000 f8ee 	bl	8000d64 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000b88:	f000 f8bc 	bl	8000d04 <MX_TIM16_Init>
  MX_TIM3_Init();
 8000b8c:	f000 f86c 	bl	8000c68 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <main+0x4c>)
 8000b92:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc0 <main+0x50>)
 8000b94:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <main+0x4c>)
 8000b98:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <main+0x54>)
 8000b9a:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <main+0x4c>)
 8000b9e:	2215      	movs	r2, #21
 8000ba0:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <main+0x4c>)
 8000ba4:	22c8      	movs	r2, #200	@ 0xc8
 8000ba6:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000ba8:	4907      	ldr	r1, [pc, #28]	@ (8000bc8 <main+0x58>)
 8000baa:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <main+0x4c>)
 8000bac:	f7ff fcec 	bl	8000588 <Modbus_init>

  HAL_TIM_Base_Start_IT(&htim3);
 8000bb0:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <main+0x5c>)
 8000bb2:	f002 faad 	bl	8003110 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8000bb6:	f7ff fd73 	bl	80006a0 <Modbus_Protocal_Worker>
 8000bba:	e7fc      	b.n	8000bb6 <main+0x46>
 8000bbc:	20000550 	.word	0x20000550
 8000bc0:	200003c4 	.word	0x200003c4
 8000bc4:	200002f8 	.word	0x200002f8
 8000bc8:	20000a28 	.word	0x20000a28
 8000bcc:	2000022c 	.word	0x2000022c

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b094      	sub	sp, #80	@ 0x50
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	2238      	movs	r2, #56	@ 0x38
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f005 fa14 	bl	800600c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f001 f9f8 	bl	8001fe8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c02:	2340      	movs	r3, #64	@ 0x40
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c12:	2355      	movs	r3, #85	@ 0x55
 8000c14:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c22:	f107 0318 	add.w	r3, r7, #24
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fa92 	bl	8002150 <HAL_RCC_OscConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c32:	f000 f99b 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c36:	230f      	movs	r3, #15
 8000c38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 fd90 	bl	8002774 <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c5a:	f000 f987 	bl	8000f6c <Error_Handler>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3750      	adds	r7, #80	@ 0x50
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <MX_TIM3_Init+0x94>)
 8000c88:	4a1d      	ldr	r2, [pc, #116]	@ (8000d00 <MX_TIM3_Init+0x98>)
 8000c8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <MX_TIM3_Init+0x94>)
 8000c8e:	22a9      	movs	r2, #169	@ 0xa9
 8000c90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <MX_TIM3_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000c98:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <MX_TIM3_Init+0x94>)
 8000c9a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000c9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <MX_TIM3_Init+0x94>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <MX_TIM3_Init+0x94>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cac:	4813      	ldr	r0, [pc, #76]	@ (8000cfc <MX_TIM3_Init+0x94>)
 8000cae:	f002 f9cb 	bl	8003048 <HAL_TIM_Base_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000cb8:	f000 f958 	bl	8000f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <MX_TIM3_Init+0x94>)
 8000cca:	f002 fd09 	bl	80036e0 <HAL_TIM_ConfigClockSource>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000cd4:	f000 f94a 	bl	8000f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_TIM3_Init+0x94>)
 8000ce6:	f003 f9b7 	bl	8004058 <HAL_TIMEx_MasterConfigSynchronization>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000cf0:	f000 f93c 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000022c 	.word	0x2000022c
 8000d00:	40000400 	.word	0x40000400

08000d04 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_TIM16_Init+0x58>)
 8000d0a:	4a15      	ldr	r2, [pc, #84]	@ (8000d60 <MX_TIM16_Init+0x5c>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <MX_TIM16_Init+0x58>)
 8000d10:	22a9      	movs	r2, #169	@ 0xa9
 8000d12:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_TIM16_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <MX_TIM16_Init+0x58>)
 8000d1c:	f240 4279 	movw	r2, #1145	@ 0x479
 8000d20:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MX_TIM16_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <MX_TIM16_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <MX_TIM16_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d34:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <MX_TIM16_Init+0x58>)
 8000d36:	f002 f987 	bl	8003048 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000d40:	f000 f914 	bl	8000f6c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d44:	2108      	movs	r1, #8
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_TIM16_Init+0x58>)
 8000d48:	f002 fa5a 	bl	8003200 <HAL_TIM_OnePulse_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000d52:	f000 f90b 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200002f8 	.word	0x200002f8
 8000d60:	40014400 	.word	0x40014400

08000d64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d68:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000d6a:	4a24      	ldr	r2, [pc, #144]	@ (8000dfc <MX_USART2_UART_Init+0x98>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000d6e:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000d70:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000d76:	4b20      	ldr	r3, [pc, #128]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000d78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d7c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000d86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b17      	ldr	r3, [pc, #92]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da4:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000db0:	4811      	ldr	r0, [pc, #68]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000db2:	f003 fa37 	bl	8004224 <HAL_UART_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000dbc:	f000 f8d6 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	480d      	ldr	r0, [pc, #52]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000dc4:	f005 f857 	bl	8005e76 <HAL_UARTEx_SetTxFifoThreshold>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000dce:	f000 f8cd 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4808      	ldr	r0, [pc, #32]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000dd6:	f005 f88c 	bl	8005ef2 <HAL_UARTEx_SetRxFifoThreshold>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000de0:	f000 f8c4 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000de6:	f005 f80d 	bl	8005e04 <HAL_UARTEx_DisableFifoMode>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000df0:	f000 f8bc 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200003c4 	.word	0x200003c4
 8000dfc:	40004400 	.word	0x40004400

08000e00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e06:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <MX_DMA_Init+0x60>)
 8000e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0a:	4a15      	ldr	r2, [pc, #84]	@ (8000e60 <MX_DMA_Init+0x60>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e12:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <MX_DMA_Init+0x60>)
 8000e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <MX_DMA_Init+0x60>)
 8000e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e22:	4a0f      	ldr	r2, [pc, #60]	@ (8000e60 <MX_DMA_Init+0x60>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <MX_DMA_Init+0x60>)
 8000e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	200b      	movs	r0, #11
 8000e3c:	f000 fbaf 	bl	800159e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e40:	200b      	movs	r0, #11
 8000e42:	f000 fbc6 	bl	80015d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200c      	movs	r0, #12
 8000e4c:	f000 fba7 	bl	800159e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e50:	200c      	movs	r0, #12
 8000e52:	f000 fbbe 	bl	80015d2 <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e86:	4b2c      	ldr	r3, [pc, #176]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e92:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	4a28      	ldr	r2, [pc, #160]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9e:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a22      	ldr	r2, [pc, #136]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2120      	movs	r1, #32
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee2:	f001 f845 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ee6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	480f      	ldr	r0, [pc, #60]	@ (8000f3c <MX_GPIO_Init+0xd8>)
 8000efe:	f000 feb5 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f02:	2320      	movs	r3, #32
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1c:	f000 fea6 	bl	8001c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2028      	movs	r0, #40	@ 0x28
 8000f26:	f000 fb3a 	bl	800159e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f2a:	2028      	movs	r0, #40	@ 0x28
 8000f2c:	f000 fb51 	bl	80015d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	@ 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000800 	.word	0x48000800

08000f40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    if (htim == &htim3) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a06      	ldr	r2, [pc, #24]	@ (8000f64 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d103      	bne.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0x18>
        registerFrame[0x00].U16 = 22881;
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f52:	f645 1261 	movw	r2, #22881	@ 0x5961
 8000f56:	801a      	strh	r2, [r3, #0]
    }
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	2000022c 	.word	0x2000022c
 8000f68:	20000a28 	.word	0x20000a28

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <Error_Handler+0x8>

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f82:	4a0e      	ldr	r2, [pc, #56]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9a:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_MspInit+0x44>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fae:	f001 f8bf 	bl	8002130 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001038 <HAL_TIM_Base_MspInit+0x78>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d114      	bne.n	8000ffc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <HAL_TIM_Base_MspInit+0x7c>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd6:	4a19      	ldr	r2, [pc, #100]	@ (800103c <HAL_TIM_Base_MspInit+0x7c>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fde:	4b17      	ldr	r3, [pc, #92]	@ (800103c <HAL_TIM_Base_MspInit+0x7c>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	201d      	movs	r0, #29
 8000ff0:	f000 fad5 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ff4:	201d      	movs	r0, #29
 8000ff6:	f000 faec 	bl	80015d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000ffa:	e018      	b.n	800102e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0f      	ldr	r2, [pc, #60]	@ (8001040 <HAL_TIM_Base_MspInit+0x80>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d113      	bne.n	800102e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <HAL_TIM_Base_MspInit+0x7c>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100a:	4a0c      	ldr	r2, [pc, #48]	@ (800103c <HAL_TIM_Base_MspInit+0x7c>)
 800100c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001010:	6613      	str	r3, [r2, #96]	@ 0x60
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_TIM_Base_MspInit+0x7c>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2019      	movs	r0, #25
 8001024:	f000 fabb 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001028:	2019      	movs	r0, #25
 800102a:	f000 fad2 	bl	80015d2 <HAL_NVIC_EnableIRQ>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40000400 	.word	0x40000400
 800103c:	40021000 	.word	0x40021000
 8001040:	40014400 	.word	0x40014400

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b09e      	sub	sp, #120	@ 0x78
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2254      	movs	r2, #84	@ 0x54
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f004 ffd1 	bl	800600c <memset>
  if(huart->Instance==USART2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a4d      	ldr	r2, [pc, #308]	@ (80011a4 <HAL_UART_MspInit+0x160>)
 8001070:	4293      	cmp	r3, r2
 8001072:	f040 8092 	bne.w	800119a <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001076:	2302      	movs	r3, #2
 8001078:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fd92 	bl	8002bac <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800108e:	f7ff ff6d 	bl	8000f6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001092:	4b45      	ldr	r3, [pc, #276]	@ (80011a8 <HAL_UART_MspInit+0x164>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001096:	4a44      	ldr	r2, [pc, #272]	@ (80011a8 <HAL_UART_MspInit+0x164>)
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	6593      	str	r3, [r2, #88]	@ 0x58
 800109e:	4b42      	ldr	r3, [pc, #264]	@ (80011a8 <HAL_UART_MspInit+0x164>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b3f      	ldr	r3, [pc, #252]	@ (80011a8 <HAL_UART_MspInit+0x164>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	4a3e      	ldr	r2, [pc, #248]	@ (80011a8 <HAL_UART_MspInit+0x164>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b6:	4b3c      	ldr	r3, [pc, #240]	@ (80011a8 <HAL_UART_MspInit+0x164>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010c2:	230c      	movs	r3, #12
 80010c4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d2:	2307      	movs	r3, #7
 80010d4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e0:	f000 fdc4 	bl	8001c6c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80010e4:	4b31      	ldr	r3, [pc, #196]	@ (80011ac <HAL_UART_MspInit+0x168>)
 80010e6:	4a32      	ldr	r2, [pc, #200]	@ (80011b0 <HAL_UART_MspInit+0x16c>)
 80010e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80010ea:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <HAL_UART_MspInit+0x168>)
 80010ec:	221b      	movs	r2, #27
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010f0:	4b2e      	ldr	r3, [pc, #184]	@ (80011ac <HAL_UART_MspInit+0x168>)
 80010f2:	2210      	movs	r2, #16
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f6:	4b2d      	ldr	r3, [pc, #180]	@ (80011ac <HAL_UART_MspInit+0x168>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010fc:	4b2b      	ldr	r3, [pc, #172]	@ (80011ac <HAL_UART_MspInit+0x168>)
 80010fe:	2280      	movs	r2, #128	@ 0x80
 8001100:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001102:	4b2a      	ldr	r3, [pc, #168]	@ (80011ac <HAL_UART_MspInit+0x168>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001108:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <HAL_UART_MspInit+0x168>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800110e:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <HAL_UART_MspInit+0x168>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001114:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <HAL_UART_MspInit+0x168>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800111a:	4824      	ldr	r0, [pc, #144]	@ (80011ac <HAL_UART_MspInit+0x168>)
 800111c:	f000 fa74 	bl	8001608 <HAL_DMA_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001126:	f7ff ff21 	bl	8000f6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ac <HAL_UART_MspInit+0x168>)
 800112e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001130:	4a1e      	ldr	r2, [pc, #120]	@ (80011ac <HAL_UART_MspInit+0x168>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8001136:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <HAL_UART_MspInit+0x170>)
 8001138:	4a1f      	ldr	r2, [pc, #124]	@ (80011b8 <HAL_UART_MspInit+0x174>)
 800113a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800113c:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <HAL_UART_MspInit+0x170>)
 800113e:	221a      	movs	r2, #26
 8001140:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001142:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <HAL_UART_MspInit+0x170>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001148:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <HAL_UART_MspInit+0x170>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <HAL_UART_MspInit+0x170>)
 8001150:	2280      	movs	r2, #128	@ 0x80
 8001152:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_UART_MspInit+0x170>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115a:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <HAL_UART_MspInit+0x170>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_UART_MspInit+0x170>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <HAL_UART_MspInit+0x170>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800116c:	4811      	ldr	r0, [pc, #68]	@ (80011b4 <HAL_UART_MspInit+0x170>)
 800116e:	f000 fa4b 	bl	8001608 <HAL_DMA_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8001178:	f7ff fef8 	bl	8000f6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a0d      	ldr	r2, [pc, #52]	@ (80011b4 <HAL_UART_MspInit+0x170>)
 8001180:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001184:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <HAL_UART_MspInit+0x170>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2026      	movs	r0, #38	@ 0x26
 8001190:	f000 fa05 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001194:	2026      	movs	r0, #38	@ 0x26
 8001196:	f000 fa1c 	bl	80015d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3778      	adds	r7, #120	@ 0x78
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40004400 	.word	0x40004400
 80011a8:	40021000 	.word	0x40021000
 80011ac:	20000490 	.word	0x20000490
 80011b0:	40020008 	.word	0x40020008
 80011b4:	200004f0 	.word	0x200004f0
 80011b8:	4002001c 	.word	0x4002001c

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <NMI_Handler+0x4>

080011c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <MemManage_Handler+0x4>

080011d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001212:	f000 f8cb 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <DMA1_Channel1_IRQHandler+0x10>)
 8001222:	f000 fbd4 	bl	80019ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000490 	.word	0x20000490

08001230 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <DMA1_Channel2_IRQHandler+0x10>)
 8001236:	f000 fbca 	bl	80019ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200004f0 	.word	0x200004f0

08001244 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800124a:	f002 f8cf 	bl	80033ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200002f8 	.word	0x200002f8

08001258 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <TIM3_IRQHandler+0x10>)
 800125e:	f002 f8c5 	bl	80033ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000022c 	.word	0x2000022c

0800126c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <USART2_IRQHandler+0x10>)
 8001272:	f003 f9bd 	bl	80045f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200003c4 	.word	0x200003c4

08001280 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001284:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001288:	f000 fe8a 	bl	8001fa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <SystemInit+0x20>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129a:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <SystemInit+0x20>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b4:	480d      	ldr	r0, [pc, #52]	@ (80012ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b8:	f7ff ffea 	bl	8001290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	@ (80012f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <LoopForever+0xe>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001300 <LoopForever+0x16>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e2:	f004 fe9b 	bl	800601c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e6:	f7ff fc43 	bl	8000b70 <main>

080012ea <LoopForever>:

LoopForever:
    b LoopForever
 80012ea:	e7fe      	b.n	80012ea <LoopForever>
  ldr   r0, =_estack
 80012ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80012f8:	080060e8 	.word	0x080060e8
  ldr r2, =_sbss
 80012fc:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001300:	20000bbc 	.word	0x20000bbc

08001304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC1_2_IRQHandler>

08001306 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 f939 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001316:	2000      	movs	r0, #0
 8001318:	f000 f80e 	bl	8001338 <HAL_InitTick>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	e001      	b.n	800132c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001328:	f7ff fe26 	bl	8000f78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800132c:	79fb      	ldrb	r3, [r7, #7]

}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <HAL_InitTick+0x68>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d022      	beq.n	8001392 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800134c:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <HAL_InitTick+0x6c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <HAL_InitTick+0x68>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001358:	fbb1 f3f3 	udiv	r3, r1, r3
 800135c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f944 	bl	80015ee <HAL_SYSTICK_Config>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10f      	bne.n	800138c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	d809      	bhi.n	8001386 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001372:	2200      	movs	r2, #0
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	f04f 30ff 	mov.w	r0, #4294967295
 800137a:	f000 f910 	bl	800159e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <HAL_InitTick+0x70>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	e007      	b.n	8001396 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e004      	b.n	8001396 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e001      	b.n	8001396 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000208 	.word	0x20000208
 80013a4:	20000200 	.word	0x20000200
 80013a8:	20000204 	.word	0x20000204

080013ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <HAL_IncTick+0x1c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <HAL_IncTick+0x20>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a03      	ldr	r2, [pc, #12]	@ (80013c8 <HAL_IncTick+0x1c>)
 80013bc:	6013      	str	r3, [r2, #0]
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	20000bb8 	.word	0x20000bb8
 80013cc:	20000208 	.word	0x20000208

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	@ (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000bb8 	.word	0x20000bb8

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	@ (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4907      	ldr	r1, [pc, #28]	@ (8001484 <__NVIC_EnableIRQ+0x38>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000e100 	.word	0xe000e100

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	@ (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	@ (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	@ 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
         );
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	@ 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff8e 	bl	8001488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff29 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff40 	bl	8001430 <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff90 	bl	80014dc <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5f 	bl	8001488 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff33 	bl	800144c <__NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffa4 	bl	8001544 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e08d      	b.n	8001736 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	4b47      	ldr	r3, [pc, #284]	@ (8001740 <HAL_DMA_Init+0x138>)
 8001622:	429a      	cmp	r2, r3
 8001624:	d80f      	bhi.n	8001646 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4b45      	ldr	r3, [pc, #276]	@ (8001744 <HAL_DMA_Init+0x13c>)
 800162e:	4413      	add	r3, r2
 8001630:	4a45      	ldr	r2, [pc, #276]	@ (8001748 <HAL_DMA_Init+0x140>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	009a      	lsls	r2, r3, #2
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a42      	ldr	r2, [pc, #264]	@ (800174c <HAL_DMA_Init+0x144>)
 8001642:	641a      	str	r2, [r3, #64]	@ 0x40
 8001644:	e00e      	b.n	8001664 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4b40      	ldr	r3, [pc, #256]	@ (8001750 <HAL_DMA_Init+0x148>)
 800164e:	4413      	add	r3, r2
 8001650:	4a3d      	ldr	r2, [pc, #244]	@ (8001748 <HAL_DMA_Init+0x140>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	009a      	lsls	r2, r3, #2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a3c      	ldr	r2, [pc, #240]	@ (8001754 <HAL_DMA_Init+0x14c>)
 8001662:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800167a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800167e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001688:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001694:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fa76 	bl	8001ba8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016c4:	d102      	bne.n	80016cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d010      	beq.n	800170c <HAL_DMA_Init+0x104>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d80c      	bhi.n	800170c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fa96 	bl	8001c24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	e008      	b.n	800171e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40020407 	.word	0x40020407
 8001744:	bffdfff8 	.word	0xbffdfff8
 8001748:	cccccccd 	.word	0xcccccccd
 800174c:	40020000 	.word	0x40020000
 8001750:	bffdfbf8 	.word	0xbffdfbf8
 8001754:	40020400 	.word	0x40020400

08001758 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_DMA_Start_IT+0x20>
 8001774:	2302      	movs	r3, #2
 8001776:	e066      	b.n	8001846 <HAL_DMA_Start_IT+0xee>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d155      	bne.n	8001838 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0201 	bic.w	r2, r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f9bb 	bl	8001b2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 020e 	orr.w	r2, r2, #14
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e00f      	b.n	80017f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0204 	bic.w	r2, r2, #4
 80017de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 020a 	orr.w	r2, r2, #10
 80017ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001808:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800180c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001820:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001824:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0201 	orr.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e005      	b.n	8001844 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001840:	2302      	movs	r3, #2
 8001842:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001844:	7dfb      	ldrb	r3, [r7, #23]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800184e:	b480      	push	{r7}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d005      	beq.n	8001872 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2204      	movs	r2, #4
 800186a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e037      	b.n	80018e2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 020e 	bic.w	r2, r2, #14
 8001880:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800188c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001890:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0201 	bic.w	r2, r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	f003 021f 	and.w	r2, r3, #31
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	2101      	movs	r1, #1
 80018b0:	fa01 f202 	lsl.w	r2, r1, r2
 80018b4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018be:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00c      	beq.n	80018e2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018d6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018e0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d00d      	beq.n	8001934 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2204      	movs	r2, #4
 800191c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	e047      	b.n	80019c4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 020e 	bic.w	r2, r2, #14
 8001942:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800195e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001962:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001980:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00c      	beq.n	80019a4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001994:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001998:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4798      	blx	r3
    }
  }
  return status;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	2204      	movs	r2, #4
 80019f0:	409a      	lsls	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d026      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x7a>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d021      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d107      	bne.n	8001a22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0204 	bic.w	r2, r2, #4
 8001a20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	f003 021f 	and.w	r2, r3, #31
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	2104      	movs	r1, #4
 8001a30:	fa01 f202 	lsl.w	r2, r1, r2
 8001a34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d071      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a46:	e06c      	b.n	8001b22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	2202      	movs	r2, #2
 8001a52:	409a      	lsls	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d02e      	beq.n	8001aba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d029      	beq.n	8001aba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10b      	bne.n	8001a8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 020a 	bic.w	r2, r2, #10
 8001a82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	2102      	movs	r1, #2
 8001a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d038      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ab8:	e033      	b.n	8001b22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d02a      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d025      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 020e 	bic.w	r2, r2, #14
 8001ae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b22:	bf00      	nop
 8001b24:	bf00      	nop
}
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b42:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b54:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	f003 021f 	and.w	r2, r3, #31
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d108      	bne.n	8001b8c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b8a:	e007      	b.n	8001b9c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	60da      	str	r2, [r3, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d802      	bhi.n	8001bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e001      	b.n	8001bc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001bc2:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bc4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	3b08      	subs	r3, #8
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	009a      	lsls	r2, r3, #2
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4413      	add	r3, r2
 8001be8:	461a      	mov	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	@ (8001c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001bf2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c02:	bf00      	nop
 8001c04:	371c      	adds	r7, #28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40020407 	.word	0x40020407
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020820 	.word	0x40020820
 8001c1c:	cccccccd 	.word	0xcccccccd
 8001c20:	40020880 	.word	0x40020880

08001c24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a08      	ldr	r2, [pc, #32]	@ (8001c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c46:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	2201      	movs	r2, #1
 8001c52:	409a      	lsls	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	1000823f 	.word	0x1000823f
 8001c68:	40020940 	.word	0x40020940

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c7a:	e15a      	b.n	8001f32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2101      	movs	r1, #1
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 814c 	beq.w	8001f2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d005      	beq.n	8001cac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d130      	bne.n	8001d0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 0201 	and.w	r2, r3, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d017      	beq.n	8001d4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d123      	bne.n	8001d9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	08da      	lsrs	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3208      	adds	r2, #8
 8001d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	691a      	ldr	r2, [r3, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	6939      	ldr	r1, [r7, #16]
 8001d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0203 	and.w	r2, r3, #3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80a6 	beq.w	8001f2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dec:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df8:	4a56      	ldr	r2, [pc, #344]	@ (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e22:	d01f      	beq.n	8001e64 <HAL_GPIO_Init+0x1f8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a4c      	ldr	r2, [pc, #304]	@ (8001f58 <HAL_GPIO_Init+0x2ec>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d019      	beq.n	8001e60 <HAL_GPIO_Init+0x1f4>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_GPIO_Init+0x1f0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a4a      	ldr	r2, [pc, #296]	@ (8001f60 <HAL_GPIO_Init+0x2f4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00d      	beq.n	8001e58 <HAL_GPIO_Init+0x1ec>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a49      	ldr	r2, [pc, #292]	@ (8001f64 <HAL_GPIO_Init+0x2f8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_Init+0x1e8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a48      	ldr	r2, [pc, #288]	@ (8001f68 <HAL_GPIO_Init+0x2fc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_GPIO_Init+0x1e4>
 8001e4c:	2305      	movs	r3, #5
 8001e4e:	e00a      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e50:	2306      	movs	r3, #6
 8001e52:	e008      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e54:	2304      	movs	r3, #4
 8001e56:	e006      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e004      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e64:	2300      	movs	r3, #0
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e76:	4937      	ldr	r1, [pc, #220]	@ (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e84:	4b39      	ldr	r3, [pc, #228]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ea8:	4a30      	ldr	r2, [pc, #192]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eae:	4b2f      	ldr	r3, [pc, #188]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed2:	4a26      	ldr	r2, [pc, #152]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ed8:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001efc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f26:	4a11      	ldr	r2, [pc, #68]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f47f ae9d 	bne.w	8001c7c <HAL_GPIO_Init+0x10>
  }
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010000 	.word	0x40010000
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	48000c00 	.word	0x48000c00
 8001f64:	48001000 	.word	0x48001000
 8001f68:	48001400 	.word	0x48001400
 8001f6c:	40010400 	.word	0x40010400

08001f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f8c:	e002      	b.n	8001f94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fb6:	4a05      	ldr	r2, [pc, #20]	@ (8001fcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f806 	bl	8001fd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d141      	bne.n	800207a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002002:	d131      	bne.n	8002068 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002004:	4b47      	ldr	r3, [pc, #284]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800200a:	4a46      	ldr	r2, [pc, #280]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002010:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002014:	4b43      	ldr	r3, [pc, #268]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800201c:	4a41      	ldr	r2, [pc, #260]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002022:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002024:	4b40      	ldr	r3, [pc, #256]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2232      	movs	r2, #50	@ 0x32
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	4a3f      	ldr	r2, [pc, #252]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	0c9b      	lsrs	r3, r3, #18
 8002036:	3301      	adds	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800203a:	e002      	b.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3b01      	subs	r3, #1
 8002040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002042:	4b38      	ldr	r3, [pc, #224]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800204e:	d102      	bne.n	8002056 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f2      	bne.n	800203c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002056:	4b33      	ldr	r3, [pc, #204]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002062:	d158      	bne.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e057      	b.n	8002118 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002068:	4b2e      	ldr	r3, [pc, #184]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800206e:	4a2d      	ldr	r2, [pc, #180]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002074:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002078:	e04d      	b.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002080:	d141      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002082:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800208a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800208e:	d131      	bne.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002090:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002096:	4a23      	ldr	r2, [pc, #140]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800209c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a0:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2232      	movs	r2, #50	@ 0x32
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	0c9b      	lsrs	r3, r3, #18
 80020c2:	3301      	adds	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c6:	e002      	b.n	80020ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020da:	d102      	bne.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f2      	bne.n	80020c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ee:	d112      	bne.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e011      	b.n	8002118 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002100:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002104:	e007      	b.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002110:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002114:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40007000 	.word	0x40007000
 8002128:	20000200 	.word	0x20000200
 800212c:	431bde83 	.word	0x431bde83

08002130 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002134:	4b05      	ldr	r3, [pc, #20]	@ (800214c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a04      	ldr	r2, [pc, #16]	@ (800214c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800213a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800213e:	6093      	str	r3, [r2, #8]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40007000 	.word	0x40007000

08002150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e2fe      	b.n	8002760 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d075      	beq.n	800225a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216e:	4b97      	ldr	r3, [pc, #604]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002178:	4b94      	ldr	r3, [pc, #592]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b0c      	cmp	r3, #12
 8002186:	d102      	bne.n	800218e <HAL_RCC_OscConfig+0x3e>
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d002      	beq.n	8002194 <HAL_RCC_OscConfig+0x44>
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d10b      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	4b8d      	ldr	r3, [pc, #564]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d05b      	beq.n	8002258 <HAL_RCC_OscConfig+0x108>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d157      	bne.n	8002258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e2d9      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x74>
 80021b6:	4b85      	ldr	r3, [pc, #532]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a84      	ldr	r2, [pc, #528]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x98>
 80021ce:	4b7f      	ldr	r3, [pc, #508]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7e      	ldr	r2, [pc, #504]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b7c      	ldr	r3, [pc, #496]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a7b      	ldr	r2, [pc, #492]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021e8:	4b78      	ldr	r3, [pc, #480]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a77      	ldr	r2, [pc, #476]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b75      	ldr	r3, [pc, #468]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a74      	ldr	r2, [pc, #464]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7ff f8e2 	bl	80013d0 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff f8de 	bl	80013d0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	@ 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e29e      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002222:	4b6a      	ldr	r3, [pc, #424]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xc0>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7ff f8ce 	bl	80013d0 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff f8ca 	bl	80013d0 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e28a      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224a:	4b60      	ldr	r3, [pc, #384]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0xe8>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d075      	beq.n	8002352 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002266:	4b59      	ldr	r3, [pc, #356]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002270:	4b56      	ldr	r3, [pc, #344]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b0c      	cmp	r3, #12
 800227e:	d102      	bne.n	8002286 <HAL_RCC_OscConfig+0x136>
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d002      	beq.n	800228c <HAL_RCC_OscConfig+0x13c>
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d11f      	bne.n	80022cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800228c:	4b4f      	ldr	r3, [pc, #316]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_OscConfig+0x154>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e25d      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b49      	ldr	r3, [pc, #292]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	061b      	lsls	r3, r3, #24
 80022b2:	4946      	ldr	r1, [pc, #280]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022b8:	4b45      	ldr	r3, [pc, #276]	@ (80023d0 <HAL_RCC_OscConfig+0x280>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff f83b 	bl	8001338 <HAL_InitTick>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d043      	beq.n	8002350 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e249      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d023      	beq.n	800231c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d4:	4b3d      	ldr	r3, [pc, #244]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a3c      	ldr	r2, [pc, #240]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7ff f876 	bl	80013d0 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e8:	f7ff f872 	bl	80013d0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e232      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022fa:	4b34      	ldr	r3, [pc, #208]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	4b31      	ldr	r3, [pc, #196]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	061b      	lsls	r3, r3, #24
 8002314:	492d      	ldr	r1, [pc, #180]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
 800231a:	e01a      	b.n	8002352 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231c:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a2a      	ldr	r2, [pc, #168]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002322:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7ff f852 	bl	80013d0 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002330:	f7ff f84e 	bl	80013d0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e20e      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002342:	4b22      	ldr	r3, [pc, #136]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x1e0>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d041      	beq.n	80023e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002366:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236c:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7ff f82b 	bl	80013d0 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237e:	f7ff f827 	bl	80013d0 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e1e7      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002390:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0ef      	beq.n	800237e <HAL_RCC_OscConfig+0x22e>
 800239e:	e020      	b.n	80023e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a0:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80023a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a6:	4a09      	ldr	r2, [pc, #36]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7ff f80e 	bl	80013d0 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023b6:	e00d      	b.n	80023d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b8:	f7ff f80a 	bl	80013d0 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d906      	bls.n	80023d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e1ca      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ea      	bne.n	80023b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80a6 	beq.w	800253c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023f4:	4b84      	ldr	r3, [pc, #528]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_OscConfig+0x2b4>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x2b6>
 8002404:	2300      	movs	r3, #0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00d      	beq.n	8002426 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b7f      	ldr	r3, [pc, #508]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240e:	4a7e      	ldr	r2, [pc, #504]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002414:	6593      	str	r3, [r2, #88]	@ 0x58
 8002416:	4b7c      	ldr	r3, [pc, #496]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002422:	2301      	movs	r3, #1
 8002424:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002426:	4b79      	ldr	r3, [pc, #484]	@ (800260c <HAL_RCC_OscConfig+0x4bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002432:	4b76      	ldr	r3, [pc, #472]	@ (800260c <HAL_RCC_OscConfig+0x4bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a75      	ldr	r2, [pc, #468]	@ (800260c <HAL_RCC_OscConfig+0x4bc>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243e:	f7fe ffc7 	bl	80013d0 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002446:	f7fe ffc3 	bl	80013d0 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e183      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002458:	4b6c      	ldr	r3, [pc, #432]	@ (800260c <HAL_RCC_OscConfig+0x4bc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d108      	bne.n	800247e <HAL_RCC_OscConfig+0x32e>
 800246c:	4b66      	ldr	r3, [pc, #408]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002472:	4a65      	ldr	r2, [pc, #404]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800247c:	e024      	b.n	80024c8 <HAL_RCC_OscConfig+0x378>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b05      	cmp	r3, #5
 8002484:	d110      	bne.n	80024a8 <HAL_RCC_OscConfig+0x358>
 8002486:	4b60      	ldr	r3, [pc, #384]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248c:	4a5e      	ldr	r2, [pc, #376]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002496:	4b5c      	ldr	r3, [pc, #368]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249c:	4a5a      	ldr	r2, [pc, #360]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024a6:	e00f      	b.n	80024c8 <HAL_RCC_OscConfig+0x378>
 80024a8:	4b57      	ldr	r3, [pc, #348]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ae:	4a56      	ldr	r2, [pc, #344]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024b8:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024be:	4a52      	ldr	r2, [pc, #328]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80024c0:	f023 0304 	bic.w	r3, r3, #4
 80024c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d016      	beq.n	80024fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7fe ff7e 	bl	80013d0 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d8:	f7fe ff7a 	bl	80013d0 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e138      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ee:	4b46      	ldr	r3, [pc, #280]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ed      	beq.n	80024d8 <HAL_RCC_OscConfig+0x388>
 80024fc:	e015      	b.n	800252a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe ff67 	bl	80013d0 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7fe ff63 	bl	80013d0 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e121      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800251c:	4b3a      	ldr	r3, [pc, #232]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ed      	bne.n	8002506 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800252a:	7ffb      	ldrb	r3, [r7, #31]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002530:	4b35      	ldr	r3, [pc, #212]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	4a34      	ldr	r2, [pc, #208]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800253a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b00      	cmp	r3, #0
 8002546:	d03c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01c      	beq.n	800258a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002550:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002552:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002556:	4a2c      	ldr	r2, [pc, #176]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe ff36 	bl	80013d0 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002568:	f7fe ff32 	bl	80013d0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e0f2      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800257a:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800257c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ef      	beq.n	8002568 <HAL_RCC_OscConfig+0x418>
 8002588:	e01b      	b.n	80025c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800258a:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800258c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002590:	4a1d      	ldr	r2, [pc, #116]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7fe ff19 	bl	80013d0 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a2:	f7fe ff15 	bl	80013d0 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0d5      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80025b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1ef      	bne.n	80025a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 80c9 	beq.w	800275e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	f000 8083 	beq.w	80026e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d15e      	bne.n	80026a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a08      	ldr	r2, [pc, #32]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80025e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7fe feef 	bl	80013d0 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f4:	e00c      	b.n	8002610 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe feeb 	bl	80013d0 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d905      	bls.n	8002610 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0ab      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
 8002608:	40021000 	.word	0x40021000
 800260c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	4b55      	ldr	r3, [pc, #340]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ec      	bne.n	80025f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261c:	4b52      	ldr	r3, [pc, #328]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	4b52      	ldr	r3, [pc, #328]	@ (800276c <HAL_RCC_OscConfig+0x61c>)
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6a11      	ldr	r1, [r2, #32]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800262c:	3a01      	subs	r2, #1
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	4311      	orrs	r1, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002636:	0212      	lsls	r2, r2, #8
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800263e:	0852      	lsrs	r2, r2, #1
 8002640:	3a01      	subs	r2, #1
 8002642:	0552      	lsls	r2, r2, #21
 8002644:	4311      	orrs	r1, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800264a:	0852      	lsrs	r2, r2, #1
 800264c:	3a01      	subs	r2, #1
 800264e:	0652      	lsls	r2, r2, #25
 8002650:	4311      	orrs	r1, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002656:	06d2      	lsls	r2, r2, #27
 8002658:	430a      	orrs	r2, r1
 800265a:	4943      	ldr	r1, [pc, #268]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 800265c:	4313      	orrs	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a40      	ldr	r2, [pc, #256]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800266c:	4b3e      	ldr	r3, [pc, #248]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a3d      	ldr	r2, [pc, #244]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002676:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe feaa 	bl	80013d0 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe fea6 	bl	80013d0 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e066      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	4b35      	ldr	r3, [pc, #212]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x530>
 800269e:	e05e      	b.n	800275e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a0:	4b31      	ldr	r3, [pc, #196]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a30      	ldr	r2, [pc, #192]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 80026a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fe90 	bl	80013d0 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe fe8c 	bl	80013d0 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e04c      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c6:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026d2:	4b25      	ldr	r3, [pc, #148]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	4924      	ldr	r1, [pc, #144]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 80026d8:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <HAL_RCC_OscConfig+0x620>)
 80026da:	4013      	ands	r3, r2
 80026dc:	60cb      	str	r3, [r1, #12]
 80026de:	e03e      	b.n	800275e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e039      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 0203 	and.w	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d12c      	bne.n	800275a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	3b01      	subs	r3, #1
 800270c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d123      	bne.n	800275a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d11b      	bne.n	800275a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d113      	bne.n	800275a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273c:	085b      	lsrs	r3, r3, #1
 800273e:	3b01      	subs	r3, #1
 8002740:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d109      	bne.n	800275a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	3b01      	subs	r3, #1
 8002754:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3720      	adds	r7, #32
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	019f800c 	.word	0x019f800c
 8002770:	feeefffc 	.word	0xfeeefffc

08002774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e11e      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b91      	ldr	r3, [pc, #580]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d910      	bls.n	80027bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b8e      	ldr	r3, [pc, #568]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 020f 	bic.w	r2, r3, #15
 80027a2:	498c      	ldr	r1, [pc, #560]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b8a      	ldr	r3, [pc, #552]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e106      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d073      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d129      	bne.n	8002824 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d0:	4b81      	ldr	r3, [pc, #516]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0f4      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027e0:	f000 f99e 	bl	8002b20 <RCC_GetSysClockFreqFromPLLSource>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4a7c      	ldr	r2, [pc, #496]	@ (80029dc <HAL_RCC_ClockConfig+0x268>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d93f      	bls.n	800286e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027ee:	4b7a      	ldr	r3, [pc, #488]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002802:	2b00      	cmp	r3, #0
 8002804:	d033      	beq.n	800286e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800280a:	2b00      	cmp	r3, #0
 800280c:	d12f      	bne.n	800286e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800280e:	4b72      	ldr	r3, [pc, #456]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002816:	4a70      	ldr	r2, [pc, #448]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800281c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800281e:	2380      	movs	r3, #128	@ 0x80
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e024      	b.n	800286e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d107      	bne.n	800283c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282c:	4b6a      	ldr	r3, [pc, #424]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0c6      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800283c:	4b66      	ldr	r3, [pc, #408]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0be      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800284c:	f000 f8ce 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 8002850:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4a61      	ldr	r2, [pc, #388]	@ (80029dc <HAL_RCC_ClockConfig+0x268>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d909      	bls.n	800286e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800285a:	4b5f      	ldr	r3, [pc, #380]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002862:	4a5d      	ldr	r2, [pc, #372]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002868:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800286e:	4b5a      	ldr	r3, [pc, #360]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4957      	ldr	r1, [pc, #348]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002880:	f7fe fda6 	bl	80013d0 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	e00a      	b.n	800289e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002888:	f7fe fda2 	bl	80013d0 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e095      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	4b4e      	ldr	r3, [pc, #312]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 020c 	and.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1eb      	bne.n	8002888 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d023      	beq.n	8002904 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c8:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a42      	ldr	r2, [pc, #264]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028e0:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028e8:	4a3b      	ldr	r2, [pc, #236]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b39      	ldr	r3, [pc, #228]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4936      	ldr	r1, [pc, #216]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
 8002902:	e008      	b.n	8002916 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b80      	cmp	r3, #128	@ 0x80
 8002908:	d105      	bne.n	8002916 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800290a:	4b33      	ldr	r3, [pc, #204]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4a32      	ldr	r2, [pc, #200]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002910:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002914:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002916:	4b2f      	ldr	r3, [pc, #188]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d21d      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002924:	4b2b      	ldr	r3, [pc, #172]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 020f 	bic.w	r2, r3, #15
 800292c:	4929      	ldr	r1, [pc, #164]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002934:	f7fe fd4c 	bl	80013d0 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7fe fd48 	bl	80013d0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e03b      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d1ed      	bne.n	800293c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4917      	ldr	r1, [pc, #92]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298a:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490f      	ldr	r1, [pc, #60]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800299e:	f000 f825 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	490c      	ldr	r1, [pc, #48]	@ (80029e0 <HAL_RCC_ClockConfig+0x26c>)
 80029b0:	5ccb      	ldrb	r3, [r1, r3]
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	4a0a      	ldr	r2, [pc, #40]	@ (80029e4 <HAL_RCC_ClockConfig+0x270>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <HAL_RCC_ClockConfig+0x274>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fcb8 	bl	8001338 <HAL_InitTick>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40021000 	.word	0x40021000
 80029dc:	04c4b400 	.word	0x04c4b400
 80029e0:	08006098 	.word	0x08006098
 80029e4:	20000200 	.word	0x20000200
 80029e8:	20000204 	.word	0x20000204

080029ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029f2:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d102      	bne.n	8002a04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029fe:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	e047      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a04:	4b27      	ldr	r3, [pc, #156]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d102      	bne.n	8002a16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a10:	4b26      	ldr	r3, [pc, #152]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	e03e      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a16:	4b23      	ldr	r3, [pc, #140]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d136      	bne.n	8002a90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a22:	4b20      	ldr	r3, [pc, #128]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	3301      	adds	r3, #1
 8002a38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a40:	4a1a      	ldr	r2, [pc, #104]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	4a16      	ldr	r2, [pc, #88]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a4a:	68d2      	ldr	r2, [r2, #12]
 8002a4c:	0a12      	lsrs	r2, r2, #8
 8002a4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	617b      	str	r3, [r7, #20]
      break;
 8002a58:	e00c      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a5a:	4a13      	ldr	r2, [pc, #76]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a62:	4a10      	ldr	r2, [pc, #64]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a64:	68d2      	ldr	r2, [r2, #12]
 8002a66:	0a12      	lsrs	r2, r2, #8
 8002a68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	617b      	str	r3, [r7, #20]
      break;
 8002a72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	0e5b      	lsrs	r3, r3, #25
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	e001      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a94:	693b      	ldr	r3, [r7, #16]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	016e3600 	.word	0x016e3600

08002ab0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	@ (8002ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000200 	.word	0x20000200

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002acc:	f7ff fff0 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4904      	ldr	r1, [pc, #16]	@ (8002af0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	080060a8 	.word	0x080060a8

08002af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002af8:	f7ff ffda 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	0adb      	lsrs	r3, r3, #11
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	4904      	ldr	r1, [pc, #16]	@ (8002b1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	080060a8 	.word	0x080060a8

08002b20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d10c      	bne.n	8002b5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b44:	4a17      	ldr	r2, [pc, #92]	@ (8002ba4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b4e:	68d2      	ldr	r2, [r2, #12]
 8002b50:	0a12      	lsrs	r2, r2, #8
 8002b52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	617b      	str	r3, [r7, #20]
    break;
 8002b5c:	e00c      	b.n	8002b78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ba8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b68:	68d2      	ldr	r2, [r2, #12]
 8002b6a:	0a12      	lsrs	r2, r2, #8
 8002b6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
    break;
 8002b76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b78:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0e5b      	lsrs	r3, r3, #25
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	3301      	adds	r3, #1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b92:	687b      	ldr	r3, [r7, #4]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	016e3600 	.word	0x016e3600
 8002ba8:	00f42400 	.word	0x00f42400

08002bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bb8:	2300      	movs	r3, #0
 8002bba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8098 	beq.w	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bce:	4b43      	ldr	r3, [pc, #268]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10d      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	4b40      	ldr	r3, [pc, #256]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bde:	4a3f      	ldr	r2, [pc, #252]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002be6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a39      	ldr	r2, [pc, #228]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c02:	f7fe fbe5 	bl	80013d0 <HAL_GetTick>
 8002c06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c08:	e009      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0a:	f7fe fbe1 	bl	80013d0 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d902      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	74fb      	strb	r3, [r7, #19]
        break;
 8002c1c:	e005      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c1e:	4b30      	ldr	r3, [pc, #192]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0ef      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d159      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c30:	4b2a      	ldr	r3, [pc, #168]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01e      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d019      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c4c:	4b23      	ldr	r3, [pc, #140]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c58:	4b20      	ldr	r3, [pc, #128]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c68:	4b1c      	ldr	r3, [pc, #112]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c78:	4a18      	ldr	r2, [pc, #96]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fba1 	bl	80013d0 <HAL_GetTick>
 8002c8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c90:	e00b      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe fb9d 	bl	80013d0 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d902      	bls.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ca8:	e006      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002caa:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ec      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cbe:	4b07      	ldr	r3, [pc, #28]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ccc:	4903      	ldr	r1, [pc, #12]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cd6:	7cfb      	ldrb	r3, [r7, #19]
 8002cd8:	74bb      	strb	r3, [r7, #18]
 8002cda:	e005      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ce8:	7c7b      	ldrb	r3, [r7, #17]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cee:	4ba7      	ldr	r3, [pc, #668]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf2:	4aa6      	ldr	r2, [pc, #664]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d06:	4ba1      	ldr	r3, [pc, #644]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0c:	f023 0203 	bic.w	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	499d      	ldr	r1, [pc, #628]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d28:	4b98      	ldr	r3, [pc, #608]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2e:	f023 020c 	bic.w	r2, r3, #12
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4995      	ldr	r1, [pc, #596]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d4a:	4b90      	ldr	r3, [pc, #576]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	498c      	ldr	r1, [pc, #560]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d6c:	4b87      	ldr	r3, [pc, #540]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	4984      	ldr	r1, [pc, #528]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	497b      	ldr	r1, [pc, #492]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002db0:	4b76      	ldr	r3, [pc, #472]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	4973      	ldr	r1, [pc, #460]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dd2:	4b6e      	ldr	r3, [pc, #440]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	496a      	ldr	r1, [pc, #424]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002df4:	4b65      	ldr	r3, [pc, #404]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	4962      	ldr	r1, [pc, #392]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e16:	4b5d      	ldr	r3, [pc, #372]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	4959      	ldr	r1, [pc, #356]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e38:	4b54      	ldr	r3, [pc, #336]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e3e:	f023 0203 	bic.w	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	4951      	ldr	r1, [pc, #324]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e68:	4948      	ldr	r1, [pc, #288]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e7c:	4b43      	ldr	r3, [pc, #268]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	4940      	ldr	r1, [pc, #256]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a3a      	ldr	r2, [pc, #232]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ea6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eb4:	4b35      	ldr	r3, [pc, #212]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec2:	4932      	ldr	r1, [pc, #200]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ede:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d015      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002eec:	4b27      	ldr	r3, [pc, #156]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efa:	4924      	ldr	r1, [pc, #144]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a1e      	ldr	r2, [pc, #120]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d015      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f24:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f32:	4916      	ldr	r1, [pc, #88]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f42:	d105      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f44:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a10      	ldr	r2, [pc, #64]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d019      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	4908      	ldr	r1, [pc, #32]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f7a:	d109      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f7c:	4b03      	ldr	r3, [pc, #12]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4a02      	ldr	r2, [pc, #8]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f86:	60d3      	str	r3, [r2, #12]
 8002f88:	e002      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d015      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f9c:	4b29      	ldr	r3, [pc, #164]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	4926      	ldr	r1, [pc, #152]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fbc:	4b21      	ldr	r3, [pc, #132]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a20      	ldr	r2, [pc, #128]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fda:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe2:	4918      	ldr	r1, [pc, #96]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ff2:	d105      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ff4:	4b13      	ldr	r3, [pc, #76]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4a12      	ldr	r2, [pc, #72]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ffe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d015      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800300c:	4b0d      	ldr	r3, [pc, #52]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800300e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003012:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301a:	490a      	ldr	r1, [pc, #40]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800302a:	d105      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a04      	ldr	r2, [pc, #16]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003036:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003038:	7cbb      	ldrb	r3, [r7, #18]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000

08003048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e054      	b.n	8003104 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d111      	bne.n	800308a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 ff7c 	bl	8003f6c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d102      	bne.n	8003082 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a23      	ldr	r2, [pc, #140]	@ (800310c <HAL_TIM_Base_Init+0xc4>)
 8003080:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3304      	adds	r3, #4
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f000 fdef 	bl	8003c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	08000fc1 	.word	0x08000fc1

08003110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d001      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e054      	b.n	80031d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a26      	ldr	r2, [pc, #152]	@ (80031e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d022      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003152:	d01d      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a22      	ldr	r2, [pc, #136]	@ (80031e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d018      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a21      	ldr	r2, [pc, #132]	@ (80031e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1f      	ldr	r2, [pc, #124]	@ (80031ec <HAL_TIM_Base_Start_IT+0xdc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00e      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1e      	ldr	r2, [pc, #120]	@ (80031f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d009      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1c      	ldr	r2, [pc, #112]	@ (80031f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1b      	ldr	r2, [pc, #108]	@ (80031f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d115      	bne.n	80031bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	4b19      	ldr	r3, [pc, #100]	@ (80031fc <HAL_TIM_Base_Start_IT+0xec>)
 8003198:	4013      	ands	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d015      	beq.n	80031ce <HAL_TIM_Base_Start_IT+0xbe>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a8:	d011      	beq.n	80031ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ba:	e008      	b.n	80031ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e000      	b.n	80031d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40000400 	.word	0x40000400
 80031e8:	40000800 	.word	0x40000800
 80031ec:	40000c00 	.word	0x40000c00
 80031f0:	40013400 	.word	0x40013400
 80031f4:	40014000 	.word	0x40014000
 80031f8:	40015000 	.word	0x40015000
 80031fc:	00010007 	.word	0x00010007

08003200 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e04c      	b.n	80032ae <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d111      	bne.n	8003244 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fe9f 	bl	8003f6c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1f      	ldr	r2, [pc, #124]	@ (80032b8 <HAL_TIM_OnePulse_Init+0xb8>)
 800323a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3304      	adds	r3, #4
 8003254:	4619      	mov	r1, r3
 8003256:	4610      	mov	r0, r2
 8003258:	f000 fd12 	bl	8003c80 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0208 	bic.w	r2, r2, #8
 800326a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	080032bd 	.word	0x080032bd

080032bc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032f8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d108      	bne.n	8003312 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003300:	7bbb      	ldrb	r3, [r7, #14]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d105      	bne.n	8003312 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003306:	7b7b      	ldrb	r3, [r7, #13]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d102      	bne.n	8003312 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800330c:	7b3b      	ldrb	r3, [r7, #12]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d001      	beq.n	8003316 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e059      	b.n	80033ca <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0202 	orr.w	r2, r2, #2
 8003344:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0204 	orr.w	r2, r2, #4
 8003354:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2201      	movs	r2, #1
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fdde 	bl	8003f20 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2201      	movs	r2, #1
 800336a:	2104      	movs	r1, #4
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fdd7 	bl	8003f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a17      	ldr	r2, [pc, #92]	@ (80033d4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d018      	beq.n	80033ae <HAL_TIM_OnePulse_Start_IT+0xde>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a15      	ldr	r2, [pc, #84]	@ (80033d8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_TIM_OnePulse_Start_IT+0xde>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a14      	ldr	r2, [pc, #80]	@ (80033dc <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00e      	beq.n	80033ae <HAL_TIM_OnePulse_Start_IT+0xde>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a12      	ldr	r2, [pc, #72]	@ (80033e0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_TIM_OnePulse_Start_IT+0xde>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a11      	ldr	r2, [pc, #68]	@ (80033e4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_TIM_OnePulse_Start_IT+0xde>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0f      	ldr	r2, [pc, #60]	@ (80033e8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80033b2:	2300      	movs	r3, #0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40013400 	.word	0x40013400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800
 80033e8:	40015000 	.word	0x40015000

080033ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d026      	beq.n	800345c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d021      	beq.n	800345c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0202 	mvn.w	r2, #2
 8003420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
 8003440:	e009      	b.n	8003456 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d026      	beq.n	80034b4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d021      	beq.n	80034b4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0204 	mvn.w	r2, #4
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e009      	b.n	80034ae <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d026      	beq.n	800350c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d021      	beq.n	800350c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0208 	mvn.w	r2, #8
 80034d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2204      	movs	r2, #4
 80034d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
 80034f0:	e009      	b.n	8003506 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d026      	beq.n	8003564 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d021      	beq.n	8003564 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0210 	mvn.w	r2, #16
 8003528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2208      	movs	r2, #8
 800352e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
 8003548:	e009      	b.n	800355e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00e      	beq.n	800358c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0201 	mvn.w	r2, #1
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00e      	beq.n	80035be <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80035b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00e      	beq.n	80035e6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00e      	beq.n	800360e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00e      	beq.n	8003636 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0220 	mvn.w	r2, #32
 800362a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00e      	beq.n	800365e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00e      	beq.n	8003686 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00e      	beq.n	80036ae <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80036a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80036ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_TIM_ConfigClockSource+0x1c>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e0f6      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x20a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800371a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800371e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a6f      	ldr	r2, [pc, #444]	@ (80038f4 <HAL_TIM_ConfigClockSource+0x214>)
 8003736:	4293      	cmp	r3, r2
 8003738:	f000 80c1 	beq.w	80038be <HAL_TIM_ConfigClockSource+0x1de>
 800373c:	4a6d      	ldr	r2, [pc, #436]	@ (80038f4 <HAL_TIM_ConfigClockSource+0x214>)
 800373e:	4293      	cmp	r3, r2
 8003740:	f200 80c6 	bhi.w	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003744:	4a6c      	ldr	r2, [pc, #432]	@ (80038f8 <HAL_TIM_ConfigClockSource+0x218>)
 8003746:	4293      	cmp	r3, r2
 8003748:	f000 80b9 	beq.w	80038be <HAL_TIM_ConfigClockSource+0x1de>
 800374c:	4a6a      	ldr	r2, [pc, #424]	@ (80038f8 <HAL_TIM_ConfigClockSource+0x218>)
 800374e:	4293      	cmp	r3, r2
 8003750:	f200 80be 	bhi.w	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003754:	4a69      	ldr	r2, [pc, #420]	@ (80038fc <HAL_TIM_ConfigClockSource+0x21c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	f000 80b1 	beq.w	80038be <HAL_TIM_ConfigClockSource+0x1de>
 800375c:	4a67      	ldr	r2, [pc, #412]	@ (80038fc <HAL_TIM_ConfigClockSource+0x21c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	f200 80b6 	bhi.w	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003764:	4a66      	ldr	r2, [pc, #408]	@ (8003900 <HAL_TIM_ConfigClockSource+0x220>)
 8003766:	4293      	cmp	r3, r2
 8003768:	f000 80a9 	beq.w	80038be <HAL_TIM_ConfigClockSource+0x1de>
 800376c:	4a64      	ldr	r2, [pc, #400]	@ (8003900 <HAL_TIM_ConfigClockSource+0x220>)
 800376e:	4293      	cmp	r3, r2
 8003770:	f200 80ae 	bhi.w	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003774:	4a63      	ldr	r2, [pc, #396]	@ (8003904 <HAL_TIM_ConfigClockSource+0x224>)
 8003776:	4293      	cmp	r3, r2
 8003778:	f000 80a1 	beq.w	80038be <HAL_TIM_ConfigClockSource+0x1de>
 800377c:	4a61      	ldr	r2, [pc, #388]	@ (8003904 <HAL_TIM_ConfigClockSource+0x224>)
 800377e:	4293      	cmp	r3, r2
 8003780:	f200 80a6 	bhi.w	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003784:	4a60      	ldr	r2, [pc, #384]	@ (8003908 <HAL_TIM_ConfigClockSource+0x228>)
 8003786:	4293      	cmp	r3, r2
 8003788:	f000 8099 	beq.w	80038be <HAL_TIM_ConfigClockSource+0x1de>
 800378c:	4a5e      	ldr	r2, [pc, #376]	@ (8003908 <HAL_TIM_ConfigClockSource+0x228>)
 800378e:	4293      	cmp	r3, r2
 8003790:	f200 809e 	bhi.w	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003794:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003798:	f000 8091 	beq.w	80038be <HAL_TIM_ConfigClockSource+0x1de>
 800379c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80037a0:	f200 8096 	bhi.w	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037a8:	f000 8089 	beq.w	80038be <HAL_TIM_ConfigClockSource+0x1de>
 80037ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037b0:	f200 808e 	bhi.w	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b8:	d03e      	beq.n	8003838 <HAL_TIM_ConfigClockSource+0x158>
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037be:	f200 8087 	bhi.w	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c6:	f000 8086 	beq.w	80038d6 <HAL_TIM_ConfigClockSource+0x1f6>
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ce:	d87f      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037d0:	2b70      	cmp	r3, #112	@ 0x70
 80037d2:	d01a      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x12a>
 80037d4:	2b70      	cmp	r3, #112	@ 0x70
 80037d6:	d87b      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037d8:	2b60      	cmp	r3, #96	@ 0x60
 80037da:	d050      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x19e>
 80037dc:	2b60      	cmp	r3, #96	@ 0x60
 80037de:	d877      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037e0:	2b50      	cmp	r3, #80	@ 0x50
 80037e2:	d03c      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x17e>
 80037e4:	2b50      	cmp	r3, #80	@ 0x50
 80037e6:	d873      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037e8:	2b40      	cmp	r3, #64	@ 0x40
 80037ea:	d058      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x1be>
 80037ec:	2b40      	cmp	r3, #64	@ 0x40
 80037ee:	d86f      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037f0:	2b30      	cmp	r3, #48	@ 0x30
 80037f2:	d064      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x1de>
 80037f4:	2b30      	cmp	r3, #48	@ 0x30
 80037f6:	d86b      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d060      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x1de>
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d867      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d05c      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x1de>
 8003804:	2b10      	cmp	r3, #16
 8003806:	d05a      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x1de>
 8003808:	e062      	b.n	80038d0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800381a:	f000 fb61 	bl	8003ee0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800382c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	609a      	str	r2, [r3, #8]
      break;
 8003836:	e04f      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003848:	f000 fb4a 	bl	8003ee0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800385a:	609a      	str	r2, [r3, #8]
      break;
 800385c:	e03c      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800386a:	461a      	mov	r2, r3
 800386c:	f000 fabc 	bl	8003de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2150      	movs	r1, #80	@ 0x50
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fb15 	bl	8003ea6 <TIM_ITRx_SetConfig>
      break;
 800387c:	e02c      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800388a:	461a      	mov	r2, r3
 800388c:	f000 fadb 	bl	8003e46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2160      	movs	r1, #96	@ 0x60
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fb05 	bl	8003ea6 <TIM_ITRx_SetConfig>
      break;
 800389c:	e01c      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038aa:	461a      	mov	r2, r3
 80038ac:	f000 fa9c 	bl	8003de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2140      	movs	r1, #64	@ 0x40
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 faf5 	bl	8003ea6 <TIM_ITRx_SetConfig>
      break;
 80038bc:	e00c      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f000 faec 	bl	8003ea6 <TIM_ITRx_SetConfig>
      break;
 80038ce:	e003      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      break;
 80038d4:	e000      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80038d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	00100070 	.word	0x00100070
 80038f8:	00100060 	.word	0x00100060
 80038fc:	00100050 	.word	0x00100050
 8003900:	00100040 	.word	0x00100040
 8003904:	00100030 	.word	0x00100030
 8003908:	00100020 	.word	0x00100020

0800390c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	460b      	mov	r3, r1
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e14a      	b.n	8003c72 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f040 80dd 	bne.w	8003ba4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80039ea:	7afb      	ldrb	r3, [r7, #11]
 80039ec:	2b1f      	cmp	r3, #31
 80039ee:	f200 80d6 	bhi.w	8003b9e <HAL_TIM_RegisterCallback+0x1de>
 80039f2:	a201      	add	r2, pc, #4	@ (adr r2, 80039f8 <HAL_TIM_RegisterCallback+0x38>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a79 	.word	0x08003a79
 80039fc:	08003a81 	.word	0x08003a81
 8003a00:	08003a89 	.word	0x08003a89
 8003a04:	08003a91 	.word	0x08003a91
 8003a08:	08003a99 	.word	0x08003a99
 8003a0c:	08003aa1 	.word	0x08003aa1
 8003a10:	08003aa9 	.word	0x08003aa9
 8003a14:	08003ab1 	.word	0x08003ab1
 8003a18:	08003ab9 	.word	0x08003ab9
 8003a1c:	08003ac1 	.word	0x08003ac1
 8003a20:	08003ac9 	.word	0x08003ac9
 8003a24:	08003ad1 	.word	0x08003ad1
 8003a28:	08003ad9 	.word	0x08003ad9
 8003a2c:	08003ae1 	.word	0x08003ae1
 8003a30:	08003aeb 	.word	0x08003aeb
 8003a34:	08003af5 	.word	0x08003af5
 8003a38:	08003aff 	.word	0x08003aff
 8003a3c:	08003b09 	.word	0x08003b09
 8003a40:	08003b13 	.word	0x08003b13
 8003a44:	08003b1d 	.word	0x08003b1d
 8003a48:	08003b27 	.word	0x08003b27
 8003a4c:	08003b31 	.word	0x08003b31
 8003a50:	08003b3b 	.word	0x08003b3b
 8003a54:	08003b45 	.word	0x08003b45
 8003a58:	08003b4f 	.word	0x08003b4f
 8003a5c:	08003b59 	.word	0x08003b59
 8003a60:	08003b63 	.word	0x08003b63
 8003a64:	08003b6d 	.word	0x08003b6d
 8003a68:	08003b77 	.word	0x08003b77
 8003a6c:	08003b81 	.word	0x08003b81
 8003a70:	08003b8b 	.word	0x08003b8b
 8003a74:	08003b95 	.word	0x08003b95
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003a7e:	e0f7      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003a86:	e0f3      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003a8e:	e0ef      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003a96:	e0eb      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003a9e:	e0e7      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003aa6:	e0e3      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003aae:	e0df      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003ab6:	e0db      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003abe:	e0d7      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003ac6:	e0d3      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003ace:	e0cf      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003ad6:	e0cb      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003ade:	e0c7      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003ae8:	e0c2      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8003af2:	e0bd      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8003afc:	e0b8      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8003b06:	e0b3      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8003b10:	e0ae      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8003b1a:	e0a9      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8003b24:	e0a4      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8003b2e:	e09f      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8003b38:	e09a      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8003b42:	e095      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8003b4c:	e090      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8003b56:	e08b      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8003b60:	e086      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8003b6a:	e081      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8003b74:	e07c      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8003b7e:	e077      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8003b88:	e072      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8003b92:	e06d      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8003b9c:	e068      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
        break;
 8003ba2:	e065      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d15d      	bne.n	8003c6c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8003bb0:	7afb      	ldrb	r3, [r7, #11]
 8003bb2:	2b0d      	cmp	r3, #13
 8003bb4:	d857      	bhi.n	8003c66 <HAL_TIM_RegisterCallback+0x2a6>
 8003bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bbc <HAL_TIM_RegisterCallback+0x1fc>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bf5 	.word	0x08003bf5
 8003bc0:	08003bfd 	.word	0x08003bfd
 8003bc4:	08003c05 	.word	0x08003c05
 8003bc8:	08003c0d 	.word	0x08003c0d
 8003bcc:	08003c15 	.word	0x08003c15
 8003bd0:	08003c1d 	.word	0x08003c1d
 8003bd4:	08003c25 	.word	0x08003c25
 8003bd8:	08003c2d 	.word	0x08003c2d
 8003bdc:	08003c35 	.word	0x08003c35
 8003be0:	08003c3d 	.word	0x08003c3d
 8003be4:	08003c45 	.word	0x08003c45
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003c55 	.word	0x08003c55
 8003bf0:	08003c5d 	.word	0x08003c5d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003bfa:	e039      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003c02:	e035      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003c0a:	e031      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003c12:	e02d      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003c1a:	e029      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003c22:	e025      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003c2a:	e021      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003c32:	e01d      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003c3a:	e019      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003c42:	e015      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003c4a:	e011      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003c52:	e00d      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003c5a:	e009      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003c64:	e004      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
        break;
 8003c6a:	e001      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop

08003c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a4c      	ldr	r2, [pc, #304]	@ (8003dc4 <TIM_Base_SetConfig+0x144>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d017      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9e:	d013      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a49      	ldr	r2, [pc, #292]	@ (8003dc8 <TIM_Base_SetConfig+0x148>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00f      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a48      	ldr	r2, [pc, #288]	@ (8003dcc <TIM_Base_SetConfig+0x14c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a47      	ldr	r2, [pc, #284]	@ (8003dd0 <TIM_Base_SetConfig+0x150>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a46      	ldr	r2, [pc, #280]	@ (8003dd4 <TIM_Base_SetConfig+0x154>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a45      	ldr	r2, [pc, #276]	@ (8003dd8 <TIM_Base_SetConfig+0x158>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d108      	bne.n	8003cda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a39      	ldr	r2, [pc, #228]	@ (8003dc4 <TIM_Base_SetConfig+0x144>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d023      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce8:	d01f      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a36      	ldr	r2, [pc, #216]	@ (8003dc8 <TIM_Base_SetConfig+0x148>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d01b      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a35      	ldr	r2, [pc, #212]	@ (8003dcc <TIM_Base_SetConfig+0x14c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d017      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a34      	ldr	r2, [pc, #208]	@ (8003dd0 <TIM_Base_SetConfig+0x150>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a33      	ldr	r2, [pc, #204]	@ (8003dd4 <TIM_Base_SetConfig+0x154>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00f      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a33      	ldr	r2, [pc, #204]	@ (8003ddc <TIM_Base_SetConfig+0x15c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00b      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a32      	ldr	r2, [pc, #200]	@ (8003de0 <TIM_Base_SetConfig+0x160>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a31      	ldr	r2, [pc, #196]	@ (8003de4 <TIM_Base_SetConfig+0x164>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d003      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd8 <TIM_Base_SetConfig+0x158>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d108      	bne.n	8003d3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a18      	ldr	r2, [pc, #96]	@ (8003dc4 <TIM_Base_SetConfig+0x144>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd4 <TIM_Base_SetConfig+0x154>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00f      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a1a      	ldr	r2, [pc, #104]	@ (8003ddc <TIM_Base_SetConfig+0x15c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a19      	ldr	r2, [pc, #100]	@ (8003de0 <TIM_Base_SetConfig+0x160>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a18      	ldr	r2, [pc, #96]	@ (8003de4 <TIM_Base_SetConfig+0x164>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a13      	ldr	r2, [pc, #76]	@ (8003dd8 <TIM_Base_SetConfig+0x158>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d103      	bne.n	8003d98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d105      	bne.n	8003db6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f023 0201 	bic.w	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	611a      	str	r2, [r3, #16]
  }
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40013400 	.word	0x40013400
 8003dd8:	40015000 	.word	0x40015000
 8003ddc:	40014000 	.word	0x40014000
 8003de0:	40014400 	.word	0x40014400
 8003de4:	40014800 	.word	0x40014800

08003de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0201 	bic.w	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f023 030a 	bic.w	r3, r3, #10
 8003e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b087      	sub	sp, #28
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f023 0210 	bic.w	r2, r3, #16
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	031b      	lsls	r3, r3, #12
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b085      	sub	sp, #20
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f043 0307 	orr.w	r3, r3, #7
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	021a      	lsls	r2, r3, #8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	609a      	str	r2, [r3, #8]
}
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	2201      	movs	r2, #1
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1a      	ldr	r2, [r3, #32]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	401a      	ands	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1a      	ldr	r2, [r3, #32]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	fa01 f303 	lsl.w	r3, r1, r3
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a26      	ldr	r2, [pc, #152]	@ (8004010 <TIM_ResetCallback+0xa4>)
 8003f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a25      	ldr	r2, [pc, #148]	@ (8004014 <TIM_ResetCallback+0xa8>)
 8003f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a24      	ldr	r2, [pc, #144]	@ (8004018 <TIM_ResetCallback+0xac>)
 8003f88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a23      	ldr	r2, [pc, #140]	@ (800401c <TIM_ResetCallback+0xb0>)
 8003f90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a22      	ldr	r2, [pc, #136]	@ (8004020 <TIM_ResetCallback+0xb4>)
 8003f98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a21      	ldr	r2, [pc, #132]	@ (8004024 <TIM_ResetCallback+0xb8>)
 8003fa0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a20      	ldr	r2, [pc, #128]	@ (8004028 <TIM_ResetCallback+0xbc>)
 8003fa8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a1f      	ldr	r2, [pc, #124]	@ (800402c <TIM_ResetCallback+0xc0>)
 8003fb0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004030 <TIM_ResetCallback+0xc4>)
 8003fb8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8004034 <TIM_ResetCallback+0xc8>)
 8003fc0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004038 <TIM_ResetCallback+0xcc>)
 8003fc8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a1b      	ldr	r2, [pc, #108]	@ (800403c <TIM_ResetCallback+0xd0>)
 8003fd0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004040 <TIM_ResetCallback+0xd4>)
 8003fd8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a19      	ldr	r2, [pc, #100]	@ (8004044 <TIM_ResetCallback+0xd8>)
 8003fe0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a18      	ldr	r2, [pc, #96]	@ (8004048 <TIM_ResetCallback+0xdc>)
 8003fe8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a17      	ldr	r2, [pc, #92]	@ (800404c <TIM_ResetCallback+0xe0>)
 8003ff0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a16      	ldr	r2, [pc, #88]	@ (8004050 <TIM_ResetCallback+0xe4>)
 8003ff8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a15      	ldr	r2, [pc, #84]	@ (8004054 <TIM_ResetCallback+0xe8>)
 8004000:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	08000f41 	.word	0x08000f41
 8004014:	0800390d 	.word	0x0800390d
 8004018:	08003985 	.word	0x08003985
 800401c:	08003999 	.word	0x08003999
 8004020:	08003935 	.word	0x08003935
 8004024:	08003949 	.word	0x08003949
 8004028:	08003921 	.word	0x08003921
 800402c:	0800395d 	.word	0x0800395d
 8004030:	08003971 	.word	0x08003971
 8004034:	080039ad 	.word	0x080039ad
 8004038:	08004185 	.word	0x08004185
 800403c:	08004199 	.word	0x08004199
 8004040:	080041ad 	.word	0x080041ad
 8004044:	080041c1 	.word	0x080041c1
 8004048:	080041d5 	.word	0x080041d5
 800404c:	080041e9 	.word	0x080041e9
 8004050:	080041fd 	.word	0x080041fd
 8004054:	08004211 	.word	0x08004211

08004058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800406c:	2302      	movs	r3, #2
 800406e:	e074      	b.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a34      	ldr	r2, [pc, #208]	@ (8004168 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d009      	beq.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a33      	ldr	r2, [pc, #204]	@ (800416c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a31      	ldr	r2, [pc, #196]	@ (8004170 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d108      	bne.n	80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80040b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80040c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a21      	ldr	r2, [pc, #132]	@ (8004168 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d022      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f0:	d01d      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004174 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d018      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1d      	ldr	r2, [pc, #116]	@ (8004178 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1c      	ldr	r2, [pc, #112]	@ (800417c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00e      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a15      	ldr	r2, [pc, #84]	@ (800416c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a18      	ldr	r2, [pc, #96]	@ (8004180 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a11      	ldr	r2, [pc, #68]	@ (8004170 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10c      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4313      	orrs	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40013400 	.word	0x40013400
 8004170:	40015000 	.word	0x40015000
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800
 800417c:	40000c00 	.word	0x40000c00
 8004180:	40014000 	.word	0x40014000

08004184 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e050      	b.n	80042d8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423c:	2b00      	cmp	r3, #0
 800423e:	d114      	bne.n	800426a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fdc5 	bl	8004dd8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d103      	bne.n	8004260 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a21      	ldr	r2, [pc, #132]	@ (80042e0 <HAL_UART_Init+0xbc>)
 800425c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2224      	movs	r2, #36	@ 0x24
 800426e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f001 f8f2 	bl	8005474 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fdf3 	bl	8004e7c <UART_SetConfig>
 8004296:	4603      	mov	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e01b      	b.n	80042d8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f001 f971 	bl	80055b8 <UART_CheckIdleState>
 80042d6:	4603      	mov	r3, r0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	08001045 	.word	0x08001045

080042e4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	460b      	mov	r3, r1
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004302:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e09c      	b.n	800444a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004316:	2b20      	cmp	r3, #32
 8004318:	d16c      	bne.n	80043f4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800431a:	7afb      	ldrb	r3, [r7, #11]
 800431c:	2b0c      	cmp	r3, #12
 800431e:	d85e      	bhi.n	80043de <HAL_UART_RegisterCallback+0xfa>
 8004320:	a201      	add	r2, pc, #4	@ (adr r2, 8004328 <HAL_UART_RegisterCallback+0x44>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	0800435d 	.word	0x0800435d
 800432c:	08004367 	.word	0x08004367
 8004330:	08004371 	.word	0x08004371
 8004334:	0800437b 	.word	0x0800437b
 8004338:	08004385 	.word	0x08004385
 800433c:	0800438f 	.word	0x0800438f
 8004340:	08004399 	.word	0x08004399
 8004344:	080043a3 	.word	0x080043a3
 8004348:	080043ad 	.word	0x080043ad
 800434c:	080043b7 	.word	0x080043b7
 8004350:	080043c1 	.word	0x080043c1
 8004354:	080043cb 	.word	0x080043cb
 8004358:	080043d5 	.word	0x080043d5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8004364:	e070      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800436e:	e06b      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8004378:	e066      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8004382:	e061      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800438c:	e05c      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8004396:	e057      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80043a0:	e052      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80043aa:	e04d      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80043b4:	e048      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80043be:	e043      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80043c8:	e03e      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80043d2:	e039      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80043dc:	e034      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	75fb      	strb	r3, [r7, #23]
        break;
 80043f2:	e029      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11a      	bne.n	8004434 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80043fe:	7afb      	ldrb	r3, [r7, #11]
 8004400:	2b0b      	cmp	r3, #11
 8004402:	d002      	beq.n	800440a <HAL_UART_RegisterCallback+0x126>
 8004404:	2b0c      	cmp	r3, #12
 8004406:	d005      	beq.n	8004414 <HAL_UART_RegisterCallback+0x130>
 8004408:	e009      	b.n	800441e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8004412:	e019      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800441c:	e014      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004424:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	75fb      	strb	r3, [r7, #23]
        break;
 8004432:	e009      	b.n	8004448 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004448:	7dfb      	ldrb	r3, [r7, #23]
}
 800444a:	4618      	mov	r0, r3
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop

08004458 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	@ 0x28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446c:	2b20      	cmp	r3, #32
 800446e:	d167      	bne.n	8004540 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_UART_Transmit_DMA+0x24>
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e060      	b.n	8004542 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	88fa      	ldrh	r2, [r7, #6]
 8004492:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2221      	movs	r2, #33	@ 0x21
 80044a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d028      	beq.n	8004500 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b2:	4a26      	ldr	r2, [pc, #152]	@ (800454c <HAL_UART_Transmit_DMA+0xf4>)
 80044b4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ba:	4a25      	ldr	r2, [pc, #148]	@ (8004550 <HAL_UART_Transmit_DMA+0xf8>)
 80044bc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044c2:	4a24      	ldr	r2, [pc, #144]	@ (8004554 <HAL_UART_Transmit_DMA+0xfc>)
 80044c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ca:	2200      	movs	r2, #0
 80044cc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d6:	4619      	mov	r1, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3328      	adds	r3, #40	@ 0x28
 80044de:	461a      	mov	r2, r3
 80044e0:	88fb      	ldrh	r3, [r7, #6]
 80044e2:	f7fd f939 	bl	8001758 <HAL_DMA_Start_IT>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2210      	movs	r2, #16
 80044f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e020      	b.n	8004542 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2240      	movs	r2, #64	@ 0x40
 8004506:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3308      	adds	r3, #8
 800450e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	613b      	str	r3, [r7, #16]
   return(result);
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3308      	adds	r3, #8
 8004526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004528:	623a      	str	r2, [r7, #32]
 800452a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	69f9      	ldr	r1, [r7, #28]
 800452e:	6a3a      	ldr	r2, [r7, #32]
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	61bb      	str	r3, [r7, #24]
   return(result);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e000      	b.n	8004542 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	3728      	adds	r7, #40	@ 0x28
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	08005a83 	.word	0x08005a83
 8004550:	08005b21 	.word	0x08005b21
 8004554:	08005cbb 	.word	0x08005cbb

08004558 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	@ 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800456c:	2b20      	cmp	r3, #32
 800456e:	d137      	bne.n	80045e0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_UART_Receive_DMA+0x24>
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e030      	b.n	80045e2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a18      	ldr	r2, [pc, #96]	@ (80045ec <HAL_UART_Receive_DMA+0x94>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d01f      	beq.n	80045d0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d018      	beq.n	80045d0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	613b      	str	r3, [r7, #16]
   return(result);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	623b      	str	r3, [r7, #32]
 80045be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	69f9      	ldr	r1, [r7, #28]
 80045c2:	6a3a      	ldr	r2, [r7, #32]
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e6      	bne.n	800459e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	461a      	mov	r2, r3
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f001 f906 	bl	80057e8 <UART_Start_Receive_DMA>
 80045dc:	4603      	mov	r3, r0
 80045de:	e000      	b.n	80045e2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3728      	adds	r7, #40	@ 0x28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40008000 	.word	0x40008000

080045f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b0ba      	sub	sp, #232	@ 0xe8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004616:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800461a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800461e:	4013      	ands	r3, r2
 8004620:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d11b      	bne.n	8004664 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800462c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d015      	beq.n	8004664 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d009      	beq.n	8004664 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 82f3 	beq.w	8004c40 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4798      	blx	r3
      }
      return;
 8004662:	e2ed      	b.n	8004c40 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8129 	beq.w	80048c0 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800466e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004672:	4b90      	ldr	r3, [pc, #576]	@ (80048b4 <HAL_UART_IRQHandler+0x2c4>)
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800467a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800467e:	4b8e      	ldr	r3, [pc, #568]	@ (80048b8 <HAL_UART_IRQHandler+0x2c8>)
 8004680:	4013      	ands	r3, r2
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 811c 	beq.w	80048c0 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d011      	beq.n	80046b8 <HAL_UART_IRQHandler+0xc8>
 8004694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00b      	beq.n	80046b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2201      	movs	r2, #1
 80046a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ae:	f043 0201 	orr.w	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d011      	beq.n	80046e8 <HAL_UART_IRQHandler+0xf8>
 80046c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00b      	beq.n	80046e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2202      	movs	r2, #2
 80046d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046de:	f043 0204 	orr.w	r2, r3, #4
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d011      	beq.n	8004718 <HAL_UART_IRQHandler+0x128>
 80046f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00b      	beq.n	8004718 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2204      	movs	r2, #4
 8004706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470e:	f043 0202 	orr.w	r2, r3, #2
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d017      	beq.n	8004754 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004730:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004734:	4b5f      	ldr	r3, [pc, #380]	@ (80048b4 <HAL_UART_IRQHandler+0x2c4>)
 8004736:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2208      	movs	r2, #8
 8004742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474a:	f043 0208 	orr.w	r2, r3, #8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800475c:	2b00      	cmp	r3, #0
 800475e:	d012      	beq.n	8004786 <HAL_UART_IRQHandler+0x196>
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004764:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00c      	beq.n	8004786 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8259 	beq.w	8004c44 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d013      	beq.n	80047c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800479e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d105      	bne.n	80047b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047da:	2b40      	cmp	r3, #64	@ 0x40
 80047dc:	d005      	beq.n	80047ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d058      	beq.n	800489c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f001 f8e3 	bl	80059b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fa:	2b40      	cmp	r3, #64	@ 0x40
 80047fc:	d148      	bne.n	8004890 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3308      	adds	r3, #8
 8004804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800481c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3308      	adds	r3, #8
 8004826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800482a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800482e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1d9      	bne.n	80047fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d017      	beq.n	8004884 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800485a:	4a18      	ldr	r2, [pc, #96]	@ (80048bc <HAL_UART_IRQHandler+0x2cc>)
 800485c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004864:	4618      	mov	r0, r3
 8004866:	f7fd f84b 	bl	8001900 <HAL_DMA_Abort_IT>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01f      	beq.n	80048b0 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800487e:	4610      	mov	r0, r2
 8004880:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004882:	e015      	b.n	80048b0 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488e:	e00f      	b.n	80048b0 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489a:	e009      	b.n	80048b0 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80048ae:	e1c9      	b.n	8004c44 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b0:	bf00      	nop
    return;
 80048b2:	e1c7      	b.n	8004c44 <HAL_UART_IRQHandler+0x654>
 80048b4:	10000001 	.word	0x10000001
 80048b8:	04000120 	.word	0x04000120
 80048bc:	08005d3f 	.word	0x08005d3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	f040 8157 	bne.w	8004b78 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8150 	beq.w	8004b78 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8149 	beq.w	8004b78 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2210      	movs	r2, #16
 80048ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f8:	2b40      	cmp	r3, #64	@ 0x40
 80048fa:	f040 80bd 	bne.w	8004a78 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800490c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8199 	beq.w	8004c48 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800491c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004920:	429a      	cmp	r2, r3
 8004922:	f080 8191 	bcs.w	8004c48 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800492c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	f040 8087 	bne.w	8004a52 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004958:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800495c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800496e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004972:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800497a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1da      	bne.n	8004944 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800499e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3308      	adds	r3, #8
 80049ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e1      	bne.n	800498e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3308      	adds	r3, #8
 80049d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3308      	adds	r3, #8
 80049ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e3      	bne.n	80049ca <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a20:	f023 0310 	bic.w	r3, r3, #16
 8004a24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e4      	bne.n	8004a10 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fc fefe 	bl	800184e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8004a6a:	b292      	uxth	r2, r2
 8004a6c:	1a8a      	subs	r2, r1, r2
 8004a6e:	b292      	uxth	r2, r2
 8004a70:	4611      	mov	r1, r2
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a76:	e0e7      	b.n	8004c48 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80d9 	beq.w	8004c4c <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8004a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80d4 	beq.w	8004c4c <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ac6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ac8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004acc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e4      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3308      	adds	r3, #8
 8004ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004af0:	f023 0301 	bic.w	r3, r3, #1
 8004af4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3308      	adds	r3, #8
 8004afe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b02:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e1      	bne.n	8004ada <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0310 	bic.w	r3, r3, #16
 8004b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b4c:	61fb      	str	r3, [r7, #28]
 8004b4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	69b9      	ldr	r1, [r7, #24]
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	617b      	str	r3, [r7, #20]
   return(result);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e4      	bne.n	8004b2a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004b6c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8004b70:	4611      	mov	r1, r2
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b76:	e069      	b.n	8004c4c <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d010      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x5b6>
 8004b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004b98:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ba4:	e055      	b.n	8004c52 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d014      	beq.n	8004bdc <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d105      	bne.n	8004bca <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d03e      	beq.n	8004c50 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	4798      	blx	r3
    }
    return;
 8004bda:	e039      	b.n	8004c50 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d009      	beq.n	8004bfc <HAL_UART_IRQHandler+0x60c>
 8004be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f001 f8ba 	bl	8005d6e <UART_EndTransmit_IT>
    return;
 8004bfa:	e02a      	b.n	8004c52 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00b      	beq.n	8004c20 <HAL_UART_IRQHandler+0x630>
 8004c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c1e:	e018      	b.n	8004c52 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d012      	beq.n	8004c52 <HAL_UART_IRQHandler+0x662>
 8004c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	da0e      	bge.n	8004c52 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c3e:	e008      	b.n	8004c52 <HAL_UART_IRQHandler+0x662>
      return;
 8004c40:	bf00      	nop
 8004c42:	e006      	b.n	8004c52 <HAL_UART_IRQHandler+0x662>
    return;
 8004c44:	bf00      	nop
 8004c46:	e004      	b.n	8004c52 <HAL_UART_IRQHandler+0x662>
      return;
 8004c48:	bf00      	nop
 8004c4a:	e002      	b.n	8004c52 <HAL_UART_IRQHandler+0x662>
      return;
 8004c4c:	bf00      	nop
 8004c4e:	e000      	b.n	8004c52 <HAL_UART_IRQHandler+0x662>
    return;
 8004c50:	bf00      	nop
  }
}
 8004c52:	37e8      	adds	r7, #232	@ 0xe8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a09      	ldr	r2, [pc, #36]	@ (8004d44 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d009      	beq.n	8004d38 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	615a      	str	r2, [r3, #20]
  }
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40008000 	.word	0x40008000

08004d48 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a18      	ldr	r2, [pc, #96]	@ (8004db8 <HAL_UART_EnableReceiverTimeout+0x70>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d027      	beq.n	8004daa <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d120      	bne.n	8004da6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_UART_EnableReceiverTimeout+0x2a>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e01c      	b.n	8004dac <HAL_UART_EnableReceiverTimeout+0x64>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2224      	movs	r2, #36	@ 0x24
 8004d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004d90:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e002      	b.n	8004dac <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8004da6:	2302      	movs	r3, #2
 8004da8:	e000      	b.n	8004dac <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
  }
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40008000 	.word	0x40008000

08004dbc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e4c <UART_InitCallbacksToDefault+0x74>)
 8004de4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a19      	ldr	r2, [pc, #100]	@ (8004e50 <UART_InitCallbacksToDefault+0x78>)
 8004dec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a18      	ldr	r2, [pc, #96]	@ (8004e54 <UART_InitCallbacksToDefault+0x7c>)
 8004df4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a17      	ldr	r2, [pc, #92]	@ (8004e58 <UART_InitCallbacksToDefault+0x80>)
 8004dfc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a16      	ldr	r2, [pc, #88]	@ (8004e5c <UART_InitCallbacksToDefault+0x84>)
 8004e04:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a15      	ldr	r2, [pc, #84]	@ (8004e60 <UART_InitCallbacksToDefault+0x88>)
 8004e0c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a14      	ldr	r2, [pc, #80]	@ (8004e64 <UART_InitCallbacksToDefault+0x8c>)
 8004e14:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a13      	ldr	r2, [pc, #76]	@ (8004e68 <UART_InitCallbacksToDefault+0x90>)
 8004e1c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a12      	ldr	r2, [pc, #72]	@ (8004e6c <UART_InitCallbacksToDefault+0x94>)
 8004e24:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a11      	ldr	r2, [pc, #68]	@ (8004e70 <UART_InitCallbacksToDefault+0x98>)
 8004e2c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a10      	ldr	r2, [pc, #64]	@ (8004e74 <UART_InitCallbacksToDefault+0x9c>)
 8004e34:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8004e78 <UART_InitCallbacksToDefault+0xa0>)
 8004e3c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	08004c6d 	.word	0x08004c6d
 8004e50:	08004c59 	.word	0x08004c59
 8004e54:	08004c95 	.word	0x08004c95
 8004e58:	08004c81 	.word	0x08004c81
 8004e5c:	08004ca9 	.word	0x08004ca9
 8004e60:	08004cbd 	.word	0x08004cbd
 8004e64:	08004cd1 	.word	0x08004cd1
 8004e68:	08004ce5 	.word	0x08004ce5
 8004e6c:	08005dc9 	.word	0x08005dc9
 8004e70:	08005ddd 	.word	0x08005ddd
 8004e74:	08005df1 	.word	0x08005df1
 8004e78:	08004cf9 	.word	0x08004cf9

08004e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e80:	b08c      	sub	sp, #48	@ 0x30
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4baa      	ldr	r3, [pc, #680]	@ (8005154 <UART_SetConfig+0x2d8>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a9f      	ldr	r2, [pc, #636]	@ (8005158 <UART_SetConfig+0x2dc>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004ef2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004efc:	430b      	orrs	r3, r1
 8004efe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f06:	f023 010f 	bic.w	r1, r3, #15
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a90      	ldr	r2, [pc, #576]	@ (800515c <UART_SetConfig+0x2e0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d125      	bne.n	8004f6c <UART_SetConfig+0xf0>
 8004f20:	4b8f      	ldr	r3, [pc, #572]	@ (8005160 <UART_SetConfig+0x2e4>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d81a      	bhi.n	8004f64 <UART_SetConfig+0xe8>
 8004f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f34 <UART_SetConfig+0xb8>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f55 	.word	0x08004f55
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f5d 	.word	0x08004f5d
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f4a:	e116      	b.n	800517a <UART_SetConfig+0x2fe>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f52:	e112      	b.n	800517a <UART_SetConfig+0x2fe>
 8004f54:	2304      	movs	r3, #4
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f5a:	e10e      	b.n	800517a <UART_SetConfig+0x2fe>
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f62:	e10a      	b.n	800517a <UART_SetConfig+0x2fe>
 8004f64:	2310      	movs	r3, #16
 8004f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f6a:	e106      	b.n	800517a <UART_SetConfig+0x2fe>
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a7c      	ldr	r2, [pc, #496]	@ (8005164 <UART_SetConfig+0x2e8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d138      	bne.n	8004fe8 <UART_SetConfig+0x16c>
 8004f76:	4b7a      	ldr	r3, [pc, #488]	@ (8005160 <UART_SetConfig+0x2e4>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7c:	f003 030c 	and.w	r3, r3, #12
 8004f80:	2b0c      	cmp	r3, #12
 8004f82:	d82d      	bhi.n	8004fe0 <UART_SetConfig+0x164>
 8004f84:	a201      	add	r2, pc, #4	@ (adr r2, 8004f8c <UART_SetConfig+0x110>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004fc1 	.word	0x08004fc1
 8004f90:	08004fe1 	.word	0x08004fe1
 8004f94:	08004fe1 	.word	0x08004fe1
 8004f98:	08004fe1 	.word	0x08004fe1
 8004f9c:	08004fd1 	.word	0x08004fd1
 8004fa0:	08004fe1 	.word	0x08004fe1
 8004fa4:	08004fe1 	.word	0x08004fe1
 8004fa8:	08004fe1 	.word	0x08004fe1
 8004fac:	08004fc9 	.word	0x08004fc9
 8004fb0:	08004fe1 	.word	0x08004fe1
 8004fb4:	08004fe1 	.word	0x08004fe1
 8004fb8:	08004fe1 	.word	0x08004fe1
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fc6:	e0d8      	b.n	800517a <UART_SetConfig+0x2fe>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fce:	e0d4      	b.n	800517a <UART_SetConfig+0x2fe>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd6:	e0d0      	b.n	800517a <UART_SetConfig+0x2fe>
 8004fd8:	2308      	movs	r3, #8
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fde:	e0cc      	b.n	800517a <UART_SetConfig+0x2fe>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe6:	e0c8      	b.n	800517a <UART_SetConfig+0x2fe>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a5e      	ldr	r2, [pc, #376]	@ (8005168 <UART_SetConfig+0x2ec>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d125      	bne.n	800503e <UART_SetConfig+0x1c2>
 8004ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8005160 <UART_SetConfig+0x2e4>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ffc:	2b30      	cmp	r3, #48	@ 0x30
 8004ffe:	d016      	beq.n	800502e <UART_SetConfig+0x1b2>
 8005000:	2b30      	cmp	r3, #48	@ 0x30
 8005002:	d818      	bhi.n	8005036 <UART_SetConfig+0x1ba>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d00a      	beq.n	800501e <UART_SetConfig+0x1a2>
 8005008:	2b20      	cmp	r3, #32
 800500a:	d814      	bhi.n	8005036 <UART_SetConfig+0x1ba>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <UART_SetConfig+0x19a>
 8005010:	2b10      	cmp	r3, #16
 8005012:	d008      	beq.n	8005026 <UART_SetConfig+0x1aa>
 8005014:	e00f      	b.n	8005036 <UART_SetConfig+0x1ba>
 8005016:	2300      	movs	r3, #0
 8005018:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800501c:	e0ad      	b.n	800517a <UART_SetConfig+0x2fe>
 800501e:	2302      	movs	r3, #2
 8005020:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005024:	e0a9      	b.n	800517a <UART_SetConfig+0x2fe>
 8005026:	2304      	movs	r3, #4
 8005028:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502c:	e0a5      	b.n	800517a <UART_SetConfig+0x2fe>
 800502e:	2308      	movs	r3, #8
 8005030:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005034:	e0a1      	b.n	800517a <UART_SetConfig+0x2fe>
 8005036:	2310      	movs	r3, #16
 8005038:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503c:	e09d      	b.n	800517a <UART_SetConfig+0x2fe>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a4a      	ldr	r2, [pc, #296]	@ (800516c <UART_SetConfig+0x2f0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d125      	bne.n	8005094 <UART_SetConfig+0x218>
 8005048:	4b45      	ldr	r3, [pc, #276]	@ (8005160 <UART_SetConfig+0x2e4>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005052:	2bc0      	cmp	r3, #192	@ 0xc0
 8005054:	d016      	beq.n	8005084 <UART_SetConfig+0x208>
 8005056:	2bc0      	cmp	r3, #192	@ 0xc0
 8005058:	d818      	bhi.n	800508c <UART_SetConfig+0x210>
 800505a:	2b80      	cmp	r3, #128	@ 0x80
 800505c:	d00a      	beq.n	8005074 <UART_SetConfig+0x1f8>
 800505e:	2b80      	cmp	r3, #128	@ 0x80
 8005060:	d814      	bhi.n	800508c <UART_SetConfig+0x210>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <UART_SetConfig+0x1f0>
 8005066:	2b40      	cmp	r3, #64	@ 0x40
 8005068:	d008      	beq.n	800507c <UART_SetConfig+0x200>
 800506a:	e00f      	b.n	800508c <UART_SetConfig+0x210>
 800506c:	2300      	movs	r3, #0
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005072:	e082      	b.n	800517a <UART_SetConfig+0x2fe>
 8005074:	2302      	movs	r3, #2
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800507a:	e07e      	b.n	800517a <UART_SetConfig+0x2fe>
 800507c:	2304      	movs	r3, #4
 800507e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005082:	e07a      	b.n	800517a <UART_SetConfig+0x2fe>
 8005084:	2308      	movs	r3, #8
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508a:	e076      	b.n	800517a <UART_SetConfig+0x2fe>
 800508c:	2310      	movs	r3, #16
 800508e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005092:	e072      	b.n	800517a <UART_SetConfig+0x2fe>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a35      	ldr	r2, [pc, #212]	@ (8005170 <UART_SetConfig+0x2f4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d12a      	bne.n	80050f4 <UART_SetConfig+0x278>
 800509e:	4b30      	ldr	r3, [pc, #192]	@ (8005160 <UART_SetConfig+0x2e4>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050ac:	d01a      	beq.n	80050e4 <UART_SetConfig+0x268>
 80050ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050b2:	d81b      	bhi.n	80050ec <UART_SetConfig+0x270>
 80050b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b8:	d00c      	beq.n	80050d4 <UART_SetConfig+0x258>
 80050ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050be:	d815      	bhi.n	80050ec <UART_SetConfig+0x270>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <UART_SetConfig+0x250>
 80050c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c8:	d008      	beq.n	80050dc <UART_SetConfig+0x260>
 80050ca:	e00f      	b.n	80050ec <UART_SetConfig+0x270>
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050d2:	e052      	b.n	800517a <UART_SetConfig+0x2fe>
 80050d4:	2302      	movs	r3, #2
 80050d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050da:	e04e      	b.n	800517a <UART_SetConfig+0x2fe>
 80050dc:	2304      	movs	r3, #4
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e2:	e04a      	b.n	800517a <UART_SetConfig+0x2fe>
 80050e4:	2308      	movs	r3, #8
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ea:	e046      	b.n	800517a <UART_SetConfig+0x2fe>
 80050ec:	2310      	movs	r3, #16
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f2:	e042      	b.n	800517a <UART_SetConfig+0x2fe>
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a17      	ldr	r2, [pc, #92]	@ (8005158 <UART_SetConfig+0x2dc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d13a      	bne.n	8005174 <UART_SetConfig+0x2f8>
 80050fe:	4b18      	ldr	r3, [pc, #96]	@ (8005160 <UART_SetConfig+0x2e4>)
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005104:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005108:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800510c:	d01a      	beq.n	8005144 <UART_SetConfig+0x2c8>
 800510e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005112:	d81b      	bhi.n	800514c <UART_SetConfig+0x2d0>
 8005114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005118:	d00c      	beq.n	8005134 <UART_SetConfig+0x2b8>
 800511a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800511e:	d815      	bhi.n	800514c <UART_SetConfig+0x2d0>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <UART_SetConfig+0x2b0>
 8005124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005128:	d008      	beq.n	800513c <UART_SetConfig+0x2c0>
 800512a:	e00f      	b.n	800514c <UART_SetConfig+0x2d0>
 800512c:	2300      	movs	r3, #0
 800512e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005132:	e022      	b.n	800517a <UART_SetConfig+0x2fe>
 8005134:	2302      	movs	r3, #2
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800513a:	e01e      	b.n	800517a <UART_SetConfig+0x2fe>
 800513c:	2304      	movs	r3, #4
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005142:	e01a      	b.n	800517a <UART_SetConfig+0x2fe>
 8005144:	2308      	movs	r3, #8
 8005146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800514a:	e016      	b.n	800517a <UART_SetConfig+0x2fe>
 800514c:	2310      	movs	r3, #16
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005152:	e012      	b.n	800517a <UART_SetConfig+0x2fe>
 8005154:	cfff69f3 	.word	0xcfff69f3
 8005158:	40008000 	.word	0x40008000
 800515c:	40013800 	.word	0x40013800
 8005160:	40021000 	.word	0x40021000
 8005164:	40004400 	.word	0x40004400
 8005168:	40004800 	.word	0x40004800
 800516c:	40004c00 	.word	0x40004c00
 8005170:	40005000 	.word	0x40005000
 8005174:	2310      	movs	r3, #16
 8005176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4aae      	ldr	r2, [pc, #696]	@ (8005438 <UART_SetConfig+0x5bc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	f040 8097 	bne.w	80052b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005186:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800518a:	2b08      	cmp	r3, #8
 800518c:	d823      	bhi.n	80051d6 <UART_SetConfig+0x35a>
 800518e:	a201      	add	r2, pc, #4	@ (adr r2, 8005194 <UART_SetConfig+0x318>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051b9 	.word	0x080051b9
 8005198:	080051d7 	.word	0x080051d7
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051d7 	.word	0x080051d7
 80051a4:	080051c7 	.word	0x080051c7
 80051a8:	080051d7 	.word	0x080051d7
 80051ac:	080051d7 	.word	0x080051d7
 80051b0:	080051d7 	.word	0x080051d7
 80051b4:	080051cf 	.word	0x080051cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b8:	f7fd fc86 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 80051bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051be:	e010      	b.n	80051e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c0:	4b9e      	ldr	r3, [pc, #632]	@ (800543c <UART_SetConfig+0x5c0>)
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051c4:	e00d      	b.n	80051e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c6:	f7fd fc11 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80051ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051cc:	e009      	b.n	80051e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051d4:	e005      	b.n	80051e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8130 	beq.w	800544a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	4a94      	ldr	r2, [pc, #592]	@ (8005440 <UART_SetConfig+0x5c4>)
 80051f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051f4:	461a      	mov	r2, r3
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	429a      	cmp	r2, r3
 800520c:	d305      	bcc.n	800521a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	429a      	cmp	r2, r3
 8005218:	d903      	bls.n	8005222 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005220:	e113      	b.n	800544a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	2200      	movs	r2, #0
 8005226:	60bb      	str	r3, [r7, #8]
 8005228:	60fa      	str	r2, [r7, #12]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	4a84      	ldr	r2, [pc, #528]	@ (8005440 <UART_SetConfig+0x5c4>)
 8005230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005234:	b29b      	uxth	r3, r3
 8005236:	2200      	movs	r2, #0
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005240:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005244:	f7fa ffe8 	bl	8000218 <__aeabi_uldivmod>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4610      	mov	r0, r2
 800524e:	4619      	mov	r1, r3
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	020b      	lsls	r3, r1, #8
 800525a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800525e:	0202      	lsls	r2, r0, #8
 8005260:	6979      	ldr	r1, [r7, #20]
 8005262:	6849      	ldr	r1, [r1, #4]
 8005264:	0849      	lsrs	r1, r1, #1
 8005266:	2000      	movs	r0, #0
 8005268:	460c      	mov	r4, r1
 800526a:	4605      	mov	r5, r0
 800526c:	eb12 0804 	adds.w	r8, r2, r4
 8005270:	eb43 0905 	adc.w	r9, r3, r5
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	469a      	mov	sl, r3
 800527c:	4693      	mov	fp, r2
 800527e:	4652      	mov	r2, sl
 8005280:	465b      	mov	r3, fp
 8005282:	4640      	mov	r0, r8
 8005284:	4649      	mov	r1, r9
 8005286:	f7fa ffc7 	bl	8000218 <__aeabi_uldivmod>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4613      	mov	r3, r2
 8005290:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005298:	d308      	bcc.n	80052ac <UART_SetConfig+0x430>
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052a0:	d204      	bcs.n	80052ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6a3a      	ldr	r2, [r7, #32]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	e0ce      	b.n	800544a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052b2:	e0ca      	b.n	800544a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052bc:	d166      	bne.n	800538c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80052be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d827      	bhi.n	8005316 <UART_SetConfig+0x49a>
 80052c6:	a201      	add	r2, pc, #4	@ (adr r2, 80052cc <UART_SetConfig+0x450>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	080052f9 	.word	0x080052f9
 80052d4:	08005301 	.word	0x08005301
 80052d8:	08005317 	.word	0x08005317
 80052dc:	08005307 	.word	0x08005307
 80052e0:	08005317 	.word	0x08005317
 80052e4:	08005317 	.word	0x08005317
 80052e8:	08005317 	.word	0x08005317
 80052ec:	0800530f 	.word	0x0800530f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f0:	f7fd fbea 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 80052f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052f6:	e014      	b.n	8005322 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f8:	f7fd fbfc 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 80052fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052fe:	e010      	b.n	8005322 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005300:	4b4e      	ldr	r3, [pc, #312]	@ (800543c <UART_SetConfig+0x5c0>)
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005304:	e00d      	b.n	8005322 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005306:	f7fd fb71 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 800530a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800530c:	e009      	b.n	8005322 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005312:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005314:	e005      	b.n	8005322 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005320:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8090 	beq.w	800544a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	4a44      	ldr	r2, [pc, #272]	@ (8005440 <UART_SetConfig+0x5c4>)
 8005330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005334:	461a      	mov	r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	fbb3 f3f2 	udiv	r3, r3, r2
 800533c:	005a      	lsls	r2, r3, #1
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	441a      	add	r2, r3
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	2b0f      	cmp	r3, #15
 8005354:	d916      	bls.n	8005384 <UART_SetConfig+0x508>
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800535c:	d212      	bcs.n	8005384 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	b29b      	uxth	r3, r3
 8005362:	f023 030f 	bic.w	r3, r3, #15
 8005366:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	b29b      	uxth	r3, r3
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	b29a      	uxth	r2, r3
 8005374:	8bfb      	ldrh	r3, [r7, #30]
 8005376:	4313      	orrs	r3, r2
 8005378:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	8bfa      	ldrh	r2, [r7, #30]
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	e062      	b.n	800544a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800538a:	e05e      	b.n	800544a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800538c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005390:	2b08      	cmp	r3, #8
 8005392:	d828      	bhi.n	80053e6 <UART_SetConfig+0x56a>
 8005394:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <UART_SetConfig+0x520>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	080053e7 	.word	0x080053e7
 80053ac:	080053d7 	.word	0x080053d7
 80053b0:	080053e7 	.word	0x080053e7
 80053b4:	080053e7 	.word	0x080053e7
 80053b8:	080053e7 	.word	0x080053e7
 80053bc:	080053df 	.word	0x080053df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c0:	f7fd fb82 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 80053c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053c6:	e014      	b.n	80053f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c8:	f7fd fb94 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 80053cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053ce:	e010      	b.n	80053f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d0:	4b1a      	ldr	r3, [pc, #104]	@ (800543c <UART_SetConfig+0x5c0>)
 80053d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053d4:	e00d      	b.n	80053f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053d6:	f7fd fb09 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80053da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053dc:	e009      	b.n	80053f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053e4:	e005      	b.n	80053f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053f0:	bf00      	nop
    }

    if (pclk != 0U)
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d028      	beq.n	800544a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fc:	4a10      	ldr	r2, [pc, #64]	@ (8005440 <UART_SetConfig+0x5c4>)
 80053fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005402:	461a      	mov	r2, r3
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	fbb3 f2f2 	udiv	r2, r3, r2
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	441a      	add	r2, r3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	fbb2 f3f3 	udiv	r3, r2, r3
 800541a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	2b0f      	cmp	r3, #15
 8005420:	d910      	bls.n	8005444 <UART_SetConfig+0x5c8>
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005428:	d20c      	bcs.n	8005444 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	b29a      	uxth	r2, r3
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60da      	str	r2, [r3, #12]
 8005434:	e009      	b.n	800544a <UART_SetConfig+0x5ce>
 8005436:	bf00      	nop
 8005438:	40008000 	.word	0x40008000
 800543c:	00f42400 	.word	0x00f42400
 8005440:	080060b0 	.word	0x080060b0
      }
      else
      {
        ret = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2201      	movs	r2, #1
 800544e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2201      	movs	r2, #1
 8005456:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2200      	movs	r2, #0
 800545e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2200      	movs	r2, #0
 8005464:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005466:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800546a:	4618      	mov	r0, r3
 800546c:	3730      	adds	r7, #48	@ 0x30
 800546e:	46bd      	mov	sp, r7
 8005470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01a      	beq.n	800558a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005572:	d10a      	bne.n	800558a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	605a      	str	r2, [r3, #4]
  }
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b098      	sub	sp, #96	@ 0x60
 80055bc:	af02      	add	r7, sp, #8
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055c8:	f7fb ff02 	bl	80013d0 <HAL_GetTick>
 80055cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d12f      	bne.n	800563c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e4:	2200      	movs	r2, #0
 80055e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f88e 	bl	800570c <UART_WaitOnFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d022      	beq.n	800563c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fe:	e853 3f00 	ldrex	r3, [r3]
 8005602:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800560a:	653b      	str	r3, [r7, #80]	@ 0x50
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005614:	647b      	str	r3, [r7, #68]	@ 0x44
 8005616:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800561a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e6      	bne.n	80055f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e063      	b.n	8005704 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b04      	cmp	r3, #4
 8005648:	d149      	bne.n	80056de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800564a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005652:	2200      	movs	r2, #0
 8005654:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f857 	bl	800570c <UART_WaitOnFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d03c      	beq.n	80056de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	623b      	str	r3, [r7, #32]
   return(result);
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005682:	633b      	str	r3, [r7, #48]	@ 0x30
 8005684:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e6      	bne.n	8005664 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056b6:	61fa      	str	r2, [r7, #28]
 80056b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	69b9      	ldr	r1, [r7, #24]
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	617b      	str	r3, [r7, #20]
   return(result);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e5      	bne.n	8005696 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e012      	b.n	8005704 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3758      	adds	r7, #88	@ 0x58
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	4613      	mov	r3, r2
 800571a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800571c:	e04f      	b.n	80057be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005724:	d04b      	beq.n	80057be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005726:	f7fb fe53 	bl	80013d0 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	429a      	cmp	r2, r3
 8005734:	d302      	bcc.n	800573c <UART_WaitOnFlagUntilTimeout+0x30>
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e04e      	b.n	80057de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d037      	beq.n	80057be <UART_WaitOnFlagUntilTimeout+0xb2>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b80      	cmp	r3, #128	@ 0x80
 8005752:	d034      	beq.n	80057be <UART_WaitOnFlagUntilTimeout+0xb2>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b40      	cmp	r3, #64	@ 0x40
 8005758:	d031      	beq.n	80057be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b08      	cmp	r3, #8
 8005766:	d110      	bne.n	800578a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2208      	movs	r2, #8
 800576e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f920 	bl	80059b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2208      	movs	r2, #8
 800577a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e029      	b.n	80057de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005798:	d111      	bne.n	80057be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f906 	bl	80059b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e00f      	b.n	80057de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4013      	ands	r3, r2
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	bf0c      	ite	eq
 80057ce:	2301      	moveq	r3, #1
 80057d0:	2300      	movne	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d0a0      	beq.n	800571e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b096      	sub	sp, #88	@ 0x58
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2222      	movs	r2, #34	@ 0x22
 8005810:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800581a:	2b00      	cmp	r3, #0
 800581c:	d02d      	beq.n	800587a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005824:	4a40      	ldr	r2, [pc, #256]	@ (8005928 <UART_Start_Receive_DMA+0x140>)
 8005826:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800582e:	4a3f      	ldr	r2, [pc, #252]	@ (800592c <UART_Start_Receive_DMA+0x144>)
 8005830:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005838:	4a3d      	ldr	r2, [pc, #244]	@ (8005930 <UART_Start_Receive_DMA+0x148>)
 800583a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005842:	2200      	movs	r2, #0
 8005844:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3324      	adds	r3, #36	@ 0x24
 8005852:	4619      	mov	r1, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005858:	461a      	mov	r2, r3
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	f7fb ff7c 	bl	8001758 <HAL_DMA_Start_IT>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2210      	movs	r2, #16
 800586a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e051      	b.n	800591e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d018      	beq.n	80058b4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005896:	657b      	str	r3, [r7, #84]	@ 0x54
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058a2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80058ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e6      	bne.n	8005882 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3308      	adds	r3, #8
 80058ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3308      	adds	r3, #8
 80058d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80058d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80058d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80058e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e5      	bne.n	80058b4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3308      	adds	r3, #8
 80058ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	613b      	str	r3, [r7, #16]
   return(result);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3308      	adds	r3, #8
 8005906:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005908:	623a      	str	r2, [r7, #32]
 800590a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	69f9      	ldr	r1, [r7, #28]
 800590e:	6a3a      	ldr	r2, [r7, #32]
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	61bb      	str	r3, [r7, #24]
   return(result);
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e5      	bne.n	80058e8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3758      	adds	r7, #88	@ 0x58
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	08005b41 	.word	0x08005b41
 800592c:	08005c75 	.word	0x08005c75
 8005930:	08005cbb 	.word	0x08005cbb

08005934 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b08f      	sub	sp, #60	@ 0x3c
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	61fb      	str	r3, [r7, #28]
   return(result);
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005950:	637b      	str	r3, [r7, #52]	@ 0x34
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800595c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e6      	bne.n	800593c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3308      	adds	r3, #8
 8005974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	60bb      	str	r3, [r7, #8]
   return(result);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005984:	633b      	str	r3, [r7, #48]	@ 0x30
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3308      	adds	r3, #8
 800598c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800598e:	61ba      	str	r2, [r7, #24]
 8005990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6979      	ldr	r1, [r7, #20]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	613b      	str	r3, [r7, #16]
   return(result);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e5      	bne.n	800596e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80059aa:	bf00      	nop
 80059ac:	373c      	adds	r7, #60	@ 0x3c
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b095      	sub	sp, #84	@ 0x54
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80059de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e6      	bne.n	80059be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3308      	adds	r3, #8
 80059f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a06:	f023 0301 	bic.w	r3, r3, #1
 8005a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3308      	adds	r3, #8
 8005a12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e3      	bne.n	80059f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d118      	bne.n	8005a62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	e853 3f00 	ldrex	r3, [r3]
 8005a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f023 0310 	bic.w	r3, r3, #16
 8005a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a4e:	61bb      	str	r3, [r7, #24]
 8005a50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a52:	6979      	ldr	r1, [r7, #20]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1e6      	bne.n	8005a30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a76:	bf00      	nop
 8005a78:	3754      	adds	r7, #84	@ 0x54
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b090      	sub	sp, #64	@ 0x40
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d137      	bne.n	8005b0e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005abc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ac6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e5      	bne.n	8005aa6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	e853 3f00 	ldrex	r3, [r3]
 8005ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8005af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	69b9      	ldr	r1, [r7, #24]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	617b      	str	r3, [r7, #20]
   return(result);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e6      	bne.n	8005ada <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b0c:	e004      	b.n	8005b18 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b14:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005b16:	4798      	blx	r3
}
 8005b18:	bf00      	nop
 8005b1a:	3740      	adds	r7, #64	@ 0x40
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b38:	bf00      	nop
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b09c      	sub	sp, #112	@ 0x70
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d171      	bne.n	8005c40 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e6      	bne.n	8005b64 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005bb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005bb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3308      	adds	r3, #8
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005be0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3308      	adds	r3, #8
 8005be8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005bea:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c00:	2220      	movs	r2, #32
 8005c02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d118      	bne.n	8005c40 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0310 	bic.w	r3, r3, #16
 8005c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	69b9      	ldr	r1, [r7, #24]
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	617b      	str	r3, [r7, #20]
   return(result);
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e6      	bne.n	8005c0e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c42:	2200      	movs	r2, #0
 8005c44:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d109      	bne.n	8005c62 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8005c4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c56:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005c5e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c60:	e004      	b.n	8005c6c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8005c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c68:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005c6a:	4798      	blx	r3
}
 8005c6c:	bf00      	nop
 8005c6e:	3770      	adds	r7, #112	@ 0x70
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10b      	bne.n	8005ca8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8005c9c:	0852      	lsrs	r2, r2, #1
 8005c9e:	b292      	uxth	r2, r2
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ca6:	e004      	b.n	8005cb2 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	4798      	blx	r3
}
 8005cb2:	bf00      	nop
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce2:	2b80      	cmp	r3, #128	@ 0x80
 8005ce4:	d109      	bne.n	8005cfa <UART_DMAError+0x40>
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b21      	cmp	r3, #33	@ 0x21
 8005cea:	d106      	bne.n	8005cfa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005cf4:	6978      	ldr	r0, [r7, #20]
 8005cf6:	f7ff fe1d 	bl	8005934 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d04:	2b40      	cmp	r3, #64	@ 0x40
 8005d06:	d109      	bne.n	8005d1c <UART_DMAError+0x62>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b22      	cmp	r3, #34	@ 0x22
 8005d0c:	d106      	bne.n	8005d1c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005d16:	6978      	ldr	r0, [r7, #20]
 8005d18:	f7ff fe4d 	bl	80059b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d22:	f043 0210 	orr.w	r2, r3, #16
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d32:	6978      	ldr	r0, [r7, #20]
 8005d34:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d36:	bf00      	nop
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d66:	bf00      	nop
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b088      	sub	sp, #32
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d8a:	61fb      	str	r3, [r7, #28]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6979      	ldr	r1, [r7, #20]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	613b      	str	r3, [r7, #16]
   return(result);
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e6      	bne.n	8005d76 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc0:	bf00      	nop
 8005dc2:	3720      	adds	r7, #32
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_UARTEx_DisableFifoMode+0x16>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e027      	b.n	8005e6a <HAL_UARTEx_DisableFifoMode+0x66>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2224      	movs	r2, #36	@ 0x24
 8005e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0201 	bic.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e02d      	b.n	8005eea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2224      	movs	r2, #36	@ 0x24
 8005e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f850 	bl	8005f70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e02d      	b.n	8005f66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2224      	movs	r2, #36	@ 0x24
 8005f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0201 	bic.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f812 	bl	8005f70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d108      	bne.n	8005f92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f90:	e031      	b.n	8005ff6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f92:	2308      	movs	r3, #8
 8005f94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f96:	2308      	movs	r3, #8
 8005f98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	0e5b      	lsrs	r3, r3, #25
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	0f5b      	lsrs	r3, r3, #29
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fba:	7bbb      	ldrb	r3, [r7, #14]
 8005fbc:	7b3a      	ldrb	r2, [r7, #12]
 8005fbe:	4911      	ldr	r1, [pc, #68]	@ (8006004 <UARTEx_SetNbDataToProcess+0x94>)
 8005fc0:	5c8a      	ldrb	r2, [r1, r2]
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fc6:	7b3a      	ldrb	r2, [r7, #12]
 8005fc8:	490f      	ldr	r1, [pc, #60]	@ (8006008 <UARTEx_SetNbDataToProcess+0x98>)
 8005fca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	7b7a      	ldrb	r2, [r7, #13]
 8005fdc:	4909      	ldr	r1, [pc, #36]	@ (8006004 <UARTEx_SetNbDataToProcess+0x94>)
 8005fde:	5c8a      	ldrb	r2, [r1, r2]
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fe4:	7b7a      	ldrb	r2, [r7, #13]
 8005fe6:	4908      	ldr	r1, [pc, #32]	@ (8006008 <UARTEx_SetNbDataToProcess+0x98>)
 8005fe8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fea:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	080060c8 	.word	0x080060c8
 8006008:	080060d0 	.word	0x080060d0

0800600c <memset>:
 800600c:	4402      	add	r2, r0
 800600e:	4603      	mov	r3, r0
 8006010:	4293      	cmp	r3, r2
 8006012:	d100      	bne.n	8006016 <memset+0xa>
 8006014:	4770      	bx	lr
 8006016:	f803 1b01 	strb.w	r1, [r3], #1
 800601a:	e7f9      	b.n	8006010 <memset+0x4>

0800601c <__libc_init_array>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4d0d      	ldr	r5, [pc, #52]	@ (8006054 <__libc_init_array+0x38>)
 8006020:	4c0d      	ldr	r4, [pc, #52]	@ (8006058 <__libc_init_array+0x3c>)
 8006022:	1b64      	subs	r4, r4, r5
 8006024:	10a4      	asrs	r4, r4, #2
 8006026:	2600      	movs	r6, #0
 8006028:	42a6      	cmp	r6, r4
 800602a:	d109      	bne.n	8006040 <__libc_init_array+0x24>
 800602c:	4d0b      	ldr	r5, [pc, #44]	@ (800605c <__libc_init_array+0x40>)
 800602e:	4c0c      	ldr	r4, [pc, #48]	@ (8006060 <__libc_init_array+0x44>)
 8006030:	f000 f826 	bl	8006080 <_init>
 8006034:	1b64      	subs	r4, r4, r5
 8006036:	10a4      	asrs	r4, r4, #2
 8006038:	2600      	movs	r6, #0
 800603a:	42a6      	cmp	r6, r4
 800603c:	d105      	bne.n	800604a <__libc_init_array+0x2e>
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	f855 3b04 	ldr.w	r3, [r5], #4
 8006044:	4798      	blx	r3
 8006046:	3601      	adds	r6, #1
 8006048:	e7ee      	b.n	8006028 <__libc_init_array+0xc>
 800604a:	f855 3b04 	ldr.w	r3, [r5], #4
 800604e:	4798      	blx	r3
 8006050:	3601      	adds	r6, #1
 8006052:	e7f2      	b.n	800603a <__libc_init_array+0x1e>
 8006054:	080060e0 	.word	0x080060e0
 8006058:	080060e0 	.word	0x080060e0
 800605c:	080060e0 	.word	0x080060e0
 8006060:	080060e4 	.word	0x080060e4

08006064 <memcpy>:
 8006064:	440a      	add	r2, r1
 8006066:	4291      	cmp	r1, r2
 8006068:	f100 33ff 	add.w	r3, r0, #4294967295
 800606c:	d100      	bne.n	8006070 <memcpy+0xc>
 800606e:	4770      	bx	lr
 8006070:	b510      	push	{r4, lr}
 8006072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800607a:	4291      	cmp	r1, r2
 800607c:	d1f9      	bne.n	8006072 <memcpy+0xe>
 800607e:	bd10      	pop	{r4, pc}

08006080 <_init>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	bf00      	nop
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr

0800608c <_fini>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	bf00      	nop
 8006090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006092:	bc08      	pop	{r3}
 8006094:	469e      	mov	lr, r3
 8006096:	4770      	bx	lr
