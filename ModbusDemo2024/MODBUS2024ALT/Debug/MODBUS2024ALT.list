
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbb8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bd90  0800bd90  0000cd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdd0  0800bdd0  0000d288  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdd0  0800bdd0  0000cdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdd8  0800bdd8  0000d288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdd8  0800bdd8  0000cdd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bddc  0800bddc  0000cddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800bde0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001194  20000288  0800c068  0000d288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000141c  0800c068  0000d41c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018073  00000000  00000000  0000d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003102  00000000  00000000  0002532b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00028430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea0  00000000  00000000  00029700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282df  00000000  00000000  0002a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001963a  00000000  00000000  0005287f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff8de  00000000  00000000  0006beb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b797  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d8  00000000  00000000  0016b7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00170ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000288 	.word	0x20000288
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bd78 	.word	0x0800bd78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000028c 	.word	0x2000028c
 8000214:	0800bd78 	.word	0x0800bd78

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b98a 	b.w	8001118 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f826 	bl	8000e5c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_f2ulz>:
 8000e1c:	b5d0      	push	{r4, r6, r7, lr}
 8000e1e:	f7ff fb5f 	bl	80004e0 <__aeabi_f2d>
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <__aeabi_f2ulz+0x38>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	4606      	mov	r6, r0
 8000e28:	460f      	mov	r7, r1
 8000e2a:	f7ff fbb1 	bl	8000590 <__aeabi_dmul>
 8000e2e:	f7ff fe5f 	bl	8000af0 <__aeabi_d2uiz>
 8000e32:	4604      	mov	r4, r0
 8000e34:	f7ff fb32 	bl	800049c <__aeabi_ui2d>
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <__aeabi_f2ulz+0x3c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f7ff fba8 	bl	8000590 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4630      	mov	r0, r6
 8000e46:	4639      	mov	r1, r7
 8000e48:	f7ff f9ea 	bl	8000220 <__aeabi_dsub>
 8000e4c:	f7ff fe50 	bl	8000af0 <__aeabi_d2uiz>
 8000e50:	4621      	mov	r1, r4
 8000e52:	bdd0      	pop	{r4, r6, r7, pc}
 8000e54:	3df00000 	.word	0x3df00000
 8000e58:	41f00000 	.word	0x41f00000

08000e5c <__udivmoddi4>:
 8000e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e60:	9d08      	ldr	r5, [sp, #32]
 8000e62:	460c      	mov	r4, r1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d14e      	bne.n	8000f06 <__udivmoddi4+0xaa>
 8000e68:	4694      	mov	ip, r2
 8000e6a:	458c      	cmp	ip, r1
 8000e6c:	4686      	mov	lr, r0
 8000e6e:	fab2 f282 	clz	r2, r2
 8000e72:	d962      	bls.n	8000f3a <__udivmoddi4+0xde>
 8000e74:	b14a      	cbz	r2, 8000e8a <__udivmoddi4+0x2e>
 8000e76:	f1c2 0320 	rsb	r3, r2, #32
 8000e7a:	4091      	lsls	r1, r2
 8000e7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e84:	4319      	orrs	r1, r3
 8000e86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f f68c 	uxth.w	r6, ip
 8000e92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea2:	fb04 f106 	mul.w	r1, r4, r6
 8000ea6:	4299      	cmp	r1, r3
 8000ea8:	d90a      	bls.n	8000ec0 <__udivmoddi4+0x64>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000eb2:	f080 8112 	bcs.w	80010da <__udivmoddi4+0x27e>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 810f 	bls.w	80010da <__udivmoddi4+0x27e>
 8000ebc:	3c02      	subs	r4, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	1a59      	subs	r1, r3, r1
 8000ec2:	fa1f f38e 	uxth.w	r3, lr
 8000ec6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eca:	fb07 1110 	mls	r1, r7, r0, r1
 8000ece:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed2:	fb00 f606 	mul.w	r6, r0, r6
 8000ed6:	429e      	cmp	r6, r3
 8000ed8:	d90a      	bls.n	8000ef0 <__udivmoddi4+0x94>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee2:	f080 80fc 	bcs.w	80010de <__udivmoddi4+0x282>
 8000ee6:	429e      	cmp	r6, r3
 8000ee8:	f240 80f9 	bls.w	80010de <__udivmoddi4+0x282>
 8000eec:	4463      	add	r3, ip
 8000eee:	3802      	subs	r0, #2
 8000ef0:	1b9b      	subs	r3, r3, r6
 8000ef2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	b11d      	cbz	r5, 8000f02 <__udivmoddi4+0xa6>
 8000efa:	40d3      	lsrs	r3, r2
 8000efc:	2200      	movs	r2, #0
 8000efe:	e9c5 3200 	strd	r3, r2, [r5]
 8000f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d905      	bls.n	8000f16 <__udivmoddi4+0xba>
 8000f0a:	b10d      	cbz	r5, 8000f10 <__udivmoddi4+0xb4>
 8000f0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000f10:	2100      	movs	r1, #0
 8000f12:	4608      	mov	r0, r1
 8000f14:	e7f5      	b.n	8000f02 <__udivmoddi4+0xa6>
 8000f16:	fab3 f183 	clz	r1, r3
 8000f1a:	2900      	cmp	r1, #0
 8000f1c:	d146      	bne.n	8000fac <__udivmoddi4+0x150>
 8000f1e:	42a3      	cmp	r3, r4
 8000f20:	d302      	bcc.n	8000f28 <__udivmoddi4+0xcc>
 8000f22:	4290      	cmp	r0, r2
 8000f24:	f0c0 80f0 	bcc.w	8001108 <__udivmoddi4+0x2ac>
 8000f28:	1a86      	subs	r6, r0, r2
 8000f2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000f2e:	2001      	movs	r0, #1
 8000f30:	2d00      	cmp	r5, #0
 8000f32:	d0e6      	beq.n	8000f02 <__udivmoddi4+0xa6>
 8000f34:	e9c5 6300 	strd	r6, r3, [r5]
 8000f38:	e7e3      	b.n	8000f02 <__udivmoddi4+0xa6>
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	f040 8090 	bne.w	8001060 <__udivmoddi4+0x204>
 8000f40:	eba1 040c 	sub.w	r4, r1, ip
 8000f44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f56:	fb08 4416 	mls	r4, r8, r6, r4
 8000f5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f5e:	fb07 f006 	mul.w	r0, r7, r6
 8000f62:	4298      	cmp	r0, r3
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x11c>
 8000f66:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f6e:	d202      	bcs.n	8000f76 <__udivmoddi4+0x11a>
 8000f70:	4298      	cmp	r0, r3
 8000f72:	f200 80cd 	bhi.w	8001110 <__udivmoddi4+0x2b4>
 8000f76:	4626      	mov	r6, r4
 8000f78:	1a1c      	subs	r4, r3, r0
 8000f7a:	fa1f f38e 	uxth.w	r3, lr
 8000f7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f82:	fb08 4410 	mls	r4, r8, r0, r4
 8000f86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f8a:	fb00 f707 	mul.w	r7, r0, r7
 8000f8e:	429f      	cmp	r7, r3
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x148>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9a:	d202      	bcs.n	8000fa2 <__udivmoddi4+0x146>
 8000f9c:	429f      	cmp	r7, r3
 8000f9e:	f200 80b0 	bhi.w	8001102 <__udivmoddi4+0x2a6>
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	1bdb      	subs	r3, r3, r7
 8000fa6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000faa:	e7a5      	b.n	8000ef8 <__udivmoddi4+0x9c>
 8000fac:	f1c1 0620 	rsb	r6, r1, #32
 8000fb0:	408b      	lsls	r3, r1
 8000fb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000fb6:	431f      	orrs	r7, r3
 8000fb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000fc0:	ea43 030c 	orr.w	r3, r3, ip
 8000fc4:	40f4      	lsrs	r4, r6
 8000fc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000fca:	0c38      	lsrs	r0, r7, #16
 8000fcc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000fd4:	fa1f fc87 	uxth.w	ip, r7
 8000fd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000fdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fe0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fe4:	45a1      	cmp	r9, r4
 8000fe6:	fa02 f201 	lsl.w	r2, r2, r1
 8000fea:	d90a      	bls.n	8001002 <__udivmoddi4+0x1a6>
 8000fec:	193c      	adds	r4, r7, r4
 8000fee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ff2:	f080 8084 	bcs.w	80010fe <__udivmoddi4+0x2a2>
 8000ff6:	45a1      	cmp	r9, r4
 8000ff8:	f240 8081 	bls.w	80010fe <__udivmoddi4+0x2a2>
 8000ffc:	f1ae 0e02 	sub.w	lr, lr, #2
 8001000:	443c      	add	r4, r7
 8001002:	eba4 0409 	sub.w	r4, r4, r9
 8001006:	fa1f f983 	uxth.w	r9, r3
 800100a:	fbb4 f3f0 	udiv	r3, r4, r0
 800100e:	fb00 4413 	mls	r4, r0, r3, r4
 8001012:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001016:	fb03 fc0c 	mul.w	ip, r3, ip
 800101a:	45a4      	cmp	ip, r4
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x1d2>
 800101e:	193c      	adds	r4, r7, r4
 8001020:	f103 30ff 	add.w	r0, r3, #4294967295
 8001024:	d267      	bcs.n	80010f6 <__udivmoddi4+0x29a>
 8001026:	45a4      	cmp	ip, r4
 8001028:	d965      	bls.n	80010f6 <__udivmoddi4+0x29a>
 800102a:	3b02      	subs	r3, #2
 800102c:	443c      	add	r4, r7
 800102e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001032:	fba0 9302 	umull	r9, r3, r0, r2
 8001036:	eba4 040c 	sub.w	r4, r4, ip
 800103a:	429c      	cmp	r4, r3
 800103c:	46ce      	mov	lr, r9
 800103e:	469c      	mov	ip, r3
 8001040:	d351      	bcc.n	80010e6 <__udivmoddi4+0x28a>
 8001042:	d04e      	beq.n	80010e2 <__udivmoddi4+0x286>
 8001044:	b155      	cbz	r5, 800105c <__udivmoddi4+0x200>
 8001046:	ebb8 030e 	subs.w	r3, r8, lr
 800104a:	eb64 040c 	sbc.w	r4, r4, ip
 800104e:	fa04 f606 	lsl.w	r6, r4, r6
 8001052:	40cb      	lsrs	r3, r1
 8001054:	431e      	orrs	r6, r3
 8001056:	40cc      	lsrs	r4, r1
 8001058:	e9c5 6400 	strd	r6, r4, [r5]
 800105c:	2100      	movs	r1, #0
 800105e:	e750      	b.n	8000f02 <__udivmoddi4+0xa6>
 8001060:	f1c2 0320 	rsb	r3, r2, #32
 8001064:	fa20 f103 	lsr.w	r1, r0, r3
 8001068:	fa0c fc02 	lsl.w	ip, ip, r2
 800106c:	fa24 f303 	lsr.w	r3, r4, r3
 8001070:	4094      	lsls	r4, r2
 8001072:	430c      	orrs	r4, r1
 8001074:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001078:	fa00 fe02 	lsl.w	lr, r0, r2
 800107c:	fa1f f78c 	uxth.w	r7, ip
 8001080:	fbb3 f0f8 	udiv	r0, r3, r8
 8001084:	fb08 3110 	mls	r1, r8, r0, r3
 8001088:	0c23      	lsrs	r3, r4, #16
 800108a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800108e:	fb00 f107 	mul.w	r1, r0, r7
 8001092:	4299      	cmp	r1, r3
 8001094:	d908      	bls.n	80010a8 <__udivmoddi4+0x24c>
 8001096:	eb1c 0303 	adds.w	r3, ip, r3
 800109a:	f100 36ff 	add.w	r6, r0, #4294967295
 800109e:	d22c      	bcs.n	80010fa <__udivmoddi4+0x29e>
 80010a0:	4299      	cmp	r1, r3
 80010a2:	d92a      	bls.n	80010fa <__udivmoddi4+0x29e>
 80010a4:	3802      	subs	r0, #2
 80010a6:	4463      	add	r3, ip
 80010a8:	1a5b      	subs	r3, r3, r1
 80010aa:	b2a4      	uxth	r4, r4
 80010ac:	fbb3 f1f8 	udiv	r1, r3, r8
 80010b0:	fb08 3311 	mls	r3, r8, r1, r3
 80010b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010b8:	fb01 f307 	mul.w	r3, r1, r7
 80010bc:	42a3      	cmp	r3, r4
 80010be:	d908      	bls.n	80010d2 <__udivmoddi4+0x276>
 80010c0:	eb1c 0404 	adds.w	r4, ip, r4
 80010c4:	f101 36ff 	add.w	r6, r1, #4294967295
 80010c8:	d213      	bcs.n	80010f2 <__udivmoddi4+0x296>
 80010ca:	42a3      	cmp	r3, r4
 80010cc:	d911      	bls.n	80010f2 <__udivmoddi4+0x296>
 80010ce:	3902      	subs	r1, #2
 80010d0:	4464      	add	r4, ip
 80010d2:	1ae4      	subs	r4, r4, r3
 80010d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010d8:	e739      	b.n	8000f4e <__udivmoddi4+0xf2>
 80010da:	4604      	mov	r4, r0
 80010dc:	e6f0      	b.n	8000ec0 <__udivmoddi4+0x64>
 80010de:	4608      	mov	r0, r1
 80010e0:	e706      	b.n	8000ef0 <__udivmoddi4+0x94>
 80010e2:	45c8      	cmp	r8, r9
 80010e4:	d2ae      	bcs.n	8001044 <__udivmoddi4+0x1e8>
 80010e6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ea:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ee:	3801      	subs	r0, #1
 80010f0:	e7a8      	b.n	8001044 <__udivmoddi4+0x1e8>
 80010f2:	4631      	mov	r1, r6
 80010f4:	e7ed      	b.n	80010d2 <__udivmoddi4+0x276>
 80010f6:	4603      	mov	r3, r0
 80010f8:	e799      	b.n	800102e <__udivmoddi4+0x1d2>
 80010fa:	4630      	mov	r0, r6
 80010fc:	e7d4      	b.n	80010a8 <__udivmoddi4+0x24c>
 80010fe:	46d6      	mov	lr, sl
 8001100:	e77f      	b.n	8001002 <__udivmoddi4+0x1a6>
 8001102:	4463      	add	r3, ip
 8001104:	3802      	subs	r0, #2
 8001106:	e74d      	b.n	8000fa4 <__udivmoddi4+0x148>
 8001108:	4606      	mov	r6, r0
 800110a:	4623      	mov	r3, r4
 800110c:	4608      	mov	r0, r1
 800110e:	e70f      	b.n	8000f30 <__udivmoddi4+0xd4>
 8001110:	3e02      	subs	r6, #2
 8001112:	4463      	add	r3, ip
 8001114:	e730      	b.n	8000f78 <__udivmoddi4+0x11c>
 8001116:	bf00      	nop

08001118 <__aeabi_idiv0>:
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001120:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <modbus_1t5_Timeout+0x3c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2201      	movs	r2, #1
 8001126:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001128:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <modbus_1t5_Timeout+0x3c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <modbus_1t5_Timeout+0x3c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <modbus_1t5_Timeout+0x3c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	200002a4 	.word	0x200002a4

0800115c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <modbus_3t5_Timeout+0x1c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2201      	movs	r2, #1
 800116a:	755a      	strb	r2, [r3, #21]

}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	200002a4 	.word	0x200002a4

0800117c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f009 fad7 	bl	800a738 <HAL_UART_GetError>
 800118a:	4603      	mov	r3, r0
 800118c:	2b20      	cmp	r3, #32
 800118e:	d101      	bne.n	8001194 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001190:	f7ff ffc4 	bl	800111c <modbus_1t5_Timeout>

	}
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80011a6:	4a25      	ldr	r2, [pc, #148]	@ (800123c <Modbus_init+0xa0>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <Modbus_init+0xa0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <Modbus_init+0xa4>)
 80011ba:	210e      	movs	r1, #14
 80011bc:	4618      	mov	r0, r3
 80011be:	f007 fb89 	bl	80088d4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2110      	movs	r1, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f009 fa5f 	bl	800a68c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f009 fa76 	bl	800a6c4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <Modbus_init+0xa8>)
 80011de:	2104      	movs	r1, #4
 80011e0:	4618      	mov	r0, r3
 80011e2:	f008 fd3d 	bl	8009c60 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <Modbus_init+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011ec:	4b13      	ldr	r3, [pc, #76]	@ (800123c <Modbus_init+0xa0>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <Modbus_init+0xa0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011f8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011fc:	4413      	add	r3, r2
 80011fe:	3302      	adds	r3, #2
 8001200:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001204:	4619      	mov	r1, r3
 8001206:	f008 fe65 	bl	8009ed4 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800120a:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <Modbus_init+0xa0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10c      	bne.n	8001234 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <Modbus_init+0xa0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	4618      	mov	r0, r3
 8001222:	f006 f8cf 	bl	80073c4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001226:	4b05      	ldr	r3, [pc, #20]	@ (800123c <Modbus_init+0xa0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f006 fc9a 	bl	8007b68 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200002a4 	.word	0x200002a4
 8001240:	0800115d 	.word	0x0800115d
 8001244:	0800117d 	.word	0x0800117d

08001248 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001254:	23ff      	movs	r3, #255	@ 0xff
 8001256:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001258:	23ff      	movs	r3, #255	@ 0xff
 800125a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800125c:	e013      	b.n	8001286 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	4053      	eors	r3, r2
 800126a:	b2db      	uxtb	r3, r3
 800126c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800126e:	4a0f      	ldr	r2, [pc, #60]	@ (80012ac <CRC16+0x64>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4413      	add	r3, r2
 8001274:	781a      	ldrb	r2, [r3, #0]
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	4053      	eors	r3, r2
 800127a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800127c:	4a0c      	ldr	r2, [pc, #48]	@ (80012b0 <CRC16+0x68>)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001286:	883b      	ldrh	r3, [r7, #0]
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	803a      	strh	r2, [r7, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e6      	bne.n	800125e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21a      	sxth	r2, r3
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21b      	sxth	r3, r3
 800129e:	b29b      	uxth	r3, r3
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20000100 	.word	0x20000100
 80012b0:	20000000 	.word	0x20000000

080012b4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80012ba:	4b7e      	ldr	r3, [pc, #504]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	7ddb      	ldrb	r3, [r3, #23]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d80a      	bhi.n	80012dc <Modbus_Protocal_Worker+0x28>
 80012c6:	a201      	add	r2, pc, #4	@ (adr r2, 80012cc <Modbus_Protocal_Worker+0x18>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	080012e7 	.word	0x080012e7
 80012d0:	0800147b 	.word	0x0800147b
 80012d4:	08001373 	.word	0x08001373
 80012d8:	080013b7 	.word	0x080013b7
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80012dc:	4b75      	ldr	r3, [pc, #468]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	75da      	strb	r2, [r3, #23]
		break;
 80012e4:	e0e1      	b.n	80014aa <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012e6:	4b73      	ldr	r3, [pc, #460]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80012f2:	4b70      	ldr	r3, [pc, #448]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2202      	movs	r2, #2
 80012f8:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80012fa:	f000 f9cd 	bl	8001698 <Modbus_Emission>
 80012fe:	e018      	b.n	8001332 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001300:	4b6c      	ldr	r3, [pc, #432]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800130a:	4b6a      	ldr	r3, [pc, #424]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001314:	b29b      	uxth	r3, r3
 8001316:	429a      	cmp	r2, r3
 8001318:	d00b      	beq.n	8001332 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800131a:	4b66      	ldr	r3, [pc, #408]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2200      	movs	r2, #0
 8001320:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001322:	4b64      	ldr	r3, [pc, #400]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800132a:	4b62      	ldr	r3, [pc, #392]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2203      	movs	r2, #3
 8001330:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001332:	4b60      	ldr	r3, [pc, #384]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133c:	2b20      	cmp	r3, #32
 800133e:	f040 80ad 	bne.w	800149c <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001342:	4b5c      	ldr	r3, [pc, #368]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800134c:	4b59      	ldr	r3, [pc, #356]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001352:	4b58      	ldr	r3, [pc, #352]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b57      	ldr	r3, [pc, #348]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800135e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001362:	4413      	add	r3, r2
 8001364:	3302      	adds	r3, #2
 8001366:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800136a:	4619      	mov	r1, r3
 800136c:	f008 fdb2 	bl	8009ed4 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001370:	e094      	b.n	800149c <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001372:	4b50      	ldr	r3, [pc, #320]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	7d1b      	ldrb	r3, [r3, #20]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8091 	beq.w	80014a0 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800137e:	4b4d      	ldr	r3, [pc, #308]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	22fe      	movs	r2, #254	@ 0xfe
 8001384:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001386:	4b4b      	ldr	r3, [pc, #300]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001390:	4b48      	ldr	r3, [pc, #288]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80013a0:	4b44      	ldr	r3, [pc, #272]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013a2:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80013a4:	1a8a      	subs	r2, r1, r2
 80013a6:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80013a8:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80013ac:	4b41      	ldr	r3, [pc, #260]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2204      	movs	r2, #4
 80013b2:	75da      	strb	r2, [r3, #23]
		}
		break;
 80013b4:	e074      	b.n	80014a0 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80013b6:	4b3f      	ldr	r3, [pc, #252]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80013be:	f113 0f02 	cmn.w	r3, #2
 80013c2:	d150      	bne.n	8001466 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80013c4:	4b3b      	ldr	r3, [pc, #236]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2200      	movs	r2, #0
 80013ca:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80013cc:	4b39      	ldr	r3, [pc, #228]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80013d4:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013dc:	3b02      	subs	r3, #2
 80013de:	4619      	mov	r1, r3
 80013e0:	4610      	mov	r0, r2
 80013e2:	f7ff ff31 	bl	8001248 <CRC16>
 80013e6:	4603      	mov	r3, r0
 80013e8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013ea:	793a      	ldrb	r2, [r7, #4]
 80013ec:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013ee:	6819      	ldr	r1, [r3, #0]
 80013f0:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013f8:	3b02      	subs	r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001400:	429a      	cmp	r2, r3
 8001402:	d10c      	bne.n	800141e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001404:	797a      	ldrb	r2, [r7, #5]
 8001406:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001408:	6819      	ldr	r1, [r3, #0]
 800140a:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001412:	3b01      	subs	r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800141a:	429a      	cmp	r2, r3
 800141c:	d004      	beq.n	8001428 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800141e:	4b25      	ldr	r3, [pc, #148]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	22ff      	movs	r2, #255	@ 0xff
 8001424:	759a      	strb	r2, [r3, #22]
				break;
 8001426:	e040      	b.n	80014aa <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001428:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001430:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d113      	bne.n	8001462 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800143a:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800144a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001454:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001456:	461a      	mov	r2, r3
 8001458:	f00a fafe 	bl	800ba58 <memcpy>

			//execute command
			Modbus_frame_response();
 800145c:	f000 f904 	bl	8001668 <Modbus_frame_response>
 8001460:	e001      	b.n	8001466 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001462:	bf00      	nop
					}
		break;


	}
}
 8001464:	e021      	b.n	80014aa <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001466:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	7d5b      	ldrb	r3, [r3, #21]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d019      	beq.n	80014a4 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001470:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2201      	movs	r2, #1
 8001476:	75da      	strb	r2, [r3, #23]
		break;
 8001478:	e014      	b.n	80014a4 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001484:	2b20      	cmp	r3, #32
 8001486:	d10f      	bne.n	80014a8 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001488:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <Modbus_Protocal_Worker+0x200>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2201      	movs	r2, #1
 8001498:	75da      	strb	r2, [r3, #23]
		break;
 800149a:	e005      	b.n	80014a8 <Modbus_Protocal_Worker+0x1f4>
		break;
 800149c:	bf00      	nop
 800149e:	e004      	b.n	80014aa <Modbus_Protocal_Worker+0x1f6>
		break;
 80014a0:	bf00      	nop
 80014a2:	e002      	b.n	80014aa <Modbus_Protocal_Worker+0x1f6>
		break;
 80014a4:	bf00      	nop
 80014a6:	e000      	b.n	80014aa <Modbus_Protocal_Worker+0x1f6>
		break;
 80014a8:	bf00      	nop
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200002a4 	.word	0x200002a4

080014b8 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80014be:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <modbusWrite1Register+0x7c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	7e5b      	ldrb	r3, [r3, #25]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001534 <modbusWrite1Register+0x7c>)
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	7e92      	ldrb	r2, [r2, #26]
 80014ce:	4413      	add	r3, r2
 80014d0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80014d2:	88fa      	ldrh	r2, [r7, #6]
 80014d4:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <modbusWrite1Register+0x7c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d903      	bls.n	80014e6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014de:	2002      	movs	r0, #2
 80014e0:	f000 f8a0 	bl	8001624 <ModbusErrorReply>
			 return;
 80014e4:	e023      	b.n	800152e <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <modbusWrite1Register+0x7c>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <modbusWrite1Register+0x7c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	440b      	add	r3, r1
 80014f6:	7ed2      	ldrb	r2, [r2, #27]
 80014f8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <modbusWrite1Register+0x7c>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <modbusWrite1Register+0x7c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	440b      	add	r3, r1
 800150a:	7f12      	ldrb	r2, [r2, #28]
 800150c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <modbusWrite1Register+0x7c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <modbusWrite1Register+0x7c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 800151c:	2208      	movs	r2, #8
 800151e:	4619      	mov	r1, r3
 8001520:	f00a fa9a 	bl	800ba58 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001524:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <modbusWrite1Register+0x7c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2205      	movs	r2, #5
 800152a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200002a4 	.word	0x200002a4

08001538 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800153e:	4b38      	ldr	r3, [pc, #224]	@ (8001620 <modbusRead1Register+0xe8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	7edb      	ldrb	r3, [r3, #27]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	4a35      	ldr	r2, [pc, #212]	@ (8001620 <modbusRead1Register+0xe8>)
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	7f12      	ldrb	r2, [r2, #28]
 800154e:	4413      	add	r3, r2
 8001550:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001552:	4b33      	ldr	r3, [pc, #204]	@ (8001620 <modbusRead1Register+0xe8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	7e5b      	ldrb	r3, [r3, #25]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b29b      	uxth	r3, r3
 800155c:	4a30      	ldr	r2, [pc, #192]	@ (8001620 <modbusRead1Register+0xe8>)
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	7e92      	ldrb	r2, [r2, #26]
 8001562:	4413      	add	r3, r2
 8001564:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <modbusRead1Register+0x3a>
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001570:	d903      	bls.n	800157a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001572:	2003      	movs	r0, #3
 8001574:	f000 f856 	bl	8001624 <ModbusErrorReply>
		 return;
 8001578:	e04e      	b.n	8001618 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800157a:	88ba      	ldrh	r2, [r7, #4]
 800157c:	4b28      	ldr	r3, [pc, #160]	@ (8001620 <modbusRead1Register+0xe8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	429a      	cmp	r2, r3
 8001584:	d808      	bhi.n	8001598 <modbusRead1Register+0x60>
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	4413      	add	r3, r2
 800158c:	461a      	mov	r2, r3
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <modbusRead1Register+0xe8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	429a      	cmp	r2, r3
 8001596:	d903      	bls.n	80015a0 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001598:	2002      	movs	r0, #2
 800159a:	f000 f843 	bl	8001624 <ModbusErrorReply>
		 return;
 800159e:	e03b      	b.n	8001618 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <modbusRead1Register+0xe8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2203      	movs	r2, #3
 80015a6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <modbusRead1Register+0xe8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	0052      	lsls	r2, r2, #1
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80015ba:	2400      	movs	r4, #0
 80015bc:	e020      	b.n	8001600 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <modbusRead1Register+0xe8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	88bb      	ldrh	r3, [r7, #4]
 80015c6:	4423      	add	r3, r4
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	18d1      	adds	r1, r2, r3
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <modbusRead1Register+0xe8>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	1c63      	adds	r3, r4, #1
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	7849      	ldrb	r1, [r1, #1]
 80015d6:	4413      	add	r3, r2
 80015d8:	460a      	mov	r2, r1
 80015da:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <modbusRead1Register+0xe8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	88bb      	ldrh	r3, [r7, #4]
 80015e6:	4423      	add	r3, r4
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	18d1      	adds	r1, r2, r3
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <modbusRead1Register+0xe8>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	0063      	lsls	r3, r4, #1
 80015f2:	3303      	adds	r3, #3
 80015f4:	7809      	ldrb	r1, [r1, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	460a      	mov	r2, r1
 80015fa:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80015fe:	3401      	adds	r4, #1
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	429c      	cmp	r4, r3
 8001604:	dbdb      	blt.n	80015be <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	3301      	adds	r3, #1
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <modbusRead1Register+0xe8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0052      	lsls	r2, r2, #1
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	200002a4 	.word	0x200002a4

08001624 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800162e:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <ModbusErrorReply+0x40>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	7e1a      	ldrb	r2, [r3, #24]
 8001634:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <ModbusErrorReply+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <ModbusErrorReply+0x40>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	79fa      	ldrb	r2, [r7, #7]
 8001648:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <ModbusErrorReply+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2202      	movs	r2, #2
 8001652:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200002a4 	.word	0x200002a4

08001668 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <Modbus_frame_response+0x2c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	7e1b      	ldrb	r3, [r3, #24]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d004      	beq.n	8001680 <Modbus_frame_response+0x18>
 8001676:	2b06      	cmp	r3, #6
 8001678:	d105      	bne.n	8001686 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800167a:	f7ff ff1d 	bl	80014b8 <modbusWrite1Register>
		break;
 800167e:	e006      	b.n	800168e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001680:	f7ff ff5a 	bl	8001538 <modbusRead1Register>
		break;
 8001684:	e003      	b.n	800168e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001686:	2001      	movs	r0, #1
 8001688:	f7ff ffcc 	bl	8001624 <ModbusErrorReply>
		break;
 800168c:	bf00      	nop

	}
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200002a4 	.word	0x200002a4

08001698 <Modbus_Emission>:

void Modbus_Emission()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800169e:	4b38      	ldr	r3, [pc, #224]	@ (8001780 <Modbus_Emission+0xe8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	d15d      	bne.n	8001768 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80016ac:	4b34      	ldr	r3, [pc, #208]	@ (8001780 <Modbus_Emission+0xe8>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b33      	ldr	r3, [pc, #204]	@ (8001780 <Modbus_Emission+0xe8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	7812      	ldrb	r2, [r2, #0]
 80016b6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80016ba:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <Modbus_Emission+0xe8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80016c2:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80016c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001780 <Modbus_Emission+0xe8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80016cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <Modbus_Emission+0xe8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80016d4:	461a      	mov	r2, r3
 80016d6:	f00a f9bf 	bl	800ba58 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80016da:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <Modbus_Emission+0xe8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <Modbus_Emission+0xe8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3203      	adds	r2, #3
 80016ea:	b292      	uxth	r2, r2
 80016ec:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016f0:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <Modbus_Emission+0xe8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016f8:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <Modbus_Emission+0xe8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001700:	3b02      	subs	r3, #2
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f7ff fd9f 	bl	8001248 <CRC16>
 800170a:	4603      	mov	r3, r0
 800170c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800170e:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <Modbus_Emission+0xe8>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <Modbus_Emission+0xe8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800171a:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800171c:	7939      	ldrb	r1, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	460a      	mov	r2, r1
 8001722:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001726:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <Modbus_Emission+0xe8>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <Modbus_Emission+0xe8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001732:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001734:	7979      	ldrb	r1, [r7, #5]
 8001736:	4413      	add	r3, r2
 8001738:	460a      	mov	r2, r1
 800173a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <Modbus_Emission+0xe8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001748:	2b20      	cmp	r3, #32
 800174a:	d10d      	bne.n	8001768 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <Modbus_Emission+0xe8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001752:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <Modbus_Emission+0xe8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <Modbus_Emission+0xe8>)
 800175c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800175e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001762:	461a      	mov	r2, r3
 8001764:	f008 fb36 	bl	8009dd4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <Modbus_Emission+0xe8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001770:	4b03      	ldr	r3, [pc, #12]	@ (8001780 <Modbus_Emission+0xe8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2200      	movs	r2, #0
 8001776:	755a      	strb	r2, [r3, #21]

}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200002a4 	.word	0x200002a4
 8001784:	00000000 	.word	0x00000000

08001788 <sendall>:
 *      Author: Phatt
 */
#include "globalVar.h"
#include "math.h"

void sendall(){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	// Vacuum Status
//	registerFrame[0x02].U16 = 0;
	// Movement Status
//	registerFrame[0x03].U16 = 0;
	// Movement Actual Status
	registerFrame[0x04].U16 = movementActualStatus;
 800178c:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <sendall+0x90>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b22      	ldr	r3, [pc, #136]	@ (800181c <sendall+0x94>)
 8001794:	811a      	strh	r2, [r3, #8]
	// z-axis Moving Status
	registerFrame[0x10].U16 = zMovingStatus;
 8001796:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <sendall+0x98>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <sendall+0x94>)
 800179e:	841a      	strh	r2, [r3, #32]
	// z-axis Actual Position
	registerFrame[0x11].U16 = floor((linearPos * 1000000))/100000;
 80017a0:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <sendall+0x9c>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001828 <sendall+0xa0>
 80017aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ae:	ee17 0a90 	vmov	r0, s15
 80017b2:	f7fe fe95 	bl	80004e0 <__aeabi_f2d>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	ec43 2b10 	vmov	d0, r2, r3
 80017be:	f00a fa5f 	bl	800bc80 <floor>
 80017c2:	ec51 0b10 	vmov	r0, r1, d0
 80017c6:	a312      	add	r3, pc, #72	@ (adr r3, 8001810 <sendall+0x88>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7ff f80a 	bl	80007e4 <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f98a 	bl	8000af0 <__aeabi_d2uiz>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <sendall+0x94>)
 80017e2:	845a      	strh	r2, [r3, #34]	@ 0x22
	// z-axis Actual Speed
	registerFrame[0x12].U16 = 0;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <sendall+0x94>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	849a      	strh	r2, [r3, #36]	@ 0x24
	// z-axis Actual Acceleration
	registerFrame[0x13].U16 = 0;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <sendall+0x94>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	84da      	strh	r2, [r3, #38]	@ 0x26
	// 5th shelves position
//	registerFrame[0x27].U16 = 0;
	// Goal point z
//	registerFrame[0x30].U16 = 0;
	//x-axis Actual position
	registerFrame[0x40].U16 = (xAxisPosition * 10);
 80017f0:	4b0e      	ldr	r3, [pc, #56]	@ (800182c <sendall+0xa4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	0092      	lsls	r2, r2, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <sendall+0x94>)
 8001802:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w
 8001810:	00000000 	.word	0x00000000
 8001814:	40f86a00 	.word	0x40f86a00
 8001818:	20000439 	.word	0x20000439
 800181c:	200002a8 	.word	0x200002a8
 8001820:	2000043c 	.word	0x2000043c
 8001824:	2000048c 	.word	0x2000048c
 8001828:	49742400 	.word	0x49742400
 800182c:	20000484 	.word	0x20000484

08001830 <watch_mode>:
//void call_all_mode(){
//	do_home();
//}
//

void watch_mode(){
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 == 1){
 8001834:	4b32      	ldr	r3, [pc, #200]	@ (8001900 <watch_mode+0xd0>)
 8001836:	885b      	ldrh	r3, [r3, #2]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d103      	bne.n	8001844 <watch_mode+0x14>
		modeSelection = 4;
 800183c:	4b31      	ldr	r3, [pc, #196]	@ (8001904 <watch_mode+0xd4>)
 800183e:	2204      	movs	r2, #4
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	e040      	b.n	80018c6 <watch_mode+0x96>
	}
	else if(registerFrame[0x01].U16 == 2){
 8001844:	4b2e      	ldr	r3, [pc, #184]	@ (8001900 <watch_mode+0xd0>)
 8001846:	885b      	ldrh	r3, [r3, #2]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d112      	bne.n	8001872 <watch_mode+0x42>
		modeSelection = 1;
 800184c:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <watch_mode+0xd4>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
		if(!limitMin) home_select = 1;
 8001852:	4b2d      	ldr	r3, [pc, #180]	@ (8001908 <watch_mode+0xd8>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d103      	bne.n	8001862 <watch_mode+0x32>
 800185a:	4b2c      	ldr	r3, [pc, #176]	@ (800190c <watch_mode+0xdc>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e031      	b.n	80018c6 <watch_mode+0x96>
		else if(limitMin) home_select = 2;
 8001862:	4b29      	ldr	r3, [pc, #164]	@ (8001908 <watch_mode+0xd8>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d02d      	beq.n	80018c6 <watch_mode+0x96>
 800186a:	4b28      	ldr	r3, [pc, #160]	@ (800190c <watch_mode+0xdc>)
 800186c:	2202      	movs	r2, #2
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e029      	b.n	80018c6 <watch_mode+0x96>
	}
	else if(registerFrame[0x01].U16 == 4){
 8001872:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <watch_mode+0xd0>)
 8001874:	885b      	ldrh	r3, [r3, #2]
 8001876:	2b04      	cmp	r3, #4
 8001878:	d114      	bne.n	80018a4 <watch_mode+0x74>
		modeSelection = 3;
 800187a:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <watch_mode+0xd4>)
 800187c:	2203      	movs	r2, #3
 800187e:	701a      	strb	r2, [r3, #0]
		jogModeState = goPick;
 8001880:	4923      	ldr	r1, [pc, #140]	@ (8001910 <watch_mode+0xe0>)
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9c1 2300 	strd	r2, r3, [r1]
		jogMode_timeStamp = tickk + 2000;
 800188e:	4b21      	ldr	r3, [pc, #132]	@ (8001914 <watch_mode+0xe4>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f512 64fa 	adds.w	r4, r2, #2000	@ 0x7d0
 8001898:	f143 0500 	adc.w	r5, r3, #0
 800189c:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <watch_mode+0xe8>)
 800189e:	e9c3 4500 	strd	r4, r5, [r3]
 80018a2:	e010      	b.n	80018c6 <watch_mode+0x96>
	}
	else if(registerFrame[0x01].U16 == 8){
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <watch_mode+0xd0>)
 80018a6:	885b      	ldrh	r3, [r3, #2]
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d10c      	bne.n	80018c6 <watch_mode+0x96>
		modeSelection = 2;
 80018ac:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <watch_mode+0xd4>)
 80018ae:	2202      	movs	r2, #2
 80018b0:	701a      	strb	r2, [r3, #0]
		pointMode_timeStamp = tickk + 2000;
 80018b2:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <watch_mode+0xe4>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f512 60fa 	adds.w	r0, r2, #2000	@ 0x7d0
 80018bc:	f143 0100 	adc.w	r1, r3, #0
 80018c0:	4b16      	ldr	r3, [pc, #88]	@ (800191c <watch_mode+0xec>)
 80018c2:	e9c3 0100 	strd	r0, r1, [r3]
	}

	if(modeSelection == 1){
 80018c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <watch_mode+0xd4>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d102      	bne.n	80018d4 <watch_mode+0xa4>
		do_home();
 80018ce:	f000 f827 	bl	8001920 <do_home>
		run_jog_mode();
	}
	else if(modeSelection == 4){
		set_shelves();
	}
}
 80018d2:	e013      	b.n	80018fc <watch_mode+0xcc>
	else if(modeSelection == 2){
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <watch_mode+0xd4>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d102      	bne.n	80018e2 <watch_mode+0xb2>
		run_point_mode();
 80018dc:	f000 f97a 	bl	8001bd4 <run_point_mode>
}
 80018e0:	e00c      	b.n	80018fc <watch_mode+0xcc>
	else if(modeSelection == 3){
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <watch_mode+0xd4>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d102      	bne.n	80018f0 <watch_mode+0xc0>
		run_jog_mode();
 80018ea:	f000 f9d3 	bl	8001c94 <run_jog_mode>
}
 80018ee:	e005      	b.n	80018fc <watch_mode+0xcc>
	else if(modeSelection == 4){
 80018f0:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <watch_mode+0xd4>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d101      	bne.n	80018fc <watch_mode+0xcc>
		set_shelves();
 80018f8:	f000 f84e 	bl	8001998 <set_shelves>
}
 80018fc:	bf00      	nop
 80018fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001900:	200002a8 	.word	0x200002a8
 8001904:	20000438 	.word	0x20000438
 8001908:	2000056c 	.word	0x2000056c
 800190c:	200004a3 	.word	0x200004a3
 8001910:	20000508 	.word	0x20000508
 8001914:	200004a8 	.word	0x200004a8
 8001918:	20000510 	.word	0x20000510
 800191c:	200004c0 	.word	0x200004c0

08001920 <do_home>:

void do_home(){
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	af00      	add	r7, sp, #0
	registerFrame[0x01].U16 = 0;
 8001924:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <do_home+0x64>)
 8001926:	2200      	movs	r2, #0
 8001928:	805a      	strh	r2, [r3, #2]
	registerFrame[0x10].U16 = 2;
 800192a:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <do_home+0x64>)
 800192c:	2202      	movs	r2, #2
 800192e:	841a      	strh	r2, [r3, #32]

	if(!limitMin){
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <do_home+0x68>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d105      	bne.n	8001944 <do_home+0x24>
		motor_run(7000, 2);
 8001938:	2102      	movs	r1, #2
 800193a:	f641 3058 	movw	r0, #7000	@ 0x1b58
 800193e:	f001 fc73 	bl	8003228 <motor_run>
		motor_run(0, 3);
		home_trigger = 1;
//		registerFrame[0x10].U16 = 0;
		modeSelection = 0;
	}
}
 8001942:	e01c      	b.n	800197e <do_home+0x5e>
	else if(limitMin){
 8001944:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <do_home+0x68>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d018      	beq.n	800197e <do_home+0x5e>
		home_timeStamp = HAL_GetTick() + 1000;
 800194c:	f003 fe12 	bl	8005574 <HAL_GetTick>
 8001950:	4603      	mov	r3, r0
 8001952:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001956:	2200      	movs	r2, #0
 8001958:	461c      	mov	r4, r3
 800195a:	4615      	mov	r5, r2
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <do_home+0x6c>)
 800195e:	e9c3 4500 	strd	r4, r5, [r3]
		motor_run(0, 3);
 8001962:	2103      	movs	r1, #3
 8001964:	2000      	movs	r0, #0
 8001966:	f001 fc5f 	bl	8003228 <motor_run>
		home_trigger = 1;
 800196a:	4909      	ldr	r1, [pc, #36]	@ (8001990 <do_home+0x70>)
 800196c:	f04f 0201 	mov.w	r2, #1
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	e9c1 2300 	strd	r2, r3, [r1]
		modeSelection = 0;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <do_home+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
}
 800197e:	bf00      	nop
 8001980:	bdb0      	pop	{r4, r5, r7, pc}
 8001982:	bf00      	nop
 8001984:	200002a8 	.word	0x200002a8
 8001988:	2000056c 	.word	0x2000056c
 800198c:	200004b0 	.word	0x200004b0
 8001990:	200004b8 	.word	0x200004b8
 8001994:	20000438 	.word	0x20000438

08001998 <set_shelves>:

void set_shelves(){
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	//set base status to 0 (default)
	registerFrame[0x01].U16 = 0;
 800199c:	4b82      	ldr	r3, [pc, #520]	@ (8001ba8 <set_shelves+0x210>)
 800199e:	2200      	movs	r2, #0
 80019a0:	805a      	strh	r2, [r3, #2]
	registerFrame[0x10].U16 = 1;
 80019a2:	4b81      	ldr	r3, [pc, #516]	@ (8001ba8 <set_shelves+0x210>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	841a      	strh	r2, [r3, #32]
	if(joySave > 39000){
 80019a8:	4b80      	ldr	r3, [pc, #512]	@ (8001bac <set_shelves+0x214>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f649 0258 	movw	r2, #39000	@ 0x9858
 80019b0:	4293      	cmp	r3, r2
 80019b2:	f340 80e5 	ble.w	8001b80 <set_shelves+0x1e8>
		if(ShelvesSelect == 1){
 80019b6:	4b7e      	ldr	r3, [pc, #504]	@ (8001bb0 <set_shelves+0x218>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d129      	bne.n	8001a12 <set_shelves+0x7a>
//			firstShelvesPosition = floor((linearPos * 1000000))/100000;
			registerFrame[0x23].U16 = floor((linearPos * 1000000))/100000;
 80019be:	4b7d      	ldr	r3, [pc, #500]	@ (8001bb4 <set_shelves+0x21c>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8001bb8 <set_shelves+0x220>
 80019c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019cc:	ee17 0a90 	vmov	r0, s15
 80019d0:	f7fe fd86 	bl	80004e0 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	ec43 2b10 	vmov	d0, r2, r3
 80019dc:	f00a f950 	bl	800bc80 <floor>
 80019e0:	ec51 0b10 	vmov	r0, r1, d0
 80019e4:	a36e      	add	r3, pc, #440	@ (adr r3, 8001ba0 <set_shelves+0x208>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe fefb 	bl	80007e4 <__aeabi_ddiv>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f87b 	bl	8000af0 <__aeabi_d2uiz>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba8 <set_shelves+0x210>)
 8001a00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
			firstShelvesPosition = registerFrame[0x23].U16;
 8001a04:	4b68      	ldr	r3, [pc, #416]	@ (8001ba8 <set_shelves+0x210>)
 8001a06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001bbc <set_shelves+0x224>)
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e0b6      	b.n	8001b80 <set_shelves+0x1e8>
		}
		else if(ShelvesSelect == 2){
 8001a12:	4b67      	ldr	r3, [pc, #412]	@ (8001bb0 <set_shelves+0x218>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d129      	bne.n	8001a6e <set_shelves+0xd6>
//			secondShelvesPosition = floor((linearPos * 1000000))/100000;
			registerFrame[0x24].U16 = floor((linearPos * 1000000))/100000;
 8001a1a:	4b66      	ldr	r3, [pc, #408]	@ (8001bb4 <set_shelves+0x21c>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001bb8 <set_shelves+0x220>
 8001a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a28:	ee17 0a90 	vmov	r0, s15
 8001a2c:	f7fe fd58 	bl	80004e0 <__aeabi_f2d>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	ec43 2b10 	vmov	d0, r2, r3
 8001a38:	f00a f922 	bl	800bc80 <floor>
 8001a3c:	ec51 0b10 	vmov	r0, r1, d0
 8001a40:	a357      	add	r3, pc, #348	@ (adr r3, 8001ba0 <set_shelves+0x208>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe fecd 	bl	80007e4 <__aeabi_ddiv>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f7ff f84d 	bl	8000af0 <__aeabi_d2uiz>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	4b53      	ldr	r3, [pc, #332]	@ (8001ba8 <set_shelves+0x210>)
 8001a5c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
			secondShelvesPosition = registerFrame[0x24].U16;
 8001a60:	4b51      	ldr	r3, [pc, #324]	@ (8001ba8 <set_shelves+0x210>)
 8001a62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b55      	ldr	r3, [pc, #340]	@ (8001bc0 <set_shelves+0x228>)
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e088      	b.n	8001b80 <set_shelves+0x1e8>
		}
		else if(ShelvesSelect == 3){
 8001a6e:	4b50      	ldr	r3, [pc, #320]	@ (8001bb0 <set_shelves+0x218>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d129      	bne.n	8001aca <set_shelves+0x132>
//			thirdsecondShelvesPosition = floor((linearPos * 1000000))/100000;
			registerFrame[0x25].U16 = floor((linearPos * 1000000))/100000;
 8001a76:	4b4f      	ldr	r3, [pc, #316]	@ (8001bb4 <set_shelves+0x21c>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001bb8 <set_shelves+0x220>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	ee17 0a90 	vmov	r0, s15
 8001a88:	f7fe fd2a 	bl	80004e0 <__aeabi_f2d>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	ec43 2b10 	vmov	d0, r2, r3
 8001a94:	f00a f8f4 	bl	800bc80 <floor>
 8001a98:	ec51 0b10 	vmov	r0, r1, d0
 8001a9c:	a340      	add	r3, pc, #256	@ (adr r3, 8001ba0 <set_shelves+0x208>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fe9f 	bl	80007e4 <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f81f 	bl	8000af0 <__aeabi_d2uiz>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba8 <set_shelves+0x210>)
 8001ab8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			thirdShelvesPosition = registerFrame[0x25].U16;
 8001abc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba8 <set_shelves+0x210>)
 8001abe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc4 <set_shelves+0x22c>)
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e05a      	b.n	8001b80 <set_shelves+0x1e8>
		}
		else if(ShelvesSelect == 4){
 8001aca:	4b39      	ldr	r3, [pc, #228]	@ (8001bb0 <set_shelves+0x218>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d129      	bne.n	8001b26 <set_shelves+0x18e>
//			fourthsecondShelvesPosition = floor((linearPos * 1000000))/100000;
			registerFrame[0x26].U16 = floor((linearPos * 1000000))/100000;
 8001ad2:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <set_shelves+0x21c>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001bb8 <set_shelves+0x220>
 8001adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae0:	ee17 0a90 	vmov	r0, s15
 8001ae4:	f7fe fcfc 	bl	80004e0 <__aeabi_f2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	ec43 2b10 	vmov	d0, r2, r3
 8001af0:	f00a f8c6 	bl	800bc80 <floor>
 8001af4:	ec51 0b10 	vmov	r0, r1, d0
 8001af8:	a329      	add	r3, pc, #164	@ (adr r3, 8001ba0 <set_shelves+0x208>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fe71 	bl	80007e4 <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7fe fff1 	bl	8000af0 <__aeabi_d2uiz>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <set_shelves+0x210>)
 8001b14:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			fourthShelvesPosition = registerFrame[0x26].U16;
 8001b18:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <set_shelves+0x210>)
 8001b1a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b29      	ldr	r3, [pc, #164]	@ (8001bc8 <set_shelves+0x230>)
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e02c      	b.n	8001b80 <set_shelves+0x1e8>
		}
		else if(ShelvesSelect == 5){
 8001b26:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <set_shelves+0x218>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d128      	bne.n	8001b80 <set_shelves+0x1e8>
//			fifthsecondShelvesPosition = floor((linearPos * 1000000))/100000;
			registerFrame[0x27].U16 = floor((linearPos * 1000000))/100000;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <set_shelves+0x21c>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001bb8 <set_shelves+0x220>
 8001b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3c:	ee17 0a90 	vmov	r0, s15
 8001b40:	f7fe fcce 	bl	80004e0 <__aeabi_f2d>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	ec43 2b10 	vmov	d0, r2, r3
 8001b4c:	f00a f898 	bl	800bc80 <floor>
 8001b50:	ec51 0b10 	vmov	r0, r1, d0
 8001b54:	a312      	add	r3, pc, #72	@ (adr r3, 8001ba0 <set_shelves+0x208>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	f7fe fe43 	bl	80007e4 <__aeabi_ddiv>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7fe ffc3 	bl	8000af0 <__aeabi_d2uiz>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <set_shelves+0x210>)
 8001b70:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			fifthShelvesPosition = registerFrame[0x27].U16;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <set_shelves+0x210>)
 8001b76:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b13      	ldr	r3, [pc, #76]	@ (8001bcc <set_shelves+0x234>)
 8001b7e:	601a      	str	r2, [r3, #0]
		}
	}
	if(ShelvesSelect == 6 && fifthShelvesPosition != 0){
 8001b80:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb0 <set_shelves+0x218>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b06      	cmp	r3, #6
 8001b86:	d109      	bne.n	8001b9c <set_shelves+0x204>
 8001b88:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <set_shelves+0x234>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <set_shelves+0x204>
		registerFrame[0x10].U16 = 0;
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <set_shelves+0x210>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	841a      	strh	r2, [r3, #32]
		modeSelection = 0;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <set_shelves+0x238>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
	}
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40f86a00 	.word	0x40f86a00
 8001ba8:	200002a8 	.word	0x200002a8
 8001bac:	20000550 	.word	0x20000550
 8001bb0:	2000055c 	.word	0x2000055c
 8001bb4:	2000048c 	.word	0x2000048c
 8001bb8:	49742400 	.word	0x49742400
 8001bbc:	2000046c 	.word	0x2000046c
 8001bc0:	20000470 	.word	0x20000470
 8001bc4:	20000474 	.word	0x20000474
 8001bc8:	20000478 	.word	0x20000478
 8001bcc:	2000047c 	.word	0x2000047c
 8001bd0:	20000438 	.word	0x20000438

08001bd4 <run_point_mode>:
//
void run_point_mode(){
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
	remoteCheck = 5;
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <run_point_mode+0x9c>)
 8001bda:	2205      	movs	r2, #5
 8001bdc:	601a      	str	r2, [r3, #0]
	registerFrame[0x01].U16 = 0;
 8001bde:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <run_point_mode+0xa0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	805a      	strh	r2, [r3, #2]
	registerFrame[0x10].U16 = 16;
 8001be4:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <run_point_mode+0xa0>)
 8001be6:	2210      	movs	r2, #16
 8001be8:	841a      	strh	r2, [r3, #32]
	if(point_traj_trig == 0){
 8001bea:	4b23      	ldr	r3, [pc, #140]	@ (8001c78 <run_point_mode+0xa4>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	d117      	bne.n	8001c24 <run_point_mode+0x50>
		trajec_target = (registerFrame[0x30].U16 / 10) - 80;
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c74 <run_point_mode+0xa0>)
 8001bf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8001bfa:	4a20      	ldr	r2, [pc, #128]	@ (8001c7c <run_point_mode+0xa8>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	08db      	lsrs	r3, r3, #3
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b50      	subs	r3, #80	@ 0x50
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <run_point_mode+0xac>)
 8001c10:	edc3 7a00 	vstr	s15, [r3]
		point_traj_trig = 1;
 8001c14:	4918      	ldr	r1, [pc, #96]	@ (8001c78 <run_point_mode+0xa4>)
 8001c16:	f04f 0201 	mov.w	r2, #1
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9c1 2300 	strd	r2, r3, [r1]
	else if(finish_state == 1 && point_traj_trig == 1 && pointMode_timeStamp < tickk){
		registerFrame[0x10].U16 = 0;
		point_traj_trig = 0;
		modeSelection = 0 ;
	}
}
 8001c22:	e020      	b.n	8001c66 <run_point_mode+0x92>
	else if(finish_state == 1 && point_traj_trig == 1 && pointMode_timeStamp < tickk){
 8001c24:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <run_point_mode+0xb0>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d11c      	bne.n	8001c66 <run_point_mode+0x92>
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <run_point_mode+0xa4>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	1e51      	subs	r1, r2, #1
 8001c34:	430b      	orrs	r3, r1
 8001c36:	d116      	bne.n	8001c66 <run_point_mode+0x92>
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <run_point_mode+0xb4>)
 8001c3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <run_point_mode+0xb8>)
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	4290      	cmp	r0, r2
 8001c46:	eb71 0303 	sbcs.w	r3, r1, r3
 8001c4a:	d20c      	bcs.n	8001c66 <run_point_mode+0x92>
		registerFrame[0x10].U16 = 0;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <run_point_mode+0xa0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	841a      	strh	r2, [r3, #32]
		point_traj_trig = 0;
 8001c52:	4909      	ldr	r1, [pc, #36]	@ (8001c78 <run_point_mode+0xa4>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9c1 2300 	strd	r2, r3, [r1]
		modeSelection = 0 ;
 8001c60:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <run_point_mode+0xbc>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	20000494 	.word	0x20000494
 8001c74:	200002a8 	.word	0x200002a8
 8001c78:	200004f8 	.word	0x200004f8
 8001c7c:	cccccccd 	.word	0xcccccccd
 8001c80:	20000574 	.word	0x20000574
 8001c84:	20000580 	.word	0x20000580
 8001c88:	200004c0 	.word	0x200004c0
 8001c8c:	200004a8 	.word	0x200004a8
 8001c90:	20000438 	.word	0x20000438

08001c94 <run_jog_mode>:

void run_jog_mode(){
 8001c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c98:	b090      	sub	sp, #64	@ 0x40
 8001c9a:	af00      	add	r7, sp, #0
	registerFrame[0x01].U16 = 0;
 8001c9c:	4a9b      	ldr	r2, [pc, #620]	@ (8001f0c <run_jog_mode+0x278>)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	8053      	strh	r3, [r2, #2]
	uint16_t pickall = registerFrame[0x21].U16, placeall = registerFrame[0x22].U16;
 8001ca2:	4b9a      	ldr	r3, [pc, #616]	@ (8001f0c <run_jog_mode+0x278>)
 8001ca4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001ca8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001caa:	4b98      	ldr	r3, [pc, #608]	@ (8001f0c <run_jog_mode+0x278>)
 8001cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cb0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	posOrder[0] = firstShelvesPosition/10;
 8001cb2:	4b97      	ldr	r3, [pc, #604]	@ (8001f10 <run_jog_mode+0x27c>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b97      	ldr	r3, [pc, #604]	@ (8001f14 <run_jog_mode+0x280>)
 8001cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc6:	4b94      	ldr	r3, [pc, #592]	@ (8001f18 <run_jog_mode+0x284>)
 8001cc8:	edc3 7a00 	vstr	s15, [r3]
	posOrder[1] = secondShelvesPosition/10;
 8001ccc:	4b93      	ldr	r3, [pc, #588]	@ (8001f1c <run_jog_mode+0x288>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b90      	ldr	r3, [pc, #576]	@ (8001f14 <run_jog_mode+0x280>)
 8001cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd6:	08db      	lsrs	r3, r3, #3
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce0:	4b8d      	ldr	r3, [pc, #564]	@ (8001f18 <run_jog_mode+0x284>)
 8001ce2:	edc3 7a01 	vstr	s15, [r3, #4]
	posOrder[2] = thirdShelvesPosition/10;
 8001ce6:	4b8e      	ldr	r3, [pc, #568]	@ (8001f20 <run_jog_mode+0x28c>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4b8a      	ldr	r3, [pc, #552]	@ (8001f14 <run_jog_mode+0x280>)
 8001cec:	fba3 2302 	umull	r2, r3, r3, r2
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cfa:	4b87      	ldr	r3, [pc, #540]	@ (8001f18 <run_jog_mode+0x284>)
 8001cfc:	edc3 7a02 	vstr	s15, [r3, #8]
	posOrder[3] = fourthShelvesPosition/10;
 8001d00:	4b88      	ldr	r3, [pc, #544]	@ (8001f24 <run_jog_mode+0x290>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b83      	ldr	r3, [pc, #524]	@ (8001f14 <run_jog_mode+0x280>)
 8001d06:	fba3 2302 	umull	r2, r3, r3, r2
 8001d0a:	08db      	lsrs	r3, r3, #3
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d14:	4b80      	ldr	r3, [pc, #512]	@ (8001f18 <run_jog_mode+0x284>)
 8001d16:	edc3 7a03 	vstr	s15, [r3, #12]
	posOrder[4] = fifthShelvesPosition/10;
 8001d1a:	4b83      	ldr	r3, [pc, #524]	@ (8001f28 <run_jog_mode+0x294>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f14 <run_jog_mode+0x280>)
 8001d20:	fba3 2302 	umull	r2, r3, r3, r2
 8001d24:	08db      	lsrs	r3, r3, #3
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2e:	4b7a      	ldr	r3, [pc, #488]	@ (8001f18 <run_jog_mode+0x284>)
 8001d30:	edc3 7a04 	vstr	s15, [r3, #16]
	pickOrder[0] = pickall/10000;
 8001d34:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001d36:	4b7d      	ldr	r3, [pc, #500]	@ (8001f2c <run_jog_mode+0x298>)
 8001d38:	fba3 2302 	umull	r2, r3, r3, r2
 8001d3c:	0b5b      	lsrs	r3, r3, #13
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4a7b      	ldr	r2, [pc, #492]	@ (8001f30 <run_jog_mode+0x29c>)
 8001d42:	8013      	strh	r3, [r2, #0]
	pickOrder[1] = (pickall/1000)%10;
 8001d44:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001d46:	4b7b      	ldr	r3, [pc, #492]	@ (8001f34 <run_jog_mode+0x2a0>)
 8001d48:	fba3 2302 	umull	r2, r3, r3, r2
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	4b70      	ldr	r3, [pc, #448]	@ (8001f14 <run_jog_mode+0x280>)
 8001d52:	fba3 2301 	umull	r2, r3, r3, r1
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	1acb      	subs	r3, r1, r3
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4a72      	ldr	r2, [pc, #456]	@ (8001f30 <run_jog_mode+0x29c>)
 8001d66:	8053      	strh	r3, [r2, #2]
	pickOrder[2] = (pickall/100)%10;
 8001d68:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001d6a:	4b73      	ldr	r3, [pc, #460]	@ (8001f38 <run_jog_mode+0x2a4>)
 8001d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	b299      	uxth	r1, r3
 8001d74:	4b67      	ldr	r3, [pc, #412]	@ (8001f14 <run_jog_mode+0x280>)
 8001d76:	fba3 2301 	umull	r2, r3, r3, r1
 8001d7a:	08da      	lsrs	r2, r3, #3
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	1acb      	subs	r3, r1, r3
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4a69      	ldr	r2, [pc, #420]	@ (8001f30 <run_jog_mode+0x29c>)
 8001d8a:	8093      	strh	r3, [r2, #4]
	pickOrder[3] = (pickall/10)%10;
 8001d8c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001d8e:	4b61      	ldr	r3, [pc, #388]	@ (8001f14 <run_jog_mode+0x280>)
 8001d90:	fba3 2302 	umull	r2, r3, r3, r2
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	b299      	uxth	r1, r3
 8001d98:	4b5e      	ldr	r3, [pc, #376]	@ (8001f14 <run_jog_mode+0x280>)
 8001d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	1acb      	subs	r3, r1, r3
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4a60      	ldr	r2, [pc, #384]	@ (8001f30 <run_jog_mode+0x29c>)
 8001dae:	80d3      	strh	r3, [r2, #6]
	pickOrder[4] = pickall%10;
 8001db0:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8001db2:	4b58      	ldr	r3, [pc, #352]	@ (8001f14 <run_jog_mode+0x280>)
 8001db4:	fba3 2301 	umull	r2, r3, r3, r1
 8001db8:	08da      	lsrs	r2, r3, #3
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	1acb      	subs	r3, r1, r3
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4a5a      	ldr	r2, [pc, #360]	@ (8001f30 <run_jog_mode+0x29c>)
 8001dc8:	8113      	strh	r3, [r2, #8]
	placeOrder[0] = placeall/10000;
 8001dca:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001dcc:	4b57      	ldr	r3, [pc, #348]	@ (8001f2c <run_jog_mode+0x298>)
 8001dce:	fba3 2302 	umull	r2, r3, r3, r2
 8001dd2:	0b5b      	lsrs	r3, r3, #13
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	4a59      	ldr	r2, [pc, #356]	@ (8001f3c <run_jog_mode+0x2a8>)
 8001dd8:	8013      	strh	r3, [r2, #0]
	placeOrder[1] = (placeall/1000)%10;
 8001dda:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001ddc:	4b55      	ldr	r3, [pc, #340]	@ (8001f34 <run_jog_mode+0x2a0>)
 8001dde:	fba3 2302 	umull	r2, r3, r3, r2
 8001de2:	099b      	lsrs	r3, r3, #6
 8001de4:	b299      	uxth	r1, r3
 8001de6:	4b4b      	ldr	r3, [pc, #300]	@ (8001f14 <run_jog_mode+0x280>)
 8001de8:	fba3 2301 	umull	r2, r3, r3, r1
 8001dec:	08da      	lsrs	r2, r3, #3
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	1acb      	subs	r3, r1, r3
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4a50      	ldr	r2, [pc, #320]	@ (8001f3c <run_jog_mode+0x2a8>)
 8001dfc:	8053      	strh	r3, [r2, #2]
	placeOrder[2] = (placeall/100)%10;
 8001dfe:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001e00:	4b4d      	ldr	r3, [pc, #308]	@ (8001f38 <run_jog_mode+0x2a4>)
 8001e02:	fba3 2302 	umull	r2, r3, r3, r2
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	b299      	uxth	r1, r3
 8001e0a:	4b42      	ldr	r3, [pc, #264]	@ (8001f14 <run_jog_mode+0x280>)
 8001e0c:	fba3 2301 	umull	r2, r3, r3, r1
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	1acb      	subs	r3, r1, r3
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	4a47      	ldr	r2, [pc, #284]	@ (8001f3c <run_jog_mode+0x2a8>)
 8001e20:	8093      	strh	r3, [r2, #4]
	placeOrder[3] = (placeall/10)%10;
 8001e22:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001e24:	4b3b      	ldr	r3, [pc, #236]	@ (8001f14 <run_jog_mode+0x280>)
 8001e26:	fba3 2302 	umull	r2, r3, r3, r2
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	b299      	uxth	r1, r3
 8001e2e:	4b39      	ldr	r3, [pc, #228]	@ (8001f14 <run_jog_mode+0x280>)
 8001e30:	fba3 2301 	umull	r2, r3, r3, r1
 8001e34:	08da      	lsrs	r2, r3, #3
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4a3e      	ldr	r2, [pc, #248]	@ (8001f3c <run_jog_mode+0x2a8>)
 8001e44:	80d3      	strh	r3, [r2, #6]
	placeOrder[4] = placeall%10;
 8001e46:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8001e48:	4b32      	ldr	r3, [pc, #200]	@ (8001f14 <run_jog_mode+0x280>)
 8001e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8001e4e:	08da      	lsrs	r2, r3, #3
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	1acb      	subs	r3, r1, r3
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4a37      	ldr	r2, [pc, #220]	@ (8001f3c <run_jog_mode+0x2a8>)
 8001e5e:	8113      	strh	r3, [r2, #8]

	if(jogModeState == goPick){
 8001e60:	4b37      	ldr	r3, [pc, #220]	@ (8001f40 <run_jog_mode+0x2ac>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	d178      	bne.n	8001f5c <run_jog_mode+0x2c8>
		registerFrame[0x10].U16 = 4;
 8001e6a:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <run_jog_mode+0x278>)
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	841a      	strh	r2, [r3, #32]
		if(jogMode_trig == 0){
 8001e70:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <run_jog_mode+0x2b0>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	d119      	bne.n	8001eae <run_jog_mode+0x21a>
			trajec_target = posOrder[pickOrder[currentOrder] - 1] - 5;
 8001e7a:	4b33      	ldr	r3, [pc, #204]	@ (8001f48 <run_jog_mode+0x2b4>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b2b      	ldr	r3, [pc, #172]	@ (8001f30 <run_jog_mode+0x29c>)
 8001e82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	4a23      	ldr	r2, [pc, #140]	@ (8001f18 <run_jog_mode+0x284>)
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001e96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f4c <run_jog_mode+0x2b8>)
 8001e9c:	edc3 7a00 	vstr	s15, [r3]
			jogMode_trig = 1;
 8001ea0:	4928      	ldr	r1, [pc, #160]	@ (8001f44 <run_jog_mode+0x2b0>)
 8001ea2:	f04f 0201 	mov.w	r2, #1
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(finish_state == 1 && jogMode_timeStamp < tickk){
 8001eae:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <run_jog_mode+0x2bc>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	f040 81b8 	bne.w	8002228 <run_jog_mode+0x594>
 8001eb8:	4b26      	ldr	r3, [pc, #152]	@ (8001f54 <run_jog_mode+0x2c0>)
 8001eba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ebe:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <run_jog_mode+0x2c4>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	4290      	cmp	r0, r2
 8001ec6:	eb71 0303 	sbcs.w	r3, r1, r3
 8001eca:	f080 81ad 	bcs.w	8002228 <run_jog_mode+0x594>
			jogModeState = Grap;
 8001ece:	491c      	ldr	r1, [pc, #112]	@ (8001f40 <run_jog_mode+0x2ac>)
 8001ed0:	f04f 0202 	mov.w	r2, #2
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	e9c1 2300 	strd	r2, r3, [r1]
			jogMode_timeStamp = tickk + 1500;
 8001edc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <run_jog_mode+0x2c4>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001ee6:	1851      	adds	r1, r2, r1
 8001ee8:	6339      	str	r1, [r7, #48]	@ 0x30
 8001eea:	f143 0300 	adc.w	r3, r3, #0
 8001eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ef0:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <run_jog_mode+0x2c0>)
 8001ef2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8001ef6:	e9c3 1200 	strd	r1, r2, [r3]
			jogMode_trig = 0;
 8001efa:	4912      	ldr	r1, [pc, #72]	@ (8001f44 <run_jog_mode+0x2b0>)
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	e9c1 2300 	strd	r2, r3, [r1]
 8001f08:	e18e      	b.n	8002228 <run_jog_mode+0x594>
 8001f0a:	bf00      	nop
 8001f0c:	200002a8 	.word	0x200002a8
 8001f10:	2000046c 	.word	0x2000046c
 8001f14:	cccccccd 	.word	0xcccccccd
 8001f18:	20000458 	.word	0x20000458
 8001f1c:	20000470 	.word	0x20000470
 8001f20:	20000474 	.word	0x20000474
 8001f24:	20000478 	.word	0x20000478
 8001f28:	2000047c 	.word	0x2000047c
 8001f2c:	d1b71759 	.word	0xd1b71759
 8001f30:	20000440 	.word	0x20000440
 8001f34:	10624dd3 	.word	0x10624dd3
 8001f38:	51eb851f 	.word	0x51eb851f
 8001f3c:	2000044c 	.word	0x2000044c
 8001f40:	20000508 	.word	0x20000508
 8001f44:	20000500 	.word	0x20000500
 8001f48:	20000456 	.word	0x20000456
 8001f4c:	20000574 	.word	0x20000574
 8001f50:	20000580 	.word	0x20000580
 8001f54:	20000510 	.word	0x20000510
 8001f58:	200004a8 	.word	0x200004a8
		}
	}
	else if(jogModeState == Grap){
 8001f5c:	4bbb      	ldr	r3, [pc, #748]	@ (800224c <run_jog_mode+0x5b8>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	1e91      	subs	r1, r2, #2
 8001f64:	430b      	orrs	r3, r1
 8001f66:	d153      	bne.n	8002010 <run_jog_mode+0x37c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2102      	movs	r1, #2
 8001f6c:	48b8      	ldr	r0, [pc, #736]	@ (8002250 <run_jog_mode+0x5bc>)
 8001f6e:	f004 f8e9 	bl	8006144 <HAL_GPIO_WritePin>
		if(jogMode_timeStamp - 1000 < tickk){
 8001f72:	4bb8      	ldr	r3, [pc, #736]	@ (8002254 <run_jog_mode+0x5c0>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f5b2 787a 	subs.w	r8, r2, #1000	@ 0x3e8
 8001f7c:	f143 39ff 	adc.w	r9, r3, #4294967295
 8001f80:	4bb5      	ldr	r3, [pc, #724]	@ (8002258 <run_jog_mode+0x5c4>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	4590      	cmp	r8, r2
 8001f88:	eb79 0303 	sbcs.w	r3, r9, r3
 8001f8c:	d204      	bcs.n	8001f98 <run_jog_mode+0x304>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2101      	movs	r1, #1
 8001f92:	48af      	ldr	r0, [pc, #700]	@ (8002250 <run_jog_mode+0x5bc>)
 8001f94:	f004 f8d6 	bl	8006144 <HAL_GPIO_WritePin>
		}
		if(jogMode_timeStamp - 200 < tickk){
 8001f98:	4bae      	ldr	r3, [pc, #696]	@ (8002254 <run_jog_mode+0x5c0>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	f1b2 04c8 	subs.w	r4, r2, #200	@ 0xc8
 8001fa2:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001fa6:	4bac      	ldr	r3, [pc, #688]	@ (8002258 <run_jog_mode+0x5c4>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	4294      	cmp	r4, r2
 8001fae:	eb75 0303 	sbcs.w	r3, r5, r3
 8001fb2:	d204      	bcs.n	8001fbe <run_jog_mode+0x32a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	48a5      	ldr	r0, [pc, #660]	@ (8002250 <run_jog_mode+0x5bc>)
 8001fba:	f004 f8c3 	bl	8006144 <HAL_GPIO_WritePin>
		}
		if(jogMode_timeStamp < tickk){
 8001fbe:	4ba5      	ldr	r3, [pc, #660]	@ (8002254 <run_jog_mode+0x5c0>)
 8001fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fc4:	4ba4      	ldr	r3, [pc, #656]	@ (8002258 <run_jog_mode+0x5c4>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	4290      	cmp	r0, r2
 8001fcc:	eb71 0303 	sbcs.w	r3, r1, r3
 8001fd0:	f080 812a 	bcs.w	8002228 <run_jog_mode+0x594>
			jogModeState = goPlace;
 8001fd4:	499d      	ldr	r1, [pc, #628]	@ (800224c <run_jog_mode+0x5b8>)
 8001fd6:	f04f 0201 	mov.w	r2, #1
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	e9c1 2300 	strd	r2, r3, [r1]
			jogMode_trig = 0;
 8001fe2:	499e      	ldr	r1, [pc, #632]	@ (800225c <run_jog_mode+0x5c8>)
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9c1 2300 	strd	r2, r3, [r1]
			jogMode_timeStamp = tickk + 2500;
 8001ff0:	4b99      	ldr	r3, [pc, #612]	@ (8002258 <run_jog_mode+0x5c4>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8001ffa:	1851      	adds	r1, r2, r1
 8001ffc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001ffe:	f143 0300 	adc.w	r3, r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002004:	4b93      	ldr	r3, [pc, #588]	@ (8002254 <run_jog_mode+0x5c0>)
 8002006:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800200a:	e9c3 1200 	strd	r1, r2, [r3]
 800200e:	e10b      	b.n	8002228 <run_jog_mode+0x594>
		}
	}
	else if(jogModeState == goPlace){
 8002010:	4b8e      	ldr	r3, [pc, #568]	@ (800224c <run_jog_mode+0x5b8>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	1e51      	subs	r1, r2, #1
 8002018:	430b      	orrs	r3, r1
 800201a:	d154      	bne.n	80020c6 <run_jog_mode+0x432>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2102      	movs	r1, #2
 8002020:	488b      	ldr	r0, [pc, #556]	@ (8002250 <run_jog_mode+0x5bc>)
 8002022:	f004 f88f 	bl	8006144 <HAL_GPIO_WritePin>
		registerFrame[0x10].U16 = 8;
 8002026:	4b8e      	ldr	r3, [pc, #568]	@ (8002260 <run_jog_mode+0x5cc>)
 8002028:	2208      	movs	r2, #8
 800202a:	841a      	strh	r2, [r3, #32]
		if(jogMode_trig == 0){
 800202c:	4b8b      	ldr	r3, [pc, #556]	@ (800225c <run_jog_mode+0x5c8>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	4313      	orrs	r3, r2
 8002034:	d119      	bne.n	800206a <run_jog_mode+0x3d6>
			trajec_target = posOrder[placeOrder[currentOrder] - 1] + 10;
 8002036:	4b8b      	ldr	r3, [pc, #556]	@ (8002264 <run_jog_mode+0x5d0>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	4b8a      	ldr	r3, [pc, #552]	@ (8002268 <run_jog_mode+0x5d4>)
 800203e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002042:	3b01      	subs	r3, #1
 8002044:	4a89      	ldr	r2, [pc, #548]	@ (800226c <run_jog_mode+0x5d8>)
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002052:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002056:	4b86      	ldr	r3, [pc, #536]	@ (8002270 <run_jog_mode+0x5dc>)
 8002058:	edc3 7a00 	vstr	s15, [r3]
			jogMode_trig = 1;
 800205c:	497f      	ldr	r1, [pc, #508]	@ (800225c <run_jog_mode+0x5c8>)
 800205e:	f04f 0201 	mov.w	r2, #1
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(finish_state == 1 && jogMode_timeStamp < tickk){
 800206a:	4b82      	ldr	r3, [pc, #520]	@ (8002274 <run_jog_mode+0x5e0>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	f040 80da 	bne.w	8002228 <run_jog_mode+0x594>
 8002074:	4b77      	ldr	r3, [pc, #476]	@ (8002254 <run_jog_mode+0x5c0>)
 8002076:	e9d3 0100 	ldrd	r0, r1, [r3]
 800207a:	4b77      	ldr	r3, [pc, #476]	@ (8002258 <run_jog_mode+0x5c4>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	4290      	cmp	r0, r2
 8002082:	eb71 0303 	sbcs.w	r3, r1, r3
 8002086:	f080 80cf 	bcs.w	8002228 <run_jog_mode+0x594>
			jogModeState = Place;
 800208a:	4970      	ldr	r1, [pc, #448]	@ (800224c <run_jog_mode+0x5b8>)
 800208c:	f04f 0203 	mov.w	r2, #3
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9c1 2300 	strd	r2, r3, [r1]
			jogMode_timeStamp = tickk + 1500;
 8002098:	4b6f      	ldr	r3, [pc, #444]	@ (8002258 <run_jog_mode+0x5c4>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80020a2:	1851      	adds	r1, r2, r1
 80020a4:	6239      	str	r1, [r7, #32]
 80020a6:	f143 0300 	adc.w	r3, r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ac:	4b69      	ldr	r3, [pc, #420]	@ (8002254 <run_jog_mode+0x5c0>)
 80020ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80020b2:	e9c3 1200 	strd	r1, r2, [r3]
			jogMode_trig = 0;
 80020b6:	4969      	ldr	r1, [pc, #420]	@ (800225c <run_jog_mode+0x5c8>)
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	e9c1 2300 	strd	r2, r3, [r1]
 80020c4:	e0b0      	b.n	8002228 <run_jog_mode+0x594>
//			currentOrder += 1;
		}
	}
	else if(jogModeState == Place){
 80020c6:	4b61      	ldr	r3, [pc, #388]	@ (800224c <run_jog_mode+0x5b8>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	1ed1      	subs	r1, r2, #3
 80020ce:	430b      	orrs	r3, r1
 80020d0:	f040 80aa 	bne.w	8002228 <run_jog_mode+0x594>
		if(jogMode_timeStamp -1200 < tickk){
 80020d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002254 <run_jog_mode+0x5c0>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f5b2 6196 	subs.w	r1, r2, #1200	@ 0x4b0
 80020de:	61b9      	str	r1, [r7, #24]
 80020e0:	f143 33ff 	adc.w	r3, r3, #4294967295
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002258 <run_jog_mode+0x5c4>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80020f0:	4621      	mov	r1, r4
 80020f2:	4291      	cmp	r1, r2
 80020f4:	4629      	mov	r1, r5
 80020f6:	4199      	sbcs	r1, r3
 80020f8:	d20a      	bcs.n	8002110 <run_jog_mode+0x47c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2101      	movs	r1, #1
 80020fe:	4854      	ldr	r0, [pc, #336]	@ (8002250 <run_jog_mode+0x5bc>)
 8002100:	f004 f820 	bl	8006144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8002104:	2200      	movs	r2, #0
 8002106:	2102      	movs	r1, #2
 8002108:	4851      	ldr	r0, [pc, #324]	@ (8002250 <run_jog_mode+0x5bc>)
 800210a:	f004 f81b 	bl	8006144 <HAL_GPIO_WritePin>
 800210e:	e05e      	b.n	80021ce <run_jog_mode+0x53a>
		}
		else if(jogMode_timeStamp - 800 < tickk){
 8002110:	4b50      	ldr	r3, [pc, #320]	@ (8002254 <run_jog_mode+0x5c0>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f5b2 7148 	subs.w	r1, r2, #800	@ 0x320
 800211a:	6139      	str	r1, [r7, #16]
 800211c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	4b4d      	ldr	r3, [pc, #308]	@ (8002258 <run_jog_mode+0x5c4>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800212c:	4621      	mov	r1, r4
 800212e:	4291      	cmp	r1, r2
 8002130:	4629      	mov	r1, r5
 8002132:	4199      	sbcs	r1, r3
 8002134:	d20a      	bcs.n	800214c <run_jog_mode+0x4b8>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8002136:	2201      	movs	r2, #1
 8002138:	2101      	movs	r1, #1
 800213a:	4845      	ldr	r0, [pc, #276]	@ (8002250 <run_jog_mode+0x5bc>)
 800213c:	f004 f802 	bl	8006144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	2102      	movs	r1, #2
 8002144:	4842      	ldr	r0, [pc, #264]	@ (8002250 <run_jog_mode+0x5bc>)
 8002146:	f003 fffd 	bl	8006144 <HAL_GPIO_WritePin>
 800214a:	e040      	b.n	80021ce <run_jog_mode+0x53a>
		}
		else if(jogMode_timeStamp - 550 < tickk){
 800214c:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <run_jog_mode+0x5c0>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	4949      	ldr	r1, [pc, #292]	@ (8002278 <run_jog_mode+0x5e4>)
 8002154:	1851      	adds	r1, r2, r1
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	f143 33ff 	adc.w	r3, r3, #4294967295
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b3e      	ldr	r3, [pc, #248]	@ (8002258 <run_jog_mode+0x5c4>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002168:	4621      	mov	r1, r4
 800216a:	4291      	cmp	r1, r2
 800216c:	4629      	mov	r1, r5
 800216e:	4199      	sbcs	r1, r3
 8002170:	d20a      	bcs.n	8002188 <run_jog_mode+0x4f4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8002172:	2201      	movs	r2, #1
 8002174:	2102      	movs	r1, #2
 8002176:	4836      	ldr	r0, [pc, #216]	@ (8002250 <run_jog_mode+0x5bc>)
 8002178:	f003 ffe4 	bl	8006144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 800217c:	2201      	movs	r2, #1
 800217e:	2101      	movs	r1, #1
 8002180:	4833      	ldr	r0, [pc, #204]	@ (8002250 <run_jog_mode+0x5bc>)
 8002182:	f003 ffdf 	bl	8006144 <HAL_GPIO_WritePin>
 8002186:	e022      	b.n	80021ce <run_jog_mode+0x53a>
		}
		else if(jogMode_timeStamp - 200 < tickk){
 8002188:	4b32      	ldr	r3, [pc, #200]	@ (8002254 <run_jog_mode+0x5c0>)
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	f1b2 0ac8 	subs.w	sl, r2, #200	@ 0xc8
 8002192:	f143 3bff 	adc.w	fp, r3, #4294967295
 8002196:	4b30      	ldr	r3, [pc, #192]	@ (8002258 <run_jog_mode+0x5c4>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	4592      	cmp	sl, r2
 800219e:	eb7b 0303 	sbcs.w	r3, fp, r3
 80021a2:	d205      	bcs.n	80021b0 <run_jog_mode+0x51c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2101      	movs	r1, #1
 80021a8:	4829      	ldr	r0, [pc, #164]	@ (8002250 <run_jog_mode+0x5bc>)
 80021aa:	f003 ffcb 	bl	8006144 <HAL_GPIO_WritePin>
 80021ae:	e00e      	b.n	80021ce <run_jog_mode+0x53a>
		}
		else if(jogMode_timeStamp > tickk){
 80021b0:	4b28      	ldr	r3, [pc, #160]	@ (8002254 <run_jog_mode+0x5c0>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	4928      	ldr	r1, [pc, #160]	@ (8002258 <run_jog_mode+0x5c4>)
 80021b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021bc:	4290      	cmp	r0, r2
 80021be:	eb71 0303 	sbcs.w	r3, r1, r3
 80021c2:	d204      	bcs.n	80021ce <run_jog_mode+0x53a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2102      	movs	r1, #2
 80021c8:	4821      	ldr	r0, [pc, #132]	@ (8002250 <run_jog_mode+0x5bc>)
 80021ca:	f003 ffbb 	bl	8006144 <HAL_GPIO_WritePin>
		}
		if(jogMode_timeStamp < tickk){
 80021ce:	4b21      	ldr	r3, [pc, #132]	@ (8002254 <run_jog_mode+0x5c0>)
 80021d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021d4:	4b20      	ldr	r3, [pc, #128]	@ (8002258 <run_jog_mode+0x5c4>)
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	4290      	cmp	r0, r2
 80021dc:	eb71 0303 	sbcs.w	r3, r1, r3
 80021e0:	d222      	bcs.n	8002228 <run_jog_mode+0x594>
			jogModeState = goPick;
 80021e2:	491a      	ldr	r1, [pc, #104]	@ (800224c <run_jog_mode+0x5b8>)
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	e9c1 2300 	strd	r2, r3, [r1]
			jogMode_trig = 0;
 80021f0:	491a      	ldr	r1, [pc, #104]	@ (800225c <run_jog_mode+0x5c8>)
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	e9c1 2300 	strd	r2, r3, [r1]
			jogMode_timeStamp = tickk + 2500;
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <run_jog_mode+0x5c4>)
 8002200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002204:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8002208:	1851      	adds	r1, r2, r1
 800220a:	6039      	str	r1, [r7, #0]
 800220c:	f143 0300 	adc.w	r3, r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <run_jog_mode+0x5c0>)
 8002214:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002218:	e9c3 1200 	strd	r1, r2, [r3]
			currentOrder += 1;
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <run_jog_mode+0x5d0>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <run_jog_mode+0x5d0>)
 8002226:	801a      	strh	r2, [r3, #0]
		}
	}

	if(currentOrder == 5){
 8002228:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <run_jog_mode+0x5d0>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d108      	bne.n	8002242 <run_jog_mode+0x5ae>
		registerFrame[0x10].U16 = 0;
 8002230:	4b0b      	ldr	r3, [pc, #44]	@ (8002260 <run_jog_mode+0x5cc>)
 8002232:	2200      	movs	r2, #0
 8002234:	841a      	strh	r2, [r3, #32]
		modeSelection = 0;
 8002236:	4b11      	ldr	r3, [pc, #68]	@ (800227c <run_jog_mode+0x5e8>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
		currentOrder = 0;
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <run_jog_mode+0x5d0>)
 800223e:	2200      	movs	r2, #0
 8002240:	801a      	strh	r2, [r3, #0]
	}

}
 8002242:	bf00      	nop
 8002244:	3740      	adds	r7, #64	@ 0x40
 8002246:	46bd      	mov	sp, r7
 8002248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800224c:	20000508 	.word	0x20000508
 8002250:	48000800 	.word	0x48000800
 8002254:	20000510 	.word	0x20000510
 8002258:	200004a8 	.word	0x200004a8
 800225c:	20000500 	.word	0x20000500
 8002260:	200002a8 	.word	0x200002a8
 8002264:	20000456 	.word	0x20000456
 8002268:	2000044c 	.word	0x2000044c
 800226c:	20000458 	.word	0x20000458
 8002270:	20000574 	.word	0x20000574
 8002274:	20000580 	.word	0x20000580
 8002278:	fffffdda 	.word	0xfffffdda
 800227c:	20000438 	.word	0x20000438

08002280 <readLead>:
 */
#include <stdio.h>
#include <math.h>
#include "globalVar.h"

void readLead(){
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	leadMin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8002284:	2180      	movs	r1, #128	@ 0x80
 8002286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800228a:	f003 ff43 	bl	8006114 <HAL_GPIO_ReadPin>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	4b27      	ldr	r3, [pc, #156]	@ (8002330 <readLead+0xb0>)
 8002294:	701a      	strb	r2, [r3, #0]
	leadMax = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8002296:	2140      	movs	r1, #64	@ 0x40
 8002298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800229c:	f003 ff3a 	bl	8006114 <HAL_GPIO_ReadPin>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b23      	ldr	r3, [pc, #140]	@ (8002334 <readLead+0xb4>)
 80022a6:	701a      	strb	r2, [r3, #0]
	if(leadMin == 1 && leadMax == 0){
 80022a8:	4b21      	ldr	r3, [pc, #132]	@ (8002330 <readLead+0xb0>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <readLead+0x40>
 80022b0:	4b20      	ldr	r3, [pc, #128]	@ (8002334 <readLead+0xb4>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d103      	bne.n	80022c0 <readLead+0x40>
		movementActualStatus = 1;
 80022b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002338 <readLead+0xb8>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e00e      	b.n	80022de <readLead+0x5e>
	}
	else if(leadMin == 0 && leadMax == 1){
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <readLead+0xb0>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <readLead+0x58>
 80022c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <readLead+0xb4>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d103      	bne.n	80022d8 <readLead+0x58>
		movementActualStatus = 2;
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <readLead+0xb8>)
 80022d2:	2202      	movs	r2, #2
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	e002      	b.n	80022de <readLead+0x5e>
	}
	else{
		movementActualStatus = 0;
 80022d8:	4b17      	ldr	r3, [pc, #92]	@ (8002338 <readLead+0xb8>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
	}

	if(registerFrame[0x02].U16 == 1){
 80022de:	4b17      	ldr	r3, [pc, #92]	@ (800233c <readLead+0xbc>)
 80022e0:	889b      	ldrh	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d105      	bne.n	80022f2 <readLead+0x72>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2102      	movs	r1, #2
 80022ea:	4815      	ldr	r0, [pc, #84]	@ (8002340 <readLead+0xc0>)
 80022ec:	f003 ff2a 	bl	8006144 <HAL_GPIO_WritePin>
 80022f0:	e008      	b.n	8002304 <readLead+0x84>
	}
	else if(registerFrame[0x02].U16 == 0){
 80022f2:	4b12      	ldr	r3, [pc, #72]	@ (800233c <readLead+0xbc>)
 80022f4:	889b      	ldrh	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d104      	bne.n	8002304 <readLead+0x84>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80022fa:	2201      	movs	r2, #1
 80022fc:	2102      	movs	r1, #2
 80022fe:	4810      	ldr	r0, [pc, #64]	@ (8002340 <readLead+0xc0>)
 8002300:	f003 ff20 	bl	8006144 <HAL_GPIO_WritePin>
	}

	if(registerFrame[0x03].U16 == 1){
 8002304:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <readLead+0xbc>)
 8002306:	88db      	ldrh	r3, [r3, #6]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d105      	bne.n	8002318 <readLead+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2101      	movs	r1, #1
 8002310:	480b      	ldr	r0, [pc, #44]	@ (8002340 <readLead+0xc0>)
 8002312:	f003 ff17 	bl	8006144 <HAL_GPIO_WritePin>
	}
	else if(registerFrame[0x03].U16 == 0){
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
	}
}
 8002316:	e008      	b.n	800232a <readLead+0xaa>
	else if(registerFrame[0x03].U16 == 0){
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <readLead+0xbc>)
 800231a:	88db      	ldrh	r3, [r3, #6]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d104      	bne.n	800232a <readLead+0xaa>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8002320:	2201      	movs	r2, #1
 8002322:	2101      	movs	r1, #1
 8002324:	4806      	ldr	r0, [pc, #24]	@ (8002340 <readLead+0xc0>)
 8002326:	f003 ff0d 	bl	8006144 <HAL_GPIO_WritePin>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000570 	.word	0x20000570
 8002334:	20000571 	.word	0x20000571
 8002338:	20000439 	.word	0x20000439
 800233c:	200002a8 	.word	0x200002a8
 8002340:	48000800 	.word	0x48000800

08002344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002348:	b092      	sub	sp, #72	@ 0x48
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800234c:	f003 f8ad 	bl	80054aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002350:	f000 f9dc 	bl	800270c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002354:	f000 feaa 	bl	80030ac <MX_GPIO_Init>
  MX_DMA_Init();
 8002358:	f000 fe76 	bl	8003048 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800235c:	f000 fe26 	bl	8002fac <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8002360:	f000 fd36 	bl	8002dd0 <MX_TIM16_Init>
  MX_TIM2_Init();
 8002364:	f000 fa78 	bl	8002858 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002368:	f000 fa1c 	bl	80027a4 <MX_TIM1_Init>
  MX_TIM8_Init();
 800236c:	f000 fc72 	bl	8002c54 <MX_TIM8_Init>
  MX_TIM20_Init();
 8002370:	f000 fd5e 	bl	8002e30 <MX_TIM20_Init>
  MX_TIM5_Init();
 8002374:	f000 fbf6 	bl	8002b64 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002378:	f000 fb58 	bl	8002a2c <MX_TIM4_Init>
  MX_TIM3_Init();
 800237c:	f000 faba 	bl	80028f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8002380:	4a6d      	ldr	r2, [pc, #436]	@ (8002538 <main+0x1f4>)
 8002382:	4b6e      	ldr	r3, [pc, #440]	@ (800253c <main+0x1f8>)
 8002384:	60d3      	str	r3, [r2, #12]
  hmodbus.htim = &htim16;
 8002386:	4a6c      	ldr	r2, [pc, #432]	@ (8002538 <main+0x1f4>)
 8002388:	4b6d      	ldr	r3, [pc, #436]	@ (8002540 <main+0x1fc>)
 800238a:	6113      	str	r3, [r2, #16]
  hmodbus.slaveAddress = 0x15;
 800238c:	4a6a      	ldr	r2, [pc, #424]	@ (8002538 <main+0x1f4>)
 800238e:	2315      	movs	r3, #21
 8002390:	7013      	strb	r3, [r2, #0]
  hmodbus.RegisterSize = 200;
 8002392:	4a69      	ldr	r2, [pc, #420]	@ (8002538 <main+0x1f4>)
 8002394:	23c8      	movs	r3, #200	@ 0xc8
 8002396:	6093      	str	r3, [r2, #8]
  Modbus_init(&hmodbus, registerFrame);
 8002398:	496a      	ldr	r1, [pc, #424]	@ (8002544 <main+0x200>)
 800239a:	4867      	ldr	r0, [pc, #412]	@ (8002538 <main+0x1f4>)
 800239c:	f7fe fefe 	bl	800119c <Modbus_init>

  HAL_TIM_Base_Start_IT(&htim2);
 80023a0:	4869      	ldr	r0, [pc, #420]	@ (8002548 <main+0x204>)
 80023a2:	f005 f80f 	bl	80073c4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80023a6:	213c      	movs	r1, #60	@ 0x3c
 80023a8:	4868      	ldr	r0, [pc, #416]	@ (800254c <main+0x208>)
 80023aa:	f005 fd1f 	bl	8007dec <HAL_TIM_Encoder_Start>
//
  HAL_TIM_Base_Start(&htim5);
 80023ae:	4868      	ldr	r0, [pc, #416]	@ (8002550 <main+0x20c>)
 80023b0:	f004 ff98 	bl	80072e4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80023b4:	2104      	movs	r1, #4
 80023b6:	4866      	ldr	r0, [pc, #408]	@ (8002550 <main+0x20c>)
 80023b8:	f005 f8ea 	bl	8007590 <HAL_TIM_PWM_Start>

  trajec_target = -10;
 80023bc:	4a65      	ldr	r2, [pc, #404]	@ (8002554 <main+0x210>)
 80023be:	4b66      	ldr	r3, [pc, #408]	@ (8002558 <main+0x214>)
 80023c0:	6013      	str	r3, [r2, #0]
//
//  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);

  arm_pid_instance_f32 PID = {0};
 80023c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80023c6:	2324      	movs	r3, #36	@ 0x24
 80023c8:	461a      	mov	r2, r3
 80023ca:	2100      	movs	r1, #0
 80023cc:	f009 fb12 	bl	800b9f4 <memset>
  PID.Kp = 0.4;
 80023d0:	4b62      	ldr	r3, [pc, #392]	@ (800255c <main+0x218>)
 80023d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PID.Ki = 0.0001;
 80023d4:	4b62      	ldr	r3, [pc, #392]	@ (8002560 <main+0x21c>)
 80023d6:	643b      	str	r3, [r7, #64]	@ 0x40
  PID.Kd = 0;
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	647b      	str	r3, [r7, #68]	@ 0x44
  arm_pid_init_f32(&PID, 0);
 80023de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f009 facf 	bl	800b988 <arm_pid_init_f32>

//  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_3);
//  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_4);
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 80023ea:	2100      	movs	r1, #0
 80023ec:	485d      	ldr	r0, [pc, #372]	@ (8002564 <main+0x220>)
 80023ee:	f005 fa4f 	bl	8007890 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 80023f2:	2104      	movs	r1, #4
 80023f4:	485b      	ldr	r0, [pc, #364]	@ (8002564 <main+0x220>)
 80023f6:	f005 fa4b 	bl	8007890 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 80023fa:	2100      	movs	r1, #0
 80023fc:	485a      	ldr	r0, [pc, #360]	@ (8002568 <main+0x224>)
 80023fe:	f005 fa47 	bl	8007890 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8002402:	2104      	movs	r1, #4
 8002404:	4858      	ldr	r0, [pc, #352]	@ (8002568 <main+0x224>)
 8002406:	f005 fa43 	bl	8007890 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 800240a:	2100      	movs	r1, #0
 800240c:	4857      	ldr	r0, [pc, #348]	@ (800256c <main+0x228>)
 800240e:	f005 fa3f 	bl	8007890 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8002412:	2104      	movs	r1, #4
 8002414:	4855      	ldr	r0, [pc, #340]	@ (800256c <main+0x228>)
 8002416:	f005 fa3b 	bl	8007890 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_3);
 800241a:	2108      	movs	r1, #8
 800241c:	4853      	ldr	r0, [pc, #332]	@ (800256c <main+0x228>)
 800241e:	f005 fa37 	bl	8007890 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_4);
 8002422:	210c      	movs	r1, #12
 8002424:	4851      	ldr	r0, [pc, #324]	@ (800256c <main+0x228>)
 8002426:	f005 fa33 	bl	8007890 <HAL_TIM_IC_Start>
//  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_1);
//  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_2);
  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_1);
 800242a:	2100      	movs	r1, #0
 800242c:	4850      	ldr	r0, [pc, #320]	@ (8002570 <main+0x22c>)
 800242e:	f005 fa2f 	bl	8007890 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_2);
 8002432:	2104      	movs	r1, #4
 8002434:	484e      	ldr	r0, [pc, #312]	@ (8002570 <main+0x22c>)
 8002436:	f005 fa2b 	bl	8007890 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_3);
 800243a:	2108      	movs	r1, #8
 800243c:	484c      	ldr	r0, [pc, #304]	@ (8002570 <main+0x22c>)
 800243e:	f005 fa27 	bl	8007890 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim20, TIM_CHANNEL_4);
 8002442:	210c      	movs	r1, #12
 8002444:	484a      	ldr	r0, [pc, #296]	@ (8002570 <main+0x22c>)
 8002446:	f005 fa23 	bl	8007890 <HAL_TIM_IC_Start>
//
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 2);
  p1_timeStamp = HAL_GetTick();
 800244a:	f003 f893 	bl	8005574 <HAL_GetTick>
 800244e:	4603      	mov	r3, r0
 8002450:	2200      	movs	r2, #0
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	61fa      	str	r2, [r7, #28]
 8002456:	4b47      	ldr	r3, [pc, #284]	@ (8002574 <main+0x230>)
 8002458:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800245c:	e9c3 1200 	strd	r1, r2, [r3]
  p2_timeStamp = HAL_GetTick();
 8002460:	f003 f888 	bl	8005574 <HAL_GetTick>
 8002464:	4603      	mov	r3, r0
 8002466:	2200      	movs	r2, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	617a      	str	r2, [r7, #20]
 800246c:	4b42      	ldr	r3, [pc, #264]	@ (8002578 <main+0x234>)
 800246e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002472:	e9c3 1200 	strd	r1, r2, [r3]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(modBusTimeStamp < HAL_GetTick()){
 8002476:	f003 f87d 	bl	8005574 <HAL_GetTick>
 800247a:	4603      	mov	r3, r0
 800247c:	2200      	movs	r2, #0
 800247e:	461c      	mov	r4, r3
 8002480:	4615      	mov	r5, r2
 8002482:	4b3e      	ldr	r3, [pc, #248]	@ (800257c <main+0x238>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	42a2      	cmp	r2, r4
 800248a:	41ab      	sbcs	r3, r5
 800248c:	d213      	bcs.n	80024b6 <main+0x172>
		  registerFrame[0x00].U16 = 22881;
 800248e:	4b2d      	ldr	r3, [pc, #180]	@ (8002544 <main+0x200>)
 8002490:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002494:	801a      	strh	r2, [r3, #0]
		  sendall();
 8002496:	f7ff f977 	bl	8001788 <sendall>
		  modBusTimeStamp += 200;
 800249a:	4b38      	ldr	r3, [pc, #224]	@ (800257c <main+0x238>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	f143 0300 	adc.w	r3, r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	4b33      	ldr	r3, [pc, #204]	@ (800257c <main+0x238>)
 80024ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80024b2:	e9c3 1200 	strd	r1, r2, [r3]
	  }


	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim1);
 80024b6:	4b25      	ldr	r3, [pc, #148]	@ (800254c <main+0x208>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	4a30      	ldr	r2, [pc, #192]	@ (8002580 <main+0x23c>)
 80024be:	6013      	str	r3, [r2, #0]
	  QEI_raw = QEIReadRaw;
 80024c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002580 <main+0x23c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002584 <main+0x240>)
 80024c6:	6013      	str	r3, [r2, #0]
	  QEIdata.QEIRead[0] = QEIReadRaw;
 80024c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002580 <main+0x23c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002588 <main+0x244>)
 80024ce:	6013      	str	r3, [r2, #0]

	  Modbus_Protocal_Worker();
 80024d0:	f7fe fef0 	bl	80012b4 <Modbus_Protocal_Worker>
	  is_motor_should_run();
 80024d4:	f002 fc2c 	bl	8004d30 <is_motor_should_run>
	  readLimit();
 80024d8:	f002 fc6e 	bl	8004db8 <readLimit>
	  changeUnit();
 80024dc:	f001 faa0 	bl	8003a20 <changeUnit>

	  linearPos = QEI_mm;
 80024e0:	4b2a      	ldr	r3, [pc, #168]	@ (800258c <main+0x248>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002590 <main+0x24c>)
 80024e6:	6013      	str	r3, [r2, #0]

	  Emer = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 80024e8:	2180      	movs	r1, #128	@ 0x80
 80024ea:	482a      	ldr	r0, [pc, #168]	@ (8002594 <main+0x250>)
 80024ec:	f003 fe12 	bl	8006114 <HAL_GPIO_ReadPin>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b28      	ldr	r3, [pc, #160]	@ (8002598 <main+0x254>)
 80024f6:	801a      	strh	r2, [r3, #0]
	  tickk = HAL_GetTick();
 80024f8:	f003 f83c 	bl	8005574 <HAL_GetTick>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2200      	movs	r2, #0
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	4b25      	ldr	r3, [pc, #148]	@ (800259c <main+0x258>)
 8002506:	e9d7 1200 	ldrd	r1, r2, [r7]
 800250a:	e9c3 1200 	strd	r1, r2, [r3]

	  if(Emer == 0){
 800250e:	4b22      	ldr	r3, [pc, #136]	@ (8002598 <main+0x254>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d146      	bne.n	80025a4 <main+0x260>
		  readLead();
 8002516:	f7ff feb3 	bl	8002280 <readLead>
		  motor_run(0, 3);
 800251a:	2203      	movs	r2, #3
 800251c:	f04f 0000 	mov.w	r0, #0
 8002520:	f04f 0100 	mov.w	r1, #0
 8002524:	f000 fe80 	bl	8003228 <motor_run>
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);

		  registerFrame[0x10].U16 = 0;
 8002528:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <main+0x200>)
 800252a:	2200      	movs	r2, #0
 800252c:	841a      	strh	r2, [r3, #32]
		  modeSelection = 0;
 800252e:	4b1c      	ldr	r3, [pc, #112]	@ (80025a0 <main+0x25c>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e0a0      	b.n	8002678 <main+0x334>
 8002536:	bf00      	nop
 8002538:	20000d70 	.word	0x20000d70
 800253c:	20000be4 	.word	0x20000be4
 8002540:	20000a4c 	.word	0x20000a4c
 8002544:	200002a8 	.word	0x200002a8
 8002548:	20000650 	.word	0x20000650
 800254c:	20000584 	.word	0x20000584
 8002550:	200008b4 	.word	0x200008b4
 8002554:	20000574 	.word	0x20000574
 8002558:	c1200000 	.word	0xc1200000
 800255c:	3ecccccd 	.word	0x3ecccccd
 8002560:	38d1b717 	.word	0x38d1b717
 8002564:	2000071c 	.word	0x2000071c
 8002568:	200007e8 	.word	0x200007e8
 800256c:	20000980 	.word	0x20000980
 8002570:	20000b18 	.word	0x20000b18
 8002574:	20000200 	.word	0x20000200
 8002578:	20000208 	.word	0x20000208
 800257c:	20000578 	.word	0x20000578
 8002580:	20000488 	.word	0x20000488
 8002584:	20001254 	.word	0x20001254
 8002588:	20001248 	.word	0x20001248
 800258c:	20001258 	.word	0x20001258
 8002590:	2000048c 	.word	0x2000048c
 8002594:	48000800 	.word	0x48000800
 8002598:	20000572 	.word	0x20000572
 800259c:	200004a8 	.word	0x200004a8
 80025a0:	20000438 	.word	0x20000438
	  }
	  else{
		  readLead();
 80025a4:	f7ff fe6c 	bl	8002280 <readLead>
		  remote_recieve();
 80025a8:	f000 ff10 	bl	80033cc <remote_recieve>
		  watch_mode();
 80025ac:	f7ff f940 	bl	8001830 <watch_mode>
		  go_point();
 80025b0:	f001 f976 	bl	80038a0 <go_point>
//		  z_axis_control_by_remote();

		  if(home_trigger == 1){
 80025b4:	4b44      	ldr	r3, [pc, #272]	@ (80026c8 <main+0x384>)
 80025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ba:	1e51      	subs	r1, r2, #1
 80025bc:	430b      	orrs	r3, r1
 80025be:	d123      	bne.n	8002608 <main+0x2c4>
			  if(home_timeStamp < HAL_GetTick()){
 80025c0:	f002 ffd8 	bl	8005574 <HAL_GetTick>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2200      	movs	r2, #0
 80025c8:	4698      	mov	r8, r3
 80025ca:	4691      	mov	r9, r2
 80025cc:	4b3f      	ldr	r3, [pc, #252]	@ (80026cc <main+0x388>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	4542      	cmp	r2, r8
 80025d4:	eb73 0309 	sbcs.w	r3, r3, r9
 80025d8:	d216      	bcs.n	8002608 <main+0x2c4>
		  		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80025da:	4b3d      	ldr	r3, [pc, #244]	@ (80026d0 <main+0x38c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	@ 0x24
		  		QEIReadRaw = 0;
 80025e2:	4b3c      	ldr	r3, [pc, #240]	@ (80026d4 <main+0x390>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
		  		home_trigger = 0;
 80025e8:	4937      	ldr	r1, [pc, #220]	@ (80026c8 <main+0x384>)
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e9c1 2300 	strd	r2, r3, [r1]
		  		xAxisPosition = 0;
 80025f6:	4b38      	ldr	r3, [pc, #224]	@ (80026d8 <main+0x394>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
		  		zMovingStatus = 0;
 80025fc:	4b37      	ldr	r3, [pc, #220]	@ (80026dc <main+0x398>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
		  		home_trig = 0;
 8002602:	4b37      	ldr	r3, [pc, #220]	@ (80026e0 <main+0x39c>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if(pointMode_timeTrig == 1){
 8002608:	4b36      	ldr	r3, [pc, #216]	@ (80026e4 <main+0x3a0>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	1e51      	subs	r1, r2, #1
 8002610:	430b      	orrs	r3, r1
 8002612:	d119      	bne.n	8002648 <main+0x304>
			  if(pointMode_timeStamp < HAL_GetTick()){
 8002614:	f002 ffae 	bl	8005574 <HAL_GetTick>
 8002618:	4603      	mov	r3, r0
 800261a:	2200      	movs	r2, #0
 800261c:	469a      	mov	sl, r3
 800261e:	4693      	mov	fp, r2
 8002620:	4b31      	ldr	r3, [pc, #196]	@ (80026e8 <main+0x3a4>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	4552      	cmp	r2, sl
 8002628:	eb73 030b 	sbcs.w	r3, r3, fp
 800262c:	d20c      	bcs.n	8002648 <main+0x304>
				  pointMode_timeTrig = 0;
 800262e:	492d      	ldr	r1, [pc, #180]	@ (80026e4 <main+0x3a0>)
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9c1 2300 	strd	r2, r3, [r1]
				  zMovingStatus = 0;
 800263c:	4b27      	ldr	r3, [pc, #156]	@ (80026dc <main+0x398>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
				  goalPointZ = 0;
 8002642:	4b2a      	ldr	r3, [pc, #168]	@ (80026ec <main+0x3a8>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
			  }
		  }

		  if(trajec_target >= 0 && trajec_state == 0){
 8002648:	4b29      	ldr	r3, [pc, #164]	@ (80026f0 <main+0x3ac>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002656:	db07      	blt.n	8002668 <main+0x324>
 8002658:	4b26      	ldr	r3, [pc, #152]	@ (80026f4 <main+0x3b0>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <main+0x324>
		  		QEI_start = QEI_mm;
 8002660:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <main+0x3b4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a25      	ldr	r2, [pc, #148]	@ (80026fc <main+0x3b8>)
 8002666:	6013      	str	r3, [r2, #0]
		  }
		  Trajectory();
 8002668:	f001 fcec 	bl	8004044 <Trajectory>
		  HomemadePID();
 800266c:	f001 fa14 	bl	8003a98 <HomemadePID>

		  LastPos = QEI_mm;
 8002670:	4b21      	ldr	r3, [pc, #132]	@ (80026f8 <main+0x3b4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a22      	ldr	r2, [pc, #136]	@ (8002700 <main+0x3bc>)
 8002676:	6013      	str	r3, [r2, #0]
	  }
//	  init_motor_cal();
//	  remote_recieve();
//	  watch_mode();
	  abbs = QEIdata.QEIRead[0] - QEIdata.QEIRead[1];
 8002678:	4b22      	ldr	r3, [pc, #136]	@ (8002704 <main+0x3c0>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b21      	ldr	r3, [pc, #132]	@ (8002704 <main+0x3c0>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	461a      	mov	r2, r3
 8002684:	4b20      	ldr	r3, [pc, #128]	@ (8002708 <main+0x3c4>)
 8002686:	601a      	str	r2, [r3, #0]
	  if(abbs > 32767)
 8002688:	4b1f      	ldr	r3, [pc, #124]	@ (8002708 <main+0x3c4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002690:	db07      	blt.n	80026a2 <main+0x35e>
//		  abbs -= 65535;
	  	  __HAL_TIM_SET_COUNTER(&htim1, QEIReadRaw - 65535);
 8002692:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <main+0x390>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a0e      	ldr	r2, [pc, #56]	@ (80026d0 <main+0x38c>)
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 800269e:	3bff      	subs	r3, #255	@ 0xff
 80026a0:	6253      	str	r3, [r2, #36]	@ 0x24
	  if(abbs < -32767)
 80026a2:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <main+0x3c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80026aa:	dc07      	bgt.n	80026bc <main+0x378>
//		  abbs += 65535;
	  	  __HAL_TIM_SET_COUNTER(&htim1, QEIReadRaw - 65535);
 80026ac:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <main+0x390>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a07      	ldr	r2, [pc, #28]	@ (80026d0 <main+0x38c>)
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 80026b8:	3bff      	subs	r3, #255	@ 0xff
 80026ba:	6253      	str	r3, [r2, #36]	@ 0x24

	  QEIdata.QEIRead[1] = QEIdata.QEIRead[0];
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <main+0x3c0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a10      	ldr	r2, [pc, #64]	@ (8002704 <main+0x3c0>)
 80026c2:	6053      	str	r3, [r2, #4]
  {
 80026c4:	e6d7      	b.n	8002476 <main+0x132>
 80026c6:	bf00      	nop
 80026c8:	200004b8 	.word	0x200004b8
 80026cc:	200004b0 	.word	0x200004b0
 80026d0:	20000584 	.word	0x20000584
 80026d4:	20000488 	.word	0x20000488
 80026d8:	20000484 	.word	0x20000484
 80026dc:	2000043c 	.word	0x2000043c
 80026e0:	200004a2 	.word	0x200004a2
 80026e4:	200004c8 	.word	0x200004c8
 80026e8:	200004c0 	.word	0x200004c0
 80026ec:	20000480 	.word	0x20000480
 80026f0:	20000574 	.word	0x20000574
 80026f4:	200012d8 	.word	0x200012d8
 80026f8:	20001258 	.word	0x20001258
 80026fc:	200012d4 	.word	0x200012d4
 8002700:	20001290 	.word	0x20001290
 8002704:	20001248 	.word	0x20001248
 8002708:	20001250 	.word	0x20001250

0800270c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b094      	sub	sp, #80	@ 0x50
 8002710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002712:	f107 0318 	add.w	r3, r7, #24
 8002716:	2238      	movs	r2, #56	@ 0x38
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f009 f96a 	bl	800b9f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800272e:	2000      	movs	r0, #0
 8002730:	f003 fd44 	bl	80061bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002734:	2302      	movs	r3, #2
 8002736:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002738:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800273e:	2340      	movs	r3, #64	@ 0x40
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002742:	2302      	movs	r3, #2
 8002744:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002746:	2302      	movs	r3, #2
 8002748:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800274a:	2304      	movs	r3, #4
 800274c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800274e:	2355      	movs	r3, #85	@ 0x55
 8002750:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002752:	2302      	movs	r3, #2
 8002754:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002756:	2302      	movs	r3, #2
 8002758:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800275a:	2302      	movs	r3, #2
 800275c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800275e:	f107 0318 	add.w	r3, r7, #24
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fdde 	bl	8006324 <HAL_RCC_OscConfig>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800276e:	f002 fad9 	bl	8004d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002772:	230f      	movs	r3, #15
 8002774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002776:	2303      	movs	r3, #3
 8002778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	2104      	movs	r1, #4
 800278a:	4618      	mov	r0, r3
 800278c:	f004 f8dc 	bl	8006948 <HAL_RCC_ClockConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002796:	f002 fac5 	bl	8004d24 <Error_Handler>
  }
}
 800279a:	bf00      	nop
 800279c:	3750      	adds	r7, #80	@ 0x50
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	@ 0x30
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	2224      	movs	r2, #36	@ 0x24
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f009 f91e 	bl	800b9f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b8:	463b      	mov	r3, r7
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027c2:	4b23      	ldr	r3, [pc, #140]	@ (8002850 <MX_TIM1_Init+0xac>)
 80027c4:	4a23      	ldr	r2, [pc, #140]	@ (8002854 <MX_TIM1_Init+0xb0>)
 80027c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027c8:	4b21      	ldr	r3, [pc, #132]	@ (8002850 <MX_TIM1_Init+0xac>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ce:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <MX_TIM1_Init+0xac>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <MX_TIM1_Init+0xac>)
 80027d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002850 <MX_TIM1_Init+0xac>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002850 <MX_TIM1_Init+0xac>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e8:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <MX_TIM1_Init+0xac>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027ee:	2303      	movs	r3, #3
 80027f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027f6:	2301      	movs	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80027fe:	2302      	movs	r3, #2
 8002800:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002806:	2301      	movs	r3, #1
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800280a:	2300      	movs	r3, #0
 800280c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 800280e:	2302      	movs	r3, #2
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002812:	f107 030c 	add.w	r3, r7, #12
 8002816:	4619      	mov	r1, r3
 8002818:	480d      	ldr	r0, [pc, #52]	@ (8002850 <MX_TIM1_Init+0xac>)
 800281a:	f005 fa33 	bl	8007c84 <HAL_TIM_Encoder_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002824:	f002 fa7e 	bl	8004d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002828:	2300      	movs	r3, #0
 800282a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002834:	463b      	mov	r3, r7
 8002836:	4619      	mov	r1, r3
 8002838:	4805      	ldr	r0, [pc, #20]	@ (8002850 <MX_TIM1_Init+0xac>)
 800283a:	f007 f8cb 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002844:	f002 fa6e 	bl	8004d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002848:	bf00      	nop
 800284a:	3730      	adds	r7, #48	@ 0x30
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000584 	.word	0x20000584
 8002854:	40012c00 	.word	0x40012c00

08002858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800285e:	f107 0310 	add.w	r3, r7, #16
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002876:	4b1e      	ldr	r3, [pc, #120]	@ (80028f0 <MX_TIM2_Init+0x98>)
 8002878:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800287c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800287e:	4b1c      	ldr	r3, [pc, #112]	@ (80028f0 <MX_TIM2_Init+0x98>)
 8002880:	22a9      	movs	r2, #169	@ 0xa9
 8002882:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002884:	4b1a      	ldr	r3, [pc, #104]	@ (80028f0 <MX_TIM2_Init+0x98>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800288a:	4b19      	ldr	r3, [pc, #100]	@ (80028f0 <MX_TIM2_Init+0x98>)
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002892:	4b17      	ldr	r3, [pc, #92]	@ (80028f0 <MX_TIM2_Init+0x98>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002898:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <MX_TIM2_Init+0x98>)
 800289a:	2200      	movs	r2, #0
 800289c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800289e:	4814      	ldr	r0, [pc, #80]	@ (80028f0 <MX_TIM2_Init+0x98>)
 80028a0:	f004 fcbc 	bl	800721c <HAL_TIM_Base_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80028aa:	f002 fa3b 	bl	8004d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	4619      	mov	r1, r3
 80028ba:	480d      	ldr	r0, [pc, #52]	@ (80028f0 <MX_TIM2_Init+0x98>)
 80028bc:	f005 fe4e 	bl	800855c <HAL_TIM_ConfigClockSource>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80028c6:	f002 fa2d 	bl	8004d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4806      	ldr	r0, [pc, #24]	@ (80028f0 <MX_TIM2_Init+0x98>)
 80028d8:	f007 f87c 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80028e2:	f002 fa1f 	bl	8004d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000650 	.word	0x20000650

080028f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b090      	sub	sp, #64	@ 0x40
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002924:	463b      	mov	r3, r7
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002930:	4b3c      	ldr	r3, [pc, #240]	@ (8002a24 <MX_TIM3_Init+0x130>)
 8002932:	4a3d      	ldr	r2, [pc, #244]	@ (8002a28 <MX_TIM3_Init+0x134>)
 8002934:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8002936:	4b3b      	ldr	r3, [pc, #236]	@ (8002a24 <MX_TIM3_Init+0x130>)
 8002938:	22a9      	movs	r2, #169	@ 0xa9
 800293a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293c:	4b39      	ldr	r3, [pc, #228]	@ (8002a24 <MX_TIM3_Init+0x130>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002942:	4b38      	ldr	r3, [pc, #224]	@ (8002a24 <MX_TIM3_Init+0x130>)
 8002944:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002948:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294a:	4b36      	ldr	r3, [pc, #216]	@ (8002a24 <MX_TIM3_Init+0x130>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002950:	4b34      	ldr	r3, [pc, #208]	@ (8002a24 <MX_TIM3_Init+0x130>)
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002956:	4833      	ldr	r0, [pc, #204]	@ (8002a24 <MX_TIM3_Init+0x130>)
 8002958:	f004 fc60 	bl	800721c <HAL_TIM_Base_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002962:	f002 f9df 	bl	8004d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800296a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800296c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002970:	4619      	mov	r1, r3
 8002972:	482c      	ldr	r0, [pc, #176]	@ (8002a24 <MX_TIM3_Init+0x130>)
 8002974:	f005 fdf2 	bl	800855c <HAL_TIM_ConfigClockSource>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800297e:	f002 f9d1 	bl	8004d24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002982:	4828      	ldr	r0, [pc, #160]	@ (8002a24 <MX_TIM3_Init+0x130>)
 8002984:	f004 ff16 	bl	80077b4 <HAL_TIM_IC_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800298e:	f002 f9c9 	bl	8004d24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002992:	2304      	movs	r3, #4
 8002994:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002996:	2350      	movs	r3, #80	@ 0x50
 8002998:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80029a2:	f107 031c 	add.w	r3, r7, #28
 80029a6:	4619      	mov	r1, r3
 80029a8:	481e      	ldr	r0, [pc, #120]	@ (8002a24 <MX_TIM3_Init+0x130>)
 80029aa:	f005 feed 	bl	8008788 <HAL_TIM_SlaveConfigSynchro>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 80029b4:	f002 f9b6 	bl	8004d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b8:	2300      	movs	r3, #0
 80029ba:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	4619      	mov	r1, r3
 80029c6:	4817      	ldr	r0, [pc, #92]	@ (8002a24 <MX_TIM3_Init+0x130>)
 80029c8:	f007 f804 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 80029d2:	f002 f9a7 	bl	8004d24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80029d6:	2300      	movs	r3, #0
 80029d8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80029da:	2301      	movs	r3, #1
 80029dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80029e6:	463b      	mov	r3, r7
 80029e8:	2200      	movs	r2, #0
 80029ea:	4619      	mov	r1, r3
 80029ec:	480d      	ldr	r0, [pc, #52]	@ (8002a24 <MX_TIM3_Init+0x130>)
 80029ee:	f005 fc04 	bl	80081fa <HAL_TIM_IC_ConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 80029f8:	f002 f994 	bl	8004d24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80029fc:	2302      	movs	r3, #2
 80029fe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002a00:	2302      	movs	r3, #2
 8002a02:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002a04:	463b      	mov	r3, r7
 8002a06:	2204      	movs	r2, #4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4806      	ldr	r0, [pc, #24]	@ (8002a24 <MX_TIM3_Init+0x130>)
 8002a0c:	f005 fbf5 	bl	80081fa <HAL_TIM_IC_ConfigChannel>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM3_Init+0x126>
  {
    Error_Handler();
 8002a16:	f002 f985 	bl	8004d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a1a:	bf00      	nop
 8002a1c:	3740      	adds	r7, #64	@ 0x40
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000071c 	.word	0x2000071c
 8002a28:	40000400 	.word	0x40000400

08002a2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b090      	sub	sp, #64	@ 0x40
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a40:	f107 031c 	add.w	r3, r7, #28
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a50:	f107 0310 	add.w	r3, r7, #16
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a68:	4b3c      	ldr	r3, [pc, #240]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b60 <MX_TIM4_Init+0x134>)
 8002a6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8002a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002a70:	22a9      	movs	r2, #169	@ 0xa9
 8002a72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a74:	4b39      	ldr	r3, [pc, #228]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a7a:	4b38      	ldr	r3, [pc, #224]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a82:	4b36      	ldr	r3, [pc, #216]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a88:	4b34      	ldr	r3, [pc, #208]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a8e:	4833      	ldr	r0, [pc, #204]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002a90:	f004 fbc4 	bl	800721c <HAL_TIM_Base_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002a9a:	f002 f943 	bl	8004d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002aa4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	482c      	ldr	r0, [pc, #176]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002aac:	f005 fd56 	bl	800855c <HAL_TIM_ConfigClockSource>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002ab6:	f002 f935 	bl	8004d24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002aba:	4828      	ldr	r0, [pc, #160]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002abc:	f004 fe7a 	bl	80077b4 <HAL_TIM_IC_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002ac6:	f002 f92d 	bl	8004d24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002aca:	2304      	movs	r3, #4
 8002acc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002ace:	2350      	movs	r3, #80	@ 0x50
 8002ad0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002ada:	f107 031c 	add.w	r3, r7, #28
 8002ade:	4619      	mov	r1, r3
 8002ae0:	481e      	ldr	r0, [pc, #120]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002ae2:	f005 fe51 	bl	8008788 <HAL_TIM_SlaveConfigSynchro>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 8002aec:	f002 f91a 	bl	8004d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	4619      	mov	r1, r3
 8002afe:	4817      	ldr	r0, [pc, #92]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002b00:	f006 ff68 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002b0a:	f002 f90b 	bl	8004d24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b12:	2301      	movs	r3, #1
 8002b14:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b1e:	463b      	mov	r3, r7
 8002b20:	2200      	movs	r2, #0
 8002b22:	4619      	mov	r1, r3
 8002b24:	480d      	ldr	r0, [pc, #52]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002b26:	f005 fb68 	bl	80081fa <HAL_TIM_IC_ConfigChannel>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8002b30:	f002 f8f8 	bl	8004d24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002b34:	2302      	movs	r3, #2
 8002b36:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b3c:	463b      	mov	r3, r7
 8002b3e:	2204      	movs	r2, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4806      	ldr	r0, [pc, #24]	@ (8002b5c <MX_TIM4_Init+0x130>)
 8002b44:	f005 fb59 	bl	80081fa <HAL_TIM_IC_ConfigChannel>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM4_Init+0x126>
  {
    Error_Handler();
 8002b4e:	f002 f8e9 	bl	8004d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b52:	bf00      	nop
 8002b54:	3740      	adds	r7, #64	@ 0x40
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200007e8 	.word	0x200007e8
 8002b60:	40000800 	.word	0x40000800

08002b64 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08e      	sub	sp, #56	@ 0x38
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b84:	463b      	mov	r3, r7
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	611a      	str	r2, [r3, #16]
 8002b92:	615a      	str	r2, [r3, #20]
 8002b94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b96:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <MX_TIM5_Init+0xe8>)
 8002b98:	4a2d      	ldr	r2, [pc, #180]	@ (8002c50 <MX_TIM5_Init+0xec>)
 8002b9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3;
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c4c <MX_TIM5_Init+0xe8>)
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c4c <MX_TIM5_Init+0xe8>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 29999;
 8002ba8:	4b28      	ldr	r3, [pc, #160]	@ (8002c4c <MX_TIM5_Init+0xe8>)
 8002baa:	f247 522f 	movw	r2, #29999	@ 0x752f
 8002bae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb0:	4b26      	ldr	r3, [pc, #152]	@ (8002c4c <MX_TIM5_Init+0xe8>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb6:	4b25      	ldr	r3, [pc, #148]	@ (8002c4c <MX_TIM5_Init+0xe8>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002bbc:	4823      	ldr	r0, [pc, #140]	@ (8002c4c <MX_TIM5_Init+0xe8>)
 8002bbe:	f004 fb2d 	bl	800721c <HAL_TIM_Base_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002bc8:	f002 f8ac 	bl	8004d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002bd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	481c      	ldr	r0, [pc, #112]	@ (8002c4c <MX_TIM5_Init+0xe8>)
 8002bda:	f005 fcbf 	bl	800855c <HAL_TIM_ConfigClockSource>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002be4:	f002 f89e 	bl	8004d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002be8:	4818      	ldr	r0, [pc, #96]	@ (8002c4c <MX_TIM5_Init+0xe8>)
 8002bea:	f004 fc63 	bl	80074b4 <HAL_TIM_PWM_Init>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002bf4:	f002 f896 	bl	8004d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	4619      	mov	r1, r3
 8002c06:	4811      	ldr	r0, [pc, #68]	@ (8002c4c <MX_TIM5_Init+0xe8>)
 8002c08:	f006 fee4 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002c12:	f002 f887 	bl	8004d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c16:	2360      	movs	r3, #96	@ 0x60
 8002c18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c26:	463b      	mov	r3, r7
 8002c28:	2204      	movs	r2, #4
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4807      	ldr	r0, [pc, #28]	@ (8002c4c <MX_TIM5_Init+0xe8>)
 8002c2e:	f005 fb81 	bl	8008334 <HAL_TIM_PWM_ConfigChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002c38:	f002 f874 	bl	8004d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002c3c:	4803      	ldr	r0, [pc, #12]	@ (8002c4c <MX_TIM5_Init+0xe8>)
 8002c3e:	f002 fa97 	bl	8005170 <HAL_TIM_MspPostInit>

}
 8002c42:	bf00      	nop
 8002c44:	3738      	adds	r7, #56	@ 0x38
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200008b4 	.word	0x200008b4
 8002c50:	40000c00 	.word	0x40000c00

08002c54 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b090      	sub	sp, #64	@ 0x40
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002c68:	f107 031c 	add.w	r3, r7, #28
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c78:	f107 0310 	add.w	r3, r7, #16
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c84:	463b      	mov	r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c90:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002c92:	4a4e      	ldr	r2, [pc, #312]	@ (8002dcc <MX_TIM8_Init+0x178>)
 8002c94:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8002c96:	4b4c      	ldr	r3, [pc, #304]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002c98:	22a9      	movs	r2, #169	@ 0xa9
 8002c9a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002ca2:	4b49      	ldr	r3, [pc, #292]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002ca4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ca8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002caa:	4b47      	ldr	r3, [pc, #284]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002cb0:	4b45      	ldr	r3, [pc, #276]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb6:	4b44      	ldr	r3, [pc, #272]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002cbc:	4842      	ldr	r0, [pc, #264]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002cbe:	f004 faad 	bl	800721c <HAL_TIM_Base_Init>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002cc8:	f002 f82c 	bl	8004d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ccc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002cd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	483b      	ldr	r0, [pc, #236]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002cda:	f005 fc3f 	bl	800855c <HAL_TIM_ConfigClockSource>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002ce4:	f002 f81e 	bl	8004d24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002ce8:	4837      	ldr	r0, [pc, #220]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002cea:	f004 fd63 	bl	80077b4 <HAL_TIM_IC_Init>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002cf4:	f002 f816 	bl	8004d24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002cfc:	2350      	movs	r3, #80	@ 0x50
 8002cfe:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8002d08:	f107 031c 	add.w	r3, r7, #28
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	482e      	ldr	r0, [pc, #184]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002d10:	f005 fd3a 	bl	8008788 <HAL_TIM_SlaveConfigSynchro>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8002d1a:	f002 f803 	bl	8004d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4825      	ldr	r0, [pc, #148]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002d32:	f006 fe4f 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8002d3c:	f001 fff2 	bl	8004d24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d40:	2300      	movs	r3, #0
 8002d42:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d44:	2301      	movs	r3, #1
 8002d46:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d50:	463b      	mov	r3, r7
 8002d52:	2200      	movs	r2, #0
 8002d54:	4619      	mov	r1, r3
 8002d56:	481c      	ldr	r0, [pc, #112]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002d58:	f005 fa4f 	bl	80081fa <HAL_TIM_IC_ConfigChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8002d62:	f001 ffdf 	bl	8004d24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002d66:	2302      	movs	r3, #2
 8002d68:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d6e:	463b      	mov	r3, r7
 8002d70:	2204      	movs	r2, #4
 8002d72:	4619      	mov	r1, r3
 8002d74:	4814      	ldr	r0, [pc, #80]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002d76:	f005 fa40 	bl	80081fa <HAL_TIM_IC_ConfigChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8002d80:	f001 ffd0 	bl	8004d24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d84:	2300      	movs	r3, #0
 8002d86:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	2208      	movs	r2, #8
 8002d90:	4619      	mov	r1, r3
 8002d92:	480d      	ldr	r0, [pc, #52]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002d94:	f005 fa31 	bl	80081fa <HAL_TIM_IC_ConfigChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM8_Init+0x14e>
  {
    Error_Handler();
 8002d9e:	f001 ffc1 	bl	8004d24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002da2:	2302      	movs	r3, #2
 8002da4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002da6:	2302      	movs	r3, #2
 8002da8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002daa:	463b      	mov	r3, r7
 8002dac:	220c      	movs	r2, #12
 8002dae:	4619      	mov	r1, r3
 8002db0:	4805      	ldr	r0, [pc, #20]	@ (8002dc8 <MX_TIM8_Init+0x174>)
 8002db2:	f005 fa22 	bl	80081fa <HAL_TIM_IC_ConfigChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM8_Init+0x16c>
  {
    Error_Handler();
 8002dbc:	f001 ffb2 	bl	8004d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002dc0:	bf00      	nop
 8002dc2:	3740      	adds	r7, #64	@ 0x40
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000980 	.word	0x20000980
 8002dcc:	40013400 	.word	0x40013400

08002dd0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002dd4:	4b14      	ldr	r3, [pc, #80]	@ (8002e28 <MX_TIM16_Init+0x58>)
 8002dd6:	4a15      	ldr	r2, [pc, #84]	@ (8002e2c <MX_TIM16_Init+0x5c>)
 8002dd8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002dda:	4b13      	ldr	r3, [pc, #76]	@ (8002e28 <MX_TIM16_Init+0x58>)
 8002ddc:	22a9      	movs	r2, #169	@ 0xa9
 8002dde:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de0:	4b11      	ldr	r3, [pc, #68]	@ (8002e28 <MX_TIM16_Init+0x58>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8002de6:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <MX_TIM16_Init+0x58>)
 8002de8:	f240 4279 	movw	r2, #1145	@ 0x479
 8002dec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dee:	4b0e      	ldr	r3, [pc, #56]	@ (8002e28 <MX_TIM16_Init+0x58>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002df4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e28 <MX_TIM16_Init+0x58>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <MX_TIM16_Init+0x58>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002e00:	4809      	ldr	r0, [pc, #36]	@ (8002e28 <MX_TIM16_Init+0x58>)
 8002e02:	f004 fa0b 	bl	800721c <HAL_TIM_Base_Init>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002e0c:	f001 ff8a 	bl	8004d24 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002e10:	2108      	movs	r1, #8
 8002e12:	4805      	ldr	r0, [pc, #20]	@ (8002e28 <MX_TIM16_Init+0x58>)
 8002e14:	f004 fe40 	bl	8007a98 <HAL_TIM_OnePulse_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002e1e:	f001 ff81 	bl	8004d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000a4c 	.word	0x20000a4c
 8002e2c:	40014400 	.word	0x40014400

08002e30 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b090      	sub	sp, #64	@ 0x40
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002e44:	f107 031c 	add.w	r3, r7, #28
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e54:	f107 0310 	add.w	r3, r7, #16
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e60:	463b      	mov	r3, r7
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002e6e:	4a4e      	ldr	r2, [pc, #312]	@ (8002fa8 <MX_TIM20_Init+0x178>)
 8002e70:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 169;
 8002e72:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002e74:	22a9      	movs	r2, #169	@ 0xa9
 8002e76:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e78:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8002e7e:	4b49      	ldr	r3, [pc, #292]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002e80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e84:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e86:	4b47      	ldr	r3, [pc, #284]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8002e8c:	4b45      	ldr	r3, [pc, #276]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e92:	4b44      	ldr	r3, [pc, #272]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002e98:	4842      	ldr	r0, [pc, #264]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002e9a:	f004 f9bf 	bl	800721c <HAL_TIM_Base_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 8002ea4:	f001 ff3e 	bl	8004d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8002eae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	483b      	ldr	r0, [pc, #236]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002eb6:	f005 fb51 	bl	800855c <HAL_TIM_ConfigClockSource>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM20_Init+0x94>
  {
    Error_Handler();
 8002ec0:	f001 ff30 	bl	8004d24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim20) != HAL_OK)
 8002ec4:	4837      	ldr	r0, [pc, #220]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002ec6:	f004 fc75 	bl	80077b4 <HAL_TIM_IC_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8002ed0:	f001 ff28 	bl	8004d24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002ed8:	2350      	movs	r3, #80	@ 0x50
 8002eda:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002edc:	2300      	movs	r3, #0
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8002ee4:	f107 031c 	add.w	r3, r7, #28
 8002ee8:	4619      	mov	r1, r3
 8002eea:	482e      	ldr	r0, [pc, #184]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002eec:	f005 fc4c 	bl	8008788 <HAL_TIM_SlaveConfigSynchro>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8002ef6:	f001 ff15 	bl	8004d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002f06:	f107 0310 	add.w	r3, r7, #16
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4825      	ldr	r0, [pc, #148]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002f0e:	f006 fd61 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM20_Init+0xec>
  {
    Error_Handler();
 8002f18:	f001 ff04 	bl	8004d24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f20:	2301      	movs	r3, #1
 8002f22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f2c:	463b      	mov	r3, r7
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4619      	mov	r1, r3
 8002f32:	481c      	ldr	r0, [pc, #112]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002f34:	f005 f961 	bl	80081fa <HAL_TIM_IC_ConfigChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM20_Init+0x112>
  {
    Error_Handler();
 8002f3e:	f001 fef1 	bl	8004d24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002f42:	2302      	movs	r3, #2
 8002f44:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002f46:	2302      	movs	r3, #2
 8002f48:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002f4a:	463b      	mov	r3, r7
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4814      	ldr	r0, [pc, #80]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002f52:	f005 f952 	bl	80081fa <HAL_TIM_IC_ConfigChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM20_Init+0x130>
  {
    Error_Handler();
 8002f5c:	f001 fee2 	bl	8004d24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f60:	2300      	movs	r3, #0
 8002f62:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f64:	2301      	movs	r3, #1
 8002f66:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002f68:	463b      	mov	r3, r7
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	480d      	ldr	r0, [pc, #52]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002f70:	f005 f943 	bl	80081fa <HAL_TIM_IC_ConfigChannel>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_TIM20_Init+0x14e>
  {
    Error_Handler();
 8002f7a:	f001 fed3 	bl	8004d24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002f82:	2302      	movs	r3, #2
 8002f84:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002f86:	463b      	mov	r3, r7
 8002f88:	220c      	movs	r2, #12
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4805      	ldr	r0, [pc, #20]	@ (8002fa4 <MX_TIM20_Init+0x174>)
 8002f8e:	f005 f934 	bl	80081fa <HAL_TIM_IC_ConfigChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_TIM20_Init+0x16c>
  {
    Error_Handler();
 8002f98:	f001 fec4 	bl	8004d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8002f9c:	bf00      	nop
 8002f9e:	3740      	adds	r7, #64	@ 0x40
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000b18 	.word	0x20000b18
 8002fa8:	40015000 	.word	0x40015000

08002fac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fb0:	4b23      	ldr	r3, [pc, #140]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 8002fb2:	4a24      	ldr	r2, [pc, #144]	@ (8003044 <MX_USART2_UART_Init+0x98>)
 8002fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002fb6:	4b22      	ldr	r3, [pc, #136]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 8002fb8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002fbe:	4b20      	ldr	r3, [pc, #128]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 8002fc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002fc4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 8002fce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fda:	4b19      	ldr	r3, [pc, #100]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe0:	4b17      	ldr	r3, [pc, #92]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fe6:	4b16      	ldr	r3, [pc, #88]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fec:	4b14      	ldr	r3, [pc, #80]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ff2:	4b13      	ldr	r3, [pc, #76]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ff8:	4811      	ldr	r0, [pc, #68]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 8002ffa:	f006 fdd1 	bl	8009ba0 <HAL_UART_Init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003004:	f001 fe8e 	bl	8004d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003008:	2100      	movs	r1, #0
 800300a:	480d      	ldr	r0, [pc, #52]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 800300c:	f008 fbf1 	bl	800b7f2 <HAL_UARTEx_SetTxFifoThreshold>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003016:	f001 fe85 	bl	8004d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800301a:	2100      	movs	r1, #0
 800301c:	4808      	ldr	r0, [pc, #32]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 800301e:	f008 fc26 	bl	800b86e <HAL_UARTEx_SetRxFifoThreshold>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003028:	f001 fe7c 	bl	8004d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800302c:	4804      	ldr	r0, [pc, #16]	@ (8003040 <MX_USART2_UART_Init+0x94>)
 800302e:	f008 fba7 	bl	800b780 <HAL_UARTEx_DisableFifoMode>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003038:	f001 fe74 	bl	8004d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000be4 	.word	0x20000be4
 8003044:	40004400 	.word	0x40004400

08003048 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800304e:	4b16      	ldr	r3, [pc, #88]	@ (80030a8 <MX_DMA_Init+0x60>)
 8003050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003052:	4a15      	ldr	r2, [pc, #84]	@ (80030a8 <MX_DMA_Init+0x60>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6493      	str	r3, [r2, #72]	@ 0x48
 800305a:	4b13      	ldr	r3, [pc, #76]	@ (80030a8 <MX_DMA_Init+0x60>)
 800305c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003066:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <MX_DMA_Init+0x60>)
 8003068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306a:	4a0f      	ldr	r2, [pc, #60]	@ (80030a8 <MX_DMA_Init+0x60>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6493      	str	r3, [r2, #72]	@ 0x48
 8003072:	4b0d      	ldr	r3, [pc, #52]	@ (80030a8 <MX_DMA_Init+0x60>)
 8003074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	200b      	movs	r0, #11
 8003084:	f002 fb5d 	bl	8005742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003088:	200b      	movs	r0, #11
 800308a:	f002 fb74 	bl	8005776 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	2100      	movs	r1, #0
 8003092:	200c      	movs	r0, #12
 8003094:	f002 fb55 	bl	8005742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003098:	200c      	movs	r0, #12
 800309a:	f002 fb6c 	bl	8005776 <HAL_NVIC_EnableIRQ>

}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000

080030ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c2:	4b56      	ldr	r3, [pc, #344]	@ (800321c <MX_GPIO_Init+0x170>)
 80030c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c6:	4a55      	ldr	r2, [pc, #340]	@ (800321c <MX_GPIO_Init+0x170>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ce:	4b53      	ldr	r3, [pc, #332]	@ (800321c <MX_GPIO_Init+0x170>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030da:	4b50      	ldr	r3, [pc, #320]	@ (800321c <MX_GPIO_Init+0x170>)
 80030dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030de:	4a4f      	ldr	r2, [pc, #316]	@ (800321c <MX_GPIO_Init+0x170>)
 80030e0:	f043 0320 	orr.w	r3, r3, #32
 80030e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030e6:	4b4d      	ldr	r3, [pc, #308]	@ (800321c <MX_GPIO_Init+0x170>)
 80030e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	4b4a      	ldr	r3, [pc, #296]	@ (800321c <MX_GPIO_Init+0x170>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f6:	4a49      	ldr	r2, [pc, #292]	@ (800321c <MX_GPIO_Init+0x170>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030fe:	4b47      	ldr	r3, [pc, #284]	@ (800321c <MX_GPIO_Init+0x170>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800310a:	4b44      	ldr	r3, [pc, #272]	@ (800321c <MX_GPIO_Init+0x170>)
 800310c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310e:	4a43      	ldr	r2, [pc, #268]	@ (800321c <MX_GPIO_Init+0x170>)
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003116:	4b41      	ldr	r3, [pc, #260]	@ (800321c <MX_GPIO_Init+0x170>)
 8003118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIOUT_PushPull_Pin|GPIOUT_Vacuum_Pin, GPIO_PIN_SET);
 8003122:	2201      	movs	r2, #1
 8003124:	2103      	movs	r1, #3
 8003126:	483e      	ldr	r0, [pc, #248]	@ (8003220 <MX_GPIO_Init+0x174>)
 8003128:	f003 f80c 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIOUT_Pilot2_Pin|GPIOUT_DrivINA_Pin, GPIO_PIN_SET);
 800312c:	2201      	movs	r2, #1
 800312e:	f248 0110 	movw	r1, #32784	@ 0x8010
 8003132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003136:	f003 f805 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIOUT_Pilot1_Pin|GPIOUT_DrivINB_Pin, GPIO_PIN_SET);
 800313a:	2201      	movs	r2, #1
 800313c:	2181      	movs	r1, #129	@ 0x81
 800313e:	4839      	ldr	r0, [pc, #228]	@ (8003224 <MX_GPIO_Init+0x178>)
 8003140:	f003 f800 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003144:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800314a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800314e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	4831      	ldr	r0, [pc, #196]	@ (8003220 <MX_GPIO_Init+0x174>)
 800315c:	f002 fe58 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOUT_PushPull_Pin GPIOUT_Vacuum_Pin */
  GPIO_InitStruct.Pin = GPIOUT_PushPull_Pin|GPIOUT_Vacuum_Pin;
 8003160:	2303      	movs	r3, #3
 8003162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003164:	2301      	movs	r3, #1
 8003166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003168:	2301      	movs	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316c:	2300      	movs	r3, #0
 800316e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	4619      	mov	r1, r3
 8003176:	482a      	ldr	r0, [pc, #168]	@ (8003220 <MX_GPIO_Init+0x174>)
 8003178:	f002 fe4a 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOUT_Pilot2_Pin GPIOUT_DrivINA_Pin */
  GPIO_InitStruct.Pin = GPIOUT_Pilot2_Pin|GPIOUT_DrivINA_Pin;
 800317c:	f248 0310 	movw	r3, #32784	@ 0x8010
 8003180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003182:	2301      	movs	r3, #1
 8003184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003186:	2301      	movs	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2300      	movs	r3, #0
 800318c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318e:	f107 0314 	add.w	r3, r7, #20
 8003192:	4619      	mov	r1, r3
 8003194:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003198:	f002 fe3a 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOIN_LeadMax_Pin GPIOIN_LeadMin_Pin */
  GPIO_InitStruct.Pin = GPIOIN_LeadMax_Pin|GPIOIN_LeadMin_Pin;
 800319c:	23c0      	movs	r3, #192	@ 0xc0
 800319e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	4619      	mov	r1, r3
 80031ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031b2:	f002 fe2d 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOUT_Pilot1_Pin GPIOUT_DrivINB_Pin */
  GPIO_InitStruct.Pin = GPIOUT_Pilot1_Pin|GPIOUT_DrivINB_Pin;
 80031b6:	2381      	movs	r3, #129	@ 0x81
 80031b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031be:	2301      	movs	r3, #1
 80031c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	4815      	ldr	r0, [pc, #84]	@ (8003224 <MX_GPIO_Init+0x178>)
 80031ce:	f002 fe1f 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOIN_LimitMin_Pin GPIOIN_LimitMax_Pin */
  GPIO_InitStruct.Pin = GPIOIN_LimitMin_Pin|GPIOIN_LimitMax_Pin;
 80031d2:	f244 0302 	movw	r3, #16386	@ 0x4002
 80031d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031d8:	2300      	movs	r3, #0
 80031da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	4619      	mov	r1, r3
 80031e6:	480f      	ldr	r0, [pc, #60]	@ (8003224 <MX_GPIO_Init+0x178>)
 80031e8:	f002 fe12 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIOIN_Emer_Pin */
  GPIO_InitStruct.Pin = GPIOIN_Emer_Pin;
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOIN_Emer_GPIO_Port, &GPIO_InitStruct);
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	4619      	mov	r1, r3
 80031fe:	4808      	ldr	r0, [pc, #32]	@ (8003220 <MX_GPIO_Init+0x174>)
 8003200:	f002 fe06 	bl	8005e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	2100      	movs	r1, #0
 8003208:	2028      	movs	r0, #40	@ 0x28
 800320a:	f002 fa9a 	bl	8005742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800320e:	2028      	movs	r0, #40	@ 0x28
 8003210:	f002 fab1 	bl	8005776 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003214:	bf00      	nop
 8003216:	3728      	adds	r7, #40	@ 0x28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	48000800 	.word	0x48000800
 8003224:	48000400 	.word	0x48000400

08003228 <motor_run>:
//        registerFrame[0x00].U16 = 22881;
//        sendall();
//    }
//}

void motor_run(uint64_t pwm, uint8_t dir){
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003232:	4613      	mov	r3, r2
 8003234:	71fb      	strb	r3, [r7, #7]
	is_motor_should_run();
 8003236:	f001 fd7b 	bl	8004d30 <is_motor_should_run>
	if(dir == 1){
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d141      	bne.n	80032c4 <motor_run+0x9c>
		if(isMotorCanMoveUp == 1){
 8003240:	4b5a      	ldr	r3, [pc, #360]	@ (80033ac <motor_run+0x184>)
 8003242:	f993 3000 	ldrsb.w	r3, [r3]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d11b      	bne.n	8003282 <motor_run+0x5a>
			usePWM = pwm;
 800324a:	4959      	ldr	r1, [pc, #356]	@ (80033b0 <motor_run+0x188>)
 800324c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003250:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, usePWM);
 8003254:	4b56      	ldr	r3, [pc, #344]	@ (80033b0 <motor_run+0x188>)
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	4956      	ldr	r1, [pc, #344]	@ (80033b4 <motor_run+0x18c>)
 800325c:	6809      	ldr	r1, [r1, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	638b      	str	r3, [r1, #56]	@ 0x38
			motoring = 1;
 8003262:	4b55      	ldr	r3, [pc, #340]	@ (80033b8 <motor_run+0x190>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]
//			motor_moveup();
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,GPIO_PIN_RESET);
 8003268:	2200      	movs	r2, #0
 800326a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800326e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003272:	f002 ff67 	bl	8006144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);
 8003276:	2201      	movs	r2, #1
 8003278:	2180      	movs	r1, #128	@ 0x80
 800327a:	4850      	ldr	r0, [pc, #320]	@ (80033bc <motor_run+0x194>)
 800327c:	f002 ff62 	bl	8006144 <HAL_GPIO_WritePin>
//	else{
//		usePWM = 0;
//		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, usePWM);
//		motoring = 0;
//	}
}
 8003280:	e08f      	b.n	80033a2 <motor_run+0x17a>
		else if(isMotorCanMoveUp == 0){
 8003282:	4b4a      	ldr	r3, [pc, #296]	@ (80033ac <motor_run+0x184>)
 8003284:	f993 3000 	ldrsb.w	r3, [r3]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 808a 	bne.w	80033a2 <motor_run+0x17a>
			gopoint_act = 0;
 800328e:	494c      	ldr	r1, [pc, #304]	@ (80033c0 <motor_run+0x198>)
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, usePWM);
 800329c:	4b44      	ldr	r3, [pc, #272]	@ (80033b0 <motor_run+0x188>)
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	4944      	ldr	r1, [pc, #272]	@ (80033b4 <motor_run+0x18c>)
 80032a4:	6809      	ldr	r1, [r1, #0]
 80032a6:	4613      	mov	r3, r2
 80032a8:	638b      	str	r3, [r1, #56]	@ 0x38
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,GPIO_PIN_RESET);
 80032aa:	2200      	movs	r2, #0
 80032ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032b4:	f002 ff46 	bl	8006144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 80032b8:	2200      	movs	r2, #0
 80032ba:	2180      	movs	r1, #128	@ 0x80
 80032bc:	483f      	ldr	r0, [pc, #252]	@ (80033bc <motor_run+0x194>)
 80032be:	f002 ff41 	bl	8006144 <HAL_GPIO_WritePin>
}
 80032c2:	e06e      	b.n	80033a2 <motor_run+0x17a>
	else if(dir == 2){
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d139      	bne.n	800333e <motor_run+0x116>
		if(isMotorCanMoveDown == 1){
 80032ca:	4b3e      	ldr	r3, [pc, #248]	@ (80033c4 <motor_run+0x19c>)
 80032cc:	f993 3000 	ldrsb.w	r3, [r3]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d11b      	bne.n	800330c <motor_run+0xe4>
			usePWM = pwm;
 80032d4:	4936      	ldr	r1, [pc, #216]	@ (80033b0 <motor_run+0x188>)
 80032d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032da:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, usePWM);
 80032de:	4b34      	ldr	r3, [pc, #208]	@ (80033b0 <motor_run+0x188>)
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	4933      	ldr	r1, [pc, #204]	@ (80033b4 <motor_run+0x18c>)
 80032e6:	6809      	ldr	r1, [r1, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	638b      	str	r3, [r1, #56]	@ 0x38
			motoring = 2;
 80032ec:	4b32      	ldr	r3, [pc, #200]	@ (80033b8 <motor_run+0x190>)
 80032ee:	2202      	movs	r2, #2
 80032f0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,GPIO_PIN_SET);
 80032f2:	2201      	movs	r2, #1
 80032f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032fc:	f002 ff22 	bl	8006144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 8003300:	2200      	movs	r2, #0
 8003302:	2180      	movs	r1, #128	@ 0x80
 8003304:	482d      	ldr	r0, [pc, #180]	@ (80033bc <motor_run+0x194>)
 8003306:	f002 ff1d 	bl	8006144 <HAL_GPIO_WritePin>
}
 800330a:	e04a      	b.n	80033a2 <motor_run+0x17a>
		else if(isMotorCanMoveDown == 0){
 800330c:	4b2d      	ldr	r3, [pc, #180]	@ (80033c4 <motor_run+0x19c>)
 800330e:	f993 3000 	ldrsb.w	r3, [r3]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d145      	bne.n	80033a2 <motor_run+0x17a>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, usePWM);
 8003316:	4b26      	ldr	r3, [pc, #152]	@ (80033b0 <motor_run+0x188>)
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	4925      	ldr	r1, [pc, #148]	@ (80033b4 <motor_run+0x18c>)
 800331e:	6809      	ldr	r1, [r1, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	638b      	str	r3, [r1, #56]	@ 0x38
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,GPIO_PIN_RESET);
 8003324:	2200      	movs	r2, #0
 8003326:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800332a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800332e:	f002 ff09 	bl	8006144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 8003332:	2200      	movs	r2, #0
 8003334:	2180      	movs	r1, #128	@ 0x80
 8003336:	4821      	ldr	r0, [pc, #132]	@ (80033bc <motor_run+0x194>)
 8003338:	f002 ff04 	bl	8006144 <HAL_GPIO_WritePin>
}
 800333c:	e031      	b.n	80033a2 <motor_run+0x17a>
	else if(dir == 3){
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d12e      	bne.n	80033a2 <motor_run+0x17a>
		if(modeSelection != 2){
 8003344:	4b20      	ldr	r3, [pc, #128]	@ (80033c8 <motor_run+0x1a0>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d01c      	beq.n	8003386 <motor_run+0x15e>
			usePWM = 30000;
 800334c:	4918      	ldr	r1, [pc, #96]	@ (80033b0 <motor_run+0x188>)
 800334e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, usePWM);
 800335a:	4b15      	ldr	r3, [pc, #84]	@ (80033b0 <motor_run+0x188>)
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	4914      	ldr	r1, [pc, #80]	@ (80033b4 <motor_run+0x18c>)
 8003362:	6809      	ldr	r1, [r1, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	638b      	str	r3, [r1, #56]	@ 0x38
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,GPIO_PIN_RESET);
 8003368:	2200      	movs	r2, #0
 800336a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800336e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003372:	f002 fee7 	bl	8006144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 8003376:	2200      	movs	r2, #0
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	4810      	ldr	r0, [pc, #64]	@ (80033bc <motor_run+0x194>)
 800337c:	f002 fee2 	bl	8006144 <HAL_GPIO_WritePin>
			motoring = 3;
 8003380:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <motor_run+0x190>)
 8003382:	2203      	movs	r2, #3
 8003384:	601a      	str	r2, [r3, #0]
		if(modeSelection == 2){
 8003386:	4b10      	ldr	r3, [pc, #64]	@ (80033c8 <motor_run+0x1a0>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d109      	bne.n	80033a2 <motor_run+0x17a>
			usePWM = 0;
 800338e:	4908      	ldr	r1, [pc, #32]	@ (80033b0 <motor_run+0x188>)
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9c1 2300 	strd	r2, r3, [r1]
			motoring = 4;
 800339c:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <motor_run+0x190>)
 800339e:	2204      	movs	r2, #4
 80033a0:	601a      	str	r2, [r3, #0]
}
 80033a2:	bf00      	nop
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200004a0 	.word	0x200004a0
 80033b0:	20000498 	.word	0x20000498
 80033b4:	200008b4 	.word	0x200008b4
 80033b8:	20000490 	.word	0x20000490
 80033bc:	48000400 	.word	0x48000400
 80033c0:	200004d8 	.word	0x200004d8
 80033c4:	200004a1 	.word	0x200004a1
 80033c8:	20000438 	.word	0x20000438

080033cc <remote_recieve>:

void remote_recieve(){
 80033cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
	JoyxPosition_Rise = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_1);
 80033d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003594 <remote_recieve+0x1c8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003598 <remote_recieve+0x1cc>)
 80033de:	8013      	strh	r3, [r2, #0]
	JoyxPosition_Fall = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_2);
 80033e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003594 <remote_recieve+0x1c8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4a6c      	ldr	r2, [pc, #432]	@ (800359c <remote_recieve+0x1d0>)
 80033ea:	8013      	strh	r3, [r2, #0]
	JoyxPosition_dt = JoyxPosition_Rise - JoyxPosition_Fall;
 80033ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003598 <remote_recieve+0x1cc>)
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b6a      	ldr	r3, [pc, #424]	@ (800359c <remote_recieve+0x1d0>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	4a69      	ldr	r2, [pc, #420]	@ (80035a0 <remote_recieve+0x1d4>)
 80033fa:	6013      	str	r3, [r2, #0]
	if(JoyxPosition_Rise > JoyxPosition_Fall)
 80033fc:	4b66      	ldr	r3, [pc, #408]	@ (8003598 <remote_recieve+0x1cc>)
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	4b66      	ldr	r3, [pc, #408]	@ (800359c <remote_recieve+0x1d0>)
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d907      	bls.n	8003418 <remote_recieve+0x4c>
		JoyxPosition = JoyxPosition_dt + 19999 ;
 8003408:	4b65      	ldr	r3, [pc, #404]	@ (80035a0 <remote_recieve+0x1d4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8003410:	331f      	adds	r3, #31
 8003412:	4a64      	ldr	r2, [pc, #400]	@ (80035a4 <remote_recieve+0x1d8>)
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e003      	b.n	8003420 <remote_recieve+0x54>
	else
		JoyxPosition = JoyxPosition_dt;
 8003418:	4b61      	ldr	r3, [pc, #388]	@ (80035a0 <remote_recieve+0x1d4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a61      	ldr	r2, [pc, #388]	@ (80035a4 <remote_recieve+0x1d8>)
 800341e:	6013      	str	r3, [r2, #0]

	zUp_Rise = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_3);
 8003420:	4b5c      	ldr	r3, [pc, #368]	@ (8003594 <remote_recieve+0x1c8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003426:	b29b      	uxth	r3, r3
 8003428:	4a5f      	ldr	r2, [pc, #380]	@ (80035a8 <remote_recieve+0x1dc>)
 800342a:	8013      	strh	r3, [r2, #0]
	zUp_Fall = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_4);
 800342c:	4b59      	ldr	r3, [pc, #356]	@ (8003594 <remote_recieve+0x1c8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	b29b      	uxth	r3, r3
 8003434:	4a5d      	ldr	r2, [pc, #372]	@ (80035ac <remote_recieve+0x1e0>)
 8003436:	8013      	strh	r3, [r2, #0]
	zUp_dt = zUp_Rise - zUp_Fall;
 8003438:	4b5b      	ldr	r3, [pc, #364]	@ (80035a8 <remote_recieve+0x1dc>)
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	4b5b      	ldr	r3, [pc, #364]	@ (80035ac <remote_recieve+0x1e0>)
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	4a5a      	ldr	r2, [pc, #360]	@ (80035b0 <remote_recieve+0x1e4>)
 8003446:	6013      	str	r3, [r2, #0]
	if(zUp_Rise>zUp_Fall)
 8003448:	4b57      	ldr	r3, [pc, #348]	@ (80035a8 <remote_recieve+0x1dc>)
 800344a:	881a      	ldrh	r2, [r3, #0]
 800344c:	4b57      	ldr	r3, [pc, #348]	@ (80035ac <remote_recieve+0x1e0>)
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d907      	bls.n	8003464 <remote_recieve+0x98>
		zUp = zUp_dt + 19999 ;
 8003454:	4b56      	ldr	r3, [pc, #344]	@ (80035b0 <remote_recieve+0x1e4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 800345c:	331f      	adds	r3, #31
 800345e:	4a55      	ldr	r2, [pc, #340]	@ (80035b4 <remote_recieve+0x1e8>)
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e003      	b.n	800346c <remote_recieve+0xa0>
	else
		zUp = zUp_dt;
 8003464:	4b52      	ldr	r3, [pc, #328]	@ (80035b0 <remote_recieve+0x1e4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a52      	ldr	r2, [pc, #328]	@ (80035b4 <remote_recieve+0x1e8>)
 800346a:	6013      	str	r3, [r2, #0]

	zDown_Rise = __HAL_TIM_GET_COMPARE(&htim20,TIM_CHANNEL_3);
 800346c:	4b52      	ldr	r3, [pc, #328]	@ (80035b8 <remote_recieve+0x1ec>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003472:	b29b      	uxth	r3, r3
 8003474:	4a51      	ldr	r2, [pc, #324]	@ (80035bc <remote_recieve+0x1f0>)
 8003476:	8013      	strh	r3, [r2, #0]
	zDown_Fall = __HAL_TIM_GET_COMPARE(&htim20,TIM_CHANNEL_4);
 8003478:	4b4f      	ldr	r3, [pc, #316]	@ (80035b8 <remote_recieve+0x1ec>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	b29b      	uxth	r3, r3
 8003480:	4a4f      	ldr	r2, [pc, #316]	@ (80035c0 <remote_recieve+0x1f4>)
 8003482:	8013      	strh	r3, [r2, #0]
	zDown_dt = zDown_Rise - zDown_Fall;
 8003484:	4b4d      	ldr	r3, [pc, #308]	@ (80035bc <remote_recieve+0x1f0>)
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b4d      	ldr	r3, [pc, #308]	@ (80035c0 <remote_recieve+0x1f4>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	4a4c      	ldr	r2, [pc, #304]	@ (80035c4 <remote_recieve+0x1f8>)
 8003492:	6013      	str	r3, [r2, #0]
	if(zDown_Rise>zDown_Fall)
 8003494:	4b49      	ldr	r3, [pc, #292]	@ (80035bc <remote_recieve+0x1f0>)
 8003496:	881a      	ldrh	r2, [r3, #0]
 8003498:	4b49      	ldr	r3, [pc, #292]	@ (80035c0 <remote_recieve+0x1f4>)
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d907      	bls.n	80034b0 <remote_recieve+0xe4>
		zDown = zDown_dt + 19999 ;
 80034a0:	4b48      	ldr	r3, [pc, #288]	@ (80035c4 <remote_recieve+0x1f8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80034a8:	331f      	adds	r3, #31
 80034aa:	4a47      	ldr	r2, [pc, #284]	@ (80035c8 <remote_recieve+0x1fc>)
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e003      	b.n	80034b8 <remote_recieve+0xec>
	else
		zDown = zDown_dt;
 80034b0:	4b44      	ldr	r3, [pc, #272]	@ (80035c4 <remote_recieve+0x1f8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a44      	ldr	r2, [pc, #272]	@ (80035c8 <remote_recieve+0x1fc>)
 80034b6:	6013      	str	r3, [r2, #0]


	joySel1_Rise = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_1);
 80034b8:	4b44      	ldr	r3, [pc, #272]	@ (80035cc <remote_recieve+0x200>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034be:	b29b      	uxth	r3, r3
 80034c0:	4a43      	ldr	r2, [pc, #268]	@ (80035d0 <remote_recieve+0x204>)
 80034c2:	8013      	strh	r3, [r2, #0]
	joySel1_Fall = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_2);
 80034c4:	4b41      	ldr	r3, [pc, #260]	@ (80035cc <remote_recieve+0x200>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	4a41      	ldr	r2, [pc, #260]	@ (80035d4 <remote_recieve+0x208>)
 80034ce:	8013      	strh	r3, [r2, #0]
	joySel1_dt = joySel1_Rise - joySel1_Fall;
 80034d0:	4b3f      	ldr	r3, [pc, #252]	@ (80035d0 <remote_recieve+0x204>)
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b3f      	ldr	r3, [pc, #252]	@ (80035d4 <remote_recieve+0x208>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	4a3e      	ldr	r2, [pc, #248]	@ (80035d8 <remote_recieve+0x20c>)
 80034de:	6013      	str	r3, [r2, #0]
	if(joySel1_Rise > joySel1_Fall)
 80034e0:	4b3b      	ldr	r3, [pc, #236]	@ (80035d0 <remote_recieve+0x204>)
 80034e2:	881a      	ldrh	r2, [r3, #0]
 80034e4:	4b3b      	ldr	r3, [pc, #236]	@ (80035d4 <remote_recieve+0x208>)
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d907      	bls.n	80034fc <remote_recieve+0x130>
		joySel1 = joySel1_dt + 19999 ;
 80034ec:	4b3a      	ldr	r3, [pc, #232]	@ (80035d8 <remote_recieve+0x20c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80034f4:	331f      	adds	r3, #31
 80034f6:	4a39      	ldr	r2, [pc, #228]	@ (80035dc <remote_recieve+0x210>)
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e003      	b.n	8003504 <remote_recieve+0x138>
	else
		joySel1 = joySel1_dt;
 80034fc:	4b36      	ldr	r3, [pc, #216]	@ (80035d8 <remote_recieve+0x20c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a36      	ldr	r2, [pc, #216]	@ (80035dc <remote_recieve+0x210>)
 8003502:	6013      	str	r3, [r2, #0]

	joySel2_Rise = __HAL_TIM_GET_COMPARE(&htim20,TIM_CHANNEL_1);
 8003504:	4b2c      	ldr	r3, [pc, #176]	@ (80035b8 <remote_recieve+0x1ec>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350a:	b29b      	uxth	r3, r3
 800350c:	4a34      	ldr	r2, [pc, #208]	@ (80035e0 <remote_recieve+0x214>)
 800350e:	8013      	strh	r3, [r2, #0]
	joySel2_Fall = __HAL_TIM_GET_COMPARE(&htim20,TIM_CHANNEL_2);
 8003510:	4b29      	ldr	r3, [pc, #164]	@ (80035b8 <remote_recieve+0x1ec>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	b29b      	uxth	r3, r3
 8003518:	4a32      	ldr	r2, [pc, #200]	@ (80035e4 <remote_recieve+0x218>)
 800351a:	8013      	strh	r3, [r2, #0]
	joySel2_dt = joySel2_Rise - joySel2_Fall;
 800351c:	4b30      	ldr	r3, [pc, #192]	@ (80035e0 <remote_recieve+0x214>)
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	4b30      	ldr	r3, [pc, #192]	@ (80035e4 <remote_recieve+0x218>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	4a2f      	ldr	r2, [pc, #188]	@ (80035e8 <remote_recieve+0x21c>)
 800352a:	6013      	str	r3, [r2, #0]
	if(joySel2_Rise > joySel2_Fall)
 800352c:	4b2c      	ldr	r3, [pc, #176]	@ (80035e0 <remote_recieve+0x214>)
 800352e:	881a      	ldrh	r2, [r3, #0]
 8003530:	4b2c      	ldr	r3, [pc, #176]	@ (80035e4 <remote_recieve+0x218>)
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d907      	bls.n	8003548 <remote_recieve+0x17c>
		joySel2 = joySel2_dt + 19999 ;
 8003538:	4b2b      	ldr	r3, [pc, #172]	@ (80035e8 <remote_recieve+0x21c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8003540:	331f      	adds	r3, #31
 8003542:	4a2a      	ldr	r2, [pc, #168]	@ (80035ec <remote_recieve+0x220>)
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e003      	b.n	8003550 <remote_recieve+0x184>
	else
		joySel2 = joySel2_dt;
 8003548:	4b27      	ldr	r3, [pc, #156]	@ (80035e8 <remote_recieve+0x21c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a27      	ldr	r2, [pc, #156]	@ (80035ec <remote_recieve+0x220>)
 800354e:	6013      	str	r3, [r2, #0]

	joySave_Rise = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
 8003550:	4b27      	ldr	r3, [pc, #156]	@ (80035f0 <remote_recieve+0x224>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003556:	b29b      	uxth	r3, r3
 8003558:	4a26      	ldr	r2, [pc, #152]	@ (80035f4 <remote_recieve+0x228>)
 800355a:	8013      	strh	r3, [r2, #0]
	joySave_Fall = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2);
 800355c:	4b24      	ldr	r3, [pc, #144]	@ (80035f0 <remote_recieve+0x224>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	b29b      	uxth	r3, r3
 8003564:	4a24      	ldr	r2, [pc, #144]	@ (80035f8 <remote_recieve+0x22c>)
 8003566:	8013      	strh	r3, [r2, #0]
	joySave_dt = joySave_Rise - joySave_Fall;
 8003568:	4b22      	ldr	r3, [pc, #136]	@ (80035f4 <remote_recieve+0x228>)
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	4b22      	ldr	r3, [pc, #136]	@ (80035f8 <remote_recieve+0x22c>)
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	4a21      	ldr	r2, [pc, #132]	@ (80035fc <remote_recieve+0x230>)
 8003576:	6013      	str	r3, [r2, #0]
	if(joySave_Rise > joySave_Fall)
 8003578:	4b1e      	ldr	r3, [pc, #120]	@ (80035f4 <remote_recieve+0x228>)
 800357a:	881a      	ldrh	r2, [r3, #0]
 800357c:	4b1e      	ldr	r3, [pc, #120]	@ (80035f8 <remote_recieve+0x22c>)
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d93f      	bls.n	8003604 <remote_recieve+0x238>
		joySave = joySave_dt + 19999 ;
 8003584:	4b1d      	ldr	r3, [pc, #116]	@ (80035fc <remote_recieve+0x230>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 800358c:	331f      	adds	r3, #31
 800358e:	4a1c      	ldr	r2, [pc, #112]	@ (8003600 <remote_recieve+0x234>)
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e03b      	b.n	800360c <remote_recieve+0x240>
 8003594:	20000980 	.word	0x20000980
 8003598:	20000568 	.word	0x20000568
 800359c:	2000056a 	.word	0x2000056a
 80035a0:	20000564 	.word	0x20000564
 80035a4:	20000560 	.word	0x20000560
 80035a8:	20000530 	.word	0x20000530
 80035ac:	20000532 	.word	0x20000532
 80035b0:	20000524 	.word	0x20000524
 80035b4:	20000520 	.word	0x20000520
 80035b8:	20000b18 	.word	0x20000b18
 80035bc:	20000534 	.word	0x20000534
 80035c0:	20000536 	.word	0x20000536
 80035c4:	2000052c 	.word	0x2000052c
 80035c8:	20000528 	.word	0x20000528
 80035cc:	200007e8 	.word	0x200007e8
 80035d0:	20000548 	.word	0x20000548
 80035d4:	2000054a 	.word	0x2000054a
 80035d8:	20000540 	.word	0x20000540
 80035dc:	20000538 	.word	0x20000538
 80035e0:	2000054c 	.word	0x2000054c
 80035e4:	2000054e 	.word	0x2000054e
 80035e8:	20000544 	.word	0x20000544
 80035ec:	2000053c 	.word	0x2000053c
 80035f0:	2000071c 	.word	0x2000071c
 80035f4:	20000558 	.word	0x20000558
 80035f8:	2000055a 	.word	0x2000055a
 80035fc:	20000554 	.word	0x20000554
 8003600:	20000550 	.word	0x20000550
	else
		joySave = joySave_dt;
 8003604:	4b96      	ldr	r3, [pc, #600]	@ (8003860 <remote_recieve+0x494>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a96      	ldr	r2, [pc, #600]	@ (8003864 <remote_recieve+0x498>)
 800360a:	6013      	str	r3, [r2, #0]



	if(modeSelection  == 0 || modeSelection == 4){
 800360c:	4b96      	ldr	r3, [pc, #600]	@ (8003868 <remote_recieve+0x49c>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <remote_recieve+0x252>
 8003614:	4b94      	ldr	r3, [pc, #592]	@ (8003868 <remote_recieve+0x49c>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b04      	cmp	r3, #4
 800361a:	f040 80af 	bne.w	800377c <remote_recieve+0x3b0>
		if(zUp < -2000 && zUp > -2010){
 800361e:	4b93      	ldr	r3, [pc, #588]	@ (800386c <remote_recieve+0x4a0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 8003626:	da3f      	bge.n	80036a8 <remote_recieve+0x2dc>
 8003628:	4b90      	ldr	r3, [pc, #576]	@ (800386c <remote_recieve+0x4a0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f46f 62fb 	mvn.w	r2, #2008	@ 0x7d8
 8003630:	4293      	cmp	r3, r2
 8003632:	db39      	blt.n	80036a8 <remote_recieve+0x2dc>
			remoteCheck = 1;
 8003634:	4b8e      	ldr	r3, [pc, #568]	@ (8003870 <remote_recieve+0x4a4>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
			motor_run(9000, 1);
 800363a:	2201      	movs	r2, #1
 800363c:	f242 3028 	movw	r0, #9000	@ 0x2328
 8003640:	f04f 0100 	mov.w	r1, #0
 8003644:	f7ff fdf0 	bl	8003228 <motor_run>
			if(goPoint_times  < HAL_GetTick()){
 8003648:	f001 ff94 	bl	8005574 <HAL_GetTick>
 800364c:	4603      	mov	r3, r0
 800364e:	2200      	movs	r2, #0
 8003650:	461c      	mov	r4, r3
 8003652:	4615      	mov	r5, r2
 8003654:	4b87      	ldr	r3, [pc, #540]	@ (8003874 <remote_recieve+0x4a8>)
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	42a2      	cmp	r2, r4
 800365c:	41ab      	sbcs	r3, r5
 800365e:	d21b      	bcs.n	8003698 <remote_recieve+0x2cc>
				goPointgoal = linearPos + 1;
 8003660:	4b85      	ldr	r3, [pc, #532]	@ (8003878 <remote_recieve+0x4ac>)
 8003662:	edd3 7a00 	vldr	s15, [r3]
 8003666:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800366a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800366e:	ee17 0a90 	vmov	r0, s15
 8003672:	f7fd fbd3 	bl	8000e1c <__aeabi_f2ulz>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4980      	ldr	r1, [pc, #512]	@ (800387c <remote_recieve+0x4b0>)
 800367c:	e9c1 2300 	strd	r2, r3, [r1]
				goPoint_times = HAL_GetTick() + 10;
 8003680:	f001 ff78 	bl	8005574 <HAL_GetTick>
 8003684:	4603      	mov	r3, r0
 8003686:	330a      	adds	r3, #10
 8003688:	2200      	movs	r2, #0
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	617a      	str	r2, [r7, #20]
 800368e:	4b79      	ldr	r3, [pc, #484]	@ (8003874 <remote_recieve+0x4a8>)
 8003690:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003694:	e9c3 1200 	strd	r1, r2, [r3]
			}
			gopoint_act = 1;
 8003698:	4979      	ldr	r1, [pc, #484]	@ (8003880 <remote_recieve+0x4b4>)
 800369a:	f04f 0201 	mov.w	r2, #1
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	e9c1 2300 	strd	r2, r3, [r1]
 80036a6:	e020      	b.n	80036ea <remote_recieve+0x31e>
//			trajec_target = linearPos + 10;
		}
		else if(zDown > 38000 && zDown < 38800){
 80036a8:	4b76      	ldr	r3, [pc, #472]	@ (8003884 <remote_recieve+0x4b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f249 4270 	movw	r2, #38000	@ 0x9470
 80036b0:	4293      	cmp	r3, r2
 80036b2:	dd10      	ble.n	80036d6 <remote_recieve+0x30a>
 80036b4:	4b73      	ldr	r3, [pc, #460]	@ (8003884 <remote_recieve+0x4b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f249 728f 	movw	r2, #38799	@ 0x978f
 80036bc:	4293      	cmp	r3, r2
 80036be:	dc0a      	bgt.n	80036d6 <remote_recieve+0x30a>
			remoteCheck = 2;
 80036c0:	4b6b      	ldr	r3, [pc, #428]	@ (8003870 <remote_recieve+0x4a4>)
 80036c2:	2202      	movs	r2, #2
 80036c4:	601a      	str	r2, [r3, #0]
			motor_run(7500, 2);
 80036c6:	2202      	movs	r2, #2
 80036c8:	f641 504c 	movw	r0, #7500	@ 0x1d4c
 80036cc:	f04f 0100 	mov.w	r1, #0
 80036d0:	f7ff fdaa 	bl	8003228 <motor_run>
 80036d4:	e009      	b.n	80036ea <remote_recieve+0x31e>
		}
		else{
			motor_run(0, 3);
 80036d6:	2203      	movs	r2, #3
 80036d8:	f04f 0000 	mov.w	r0, #0
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	f7ff fda2 	bl	8003228 <motor_run>
			remoteCheck = 0;
 80036e4:	4b62      	ldr	r3, [pc, #392]	@ (8003870 <remote_recieve+0x4a4>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
		}

		if(JoyxPosition < 38100){
 80036ea:	4b67      	ldr	r3, [pc, #412]	@ (8003888 <remote_recieve+0x4bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f249 42d3 	movw	r2, #38099	@ 0x94d3
 80036f2:	4293      	cmp	r3, r2
 80036f4:	dc1e      	bgt.n	8003734 <remote_recieve+0x368>
			if(JoyxPosition_timestamp < HAL_GetTick()){
 80036f6:	f001 ff3d 	bl	8005574 <HAL_GetTick>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2200      	movs	r2, #0
 80036fe:	469a      	mov	sl, r3
 8003700:	4693      	mov	fp, r2
 8003702:	4b62      	ldr	r3, [pc, #392]	@ (800388c <remote_recieve+0x4c0>)
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	4552      	cmp	r2, sl
 800370a:	eb73 030b 	sbcs.w	r3, r3, fp
 800370e:	d235      	bcs.n	800377c <remote_recieve+0x3b0>
				xAxisPosition += 1;
 8003710:	4b5f      	ldr	r3, [pc, #380]	@ (8003890 <remote_recieve+0x4c4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	4a5e      	ldr	r2, [pc, #376]	@ (8003890 <remote_recieve+0x4c4>)
 8003718:	6013      	str	r3, [r2, #0]
				JoyxPosition_timestamp = HAL_GetTick() + 20;
 800371a:	f001 ff2b 	bl	8005574 <HAL_GetTick>
 800371e:	4603      	mov	r3, r0
 8003720:	3314      	adds	r3, #20
 8003722:	2200      	movs	r2, #0
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	60fa      	str	r2, [r7, #12]
 8003728:	4b58      	ldr	r3, [pc, #352]	@ (800388c <remote_recieve+0x4c0>)
 800372a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800372e:	e9c3 1200 	strd	r1, r2, [r3]
 8003732:	e023      	b.n	800377c <remote_recieve+0x3b0>
			}
		}
		else if(JoyxPosition > 39000){
 8003734:	4b54      	ldr	r3, [pc, #336]	@ (8003888 <remote_recieve+0x4bc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f649 0258 	movw	r2, #39000	@ 0x9858
 800373c:	4293      	cmp	r3, r2
 800373e:	dd1d      	ble.n	800377c <remote_recieve+0x3b0>
			if(JoyxPosition_timestamp < HAL_GetTick()){
 8003740:	f001 ff18 	bl	8005574 <HAL_GetTick>
 8003744:	4603      	mov	r3, r0
 8003746:	2200      	movs	r2, #0
 8003748:	4698      	mov	r8, r3
 800374a:	4691      	mov	r9, r2
 800374c:	4b4f      	ldr	r3, [pc, #316]	@ (800388c <remote_recieve+0x4c0>)
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	4542      	cmp	r2, r8
 8003754:	eb73 0309 	sbcs.w	r3, r3, r9
 8003758:	d210      	bcs.n	800377c <remote_recieve+0x3b0>
				xAxisPosition -= 1;
 800375a:	4b4d      	ldr	r3, [pc, #308]	@ (8003890 <remote_recieve+0x4c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3b01      	subs	r3, #1
 8003760:	4a4b      	ldr	r2, [pc, #300]	@ (8003890 <remote_recieve+0x4c4>)
 8003762:	6013      	str	r3, [r2, #0]
				JoyxPosition_timestamp = HAL_GetTick() + 20;
 8003764:	f001 ff06 	bl	8005574 <HAL_GetTick>
 8003768:	4603      	mov	r3, r0
 800376a:	3314      	adds	r3, #20
 800376c:	2200      	movs	r2, #0
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	4b46      	ldr	r3, [pc, #280]	@ (800388c <remote_recieve+0x4c0>)
 8003774:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003778:	e9c3 1200 	strd	r1, r2, [r3]
			}
		}
	}

	if(joySel1 > 39000 && joySel1 < 40000){
 800377c:	4b45      	ldr	r3, [pc, #276]	@ (8003894 <remote_recieve+0x4c8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f649 0258 	movw	r2, #39000	@ 0x9858
 8003784:	4293      	cmp	r3, r2
 8003786:	dd2f      	ble.n	80037e8 <remote_recieve+0x41c>
 8003788:	4b42      	ldr	r3, [pc, #264]	@ (8003894 <remote_recieve+0x4c8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003790:	4293      	cmp	r3, r2
 8003792:	dc29      	bgt.n	80037e8 <remote_recieve+0x41c>
		if(joySel2 > 39000) ShelvesSelect = 1;
 8003794:	4b40      	ldr	r3, [pc, #256]	@ (8003898 <remote_recieve+0x4cc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f649 0258 	movw	r2, #39000	@ 0x9858
 800379c:	4293      	cmp	r3, r2
 800379e:	dd03      	ble.n	80037a8 <remote_recieve+0x3dc>
 80037a0:	4b3e      	ldr	r3, [pc, #248]	@ (800389c <remote_recieve+0x4d0>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e055      	b.n	8003854 <remote_recieve+0x488>
		else  if(joySel2 > 38500 && joySel2 < 39000) ShelvesSelect = 2;
 80037a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003898 <remote_recieve+0x4cc>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f249 6264 	movw	r2, #38500	@ 0x9664
 80037b0:	4293      	cmp	r3, r2
 80037b2:	dd09      	ble.n	80037c8 <remote_recieve+0x3fc>
 80037b4:	4b38      	ldr	r3, [pc, #224]	@ (8003898 <remote_recieve+0x4cc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f649 0257 	movw	r2, #38999	@ 0x9857
 80037bc:	4293      	cmp	r3, r2
 80037be:	dc03      	bgt.n	80037c8 <remote_recieve+0x3fc>
 80037c0:	4b36      	ldr	r3, [pc, #216]	@ (800389c <remote_recieve+0x4d0>)
 80037c2:	2202      	movs	r2, #2
 80037c4:	701a      	strb	r2, [r3, #0]
		if(joySel2 > 39000) ShelvesSelect = 1;
 80037c6:	e045      	b.n	8003854 <remote_recieve+0x488>
		else if(joySel2 > 38000 && joySel2 < 38100) ShelvesSelect = 3;
 80037c8:	4b33      	ldr	r3, [pc, #204]	@ (8003898 <remote_recieve+0x4cc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f249 4270 	movw	r2, #38000	@ 0x9470
 80037d0:	4293      	cmp	r3, r2
 80037d2:	dd3f      	ble.n	8003854 <remote_recieve+0x488>
 80037d4:	4b30      	ldr	r3, [pc, #192]	@ (8003898 <remote_recieve+0x4cc>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f249 42d3 	movw	r2, #38099	@ 0x94d3
 80037dc:	4293      	cmp	r3, r2
 80037de:	dc39      	bgt.n	8003854 <remote_recieve+0x488>
 80037e0:	4b2e      	ldr	r3, [pc, #184]	@ (800389c <remote_recieve+0x4d0>)
 80037e2:	2203      	movs	r2, #3
 80037e4:	701a      	strb	r2, [r3, #0]
		if(joySel2 > 39000) ShelvesSelect = 1;
 80037e6:	e035      	b.n	8003854 <remote_recieve+0x488>
	}
	else if(joySel1 > 38000 && joySel1 < 39000){
 80037e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003894 <remote_recieve+0x4c8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f249 4270 	movw	r2, #38000	@ 0x9470
 80037f0:	4293      	cmp	r3, r2
 80037f2:	dd30      	ble.n	8003856 <remote_recieve+0x48a>
 80037f4:	4b27      	ldr	r3, [pc, #156]	@ (8003894 <remote_recieve+0x4c8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f649 0257 	movw	r2, #38999	@ 0x9857
 80037fc:	4293      	cmp	r3, r2
 80037fe:	dc2a      	bgt.n	8003856 <remote_recieve+0x48a>
		if(joySel2 > 38000 && joySel2 < 38100) ShelvesSelect = 4;
 8003800:	4b25      	ldr	r3, [pc, #148]	@ (8003898 <remote_recieve+0x4cc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f249 4270 	movw	r2, #38000	@ 0x9470
 8003808:	4293      	cmp	r3, r2
 800380a:	dd09      	ble.n	8003820 <remote_recieve+0x454>
 800380c:	4b22      	ldr	r3, [pc, #136]	@ (8003898 <remote_recieve+0x4cc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f249 42d3 	movw	r2, #38099	@ 0x94d3
 8003814:	4293      	cmp	r3, r2
 8003816:	dc03      	bgt.n	8003820 <remote_recieve+0x454>
 8003818:	4b20      	ldr	r3, [pc, #128]	@ (800389c <remote_recieve+0x4d0>)
 800381a:	2204      	movs	r2, #4
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	e01a      	b.n	8003856 <remote_recieve+0x48a>
		else  if(joySel2 > 38500 && joySel2 < 39000) ShelvesSelect = 5;
 8003820:	4b1d      	ldr	r3, [pc, #116]	@ (8003898 <remote_recieve+0x4cc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f249 6264 	movw	r2, #38500	@ 0x9664
 8003828:	4293      	cmp	r3, r2
 800382a:	dd09      	ble.n	8003840 <remote_recieve+0x474>
 800382c:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <remote_recieve+0x4cc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003834:	4293      	cmp	r3, r2
 8003836:	dc03      	bgt.n	8003840 <remote_recieve+0x474>
 8003838:	4b18      	ldr	r3, [pc, #96]	@ (800389c <remote_recieve+0x4d0>)
 800383a:	2205      	movs	r2, #5
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e00a      	b.n	8003856 <remote_recieve+0x48a>
		else if(joySel2 > 39000) ShelvesSelect = 6;
 8003840:	4b15      	ldr	r3, [pc, #84]	@ (8003898 <remote_recieve+0x4cc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f649 0258 	movw	r2, #39000	@ 0x9858
 8003848:	4293      	cmp	r3, r2
 800384a:	dd04      	ble.n	8003856 <remote_recieve+0x48a>
 800384c:	4b13      	ldr	r3, [pc, #76]	@ (800389c <remote_recieve+0x4d0>)
 800384e:	2206      	movs	r2, #6
 8003850:	701a      	strb	r2, [r3, #0]
	}
}
 8003852:	e000      	b.n	8003856 <remote_recieve+0x48a>
		if(joySel2 > 39000) ShelvesSelect = 1;
 8003854:	bf00      	nop
}
 8003856:	bf00      	nop
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003860:	20000554 	.word	0x20000554
 8003864:	20000550 	.word	0x20000550
 8003868:	20000438 	.word	0x20000438
 800386c:	20000520 	.word	0x20000520
 8003870:	20000494 	.word	0x20000494
 8003874:	200004e8 	.word	0x200004e8
 8003878:	2000048c 	.word	0x2000048c
 800387c:	200004e0 	.word	0x200004e0
 8003880:	200004d8 	.word	0x200004d8
 8003884:	20000528 	.word	0x20000528
 8003888:	20000560 	.word	0x20000560
 800388c:	20000518 	.word	0x20000518
 8003890:	20000484 	.word	0x20000484
 8003894:	20000538 	.word	0x20000538
 8003898:	2000053c 	.word	0x2000053c
 800389c:	2000055c 	.word	0x2000055c

080038a0 <go_point>:

int go_point(){
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
	if(goPoint_trig == 1){
 80038a4:	4b58      	ldr	r3, [pc, #352]	@ (8003a08 <go_point+0x168>)
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	1e51      	subs	r1, r2, #1
 80038ac:	430b      	orrs	r3, r1
 80038ae:	d127      	bne.n	8003900 <go_point+0x60>
		if(linearPos >= goPointgoal){
 80038b0:	4b56      	ldr	r3, [pc, #344]	@ (8003a0c <go_point+0x16c>)
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	f7fd fa51 	bl	8000d60 <__aeabi_ul2f>
 80038be:	ee07 0a10 	vmov	s14, r0
 80038c2:	4b53      	ldr	r3, [pc, #332]	@ (8003a10 <go_point+0x170>)
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	d816      	bhi.n	8003900 <go_point+0x60>
			motor_run(0, 3);
 80038d2:	2203      	movs	r2, #3
 80038d4:	f04f 0000 	mov.w	r0, #0
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	f7ff fca4 	bl	8003228 <motor_run>
			goPoint_trig = 0;
 80038e0:	4949      	ldr	r1, [pc, #292]	@ (8003a08 <go_point+0x168>)
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9c1 2300 	strd	r2, r3, [r1]
			gopoint_act = 0;
 80038ee:	4949      	ldr	r1, [pc, #292]	@ (8003a14 <go_point+0x174>)
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9c1 2300 	strd	r2, r3, [r1]
			return 4;
 80038fc:	2304      	movs	r3, #4
 80038fe:	e080      	b.n	8003a02 <go_point+0x162>
		}
	}
	if(goPoint_trig == 2){
 8003900:	4b41      	ldr	r3, [pc, #260]	@ (8003a08 <go_point+0x168>)
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	1e91      	subs	r1, r2, #2
 8003908:	430b      	orrs	r3, r1
 800390a:	d127      	bne.n	800395c <go_point+0xbc>
		if(linearPos <= goPointgoal){
 800390c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a0c <go_point+0x16c>)
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	f7fd fa23 	bl	8000d60 <__aeabi_ul2f>
 800391a:	ee07 0a10 	vmov	s14, r0
 800391e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a10 <go_point+0x170>)
 8003920:	edd3 7a00 	vldr	s15, [r3]
 8003924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392c:	db16      	blt.n	800395c <go_point+0xbc>
			motor_run(0, 3);
 800392e:	2203      	movs	r2, #3
 8003930:	f04f 0000 	mov.w	r0, #0
 8003934:	f04f 0100 	mov.w	r1, #0
 8003938:	f7ff fc76 	bl	8003228 <motor_run>
			goPoint_trig = 0;
 800393c:	4932      	ldr	r1, [pc, #200]	@ (8003a08 <go_point+0x168>)
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9c1 2300 	strd	r2, r3, [r1]
			gopoint_act = 0;
 800394a:	4932      	ldr	r1, [pc, #200]	@ (8003a14 <go_point+0x174>)
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9c1 2300 	strd	r2, r3, [r1]
			return 4;
 8003958:	2304      	movs	r3, #4
 800395a:	e052      	b.n	8003a02 <go_point+0x162>
		}
	}

	if(gopoint_act == 1){
 800395c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a14 <go_point+0x174>)
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	1e51      	subs	r1, r2, #1
 8003964:	430b      	orrs	r3, r1
 8003966:	d14c      	bne.n	8003a02 <go_point+0x162>
		if(linearPos < goPointgoal){
 8003968:	4b28      	ldr	r3, [pc, #160]	@ (8003a0c <go_point+0x16c>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	f7fd f9f5 	bl	8000d60 <__aeabi_ul2f>
 8003976:	ee07 0a10 	vmov	s14, r0
 800397a:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <go_point+0x170>)
 800397c:	edd3 7a00 	vldr	s15, [r3]
 8003980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003988:	dd15      	ble.n	80039b6 <go_point+0x116>
			motor_run(10000, 1);
 800398a:	2201      	movs	r2, #1
 800398c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	f7ff fc48 	bl	8003228 <motor_run>
			goPoint_trig = 1;
 8003998:	491b      	ldr	r1, [pc, #108]	@ (8003a08 <go_point+0x168>)
 800399a:	f04f 0201 	mov.w	r2, #1
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9c1 2300 	strd	r2, r3, [r1]
			jog_goPoint_actt = 1;
 80039a6:	491c      	ldr	r1, [pc, #112]	@ (8003a18 <go_point+0x178>)
 80039a8:	f04f 0201 	mov.w	r2, #1
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	e9c1 2300 	strd	r2, r3, [r1]
 80039b4:	e025      	b.n	8003a02 <go_point+0x162>
		}
		else if(linearPos > goPointgoal){
 80039b6:	4b15      	ldr	r3, [pc, #84]	@ (8003a0c <go_point+0x16c>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	4610      	mov	r0, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	f7fd f9ce 	bl	8000d60 <__aeabi_ul2f>
 80039c4:	ee07 0a10 	vmov	s14, r0
 80039c8:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <go_point+0x170>)
 80039ca:	edd3 7a00 	vldr	s15, [r3]
 80039ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d6:	d514      	bpl.n	8003a02 <go_point+0x162>
			motor_run(7200, 2);
 80039d8:	2202      	movs	r2, #2
 80039da:	f44f 50e1 	mov.w	r0, #7200	@ 0x1c20
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	f7ff fc21 	bl	8003228 <motor_run>
			goPoint_trig = 2;
 80039e6:	4908      	ldr	r1, [pc, #32]	@ (8003a08 <go_point+0x168>)
 80039e8:	f04f 0202 	mov.w	r2, #2
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9c1 2300 	strd	r2, r3, [r1]
			jog_goPoint_actt = 1;
 80039f4:	4908      	ldr	r1, [pc, #32]	@ (8003a18 <go_point+0x178>)
 80039f6:	f04f 0201 	mov.w	r2, #1
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	200004d0 	.word	0x200004d0
 8003a0c:	200004e0 	.word	0x200004e0
 8003a10:	2000048c 	.word	0x2000048c
 8003a14:	200004d8 	.word	0x200004d8
 8003a18:	200004f0 	.word	0x200004f0
 8003a1c:	00000000 	.word	0x00000000

08003a20 <changeUnit>:

void changeUnit(){
 8003a20:	b5b0      	push	{r4, r5, r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	QEI_mm = (QEI_raw/8192.0)*25.326*pi;
 8003a24:	4b18      	ldr	r3, [pc, #96]	@ (8003a88 <changeUnit+0x68>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fd37 	bl	800049c <__aeabi_ui2d>
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	4b16      	ldr	r3, [pc, #88]	@ (8003a8c <changeUnit+0x6c>)
 8003a34:	f7fc fed6 	bl	80007e4 <__aeabi_ddiv>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	a30f      	add	r3, pc, #60	@ (adr r3, 8003a80 <changeUnit+0x60>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	f7fc fda3 	bl	8000590 <__aeabi_dmul>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4614      	mov	r4, r2
 8003a50:	461d      	mov	r5, r3
 8003a52:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <changeUnit+0x70>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fc fd42 	bl	80004e0 <__aeabi_f2d>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4620      	mov	r0, r4
 8003a62:	4629      	mov	r1, r5
 8003a64:	f7fc fd94 	bl	8000590 <__aeabi_dmul>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f7fd f85e 	bl	8000b30 <__aeabi_d2f>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4a07      	ldr	r2, [pc, #28]	@ (8003a94 <changeUnit+0x74>)
 8003a78:	6013      	str	r3, [r2, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	bc6a7efa 	.word	0xbc6a7efa
 8003a84:	40395374 	.word	0x40395374
 8003a88:	20001254 	.word	0x20001254
 8003a8c:	40c00000 	.word	0x40c00000
 8003a90:	20000210 	.word	0x20000210
 8003a94:	20001258 	.word	0x20001258

08003a98 <HomemadePID>:

void HomemadePID(){
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
//	Now Lastime error errorsum kp ki kd Iterm dinput Lasterror
	set_point = traj[0];
 8003a9c:	4bb4      	ldr	r3, [pc, #720]	@ (8003d70 <HomemadePID+0x2d8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4ab4      	ldr	r2, [pc, #720]	@ (8003d74 <HomemadePID+0x2dc>)
 8003aa2:	6013      	str	r3, [r2, #0]
	static uint32_t timestamp = 0;
	if (timestamp < __HAL_TIM_GET_COUNTER(&htim2)) {
 8003aa4:	4bb4      	ldr	r3, [pc, #720]	@ (8003d78 <HomemadePID+0x2e0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aaa:	4bb4      	ldr	r3, [pc, #720]	@ (8003d7c <HomemadePID+0x2e4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	f240 829a 	bls.w	8003fe8 <HomemadePID+0x550>
		timestamp = __HAL_TIM_GET_COUNTER(&htim2) + 1000;
 8003ab4:	4bb0      	ldr	r3, [pc, #704]	@ (8003d78 <HomemadePID+0x2e0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8003abe:	4aaf      	ldr	r2, [pc, #700]	@ (8003d7c <HomemadePID+0x2e4>)
 8003ac0:	6013      	str	r3, [r2, #0]
		Now = __HAL_TIM_GET_COUNTER(&htim2);
 8003ac2:	4bad      	ldr	r3, [pc, #692]	@ (8003d78 <HomemadePID+0x2e0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	4aad      	ldr	r2, [pc, #692]	@ (8003d80 <HomemadePID+0x2e8>)
 8003aca:	6013      	str	r3, [r2, #0]
		error = set_point - QEI_mm;
 8003acc:	4ba9      	ldr	r3, [pc, #676]	@ (8003d74 <HomemadePID+0x2dc>)
 8003ace:	ed93 7a00 	vldr	s14, [r3]
 8003ad2:	4bac      	ldr	r3, [pc, #688]	@ (8003d84 <HomemadePID+0x2ec>)
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003adc:	4baa      	ldr	r3, [pc, #680]	@ (8003d88 <HomemadePID+0x2f0>)
 8003ade:	edc3 7a00 	vstr	s15, [r3]
		finish_state = 0;
 8003ae2:	4baa      	ldr	r3, [pc, #680]	@ (8003d8c <HomemadePID+0x2f4>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]

		if(error < 2 && error > -2){
 8003ae8:	4ba7      	ldr	r3, [pc, #668]	@ (8003d88 <HomemadePID+0x2f0>)
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afa:	d522      	bpl.n	8003b42 <HomemadePID+0xaa>
 8003afc:	4ba2      	ldr	r3, [pc, #648]	@ (8003d88 <HomemadePID+0x2f0>)
 8003afe:	edd3 7a00 	vldr	s15, [r3]
 8003b02:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0e:	dd18      	ble.n	8003b42 <HomemadePID+0xaa>
			errorsum = 0;
 8003b10:	4b9f      	ldr	r3, [pc, #636]	@ (8003d90 <HomemadePID+0x2f8>)
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
			finish_state = 1;
 8003b18:	4b9c      	ldr	r3, [pc, #624]	@ (8003d8c <HomemadePID+0x2f4>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b28:	f002 fb0c 	bl	8006144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2180      	movs	r1, #128	@ 0x80
 8003b30:	4898      	ldr	r0, [pc, #608]	@ (8003d94 <HomemadePID+0x2fc>)
 8003b32:	f002 fb07 	bl	8006144 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,30000);
 8003b36:	4b98      	ldr	r3, [pc, #608]	@ (8003d98 <HomemadePID+0x300>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003b3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b40:	e01d      	b.n	8003b7e <HomemadePID+0xe6>
		} else if(error < 11 && error > -11){
 8003b42:	4b91      	ldr	r3, [pc, #580]	@ (8003d88 <HomemadePID+0x2f0>)
 8003b44:	edd3 7a00 	vldr	s15, [r3]
 8003b48:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8003b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b54:	d513      	bpl.n	8003b7e <HomemadePID+0xe6>
 8003b56:	4b8c      	ldr	r3, [pc, #560]	@ (8003d88 <HomemadePID+0x2f0>)
 8003b58:	edd3 7a00 	vldr	s15, [r3]
 8003b5c:	eeba 7a06 	vmov.f32	s14, #166	@ 0xc1300000 -11.0
 8003b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b68:	dd09      	ble.n	8003b7e <HomemadePID+0xe6>
			errorsum += 15;
 8003b6a:	4b89      	ldr	r3, [pc, #548]	@ (8003d90 <HomemadePID+0x2f8>)
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003b74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b78:	4b85      	ldr	r3, [pc, #532]	@ (8003d90 <HomemadePID+0x2f8>)
 8003b7a:	edc3 7a00 	vstr	s15, [r3]
		}

		if(error > 32768)
 8003b7e:	4b82      	ldr	r3, [pc, #520]	@ (8003d88 <HomemadePID+0x2f0>)
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8003d9c <HomemadePID+0x304>
 8003b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b90:	dd09      	ble.n	8003ba6 <HomemadePID+0x10e>
			error -= 65536;
 8003b92:	4b7d      	ldr	r3, [pc, #500]	@ (8003d88 <HomemadePID+0x2f0>)
 8003b94:	edd3 7a00 	vldr	s15, [r3]
 8003b98:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8003da0 <HomemadePID+0x308>
 8003b9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ba0:	4b79      	ldr	r3, [pc, #484]	@ (8003d88 <HomemadePID+0x2f0>)
 8003ba2:	edc3 7a00 	vstr	s15, [r3]
		if(error < -32768)
 8003ba6:	4b78      	ldr	r3, [pc, #480]	@ (8003d88 <HomemadePID+0x2f0>)
 8003ba8:	edd3 7a00 	vldr	s15, [r3]
 8003bac:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8003da4 <HomemadePID+0x30c>
 8003bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb8:	d509      	bpl.n	8003bce <HomemadePID+0x136>
			error += 65536;
 8003bba:	4b73      	ldr	r3, [pc, #460]	@ (8003d88 <HomemadePID+0x2f0>)
 8003bbc:	edd3 7a00 	vldr	s15, [r3]
 8003bc0:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8003da0 <HomemadePID+0x308>
 8003bc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d88 <HomemadePID+0x2f0>)
 8003bca:	edc3 7a00 	vstr	s15, [r3]

		if(error > 0){
 8003bce:	4b6e      	ldr	r3, [pc, #440]	@ (8003d88 <HomemadePID+0x2f0>)
 8003bd0:	edd3 7a00 	vldr	s15, [r3]
 8003bd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bdc:	f340 80fc 	ble.w	8003dd8 <HomemadePID+0x340>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 8003be0:	2200      	movs	r2, #0
 8003be2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bea:	f002 faab 	bl	8006144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,1);
 8003bee:	2201      	movs	r2, #1
 8003bf0:	2180      	movs	r1, #128	@ 0x80
 8003bf2:	4868      	ldr	r0, [pc, #416]	@ (8003d94 <HomemadePID+0x2fc>)
 8003bf4:	f002 faa6 	bl	8006144 <HAL_GPIO_WritePin>
			errorsum = errorsum + (error*(Now-Lastime)/10000);
 8003bf8:	4b61      	ldr	r3, [pc, #388]	@ (8003d80 <HomemadePID+0x2e8>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8003da8 <HomemadePID+0x310>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d88 <HomemadePID+0x2f0>)
 8003c0c:	edd3 7a00 	vldr	s15, [r3]
 8003c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c14:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8003dac <HomemadePID+0x314>
 8003c18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c1c:	4b5c      	ldr	r3, [pc, #368]	@ (8003d90 <HomemadePID+0x2f8>)
 8003c1e:	edd3 7a00 	vldr	s15, [r3]
 8003c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c26:	4b5a      	ldr	r3, [pc, #360]	@ (8003d90 <HomemadePID+0x2f8>)
 8003c28:	edc3 7a00 	vstr	s15, [r3]
			Iterm = ki*errorsum;
 8003c2c:	4b60      	ldr	r3, [pc, #384]	@ (8003db0 <HomemadePID+0x318>)
 8003c2e:	ed93 7a00 	vldr	s14, [r3]
 8003c32:	4b57      	ldr	r3, [pc, #348]	@ (8003d90 <HomemadePID+0x2f8>)
 8003c34:	edd3 7a00 	vldr	s15, [r3]
 8003c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8003db4 <HomemadePID+0x31c>)
 8003c3e:	edc3 7a00 	vstr	s15, [r3]
			if(Iterm > 65535){
 8003c42:	4b5c      	ldr	r3, [pc, #368]	@ (8003db4 <HomemadePID+0x31c>)
 8003c44:	edd3 7a00 	vldr	s15, [r3]
 8003c48:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8003db8 <HomemadePID+0x320>
 8003c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c54:	dd1a      	ble.n	8003c8c <HomemadePID+0x1f4>
				errorsum = (Iterm/ki) - (error*(Now-Lastime));
 8003c56:	4b57      	ldr	r3, [pc, #348]	@ (8003db4 <HomemadePID+0x31c>)
 8003c58:	edd3 6a00 	vldr	s13, [r3]
 8003c5c:	4b54      	ldr	r3, [pc, #336]	@ (8003db0 <HomemadePID+0x318>)
 8003c5e:	edd3 7a00 	vldr	s15, [r3]
 8003c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c66:	4b46      	ldr	r3, [pc, #280]	@ (8003d80 <HomemadePID+0x2e8>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4b4f      	ldr	r3, [pc, #316]	@ (8003da8 <HomemadePID+0x310>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c78:	4b43      	ldr	r3, [pc, #268]	@ (8003d88 <HomemadePID+0x2f0>)
 8003c7a:	edd3 7a00 	vldr	s15, [r3]
 8003c7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c86:	4b42      	ldr	r3, [pc, #264]	@ (8003d90 <HomemadePID+0x2f8>)
 8003c88:	edc3 7a00 	vstr	s15, [r3]
			}
			dinput = (error-Lasterror)/(Now-Lastime);
 8003c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d88 <HomemadePID+0x2f0>)
 8003c8e:	ed93 7a00 	vldr	s14, [r3]
 8003c92:	4b4a      	ldr	r3, [pc, #296]	@ (8003dbc <HomemadePID+0x324>)
 8003c94:	edd3 7a00 	vldr	s15, [r3]
 8003c98:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003c9c:	4b38      	ldr	r3, [pc, #224]	@ (8003d80 <HomemadePID+0x2e8>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b41      	ldr	r3, [pc, #260]	@ (8003da8 <HomemadePID+0x310>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cb2:	4b43      	ldr	r3, [pc, #268]	@ (8003dc0 <HomemadePID+0x328>)
 8003cb4:	edc3 7a00 	vstr	s15, [r3]
			if(errorsum < 0){
 8003cb8:	4b35      	ldr	r3, [pc, #212]	@ (8003d90 <HomemadePID+0x2f8>)
 8003cba:	edd3 7a00 	vldr	s15, [r3]
 8003cbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc6:	d507      	bpl.n	8003cd8 <HomemadePID+0x240>
				errorsum = errorsum*-1;
 8003cc8:	4b31      	ldr	r3, [pc, #196]	@ (8003d90 <HomemadePID+0x2f8>)
 8003cca:	edd3 7a00 	vldr	s15, [r3]
 8003cce:	eef1 7a67 	vneg.f32	s15, s15
 8003cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003d90 <HomemadePID+0x2f8>)
 8003cd4:	edc3 7a00 	vstr	s15, [r3]
			}
			Vfeedback = (kp*error)+(ki*errorsum)+(kd*dinput);
 8003cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8003dc4 <HomemadePID+0x32c>)
 8003cda:	ed93 7a00 	vldr	s14, [r3]
 8003cde:	4b2a      	ldr	r3, [pc, #168]	@ (8003d88 <HomemadePID+0x2f0>)
 8003ce0:	edd3 7a00 	vldr	s15, [r3]
 8003ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ce8:	4b31      	ldr	r3, [pc, #196]	@ (8003db0 <HomemadePID+0x318>)
 8003cea:	edd3 6a00 	vldr	s13, [r3]
 8003cee:	4b28      	ldr	r3, [pc, #160]	@ (8003d90 <HomemadePID+0x2f8>)
 8003cf0:	edd3 7a00 	vldr	s15, [r3]
 8003cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cfc:	4b32      	ldr	r3, [pc, #200]	@ (8003dc8 <HomemadePID+0x330>)
 8003cfe:	edd3 6a00 	vldr	s13, [r3]
 8003d02:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc0 <HomemadePID+0x328>)
 8003d04:	edd3 7a00 	vldr	s15, [r3]
 8003d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d14:	ee17 2a90 	vmov	r2, s15
 8003d18:	4b2c      	ldr	r3, [pc, #176]	@ (8003dcc <HomemadePID+0x334>)
 8003d1a:	601a      	str	r2, [r3, #0]
			if(Vfeedback > 65536){
 8003d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003dcc <HomemadePID+0x334>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d24:	d903      	bls.n	8003d2e <HomemadePID+0x296>
				Vfeedback = 65536;
 8003d26:	4b29      	ldr	r3, [pc, #164]	@ (8003dcc <HomemadePID+0x334>)
 8003d28:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003d2c:	601a      	str	r2, [r3, #0]
			}

			PWMset = (Vfeedback/65536.0)*30000;
 8003d2e:	4b27      	ldr	r3, [pc, #156]	@ (8003dcc <HomemadePID+0x334>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fbb2 	bl	800049c <__aeabi_ui2d>
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	4b24      	ldr	r3, [pc, #144]	@ (8003dd0 <HomemadePID+0x338>)
 8003d3e:	f7fc fd51 	bl	80007e4 <__aeabi_ddiv>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4610      	mov	r0, r2
 8003d48:	4619      	mov	r1, r3
 8003d4a:	a307      	add	r3, pc, #28	@ (adr r3, 8003d68 <HomemadePID+0x2d0>)
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f7fc fc1e 	bl	8000590 <__aeabi_dmul>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f7fc fee8 	bl	8000b30 <__aeabi_d2f>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4a1c      	ldr	r2, [pc, #112]	@ (8003dd4 <HomemadePID+0x33c>)
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e12d      	b.n	8003fc4 <HomemadePID+0x52c>
 8003d68:	00000000 	.word	0x00000000
 8003d6c:	40dd4c00 	.word	0x40dd4c00
 8003d70:	200012ac 	.word	0x200012ac
 8003d74:	2000125c 	.word	0x2000125c
 8003d78:	20000650 	.word	0x20000650
 8003d7c:	200012dc 	.word	0x200012dc
 8003d80:	20001274 	.word	0x20001274
 8003d84:	20001258 	.word	0x20001258
 8003d88:	2000127c 	.word	0x2000127c
 8003d8c:	20000580 	.word	0x20000580
 8003d90:	20001280 	.word	0x20001280
 8003d94:	48000400 	.word	0x48000400
 8003d98:	200008b4 	.word	0x200008b4
 8003d9c:	47000000 	.word	0x47000000
 8003da0:	47800000 	.word	0x47800000
 8003da4:	c7000000 	.word	0xc7000000
 8003da8:	20001278 	.word	0x20001278
 8003dac:	461c4000 	.word	0x461c4000
 8003db0:	2000126c 	.word	0x2000126c
 8003db4:	20001284 	.word	0x20001284
 8003db8:	477fff00 	.word	0x477fff00
 8003dbc:	2000128c 	.word	0x2000128c
 8003dc0:	20001288 	.word	0x20001288
 8003dc4:	20001268 	.word	0x20001268
 8003dc8:	20001270 	.word	0x20001270
 8003dcc:	20001264 	.word	0x20001264
 8003dd0:	40f00000 	.word	0x40f00000
 8003dd4:	20001260 	.word	0x20001260
		}
		else if(error < 0){
 8003dd8:	4b87      	ldr	r3, [pc, #540]	@ (8003ff8 <HomemadePID+0x560>)
 8003dda:	edd3 7a00 	vldr	s15, [r3]
 8003dde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de6:	f140 80d9 	bpl.w	8003f9c <HomemadePID+0x504>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,1);
 8003dea:	2201      	movs	r2, #1
 8003dec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003df0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003df4:	f002 f9a6 	bl	8006144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2180      	movs	r1, #128	@ 0x80
 8003dfc:	487f      	ldr	r0, [pc, #508]	@ (8003ffc <HomemadePID+0x564>)
 8003dfe:	f002 f9a1 	bl	8006144 <HAL_GPIO_WritePin>
			error = error*(-1);
 8003e02:	4b7d      	ldr	r3, [pc, #500]	@ (8003ff8 <HomemadePID+0x560>)
 8003e04:	edd3 7a00 	vldr	s15, [r3]
 8003e08:	eef1 7a67 	vneg.f32	s15, s15
 8003e0c:	4b7a      	ldr	r3, [pc, #488]	@ (8003ff8 <HomemadePID+0x560>)
 8003e0e:	edc3 7a00 	vstr	s15, [r3]

//			if(t < Time_acc_tri){
//				PWMset = 8000;
//			} else{
				errorsum = errorsum + (error*(Now-Lastime)/10000);
 8003e12:	4b7b      	ldr	r3, [pc, #492]	@ (8004000 <HomemadePID+0x568>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b7b      	ldr	r3, [pc, #492]	@ (8004004 <HomemadePID+0x56c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	ee07 3a90 	vmov	s15, r3
 8003e20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e24:	4b74      	ldr	r3, [pc, #464]	@ (8003ff8 <HomemadePID+0x560>)
 8003e26:	edd3 7a00 	vldr	s15, [r3]
 8003e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2e:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8004008 <HomemadePID+0x570>
 8003e32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e36:	4b75      	ldr	r3, [pc, #468]	@ (800400c <HomemadePID+0x574>)
 8003e38:	edd3 7a00 	vldr	s15, [r3]
 8003e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e40:	4b72      	ldr	r3, [pc, #456]	@ (800400c <HomemadePID+0x574>)
 8003e42:	edc3 7a00 	vstr	s15, [r3]
				Iterm = ki*errorsum;
 8003e46:	4b72      	ldr	r3, [pc, #456]	@ (8004010 <HomemadePID+0x578>)
 8003e48:	ed93 7a00 	vldr	s14, [r3]
 8003e4c:	4b6f      	ldr	r3, [pc, #444]	@ (800400c <HomemadePID+0x574>)
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	4b6f      	ldr	r3, [pc, #444]	@ (8004014 <HomemadePID+0x57c>)
 8003e58:	edc3 7a00 	vstr	s15, [r3]
				if(Iterm > 65535){
 8003e5c:	4b6d      	ldr	r3, [pc, #436]	@ (8004014 <HomemadePID+0x57c>)
 8003e5e:	edd3 7a00 	vldr	s15, [r3]
 8003e62:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8004018 <HomemadePID+0x580>
 8003e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6e:	dd1a      	ble.n	8003ea6 <HomemadePID+0x40e>
					errorsum = (Iterm/ki) - (error*(Now-Lastime));
 8003e70:	4b68      	ldr	r3, [pc, #416]	@ (8004014 <HomemadePID+0x57c>)
 8003e72:	edd3 6a00 	vldr	s13, [r3]
 8003e76:	4b66      	ldr	r3, [pc, #408]	@ (8004010 <HomemadePID+0x578>)
 8003e78:	edd3 7a00 	vldr	s15, [r3]
 8003e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e80:	4b5f      	ldr	r3, [pc, #380]	@ (8004000 <HomemadePID+0x568>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b5f      	ldr	r3, [pc, #380]	@ (8004004 <HomemadePID+0x56c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e92:	4b59      	ldr	r3, [pc, #356]	@ (8003ff8 <HomemadePID+0x560>)
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea0:	4b5a      	ldr	r3, [pc, #360]	@ (800400c <HomemadePID+0x574>)
 8003ea2:	edc3 7a00 	vstr	s15, [r3]
				}
				dinput = (error-Lasterror)/(Now-Lastime);
 8003ea6:	4b54      	ldr	r3, [pc, #336]	@ (8003ff8 <HomemadePID+0x560>)
 8003ea8:	ed93 7a00 	vldr	s14, [r3]
 8003eac:	4b5b      	ldr	r3, [pc, #364]	@ (800401c <HomemadePID+0x584>)
 8003eae:	edd3 7a00 	vldr	s15, [r3]
 8003eb2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003eb6:	4b52      	ldr	r3, [pc, #328]	@ (8004000 <HomemadePID+0x568>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b52      	ldr	r3, [pc, #328]	@ (8004004 <HomemadePID+0x56c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	ee07 3a90 	vmov	s15, r3
 8003ec4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ecc:	4b54      	ldr	r3, [pc, #336]	@ (8004020 <HomemadePID+0x588>)
 8003ece:	edc3 7a00 	vstr	s15, [r3]
				if(errorsum < 0){
 8003ed2:	4b4e      	ldr	r3, [pc, #312]	@ (800400c <HomemadePID+0x574>)
 8003ed4:	edd3 7a00 	vldr	s15, [r3]
 8003ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee0:	d507      	bpl.n	8003ef2 <HomemadePID+0x45a>
					errorsum = errorsum*-1;
 8003ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800400c <HomemadePID+0x574>)
 8003ee4:	edd3 7a00 	vldr	s15, [r3]
 8003ee8:	eef1 7a67 	vneg.f32	s15, s15
 8003eec:	4b47      	ldr	r3, [pc, #284]	@ (800400c <HomemadePID+0x574>)
 8003eee:	edc3 7a00 	vstr	s15, [r3]
				}
				Vfeedback = (kp*error)+(ki*errorsum)+(kd*dinput);
 8003ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8004024 <HomemadePID+0x58c>)
 8003ef4:	ed93 7a00 	vldr	s14, [r3]
 8003ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ff8 <HomemadePID+0x560>)
 8003efa:	edd3 7a00 	vldr	s15, [r3]
 8003efe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f02:	4b43      	ldr	r3, [pc, #268]	@ (8004010 <HomemadePID+0x578>)
 8003f04:	edd3 6a00 	vldr	s13, [r3]
 8003f08:	4b40      	ldr	r3, [pc, #256]	@ (800400c <HomemadePID+0x574>)
 8003f0a:	edd3 7a00 	vldr	s15, [r3]
 8003f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f16:	4b44      	ldr	r3, [pc, #272]	@ (8004028 <HomemadePID+0x590>)
 8003f18:	edd3 6a00 	vldr	s13, [r3]
 8003f1c:	4b40      	ldr	r3, [pc, #256]	@ (8004020 <HomemadePID+0x588>)
 8003f1e:	edd3 7a00 	vldr	s15, [r3]
 8003f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f2e:	ee17 2a90 	vmov	r2, s15
 8003f32:	4b3e      	ldr	r3, [pc, #248]	@ (800402c <HomemadePID+0x594>)
 8003f34:	601a      	str	r2, [r3, #0]
				if(Vfeedback > 65536){
 8003f36:	4b3d      	ldr	r3, [pc, #244]	@ (800402c <HomemadePID+0x594>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3e:	d903      	bls.n	8003f48 <HomemadePID+0x4b0>
					Vfeedback = 65536;
 8003f40:	4b3a      	ldr	r3, [pc, #232]	@ (800402c <HomemadePID+0x594>)
 8003f42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003f46:	601a      	str	r2, [r3, #0]
				}

				PWMset = (Vfeedback/65536.0)*30000;
 8003f48:	4b38      	ldr	r3, [pc, #224]	@ (800402c <HomemadePID+0x594>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fc faa5 	bl	800049c <__aeabi_ui2d>
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	4b36      	ldr	r3, [pc, #216]	@ (8004030 <HomemadePID+0x598>)
 8003f58:	f7fc fc44 	bl	80007e4 <__aeabi_ddiv>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4610      	mov	r0, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	a322      	add	r3, pc, #136	@ (adr r3, 8003ff0 <HomemadePID+0x558>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f7fc fb11 	bl	8000590 <__aeabi_dmul>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	f7fc fddb 	bl	8000b30 <__aeabi_d2f>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8004034 <HomemadePID+0x59c>)
 8003f7e:	6013      	str	r3, [r2, #0]
				if(PWMset > 8000){
 8003f80:	4b2c      	ldr	r3, [pc, #176]	@ (8004034 <HomemadePID+0x59c>)
 8003f82:	edd3 7a00 	vldr	s15, [r3]
 8003f86:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8004038 <HomemadePID+0x5a0>
 8003f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f92:	dd17      	ble.n	8003fc4 <HomemadePID+0x52c>
					PWMset = 8000;
 8003f94:	4b27      	ldr	r3, [pc, #156]	@ (8004034 <HomemadePID+0x59c>)
 8003f96:	4a29      	ldr	r2, [pc, #164]	@ (800403c <HomemadePID+0x5a4>)
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e013      	b.n	8003fc4 <HomemadePID+0x52c>
				}
//				PWMset = 4000;
//			}
		}
		else if(error == 0){
 8003f9c:	4b16      	ldr	r3, [pc, #88]	@ (8003ff8 <HomemadePID+0x560>)
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003faa:	d10b      	bne.n	8003fc4 <HomemadePID+0x52c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
 8003fac:	2200      	movs	r2, #0
 8003fae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fb6:	f002 f8c5 	bl	8006144 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2180      	movs	r1, #128	@ 0x80
 8003fbe:	480f      	ldr	r0, [pc, #60]	@ (8003ffc <HomemadePID+0x564>)
 8003fc0:	f002 f8c0 	bl	8006144 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, PWMset);
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004034 <HomemadePID+0x59c>)
 8003fc6:	edd3 7a00 	vldr	s15, [r3]
 8003fca:	4b1d      	ldr	r3, [pc, #116]	@ (8004040 <HomemadePID+0x5a8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd2:	ee17 2a90 	vmov	r2, s15
 8003fd6:	639a      	str	r2, [r3, #56]	@ 0x38

		Lastime = Now;
 8003fd8:	4b09      	ldr	r3, [pc, #36]	@ (8004000 <HomemadePID+0x568>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a09      	ldr	r2, [pc, #36]	@ (8004004 <HomemadePID+0x56c>)
 8003fde:	6013      	str	r3, [r2, #0]
		Lasterror = error;
 8003fe0:	4b05      	ldr	r3, [pc, #20]	@ (8003ff8 <HomemadePID+0x560>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800401c <HomemadePID+0x584>)
 8003fe6:	6013      	str	r3, [r2, #0]
	}
}
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	f3af 8000 	nop.w
 8003ff0:	00000000 	.word	0x00000000
 8003ff4:	40dd4c00 	.word	0x40dd4c00
 8003ff8:	2000127c 	.word	0x2000127c
 8003ffc:	48000400 	.word	0x48000400
 8004000:	20001274 	.word	0x20001274
 8004004:	20001278 	.word	0x20001278
 8004008:	461c4000 	.word	0x461c4000
 800400c:	20001280 	.word	0x20001280
 8004010:	2000126c 	.word	0x2000126c
 8004014:	20001284 	.word	0x20001284
 8004018:	477fff00 	.word	0x477fff00
 800401c:	2000128c 	.word	0x2000128c
 8004020:	20001288 	.word	0x20001288
 8004024:	20001268 	.word	0x20001268
 8004028:	20001270 	.word	0x20001270
 800402c:	20001264 	.word	0x20001264
 8004030:	40f00000 	.word	0x40f00000
 8004034:	20001260 	.word	0x20001260
 8004038:	45fa0000 	.word	0x45fa0000
 800403c:	45fa0000 	.word	0x45fa0000
 8004040:	200008b4 	.word	0x200008b4

08004044 <Trajectory>:
	Now = __HAL_TIM_GET_COUNTER(&htim2);
	speed = ((QEI_mm - LastPos)*1000000.0)/(Now - Lastime);
	Lastime = Now;
}

void Trajectory(){
 8004044:	b5b0      	push	{r4, r5, r7, lr}
 8004046:	af00      	add	r7, sp, #0
	Distance = trajec_target - QEI_start;
 8004048:	4b91      	ldr	r3, [pc, #580]	@ (8004290 <Trajectory+0x24c>)
 800404a:	ed93 7a00 	vldr	s14, [r3]
 800404e:	4b91      	ldr	r3, [pc, #580]	@ (8004294 <Trajectory+0x250>)
 8004050:	edd3 7a00 	vldr	s15, [r3]
 8004054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004058:	4b8f      	ldr	r3, [pc, #572]	@ (8004298 <Trajectory+0x254>)
 800405a:	edc3 7a00 	vstr	s15, [r3]
	Time_acc = Vmax / Amax;
 800405e:	4b8f      	ldr	r3, [pc, #572]	@ (800429c <Trajectory+0x258>)
 8004060:	edd3 6a00 	vldr	s13, [r3]
 8004064:	4b8e      	ldr	r3, [pc, #568]	@ (80042a0 <Trajectory+0x25c>)
 8004066:	ed93 7a00 	vldr	s14, [r3]
 800406a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800406e:	4b8d      	ldr	r3, [pc, #564]	@ (80042a4 <Trajectory+0x260>)
 8004070:	edc3 7a00 	vstr	s15, [r3]
	Time_dec = Time_acc;
 8004074:	4b8b      	ldr	r3, [pc, #556]	@ (80042a4 <Trajectory+0x260>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a8b      	ldr	r2, [pc, #556]	@ (80042a8 <Trajectory+0x264>)
 800407a:	6013      	str	r3, [r2, #0]


	time_now = __HAL_TIM_GET_COUNTER(&htim2);
 800407c:	4b8b      	ldr	r3, [pc, #556]	@ (80042ac <Trajectory+0x268>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408a:	4b89      	ldr	r3, [pc, #548]	@ (80042b0 <Trajectory+0x26c>)
 800408c:	edc3 7a00 	vstr	s15, [r3]

	if(trajec_target >= 0 && trajec_state == 0){
 8004090:	4b7f      	ldr	r3, [pc, #508]	@ (8004290 <Trajectory+0x24c>)
 8004092:	edd3 7a00 	vldr	s15, [r3]
 8004096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800409a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409e:	db14      	blt.n	80040ca <Trajectory+0x86>
 80040a0:	4b84      	ldr	r3, [pc, #528]	@ (80042b4 <Trajectory+0x270>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d110      	bne.n	80040ca <Trajectory+0x86>
		trajec_state = 1;
 80040a8:	4b82      	ldr	r3, [pc, #520]	@ (80042b4 <Trajectory+0x270>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
		Timestamp = time_now;
 80040ae:	4b80      	ldr	r3, [pc, #512]	@ (80042b0 <Trajectory+0x26c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a81      	ldr	r2, [pc, #516]	@ (80042b8 <Trajectory+0x274>)
 80040b4:	6013      	str	r3, [r2, #0]
		QEI_start = QEI_mm;
 80040b6:	4b81      	ldr	r3, [pc, #516]	@ (80042bc <Trajectory+0x278>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a76      	ldr	r2, [pc, #472]	@ (8004294 <Trajectory+0x250>)
 80040bc:	6013      	str	r3, [r2, #0]
		pos = QEI_start;
 80040be:	4b75      	ldr	r3, [pc, #468]	@ (8004294 <Trajectory+0x250>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a7f      	ldr	r2, [pc, #508]	@ (80042c0 <Trajectory+0x27c>)
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	f000 be19 	b.w	8004cfc <Trajectory+0xcb8>
	}
	else if(Distance > 0 && trajec_state == 1){	//Run Up
 80040ca:	4b73      	ldr	r3, [pc, #460]	@ (8004298 <Trajectory+0x254>)
 80040cc:	edd3 7a00 	vldr	s15, [r3]
 80040d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d8:	f340 82f9 	ble.w	80046ce <Trajectory+0x68a>
 80040dc:	4b75      	ldr	r3, [pc, #468]	@ (80042b4 <Trajectory+0x270>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	f040 82f4 	bne.w	80046ce <Trajectory+0x68a>
		kp = 900;
 80040e6:	4b77      	ldr	r3, [pc, #476]	@ (80042c4 <Trajectory+0x280>)
 80040e8:	4a77      	ldr	r2, [pc, #476]	@ (80042c8 <Trajectory+0x284>)
 80040ea:	601a      	str	r2, [r3, #0]
		ki = 7;
 80040ec:	4b77      	ldr	r3, [pc, #476]	@ (80042cc <Trajectory+0x288>)
 80040ee:	4a78      	ldr	r2, [pc, #480]	@ (80042d0 <Trajectory+0x28c>)
 80040f0:	601a      	str	r2, [r3, #0]
		kd = 1;
 80040f2:	4b78      	ldr	r3, [pc, #480]	@ (80042d4 <Trajectory+0x290>)
 80040f4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80040f8:	601a      	str	r2, [r3, #0]
		Distance_Velo_Max = -(Vmax*Time_acc) + Distance ;
 80040fa:	4b67      	ldr	r3, [pc, #412]	@ (8004298 <Trajectory+0x254>)
 80040fc:	ed93 7a00 	vldr	s14, [r3]
 8004100:	4b66      	ldr	r3, [pc, #408]	@ (800429c <Trajectory+0x258>)
 8004102:	edd3 6a00 	vldr	s13, [r3]
 8004106:	4b67      	ldr	r3, [pc, #412]	@ (80042a4 <Trajectory+0x260>)
 8004108:	edd3 7a00 	vldr	s15, [r3]
 800410c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004114:	4b70      	ldr	r3, [pc, #448]	@ (80042d8 <Trajectory+0x294>)
 8004116:	edc3 7a00 	vstr	s15, [r3]
		t = (time_now - Timestamp)/1000000.0;  //s
 800411a:	4b65      	ldr	r3, [pc, #404]	@ (80042b0 <Trajectory+0x26c>)
 800411c:	ed93 7a00 	vldr	s14, [r3]
 8004120:	4b65      	ldr	r3, [pc, #404]	@ (80042b8 <Trajectory+0x274>)
 8004122:	edd3 7a00 	vldr	s15, [r3]
 8004126:	ee37 7a67 	vsub.f32	s14, s14, s15
 800412a:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 80042dc <Trajectory+0x298>
 800412e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004132:	4b6b      	ldr	r3, [pc, #428]	@ (80042e0 <Trajectory+0x29c>)
 8004134:	edc3 7a00 	vstr	s15, [r3]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8004138:	4b67      	ldr	r3, [pc, #412]	@ (80042d8 <Trajectory+0x294>)
 800413a:	edd3 7a00 	vldr	s15, [r3]
 800413e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	f340 8165 	ble.w	8004414 <Trajectory+0x3d0>
			temp_check = 1;
 800414a:	4b66      	ldr	r3, [pc, #408]	@ (80042e4 <Trajectory+0x2a0>)
 800414c:	2201      	movs	r2, #1
 800414e:	701a      	strb	r2, [r3, #0]
			Time_const = Distance_Velo_Max/Vmax;
 8004150:	4b61      	ldr	r3, [pc, #388]	@ (80042d8 <Trajectory+0x294>)
 8004152:	edd3 6a00 	vldr	s13, [r3]
 8004156:	4b51      	ldr	r3, [pc, #324]	@ (800429c <Trajectory+0x258>)
 8004158:	ed93 7a00 	vldr	s14, [r3]
 800415c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004160:	4b61      	ldr	r3, [pc, #388]	@ (80042e8 <Trajectory+0x2a4>)
 8004162:	edc3 7a00 	vstr	s15, [r3]
			if(t < Time_acc){
 8004166:	4b5e      	ldr	r3, [pc, #376]	@ (80042e0 <Trajectory+0x29c>)
 8004168:	ed93 7a00 	vldr	s14, [r3]
 800416c:	4b4d      	ldr	r3, [pc, #308]	@ (80042a4 <Trajectory+0x260>)
 800416e:	edd3 7a00 	vldr	s15, [r3]
 8004172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417a:	d555      	bpl.n	8004228 <Trajectory+0x1e4>
				traj[2] = Amax;
 800417c:	4b48      	ldr	r3, [pc, #288]	@ (80042a0 <Trajectory+0x25c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a5a      	ldr	r2, [pc, #360]	@ (80042ec <Trajectory+0x2a8>)
 8004182:	6093      	str	r3, [r2, #8]
				traj[1] = Amax*t;
 8004184:	4b46      	ldr	r3, [pc, #280]	@ (80042a0 <Trajectory+0x25c>)
 8004186:	ed93 7a00 	vldr	s14, [r3]
 800418a:	4b55      	ldr	r3, [pc, #340]	@ (80042e0 <Trajectory+0x29c>)
 800418c:	edd3 7a00 	vldr	s15, [r3]
 8004190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004194:	4b55      	ldr	r3, [pc, #340]	@ (80042ec <Trajectory+0x2a8>)
 8004196:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (Amax/2.0)*t*t + pos;
 800419a:	4b41      	ldr	r3, [pc, #260]	@ (80042a0 <Trajectory+0x25c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc f99e 	bl	80004e0 <__aeabi_f2d>
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80041ac:	f7fc fb1a 	bl	80007e4 <__aeabi_ddiv>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4614      	mov	r4, r2
 80041b6:	461d      	mov	r5, r3
 80041b8:	4b49      	ldr	r3, [pc, #292]	@ (80042e0 <Trajectory+0x29c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fc f98f 	bl	80004e0 <__aeabi_f2d>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4620      	mov	r0, r4
 80041c8:	4629      	mov	r1, r5
 80041ca:	f7fc f9e1 	bl	8000590 <__aeabi_dmul>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4614      	mov	r4, r2
 80041d4:	461d      	mov	r5, r3
 80041d6:	4b42      	ldr	r3, [pc, #264]	@ (80042e0 <Trajectory+0x29c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fc f980 	bl	80004e0 <__aeabi_f2d>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4620      	mov	r0, r4
 80041e6:	4629      	mov	r1, r5
 80041e8:	f7fc f9d2 	bl	8000590 <__aeabi_dmul>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4614      	mov	r4, r2
 80041f2:	461d      	mov	r5, r3
 80041f4:	4b32      	ldr	r3, [pc, #200]	@ (80042c0 <Trajectory+0x27c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fc f971 	bl	80004e0 <__aeabi_f2d>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4620      	mov	r0, r4
 8004204:	4629      	mov	r1, r5
 8004206:	f7fc f80d 	bl	8000224 <__adddf3>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	f7fc fc8d 	bl	8000b30 <__aeabi_d2f>
 8004216:	4603      	mov	r3, r0
 8004218:	4a34      	ldr	r2, [pc, #208]	@ (80042ec <Trajectory+0x2a8>)
 800421a:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 800421c:	4b33      	ldr	r3, [pc, #204]	@ (80042ec <Trajectory+0x2a8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a33      	ldr	r2, [pc, #204]	@ (80042f0 <Trajectory+0x2ac>)
 8004222:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8004224:	f000 bd6a 	b.w	8004cfc <Trajectory+0xcb8>
			}
			else if(t < Time_const+Time_acc){
 8004228:	4b2f      	ldr	r3, [pc, #188]	@ (80042e8 <Trajectory+0x2a4>)
 800422a:	ed93 7a00 	vldr	s14, [r3]
 800422e:	4b1d      	ldr	r3, [pc, #116]	@ (80042a4 <Trajectory+0x260>)
 8004230:	edd3 7a00 	vldr	s15, [r3]
 8004234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004238:	4b29      	ldr	r3, [pc, #164]	@ (80042e0 <Trajectory+0x29c>)
 800423a:	edd3 7a00 	vldr	s15, [r3]
 800423e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004246:	dd57      	ble.n	80042f8 <Trajectory+0x2b4>
				traj[2] = 0;
 8004248:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <Trajectory+0x2a8>)
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	609a      	str	r2, [r3, #8]
				traj[1] = Vmax;
 8004250:	4b12      	ldr	r3, [pc, #72]	@ (800429c <Trajectory+0x258>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a25      	ldr	r2, [pc, #148]	@ (80042ec <Trajectory+0x2a8>)
 8004256:	6053      	str	r3, [r2, #4]
				traj[0] = (Vmax*(t-Time_acc)) + temp_pos_acc;
 8004258:	4b21      	ldr	r3, [pc, #132]	@ (80042e0 <Trajectory+0x29c>)
 800425a:	ed93 7a00 	vldr	s14, [r3]
 800425e:	4b11      	ldr	r3, [pc, #68]	@ (80042a4 <Trajectory+0x260>)
 8004260:	edd3 7a00 	vldr	s15, [r3]
 8004264:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004268:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <Trajectory+0x258>)
 800426a:	edd3 7a00 	vldr	s15, [r3]
 800426e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004272:	4b1f      	ldr	r3, [pc, #124]	@ (80042f0 <Trajectory+0x2ac>)
 8004274:	edd3 7a00 	vldr	s15, [r3]
 8004278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ec <Trajectory+0x2a8>)
 800427e:	edc3 7a00 	vstr	s15, [r3]
				temp_pos_const = traj[0];
 8004282:	4b1a      	ldr	r3, [pc, #104]	@ (80042ec <Trajectory+0x2a8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1b      	ldr	r2, [pc, #108]	@ (80042f4 <Trajectory+0x2b0>)
 8004288:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 800428a:	f000 bd37 	b.w	8004cfc <Trajectory+0xcb8>
 800428e:	bf00      	nop
 8004290:	20000574 	.word	0x20000574
 8004294:	200012d4 	.word	0x200012d4
 8004298:	20001294 	.word	0x20001294
 800429c:	20000214 	.word	0x20000214
 80042a0:	20000218 	.word	0x20000218
 80042a4:	200012bc 	.word	0x200012bc
 80042a8:	200012c4 	.word	0x200012c4
 80042ac:	20000650 	.word	0x20000650
 80042b0:	200012cc 	.word	0x200012cc
 80042b4:	200012d8 	.word	0x200012d8
 80042b8:	200012d0 	.word	0x200012d0
 80042bc:	20001258 	.word	0x20001258
 80042c0:	200012b8 	.word	0x200012b8
 80042c4:	20001268 	.word	0x20001268
 80042c8:	44610000 	.word	0x44610000
 80042cc:	2000126c 	.word	0x2000126c
 80042d0:	40e00000 	.word	0x40e00000
 80042d4:	20001270 	.word	0x20001270
 80042d8:	200012a8 	.word	0x200012a8
 80042dc:	49742400 	.word	0x49742400
 80042e0:	20001298 	.word	0x20001298
 80042e4:	200012d9 	.word	0x200012d9
 80042e8:	200012c8 	.word	0x200012c8
 80042ec:	200012ac 	.word	0x200012ac
 80042f0:	2000129c 	.word	0x2000129c
 80042f4:	200012a0 	.word	0x200012a0
			}
			else if(t < Time_const+Time_acc+Time_dec){
 80042f8:	4b8c      	ldr	r3, [pc, #560]	@ (800452c <Trajectory+0x4e8>)
 80042fa:	ed93 7a00 	vldr	s14, [r3]
 80042fe:	4b8c      	ldr	r3, [pc, #560]	@ (8004530 <Trajectory+0x4ec>)
 8004300:	edd3 7a00 	vldr	s15, [r3]
 8004304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004308:	4b8a      	ldr	r3, [pc, #552]	@ (8004534 <Trajectory+0x4f0>)
 800430a:	edd3 7a00 	vldr	s15, [r3]
 800430e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004312:	4b89      	ldr	r3, [pc, #548]	@ (8004538 <Trajectory+0x4f4>)
 8004314:	edd3 7a00 	vldr	s15, [r3]
 8004318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800431c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004320:	dd64      	ble.n	80043ec <Trajectory+0x3a8>
				traj[2] = -Amax;
 8004322:	4b86      	ldr	r3, [pc, #536]	@ (800453c <Trajectory+0x4f8>)
 8004324:	edd3 7a00 	vldr	s15, [r3]
 8004328:	eef1 7a67 	vneg.f32	s15, s15
 800432c:	4b84      	ldr	r3, [pc, #528]	@ (8004540 <Trajectory+0x4fc>)
 800432e:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = (traj[2]*(t-Time_const-Time_acc)) + Vmax;
 8004332:	4b83      	ldr	r3, [pc, #524]	@ (8004540 <Trajectory+0x4fc>)
 8004334:	ed93 7a02 	vldr	s14, [r3, #8]
 8004338:	4b7f      	ldr	r3, [pc, #508]	@ (8004538 <Trajectory+0x4f4>)
 800433a:	edd3 6a00 	vldr	s13, [r3]
 800433e:	4b7b      	ldr	r3, [pc, #492]	@ (800452c <Trajectory+0x4e8>)
 8004340:	edd3 7a00 	vldr	s15, [r3]
 8004344:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004348:	4b79      	ldr	r3, [pc, #484]	@ (8004530 <Trajectory+0x4ec>)
 800434a:	edd3 7a00 	vldr	s15, [r3]
 800434e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004356:	4b7b      	ldr	r3, [pc, #492]	@ (8004544 <Trajectory+0x500>)
 8004358:	edd3 7a00 	vldr	s15, [r3]
 800435c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004360:	4b77      	ldr	r3, [pc, #476]	@ (8004540 <Trajectory+0x4fc>)
 8004362:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((Amax/2)*(t-Time_const-Time_acc)*(t-Time_const-Time_acc))+(traj[1]*(t-Time_const-Time_acc))+temp_pos_const;
 8004366:	4b75      	ldr	r3, [pc, #468]	@ (800453c <Trajectory+0x4f8>)
 8004368:	edd3 7a00 	vldr	s15, [r3]
 800436c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004370:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004374:	4b70      	ldr	r3, [pc, #448]	@ (8004538 <Trajectory+0x4f4>)
 8004376:	edd3 6a00 	vldr	s13, [r3]
 800437a:	4b6c      	ldr	r3, [pc, #432]	@ (800452c <Trajectory+0x4e8>)
 800437c:	edd3 7a00 	vldr	s15, [r3]
 8004380:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004384:	4b6a      	ldr	r3, [pc, #424]	@ (8004530 <Trajectory+0x4ec>)
 8004386:	edd3 7a00 	vldr	s15, [r3]
 800438a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800438e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004392:	4b69      	ldr	r3, [pc, #420]	@ (8004538 <Trajectory+0x4f4>)
 8004394:	edd3 6a00 	vldr	s13, [r3]
 8004398:	4b64      	ldr	r3, [pc, #400]	@ (800452c <Trajectory+0x4e8>)
 800439a:	edd3 7a00 	vldr	s15, [r3]
 800439e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80043a2:	4b63      	ldr	r3, [pc, #396]	@ (8004530 <Trajectory+0x4ec>)
 80043a4:	edd3 7a00 	vldr	s15, [r3]
 80043a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80043ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043b0:	4b63      	ldr	r3, [pc, #396]	@ (8004540 <Trajectory+0x4fc>)
 80043b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80043b6:	4b60      	ldr	r3, [pc, #384]	@ (8004538 <Trajectory+0x4f4>)
 80043b8:	ed93 6a00 	vldr	s12, [r3]
 80043bc:	4b5b      	ldr	r3, [pc, #364]	@ (800452c <Trajectory+0x4e8>)
 80043be:	edd3 7a00 	vldr	s15, [r3]
 80043c2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80043c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004530 <Trajectory+0x4ec>)
 80043c8:	edd3 7a00 	vldr	s15, [r3]
 80043cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80043d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043d8:	4b5b      	ldr	r3, [pc, #364]	@ (8004548 <Trajectory+0x504>)
 80043da:	edd3 7a00 	vldr	s15, [r3]
 80043de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043e2:	4b57      	ldr	r3, [pc, #348]	@ (8004540 <Trajectory+0x4fc>)
 80043e4:	edc3 7a00 	vstr	s15, [r3]
		if(Distance_Velo_Max > 0){						//Trapezoi
 80043e8:	f000 bc88 	b.w	8004cfc <Trajectory+0xcb8>
			}
			else{
				trajec_state = 0;
 80043ec:	4b57      	ldr	r3, [pc, #348]	@ (800454c <Trajectory+0x508>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 80043f2:	4b57      	ldr	r3, [pc, #348]	@ (8004550 <Trajectory+0x50c>)
 80043f4:	4a57      	ldr	r2, [pc, #348]	@ (8004554 <Trajectory+0x510>)
 80043f6:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 80043f8:	4b51      	ldr	r3, [pc, #324]	@ (8004540 <Trajectory+0x4fc>)
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	609a      	str	r2, [r3, #8]
				temp_pos_acc = 0;
 8004400:	4b55      	ldr	r3, [pc, #340]	@ (8004558 <Trajectory+0x514>)
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
				temp_pos_const = 0;
 8004408:	4b4f      	ldr	r3, [pc, #316]	@ (8004548 <Trajectory+0x504>)
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 8004410:	f000 bc74 	b.w	8004cfc <Trajectory+0xcb8>
			}
		}
		else if(Distance_Velo_Max <= 0){				//Triangle
 8004414:	4b51      	ldr	r3, [pc, #324]	@ (800455c <Trajectory+0x518>)
 8004416:	edd3 7a00 	vldr	s15, [r3]
 800441a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800441e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004422:	d901      	bls.n	8004428 <Trajectory+0x3e4>
		if(Distance_Velo_Max > 0){						//Trapezoi
 8004424:	f000 bc6a 	b.w	8004cfc <Trajectory+0xcb8>
			temp_check = 2;
 8004428:	4b4d      	ldr	r3, [pc, #308]	@ (8004560 <Trajectory+0x51c>)
 800442a:	2202      	movs	r2, #2
 800442c:	701a      	strb	r2, [r3, #0]
			Time_acc_tri = sqrt(Distance/Amax);
 800442e:	4b4d      	ldr	r3, [pc, #308]	@ (8004564 <Trajectory+0x520>)
 8004430:	ed93 7a00 	vldr	s14, [r3]
 8004434:	4b41      	ldr	r3, [pc, #260]	@ (800453c <Trajectory+0x4f8>)
 8004436:	edd3 7a00 	vldr	s15, [r3]
 800443a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800443e:	ee16 0a90 	vmov	r0, s13
 8004442:	f7fc f84d 	bl	80004e0 <__aeabi_f2d>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	ec43 2b10 	vmov	d0, r2, r3
 800444e:	f007 fb11 	bl	800ba74 <sqrt>
 8004452:	ec53 2b10 	vmov	r2, r3, d0
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	f7fc fb69 	bl	8000b30 <__aeabi_d2f>
 800445e:	4603      	mov	r3, r0
 8004460:	4a41      	ldr	r2, [pc, #260]	@ (8004568 <Trajectory+0x524>)
 8004462:	6013      	str	r3, [r2, #0]
			if(t < Time_acc_tri){
 8004464:	4b34      	ldr	r3, [pc, #208]	@ (8004538 <Trajectory+0x4f4>)
 8004466:	ed93 7a00 	vldr	s14, [r3]
 800446a:	4b3f      	ldr	r3, [pc, #252]	@ (8004568 <Trajectory+0x524>)
 800446c:	edd3 7a00 	vldr	s15, [r3]
 8004470:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004478:	d57c      	bpl.n	8004574 <Trajectory+0x530>
				traj[2] = Amax;
 800447a:	4b30      	ldr	r3, [pc, #192]	@ (800453c <Trajectory+0x4f8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a30      	ldr	r2, [pc, #192]	@ (8004540 <Trajectory+0x4fc>)
 8004480:	6093      	str	r3, [r2, #8]
				traj[1] = Amax*t;
 8004482:	4b2e      	ldr	r3, [pc, #184]	@ (800453c <Trajectory+0x4f8>)
 8004484:	ed93 7a00 	vldr	s14, [r3]
 8004488:	4b2b      	ldr	r3, [pc, #172]	@ (8004538 <Trajectory+0x4f4>)
 800448a:	edd3 7a00 	vldr	s15, [r3]
 800448e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004492:	4b2b      	ldr	r3, [pc, #172]	@ (8004540 <Trajectory+0x4fc>)
 8004494:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (Amax/2.0)*t*t + pos;
 8004498:	4b28      	ldr	r3, [pc, #160]	@ (800453c <Trajectory+0x4f8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f7fc f81f 	bl	80004e0 <__aeabi_f2d>
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80044aa:	f7fc f99b 	bl	80007e4 <__aeabi_ddiv>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4614      	mov	r4, r2
 80044b4:	461d      	mov	r5, r3
 80044b6:	4b20      	ldr	r3, [pc, #128]	@ (8004538 <Trajectory+0x4f4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fc f810 	bl	80004e0 <__aeabi_f2d>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4620      	mov	r0, r4
 80044c6:	4629      	mov	r1, r5
 80044c8:	f7fc f862 	bl	8000590 <__aeabi_dmul>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4614      	mov	r4, r2
 80044d2:	461d      	mov	r5, r3
 80044d4:	4b18      	ldr	r3, [pc, #96]	@ (8004538 <Trajectory+0x4f4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fc f801 	bl	80004e0 <__aeabi_f2d>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4620      	mov	r0, r4
 80044e4:	4629      	mov	r1, r5
 80044e6:	f7fc f853 	bl	8000590 <__aeabi_dmul>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4614      	mov	r4, r2
 80044f0:	461d      	mov	r5, r3
 80044f2:	4b1e      	ldr	r3, [pc, #120]	@ (800456c <Trajectory+0x528>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fb fff2 	bl	80004e0 <__aeabi_f2d>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4620      	mov	r0, r4
 8004502:	4629      	mov	r1, r5
 8004504:	f7fb fe8e 	bl	8000224 <__adddf3>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	f7fc fb0e 	bl	8000b30 <__aeabi_d2f>
 8004514:	4603      	mov	r3, r0
 8004516:	4a0a      	ldr	r2, [pc, #40]	@ (8004540 <Trajectory+0x4fc>)
 8004518:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 800451a:	4b09      	ldr	r3, [pc, #36]	@ (8004540 <Trajectory+0x4fc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a0e      	ldr	r2, [pc, #56]	@ (8004558 <Trajectory+0x514>)
 8004520:	6013      	str	r3, [r2, #0]
				temp_v_acc = traj[1];
 8004522:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <Trajectory+0x4fc>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4a12      	ldr	r2, [pc, #72]	@ (8004570 <Trajectory+0x52c>)
 8004528:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 800452a:	e3e7      	b.n	8004cfc <Trajectory+0xcb8>
 800452c:	200012c8 	.word	0x200012c8
 8004530:	200012bc 	.word	0x200012bc
 8004534:	200012c4 	.word	0x200012c4
 8004538:	20001298 	.word	0x20001298
 800453c:	20000218 	.word	0x20000218
 8004540:	200012ac 	.word	0x200012ac
 8004544:	20000214 	.word	0x20000214
 8004548:	200012a0 	.word	0x200012a0
 800454c:	200012d8 	.word	0x200012d8
 8004550:	20000574 	.word	0x20000574
 8004554:	c1200000 	.word	0xc1200000
 8004558:	2000129c 	.word	0x2000129c
 800455c:	200012a8 	.word	0x200012a8
 8004560:	200012d9 	.word	0x200012d9
 8004564:	20001294 	.word	0x20001294
 8004568:	200012c0 	.word	0x200012c0
 800456c:	200012b8 	.word	0x200012b8
 8004570:	200012a4 	.word	0x200012a4
			}
			else if(t < Time_acc_tri*2){
 8004574:	4bb3      	ldr	r3, [pc, #716]	@ (8004844 <Trajectory+0x800>)
 8004576:	edd3 7a00 	vldr	s15, [r3]
 800457a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800457e:	4bb2      	ldr	r3, [pc, #712]	@ (8004848 <Trajectory+0x804>)
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458c:	f340 8088 	ble.w	80046a0 <Trajectory+0x65c>
				traj[2] = -Amax;
 8004590:	4bae      	ldr	r3, [pc, #696]	@ (800484c <Trajectory+0x808>)
 8004592:	edd3 7a00 	vldr	s15, [r3]
 8004596:	eef1 7a67 	vneg.f32	s15, s15
 800459a:	4bad      	ldr	r3, [pc, #692]	@ (8004850 <Trajectory+0x80c>)
 800459c:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = temp_v_acc - (Amax*(t-Time_acc_tri));
 80045a0:	4bac      	ldr	r3, [pc, #688]	@ (8004854 <Trajectory+0x810>)
 80045a2:	ed93 7a00 	vldr	s14, [r3]
 80045a6:	4ba8      	ldr	r3, [pc, #672]	@ (8004848 <Trajectory+0x804>)
 80045a8:	edd3 6a00 	vldr	s13, [r3]
 80045ac:	4ba5      	ldr	r3, [pc, #660]	@ (8004844 <Trajectory+0x800>)
 80045ae:	edd3 7a00 	vldr	s15, [r3]
 80045b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80045b6:	4ba5      	ldr	r3, [pc, #660]	@ (800484c <Trajectory+0x808>)
 80045b8:	edd3 7a00 	vldr	s15, [r3]
 80045bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045c4:	4ba2      	ldr	r3, [pc, #648]	@ (8004850 <Trajectory+0x80c>)
 80045c6:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((Amax/2.0)*(t-Time_acc_tri)*(t-Time_acc_tri))+(traj[1]*(t-Time_acc_tri))+temp_pos_acc;
 80045ca:	4ba0      	ldr	r3, [pc, #640]	@ (800484c <Trajectory+0x808>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fb ff86 	bl	80004e0 <__aeabi_f2d>
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80045dc:	f7fc f902 	bl	80007e4 <__aeabi_ddiv>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4614      	mov	r4, r2
 80045e6:	461d      	mov	r5, r3
 80045e8:	4b97      	ldr	r3, [pc, #604]	@ (8004848 <Trajectory+0x804>)
 80045ea:	ed93 7a00 	vldr	s14, [r3]
 80045ee:	4b95      	ldr	r3, [pc, #596]	@ (8004844 <Trajectory+0x800>)
 80045f0:	edd3 7a00 	vldr	s15, [r3]
 80045f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045f8:	ee17 0a90 	vmov	r0, s15
 80045fc:	f7fb ff70 	bl	80004e0 <__aeabi_f2d>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4620      	mov	r0, r4
 8004606:	4629      	mov	r1, r5
 8004608:	f7fb ffc2 	bl	8000590 <__aeabi_dmul>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4614      	mov	r4, r2
 8004612:	461d      	mov	r5, r3
 8004614:	4b8c      	ldr	r3, [pc, #560]	@ (8004848 <Trajectory+0x804>)
 8004616:	ed93 7a00 	vldr	s14, [r3]
 800461a:	4b8a      	ldr	r3, [pc, #552]	@ (8004844 <Trajectory+0x800>)
 800461c:	edd3 7a00 	vldr	s15, [r3]
 8004620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004624:	ee17 0a90 	vmov	r0, s15
 8004628:	f7fb ff5a 	bl	80004e0 <__aeabi_f2d>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4620      	mov	r0, r4
 8004632:	4629      	mov	r1, r5
 8004634:	f7fb ffac 	bl	8000590 <__aeabi_dmul>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4614      	mov	r4, r2
 800463e:	461d      	mov	r5, r3
 8004640:	4b83      	ldr	r3, [pc, #524]	@ (8004850 <Trajectory+0x80c>)
 8004642:	ed93 7a01 	vldr	s14, [r3, #4]
 8004646:	4b80      	ldr	r3, [pc, #512]	@ (8004848 <Trajectory+0x804>)
 8004648:	edd3 6a00 	vldr	s13, [r3]
 800464c:	4b7d      	ldr	r3, [pc, #500]	@ (8004844 <Trajectory+0x800>)
 800464e:	edd3 7a00 	vldr	s15, [r3]
 8004652:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465a:	ee17 0a90 	vmov	r0, s15
 800465e:	f7fb ff3f 	bl	80004e0 <__aeabi_f2d>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4620      	mov	r0, r4
 8004668:	4629      	mov	r1, r5
 800466a:	f7fb fddb 	bl	8000224 <__adddf3>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4614      	mov	r4, r2
 8004674:	461d      	mov	r5, r3
 8004676:	4b78      	ldr	r3, [pc, #480]	@ (8004858 <Trajectory+0x814>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fb ff30 	bl	80004e0 <__aeabi_f2d>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4620      	mov	r0, r4
 8004686:	4629      	mov	r1, r5
 8004688:	f7fb fdcc 	bl	8000224 <__adddf3>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4610      	mov	r0, r2
 8004692:	4619      	mov	r1, r3
 8004694:	f7fc fa4c 	bl	8000b30 <__aeabi_d2f>
 8004698:	4603      	mov	r3, r0
 800469a:	4a6d      	ldr	r2, [pc, #436]	@ (8004850 <Trajectory+0x80c>)
 800469c:	6013      	str	r3, [r2, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 800469e:	e32d      	b.n	8004cfc <Trajectory+0xcb8>
			}
			else{
				trajec_state = 0;
 80046a0:	4b6e      	ldr	r3, [pc, #440]	@ (800485c <Trajectory+0x818>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 80046a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004860 <Trajectory+0x81c>)
 80046a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004864 <Trajectory+0x820>)
 80046aa:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 80046ac:	4b68      	ldr	r3, [pc, #416]	@ (8004850 <Trajectory+0x80c>)
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]
				Time_acc_tri = 0;
 80046b4:	4b63      	ldr	r3, [pc, #396]	@ (8004844 <Trajectory+0x800>)
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
				temp_pos_acc = 0;
 80046bc:	4b66      	ldr	r3, [pc, #408]	@ (8004858 <Trajectory+0x814>)
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
				temp_v_acc = 0;
 80046c4:	4b63      	ldr	r3, [pc, #396]	@ (8004854 <Trajectory+0x810>)
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
		if(Distance_Velo_Max > 0){						//Trapezoi
 80046cc:	e316      	b.n	8004cfc <Trajectory+0xcb8>
			}
		}
	}
	else if(Distance < 0 && trajec_state == 1){        		// Run Down
 80046ce:	4b66      	ldr	r3, [pc, #408]	@ (8004868 <Trajectory+0x824>)
 80046d0:	edd3 7a00 	vldr	s15, [r3]
 80046d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046dc:	d400      	bmi.n	80046e0 <Trajectory+0x69c>
				temp_pos_acc = 0;
				temp_v_acc = 0;
			}
		}
	}
}
 80046de:	e30d      	b.n	8004cfc <Trajectory+0xcb8>
	else if(Distance < 0 && trajec_state == 1){        		// Run Down
 80046e0:	4b5e      	ldr	r3, [pc, #376]	@ (800485c <Trajectory+0x818>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	f040 8309 	bne.w	8004cfc <Trajectory+0xcb8>
		kp = 900;
 80046ea:	4b60      	ldr	r3, [pc, #384]	@ (800486c <Trajectory+0x828>)
 80046ec:	4a60      	ldr	r2, [pc, #384]	@ (8004870 <Trajectory+0x82c>)
 80046ee:	601a      	str	r2, [r3, #0]
		ki = 10;
 80046f0:	4b60      	ldr	r3, [pc, #384]	@ (8004874 <Trajectory+0x830>)
 80046f2:	4a61      	ldr	r2, [pc, #388]	@ (8004878 <Trajectory+0x834>)
 80046f4:	601a      	str	r2, [r3, #0]
		kd = 0;
 80046f6:	4b61      	ldr	r3, [pc, #388]	@ (800487c <Trajectory+0x838>)
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
		Distance_Velo_Max = (Vmax*Time_acc) + Distance ;
 80046fe:	4b60      	ldr	r3, [pc, #384]	@ (8004880 <Trajectory+0x83c>)
 8004700:	ed93 7a00 	vldr	s14, [r3]
 8004704:	4b5f      	ldr	r3, [pc, #380]	@ (8004884 <Trajectory+0x840>)
 8004706:	edd3 7a00 	vldr	s15, [r3]
 800470a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800470e:	4b56      	ldr	r3, [pc, #344]	@ (8004868 <Trajectory+0x824>)
 8004710:	edd3 7a00 	vldr	s15, [r3]
 8004714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004718:	4b5b      	ldr	r3, [pc, #364]	@ (8004888 <Trajectory+0x844>)
 800471a:	edc3 7a00 	vstr	s15, [r3]
		t = (time_now - Timestamp)/1000000.0;  //s
 800471e:	4b5b      	ldr	r3, [pc, #364]	@ (800488c <Trajectory+0x848>)
 8004720:	ed93 7a00 	vldr	s14, [r3]
 8004724:	4b5a      	ldr	r3, [pc, #360]	@ (8004890 <Trajectory+0x84c>)
 8004726:	edd3 7a00 	vldr	s15, [r3]
 800472a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800472e:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8004894 <Trajectory+0x850>
 8004732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004736:	4b44      	ldr	r3, [pc, #272]	@ (8004848 <Trajectory+0x804>)
 8004738:	edc3 7a00 	vstr	s15, [r3]
		if(Distance_Velo_Max < 0){							//Trapezoi
 800473c:	4b52      	ldr	r3, [pc, #328]	@ (8004888 <Trajectory+0x844>)
 800473e:	edd3 7a00 	vldr	s15, [r3]
 8004742:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474a:	f140 816b 	bpl.w	8004a24 <Trajectory+0x9e0>
			temp_check = 3;
 800474e:	4b52      	ldr	r3, [pc, #328]	@ (8004898 <Trajectory+0x854>)
 8004750:	2203      	movs	r2, #3
 8004752:	701a      	strb	r2, [r3, #0]
			Time_const = Distance_Velo_Max/Vmax;
 8004754:	4b4c      	ldr	r3, [pc, #304]	@ (8004888 <Trajectory+0x844>)
 8004756:	edd3 6a00 	vldr	s13, [r3]
 800475a:	4b49      	ldr	r3, [pc, #292]	@ (8004880 <Trajectory+0x83c>)
 800475c:	ed93 7a00 	vldr	s14, [r3]
 8004760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004764:	4b4d      	ldr	r3, [pc, #308]	@ (800489c <Trajectory+0x858>)
 8004766:	edc3 7a00 	vstr	s15, [r3]
			if(t < Time_acc){
 800476a:	4b37      	ldr	r3, [pc, #220]	@ (8004848 <Trajectory+0x804>)
 800476c:	ed93 7a00 	vldr	s14, [r3]
 8004770:	4b44      	ldr	r3, [pc, #272]	@ (8004884 <Trajectory+0x840>)
 8004772:	edd3 7a00 	vldr	s15, [r3]
 8004776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477e:	f140 8091 	bpl.w	80048a4 <Trajectory+0x860>
				traj[2] = -Amax;
 8004782:	4b32      	ldr	r3, [pc, #200]	@ (800484c <Trajectory+0x808>)
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	eef1 7a67 	vneg.f32	s15, s15
 800478c:	4b30      	ldr	r3, [pc, #192]	@ (8004850 <Trajectory+0x80c>)
 800478e:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = -Amax*t;
 8004792:	4b2e      	ldr	r3, [pc, #184]	@ (800484c <Trajectory+0x808>)
 8004794:	edd3 7a00 	vldr	s15, [r3]
 8004798:	eeb1 7a67 	vneg.f32	s14, s15
 800479c:	4b2a      	ldr	r3, [pc, #168]	@ (8004848 <Trajectory+0x804>)
 800479e:	edd3 7a00 	vldr	s15, [r3]
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004850 <Trajectory+0x80c>)
 80047a8:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (-Amax/2.0)*t*t + pos;
 80047ac:	4b27      	ldr	r3, [pc, #156]	@ (800484c <Trajectory+0x808>)
 80047ae:	edd3 7a00 	vldr	s15, [r3]
 80047b2:	eef1 7a67 	vneg.f32	s15, s15
 80047b6:	ee17 3a90 	vmov	r3, s15
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fb fe90 	bl	80004e0 <__aeabi_f2d>
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80047c8:	f7fc f80c 	bl	80007e4 <__aeabi_ddiv>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4614      	mov	r4, r2
 80047d2:	461d      	mov	r5, r3
 80047d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004848 <Trajectory+0x804>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fb fe81 	bl	80004e0 <__aeabi_f2d>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4620      	mov	r0, r4
 80047e4:	4629      	mov	r1, r5
 80047e6:	f7fb fed3 	bl	8000590 <__aeabi_dmul>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4614      	mov	r4, r2
 80047f0:	461d      	mov	r5, r3
 80047f2:	4b15      	ldr	r3, [pc, #84]	@ (8004848 <Trajectory+0x804>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fb fe72 	bl	80004e0 <__aeabi_f2d>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4620      	mov	r0, r4
 8004802:	4629      	mov	r1, r5
 8004804:	f7fb fec4 	bl	8000590 <__aeabi_dmul>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4614      	mov	r4, r2
 800480e:	461d      	mov	r5, r3
 8004810:	4b23      	ldr	r3, [pc, #140]	@ (80048a0 <Trajectory+0x85c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7fb fe63 	bl	80004e0 <__aeabi_f2d>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4620      	mov	r0, r4
 8004820:	4629      	mov	r1, r5
 8004822:	f7fb fcff 	bl	8000224 <__adddf3>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	f7fc f97f 	bl	8000b30 <__aeabi_d2f>
 8004832:	4603      	mov	r3, r0
 8004834:	4a06      	ldr	r2, [pc, #24]	@ (8004850 <Trajectory+0x80c>)
 8004836:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 8004838:	4b05      	ldr	r3, [pc, #20]	@ (8004850 <Trajectory+0x80c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a06      	ldr	r2, [pc, #24]	@ (8004858 <Trajectory+0x814>)
 800483e:	6013      	str	r3, [r2, #0]
}
 8004840:	e25c      	b.n	8004cfc <Trajectory+0xcb8>
 8004842:	bf00      	nop
 8004844:	200012c0 	.word	0x200012c0
 8004848:	20001298 	.word	0x20001298
 800484c:	20000218 	.word	0x20000218
 8004850:	200012ac 	.word	0x200012ac
 8004854:	200012a4 	.word	0x200012a4
 8004858:	2000129c 	.word	0x2000129c
 800485c:	200012d8 	.word	0x200012d8
 8004860:	20000574 	.word	0x20000574
 8004864:	c1200000 	.word	0xc1200000
 8004868:	20001294 	.word	0x20001294
 800486c:	20001268 	.word	0x20001268
 8004870:	44610000 	.word	0x44610000
 8004874:	2000126c 	.word	0x2000126c
 8004878:	41200000 	.word	0x41200000
 800487c:	20001270 	.word	0x20001270
 8004880:	20000214 	.word	0x20000214
 8004884:	200012bc 	.word	0x200012bc
 8004888:	200012a8 	.word	0x200012a8
 800488c:	200012cc 	.word	0x200012cc
 8004890:	200012d0 	.word	0x200012d0
 8004894:	49742400 	.word	0x49742400
 8004898:	200012d9 	.word	0x200012d9
 800489c:	200012c8 	.word	0x200012c8
 80048a0:	200012b8 	.word	0x200012b8
			else if(t < Time_const+Time_acc){
 80048a4:	4bac      	ldr	r3, [pc, #688]	@ (8004b58 <Trajectory+0xb14>)
 80048a6:	ed93 7a00 	vldr	s14, [r3]
 80048aa:	4bac      	ldr	r3, [pc, #688]	@ (8004b5c <Trajectory+0xb18>)
 80048ac:	edd3 7a00 	vldr	s15, [r3]
 80048b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048b4:	4baa      	ldr	r3, [pc, #680]	@ (8004b60 <Trajectory+0xb1c>)
 80048b6:	edd3 7a00 	vldr	s15, [r3]
 80048ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	dd27      	ble.n	8004914 <Trajectory+0x8d0>
				traj[2] = 0;
 80048c4:	4ba7      	ldr	r3, [pc, #668]	@ (8004b64 <Trajectory+0xb20>)
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	609a      	str	r2, [r3, #8]
				traj[1] = -Vmax;
 80048cc:	4ba6      	ldr	r3, [pc, #664]	@ (8004b68 <Trajectory+0xb24>)
 80048ce:	edd3 7a00 	vldr	s15, [r3]
 80048d2:	eef1 7a67 	vneg.f32	s15, s15
 80048d6:	4ba3      	ldr	r3, [pc, #652]	@ (8004b64 <Trajectory+0xb20>)
 80048d8:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (-Vmax*(t-Time_acc)) + temp_pos_acc;
 80048dc:	4ba2      	ldr	r3, [pc, #648]	@ (8004b68 <Trajectory+0xb24>)
 80048de:	edd3 7a00 	vldr	s15, [r3]
 80048e2:	eeb1 7a67 	vneg.f32	s14, s15
 80048e6:	4b9e      	ldr	r3, [pc, #632]	@ (8004b60 <Trajectory+0xb1c>)
 80048e8:	edd3 6a00 	vldr	s13, [r3]
 80048ec:	4b9b      	ldr	r3, [pc, #620]	@ (8004b5c <Trajectory+0xb18>)
 80048ee:	edd3 7a00 	vldr	s15, [r3]
 80048f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80048f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048fa:	4b9c      	ldr	r3, [pc, #624]	@ (8004b6c <Trajectory+0xb28>)
 80048fc:	edd3 7a00 	vldr	s15, [r3]
 8004900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004904:	4b97      	ldr	r3, [pc, #604]	@ (8004b64 <Trajectory+0xb20>)
 8004906:	edc3 7a00 	vstr	s15, [r3]
				temp_pos_const = traj[0];
 800490a:	4b96      	ldr	r3, [pc, #600]	@ (8004b64 <Trajectory+0xb20>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a98      	ldr	r2, [pc, #608]	@ (8004b70 <Trajectory+0xb2c>)
 8004910:	6013      	str	r3, [r2, #0]
}
 8004912:	e1f3      	b.n	8004cfc <Trajectory+0xcb8>
			else if(t < Time_const+Time_acc+Time_dec){
 8004914:	4b90      	ldr	r3, [pc, #576]	@ (8004b58 <Trajectory+0xb14>)
 8004916:	ed93 7a00 	vldr	s14, [r3]
 800491a:	4b90      	ldr	r3, [pc, #576]	@ (8004b5c <Trajectory+0xb18>)
 800491c:	edd3 7a00 	vldr	s15, [r3]
 8004920:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004924:	4b93      	ldr	r3, [pc, #588]	@ (8004b74 <Trajectory+0xb30>)
 8004926:	edd3 7a00 	vldr	s15, [r3]
 800492a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800492e:	4b8c      	ldr	r3, [pc, #560]	@ (8004b60 <Trajectory+0xb1c>)
 8004930:	edd3 7a00 	vldr	s15, [r3]
 8004934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	dd5f      	ble.n	80049fe <Trajectory+0x9ba>
				traj[2] = Amax;
 800493e:	4b8e      	ldr	r3, [pc, #568]	@ (8004b78 <Trajectory+0xb34>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a88      	ldr	r2, [pc, #544]	@ (8004b64 <Trajectory+0xb20>)
 8004944:	6093      	str	r3, [r2, #8]
				traj[1] = (traj[2]*(t-Time_const-Time_acc)) - Vmax;
 8004946:	4b87      	ldr	r3, [pc, #540]	@ (8004b64 <Trajectory+0xb20>)
 8004948:	ed93 7a02 	vldr	s14, [r3, #8]
 800494c:	4b84      	ldr	r3, [pc, #528]	@ (8004b60 <Trajectory+0xb1c>)
 800494e:	edd3 6a00 	vldr	s13, [r3]
 8004952:	4b81      	ldr	r3, [pc, #516]	@ (8004b58 <Trajectory+0xb14>)
 8004954:	edd3 7a00 	vldr	s15, [r3]
 8004958:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800495c:	4b7f      	ldr	r3, [pc, #508]	@ (8004b5c <Trajectory+0xb18>)
 800495e:	edd3 7a00 	vldr	s15, [r3]
 8004962:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800496a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b68 <Trajectory+0xb24>)
 800496c:	edd3 7a00 	vldr	s15, [r3]
 8004970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004974:	4b7b      	ldr	r3, [pc, #492]	@ (8004b64 <Trajectory+0xb20>)
 8004976:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((Amax/2)*(t-Time_const-Time_acc)*(t-Time_const-Time_acc))+(traj[1]*(t-Time_const-Time_acc))+temp_pos_const;
 800497a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b78 <Trajectory+0xb34>)
 800497c:	edd3 7a00 	vldr	s15, [r3]
 8004980:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004984:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004988:	4b75      	ldr	r3, [pc, #468]	@ (8004b60 <Trajectory+0xb1c>)
 800498a:	edd3 6a00 	vldr	s13, [r3]
 800498e:	4b72      	ldr	r3, [pc, #456]	@ (8004b58 <Trajectory+0xb14>)
 8004990:	edd3 7a00 	vldr	s15, [r3]
 8004994:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004998:	4b70      	ldr	r3, [pc, #448]	@ (8004b5c <Trajectory+0xb18>)
 800499a:	edd3 7a00 	vldr	s15, [r3]
 800499e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80049a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004b60 <Trajectory+0xb1c>)
 80049a8:	edd3 6a00 	vldr	s13, [r3]
 80049ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004b58 <Trajectory+0xb14>)
 80049ae:	edd3 7a00 	vldr	s15, [r3]
 80049b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80049b6:	4b69      	ldr	r3, [pc, #420]	@ (8004b5c <Trajectory+0xb18>)
 80049b8:	edd3 7a00 	vldr	s15, [r3]
 80049bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80049c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049c4:	4b67      	ldr	r3, [pc, #412]	@ (8004b64 <Trajectory+0xb20>)
 80049c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80049ca:	4b65      	ldr	r3, [pc, #404]	@ (8004b60 <Trajectory+0xb1c>)
 80049cc:	ed93 6a00 	vldr	s12, [r3]
 80049d0:	4b61      	ldr	r3, [pc, #388]	@ (8004b58 <Trajectory+0xb14>)
 80049d2:	edd3 7a00 	vldr	s15, [r3]
 80049d6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80049da:	4b60      	ldr	r3, [pc, #384]	@ (8004b5c <Trajectory+0xb18>)
 80049dc:	edd3 7a00 	vldr	s15, [r3]
 80049e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80049e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049ec:	4b60      	ldr	r3, [pc, #384]	@ (8004b70 <Trajectory+0xb2c>)
 80049ee:	edd3 7a00 	vldr	s15, [r3]
 80049f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004b64 <Trajectory+0xb20>)
 80049f8:	edc3 7a00 	vstr	s15, [r3]
}
 80049fc:	e17e      	b.n	8004cfc <Trajectory+0xcb8>
				trajec_state = 0;
 80049fe:	4b5f      	ldr	r3, [pc, #380]	@ (8004b7c <Trajectory+0xb38>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 8004a04:	4b5e      	ldr	r3, [pc, #376]	@ (8004b80 <Trajectory+0xb3c>)
 8004a06:	4a5f      	ldr	r2, [pc, #380]	@ (8004b84 <Trajectory+0xb40>)
 8004a08:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 8004a0a:	4b56      	ldr	r3, [pc, #344]	@ (8004b64 <Trajectory+0xb20>)
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	609a      	str	r2, [r3, #8]
				temp_pos_acc = 0;
 8004a12:	4b56      	ldr	r3, [pc, #344]	@ (8004b6c <Trajectory+0xb28>)
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
				temp_pos_const = 0;
 8004a1a:	4b55      	ldr	r3, [pc, #340]	@ (8004b70 <Trajectory+0xb2c>)
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
}
 8004a22:	e16b      	b.n	8004cfc <Trajectory+0xcb8>
		else if(Distance_Velo_Max >= 0){					//Triangle
 8004a24:	4b58      	ldr	r3, [pc, #352]	@ (8004b88 <Trajectory+0xb44>)
 8004a26:	edd3 7a00 	vldr	s15, [r3]
 8004a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a32:	da00      	bge.n	8004a36 <Trajectory+0x9f2>
}
 8004a34:	e162      	b.n	8004cfc <Trajectory+0xcb8>
			temp_check = 4;
 8004a36:	4b55      	ldr	r3, [pc, #340]	@ (8004b8c <Trajectory+0xb48>)
 8004a38:	2204      	movs	r2, #4
 8004a3a:	701a      	strb	r2, [r3, #0]
			Time_acc_tri = sqrt(-Distance/Amax);
 8004a3c:	4b54      	ldr	r3, [pc, #336]	@ (8004b90 <Trajectory+0xb4c>)
 8004a3e:	edd3 7a00 	vldr	s15, [r3]
 8004a42:	eeb1 7a67 	vneg.f32	s14, s15
 8004a46:	4b4c      	ldr	r3, [pc, #304]	@ (8004b78 <Trajectory+0xb34>)
 8004a48:	edd3 7a00 	vldr	s15, [r3]
 8004a4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a50:	ee16 0a90 	vmov	r0, s13
 8004a54:	f7fb fd44 	bl	80004e0 <__aeabi_f2d>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	ec43 2b10 	vmov	d0, r2, r3
 8004a60:	f007 f808 	bl	800ba74 <sqrt>
 8004a64:	ec53 2b10 	vmov	r2, r3, d0
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f7fc f860 	bl	8000b30 <__aeabi_d2f>
 8004a70:	4603      	mov	r3, r0
 8004a72:	4a48      	ldr	r2, [pc, #288]	@ (8004b94 <Trajectory+0xb50>)
 8004a74:	6013      	str	r3, [r2, #0]
			if(t < Time_acc_tri){
 8004a76:	4b3a      	ldr	r3, [pc, #232]	@ (8004b60 <Trajectory+0xb1c>)
 8004a78:	ed93 7a00 	vldr	s14, [r3]
 8004a7c:	4b45      	ldr	r3, [pc, #276]	@ (8004b94 <Trajectory+0xb50>)
 8004a7e:	edd3 7a00 	vldr	s15, [r3]
 8004a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8a:	f140 8089 	bpl.w	8004ba0 <Trajectory+0xb5c>
				traj[2] = -Amax;
 8004a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b78 <Trajectory+0xb34>)
 8004a90:	edd3 7a00 	vldr	s15, [r3]
 8004a94:	eef1 7a67 	vneg.f32	s15, s15
 8004a98:	4b32      	ldr	r3, [pc, #200]	@ (8004b64 <Trajectory+0xb20>)
 8004a9a:	edc3 7a02 	vstr	s15, [r3, #8]
				traj[1] = -Amax*t;
 8004a9e:	4b36      	ldr	r3, [pc, #216]	@ (8004b78 <Trajectory+0xb34>)
 8004aa0:	edd3 7a00 	vldr	s15, [r3]
 8004aa4:	eeb1 7a67 	vneg.f32	s14, s15
 8004aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004b60 <Trajectory+0xb1c>)
 8004aaa:	edd3 7a00 	vldr	s15, [r3]
 8004aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b64 <Trajectory+0xb20>)
 8004ab4:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = (-Amax/2.0)*t*t + pos;
 8004ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8004b78 <Trajectory+0xb34>)
 8004aba:	edd3 7a00 	vldr	s15, [r3]
 8004abe:	eef1 7a67 	vneg.f32	s15, s15
 8004ac2:	ee17 3a90 	vmov	r3, s15
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fb fd0a 	bl	80004e0 <__aeabi_f2d>
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004ad4:	f7fb fe86 	bl	80007e4 <__aeabi_ddiv>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4614      	mov	r4, r2
 8004ade:	461d      	mov	r5, r3
 8004ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8004b60 <Trajectory+0xb1c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fb fcfb 	bl	80004e0 <__aeabi_f2d>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4620      	mov	r0, r4
 8004af0:	4629      	mov	r1, r5
 8004af2:	f7fb fd4d 	bl	8000590 <__aeabi_dmul>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4614      	mov	r4, r2
 8004afc:	461d      	mov	r5, r3
 8004afe:	4b18      	ldr	r3, [pc, #96]	@ (8004b60 <Trajectory+0xb1c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fb fcec 	bl	80004e0 <__aeabi_f2d>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	4629      	mov	r1, r5
 8004b10:	f7fb fd3e 	bl	8000590 <__aeabi_dmul>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4614      	mov	r4, r2
 8004b1a:	461d      	mov	r5, r3
 8004b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <Trajectory+0xb54>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fb fcdd 	bl	80004e0 <__aeabi_f2d>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	f7fb fb79 	bl	8000224 <__adddf3>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4610      	mov	r0, r2
 8004b38:	4619      	mov	r1, r3
 8004b3a:	f7fb fff9 	bl	8000b30 <__aeabi_d2f>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4a08      	ldr	r2, [pc, #32]	@ (8004b64 <Trajectory+0xb20>)
 8004b42:	6013      	str	r3, [r2, #0]
				temp_pos_acc = traj[0];
 8004b44:	4b07      	ldr	r3, [pc, #28]	@ (8004b64 <Trajectory+0xb20>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a08      	ldr	r2, [pc, #32]	@ (8004b6c <Trajectory+0xb28>)
 8004b4a:	6013      	str	r3, [r2, #0]
				temp_v_acc = traj[1];
 8004b4c:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <Trajectory+0xb20>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4a12      	ldr	r2, [pc, #72]	@ (8004b9c <Trajectory+0xb58>)
 8004b52:	6013      	str	r3, [r2, #0]
}
 8004b54:	e0d2      	b.n	8004cfc <Trajectory+0xcb8>
 8004b56:	bf00      	nop
 8004b58:	200012c8 	.word	0x200012c8
 8004b5c:	200012bc 	.word	0x200012bc
 8004b60:	20001298 	.word	0x20001298
 8004b64:	200012ac 	.word	0x200012ac
 8004b68:	20000214 	.word	0x20000214
 8004b6c:	2000129c 	.word	0x2000129c
 8004b70:	200012a0 	.word	0x200012a0
 8004b74:	200012c4 	.word	0x200012c4
 8004b78:	20000218 	.word	0x20000218
 8004b7c:	200012d8 	.word	0x200012d8
 8004b80:	20000574 	.word	0x20000574
 8004b84:	c1200000 	.word	0xc1200000
 8004b88:	200012a8 	.word	0x200012a8
 8004b8c:	200012d9 	.word	0x200012d9
 8004b90:	20001294 	.word	0x20001294
 8004b94:	200012c0 	.word	0x200012c0
 8004b98:	200012b8 	.word	0x200012b8
 8004b9c:	200012a4 	.word	0x200012a4
			else if(t < Time_acc_tri*2){
 8004ba0:	4b57      	ldr	r3, [pc, #348]	@ (8004d00 <Trajectory+0xcbc>)
 8004ba2:	edd3 7a00 	vldr	s15, [r3]
 8004ba6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004baa:	4b56      	ldr	r3, [pc, #344]	@ (8004d04 <Trajectory+0xcc0>)
 8004bac:	edd3 7a00 	vldr	s15, [r3]
 8004bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb8:	f340 8089 	ble.w	8004cce <Trajectory+0xc8a>
				traj[2] = Amax;
 8004bbc:	4b52      	ldr	r3, [pc, #328]	@ (8004d08 <Trajectory+0xcc4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a52      	ldr	r2, [pc, #328]	@ (8004d0c <Trajectory+0xcc8>)
 8004bc2:	6093      	str	r3, [r2, #8]
				traj[1] = temp_v_acc + (Amax*(t-Time_acc_tri));
 8004bc4:	4b4f      	ldr	r3, [pc, #316]	@ (8004d04 <Trajectory+0xcc0>)
 8004bc6:	ed93 7a00 	vldr	s14, [r3]
 8004bca:	4b4d      	ldr	r3, [pc, #308]	@ (8004d00 <Trajectory+0xcbc>)
 8004bcc:	edd3 7a00 	vldr	s15, [r3]
 8004bd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8004d08 <Trajectory+0xcc4>)
 8004bd6:	edd3 7a00 	vldr	s15, [r3]
 8004bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bde:	4b4c      	ldr	r3, [pc, #304]	@ (8004d10 <Trajectory+0xccc>)
 8004be0:	edd3 7a00 	vldr	s15, [r3]
 8004be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004be8:	4b48      	ldr	r3, [pc, #288]	@ (8004d0c <Trajectory+0xcc8>)
 8004bea:	edc3 7a01 	vstr	s15, [r3, #4]
				traj[0] = ((-Amax/2.0)*(t-Time_acc_tri)*(t-Time_acc_tri))+(traj[1]*(t-Time_acc_tri))+temp_pos_acc;
 8004bee:	4b46      	ldr	r3, [pc, #280]	@ (8004d08 <Trajectory+0xcc4>)
 8004bf0:	edd3 7a00 	vldr	s15, [r3]
 8004bf4:	eef1 7a67 	vneg.f32	s15, s15
 8004bf8:	ee17 3a90 	vmov	r3, s15
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fb fc6f 	bl	80004e0 <__aeabi_f2d>
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004c0a:	f7fb fdeb 	bl	80007e4 <__aeabi_ddiv>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4614      	mov	r4, r2
 8004c14:	461d      	mov	r5, r3
 8004c16:	4b3b      	ldr	r3, [pc, #236]	@ (8004d04 <Trajectory+0xcc0>)
 8004c18:	ed93 7a00 	vldr	s14, [r3]
 8004c1c:	4b38      	ldr	r3, [pc, #224]	@ (8004d00 <Trajectory+0xcbc>)
 8004c1e:	edd3 7a00 	vldr	s15, [r3]
 8004c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c26:	ee17 0a90 	vmov	r0, s15
 8004c2a:	f7fb fc59 	bl	80004e0 <__aeabi_f2d>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4620      	mov	r0, r4
 8004c34:	4629      	mov	r1, r5
 8004c36:	f7fb fcab 	bl	8000590 <__aeabi_dmul>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4614      	mov	r4, r2
 8004c40:	461d      	mov	r5, r3
 8004c42:	4b30      	ldr	r3, [pc, #192]	@ (8004d04 <Trajectory+0xcc0>)
 8004c44:	ed93 7a00 	vldr	s14, [r3]
 8004c48:	4b2d      	ldr	r3, [pc, #180]	@ (8004d00 <Trajectory+0xcbc>)
 8004c4a:	edd3 7a00 	vldr	s15, [r3]
 8004c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c52:	ee17 0a90 	vmov	r0, s15
 8004c56:	f7fb fc43 	bl	80004e0 <__aeabi_f2d>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4620      	mov	r0, r4
 8004c60:	4629      	mov	r1, r5
 8004c62:	f7fb fc95 	bl	8000590 <__aeabi_dmul>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4614      	mov	r4, r2
 8004c6c:	461d      	mov	r5, r3
 8004c6e:	4b27      	ldr	r3, [pc, #156]	@ (8004d0c <Trajectory+0xcc8>)
 8004c70:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c74:	4b23      	ldr	r3, [pc, #140]	@ (8004d04 <Trajectory+0xcc0>)
 8004c76:	edd3 6a00 	vldr	s13, [r3]
 8004c7a:	4b21      	ldr	r3, [pc, #132]	@ (8004d00 <Trajectory+0xcbc>)
 8004c7c:	edd3 7a00 	vldr	s15, [r3]
 8004c80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c88:	ee17 0a90 	vmov	r0, s15
 8004c8c:	f7fb fc28 	bl	80004e0 <__aeabi_f2d>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4620      	mov	r0, r4
 8004c96:	4629      	mov	r1, r5
 8004c98:	f7fb fac4 	bl	8000224 <__adddf3>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	461d      	mov	r5, r3
 8004ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d14 <Trajectory+0xcd0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fb fc19 	bl	80004e0 <__aeabi_f2d>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f7fb fab5 	bl	8000224 <__adddf3>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	f7fb ff35 	bl	8000b30 <__aeabi_d2f>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4a10      	ldr	r2, [pc, #64]	@ (8004d0c <Trajectory+0xcc8>)
 8004cca:	6013      	str	r3, [r2, #0]
}
 8004ccc:	e016      	b.n	8004cfc <Trajectory+0xcb8>
				trajec_state = 0;
 8004cce:	4b12      	ldr	r3, [pc, #72]	@ (8004d18 <Trajectory+0xcd4>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
				trajec_target = -10;
 8004cd4:	4b11      	ldr	r3, [pc, #68]	@ (8004d1c <Trajectory+0xcd8>)
 8004cd6:	4a12      	ldr	r2, [pc, #72]	@ (8004d20 <Trajectory+0xcdc>)
 8004cd8:	601a      	str	r2, [r3, #0]
				traj[2] = 0;
 8004cda:	4b0c      	ldr	r3, [pc, #48]	@ (8004d0c <Trajectory+0xcc8>)
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
				Time_acc_tri = 0;
 8004ce2:	4b07      	ldr	r3, [pc, #28]	@ (8004d00 <Trajectory+0xcbc>)
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
				temp_pos_acc = 0;
 8004cea:	4b0a      	ldr	r3, [pc, #40]	@ (8004d14 <Trajectory+0xcd0>)
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
				temp_v_acc = 0;
 8004cf2:	4b07      	ldr	r3, [pc, #28]	@ (8004d10 <Trajectory+0xccc>)
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
}
 8004cfa:	e7ff      	b.n	8004cfc <Trajectory+0xcb8>
 8004cfc:	bf00      	nop
 8004cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8004d00:	200012c0 	.word	0x200012c0
 8004d04:	20001298 	.word	0x20001298
 8004d08:	20000218 	.word	0x20000218
 8004d0c:	200012ac 	.word	0x200012ac
 8004d10:	200012a4 	.word	0x200012a4
 8004d14:	2000129c 	.word	0x2000129c
 8004d18:	200012d8 	.word	0x200012d8
 8004d1c:	20000574 	.word	0x20000574
 8004d20:	c1200000 	.word	0xc1200000

08004d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d28:	b672      	cpsid	i
}
 8004d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d2c:	bf00      	nop
 8004d2e:	e7fd      	b.n	8004d2c <Error_Handler+0x8>

08004d30 <is_motor_should_run>:
//	degreePerRound = (QEIOfRound * 360.0) / 8192.0;
//	//position on z-zxis
//	linearPos = ((25.01093 * M_PI) / 8192.0) * QEIReadRaw; //24.95
//}
//
void is_motor_should_run(){
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
	limitMin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8004d34:	2102      	movs	r1, #2
 8004d36:	481b      	ldr	r0, [pc, #108]	@ (8004da4 <is_motor_should_run+0x74>)
 8004d38:	f001 f9ec 	bl	8006114 <HAL_GPIO_ReadPin>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4b19      	ldr	r3, [pc, #100]	@ (8004da8 <is_motor_should_run+0x78>)
 8004d42:	801a      	strh	r2, [r3, #0]
	limitMax = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8004d44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d48:	4816      	ldr	r0, [pc, #88]	@ (8004da4 <is_motor_should_run+0x74>)
 8004d4a:	f001 f9e3 	bl	8006114 <HAL_GPIO_ReadPin>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	461a      	mov	r2, r3
 8004d52:	4b16      	ldr	r3, [pc, #88]	@ (8004dac <is_motor_should_run+0x7c>)
 8004d54:	801a      	strh	r2, [r3, #0]
	// motor can move up and down
	if(!limitMax && !limitMin){
 8004d56:	4b15      	ldr	r3, [pc, #84]	@ (8004dac <is_motor_should_run+0x7c>)
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <is_motor_should_run+0x44>
 8004d5e:	4b12      	ldr	r3, [pc, #72]	@ (8004da8 <is_motor_should_run+0x78>)
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d106      	bne.n	8004d74 <is_motor_should_run+0x44>
		isMotorCanMoveUp = 1;
 8004d66:	4b12      	ldr	r3, [pc, #72]	@ (8004db0 <is_motor_should_run+0x80>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
		isMotorCanMoveDown = 1;
 8004d6c:	4b11      	ldr	r3, [pc, #68]	@ (8004db4 <is_motor_should_run+0x84>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	701a      	strb	r2, [r3, #0]
	//motor can only move down
	else if(limitMax){
		isMotorCanMoveUp = 0;
		isMotorCanMoveDown = 1;
	}
}
 8004d72:	e014      	b.n	8004d9e <is_motor_should_run+0x6e>
	else if(limitMin){
 8004d74:	4b0c      	ldr	r3, [pc, #48]	@ (8004da8 <is_motor_should_run+0x78>)
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d006      	beq.n	8004d8a <is_motor_should_run+0x5a>
		isMotorCanMoveUp = 1;
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004db0 <is_motor_should_run+0x80>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	701a      	strb	r2, [r3, #0]
		isMotorCanMoveDown = 0;
 8004d82:	4b0c      	ldr	r3, [pc, #48]	@ (8004db4 <is_motor_should_run+0x84>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
}
 8004d88:	e009      	b.n	8004d9e <is_motor_should_run+0x6e>
	else if(limitMax){
 8004d8a:	4b08      	ldr	r3, [pc, #32]	@ (8004dac <is_motor_should_run+0x7c>)
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <is_motor_should_run+0x6e>
		isMotorCanMoveUp = 0;
 8004d92:	4b07      	ldr	r3, [pc, #28]	@ (8004db0 <is_motor_should_run+0x80>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
		isMotorCanMoveDown = 1;
 8004d98:	4b06      	ldr	r3, [pc, #24]	@ (8004db4 <is_motor_should_run+0x84>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	701a      	strb	r2, [r3, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	48000400 	.word	0x48000400
 8004da8:	2000056c 	.word	0x2000056c
 8004dac:	2000056e 	.word	0x2000056e
 8004db0:	200004a0 	.word	0x200004a0
 8004db4:	200004a1 	.word	0x200004a1

08004db8 <readLimit>:
//	}
//}
//


void readLimit(){
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
 	limitMin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8004dbc:	2102      	movs	r1, #2
 8004dbe:	4809      	ldr	r0, [pc, #36]	@ (8004de4 <readLimit+0x2c>)
 8004dc0:	f001 f9a8 	bl	8006114 <HAL_GPIO_ReadPin>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4b07      	ldr	r3, [pc, #28]	@ (8004de8 <readLimit+0x30>)
 8004dca:	801a      	strh	r2, [r3, #0]
	limitMax = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8004dcc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004dd0:	4804      	ldr	r0, [pc, #16]	@ (8004de4 <readLimit+0x2c>)
 8004dd2:	f001 f99f 	bl	8006114 <HAL_GPIO_ReadPin>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b04      	ldr	r3, [pc, #16]	@ (8004dec <readLimit+0x34>)
 8004ddc:	801a      	strh	r2, [r3, #0]
}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	48000400 	.word	0x48000400
 8004de8:	2000056c 	.word	0x2000056c
 8004dec:	2000056e 	.word	0x2000056e

08004df0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e34 <HAL_MspInit+0x44>)
 8004df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8004e34 <HAL_MspInit+0x44>)
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e02:	4b0c      	ldr	r3, [pc, #48]	@ (8004e34 <HAL_MspInit+0x44>)
 8004e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e0e:	4b09      	ldr	r3, [pc, #36]	@ (8004e34 <HAL_MspInit+0x44>)
 8004e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e12:	4a08      	ldr	r2, [pc, #32]	@ (8004e34 <HAL_MspInit+0x44>)
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e1a:	4b06      	ldr	r3, [pc, #24]	@ (8004e34 <HAL_MspInit+0x44>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004e26:	f001 fa6d 	bl	8006304 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000

08004e38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	@ 0x28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e40:	f107 0314 	add.w	r3, r7, #20
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	605a      	str	r2, [r3, #4]
 8004e4a:	609a      	str	r2, [r3, #8]
 8004e4c:	60da      	str	r2, [r3, #12]
 8004e4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec8 <HAL_TIM_Encoder_MspInit+0x90>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d131      	bne.n	8004ebe <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ecc <HAL_TIM_Encoder_MspInit+0x94>)
 8004e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8004ecc <HAL_TIM_Encoder_MspInit+0x94>)
 8004e60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004e64:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e66:	4b19      	ldr	r3, [pc, #100]	@ (8004ecc <HAL_TIM_Encoder_MspInit+0x94>)
 8004e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e72:	4b16      	ldr	r3, [pc, #88]	@ (8004ecc <HAL_TIM_Encoder_MspInit+0x94>)
 8004e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e76:	4a15      	ldr	r2, [pc, #84]	@ (8004ecc <HAL_TIM_Encoder_MspInit+0x94>)
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e7e:	4b13      	ldr	r3, [pc, #76]	@ (8004ecc <HAL_TIM_Encoder_MspInit+0x94>)
 8004e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1CH1_EocoderA_Pin|TIM1CH2_EncoderB_Pin;
 8004e8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e90:	2302      	movs	r3, #2
 8004e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004e9c:	2306      	movs	r3, #6
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea0:	f107 0314 	add.w	r3, r7, #20
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004eaa:	f000 ffb1 	bl	8005e10 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	2019      	movs	r0, #25
 8004eb4:	f000 fc45 	bl	8005742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004eb8:	2019      	movs	r0, #25
 8004eba:	f000 fc5c 	bl	8005776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004ebe:	bf00      	nop
 8004ec0:	3728      	adds	r7, #40	@ 0x28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	40021000 	.word	0x40021000

08004ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b094      	sub	sp, #80	@ 0x50
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	605a      	str	r2, [r3, #4]
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef0:	d114      	bne.n	8004f1c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ef2:	4b96      	ldr	r3, [pc, #600]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef6:	4a95      	ldr	r2, [pc, #596]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004efe:	4b93      	ldr	r3, [pc, #588]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	201c      	movs	r0, #28
 8004f10:	f000 fc17 	bl	8005742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f14:	201c      	movs	r0, #28
 8004f16:	f000 fc2e 	bl	8005776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8004f1a:	e112      	b.n	8005142 <HAL_TIM_Base_MspInit+0x272>
  else if(htim_base->Instance==TIM3)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a8b      	ldr	r2, [pc, #556]	@ (8005150 <HAL_TIM_Base_MspInit+0x280>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d128      	bne.n	8004f78 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f26:	4b89      	ldr	r3, [pc, #548]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2a:	4a88      	ldr	r2, [pc, #544]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004f2c:	f043 0302 	orr.w	r3, r3, #2
 8004f30:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f32:	4b86      	ldr	r3, [pc, #536]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f3e:	4b83      	ldr	r3, [pc, #524]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f42:	4a82      	ldr	r2, [pc, #520]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004f44:	f043 0304 	orr.w	r3, r3, #4
 8004f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f4a:	4b80      	ldr	r3, [pc, #512]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = TIM3CH1_JoySave_Pin;
 8004f56:	2340      	movs	r3, #64	@ 0x40
 8004f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f62:	2300      	movs	r3, #0
 8004f64:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f66:	2302      	movs	r3, #2
 8004f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(TIM3CH1_JoySave_GPIO_Port, &GPIO_InitStruct);
 8004f6a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4878      	ldr	r0, [pc, #480]	@ (8005154 <HAL_TIM_Base_MspInit+0x284>)
 8004f72:	f000 ff4d 	bl	8005e10 <HAL_GPIO_Init>
}
 8004f76:	e0e4      	b.n	8005142 <HAL_TIM_Base_MspInit+0x272>
  else if(htim_base->Instance==TIM4)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a76      	ldr	r2, [pc, #472]	@ (8005158 <HAL_TIM_Base_MspInit+0x288>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d12a      	bne.n	8004fd8 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f82:	4b72      	ldr	r3, [pc, #456]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f86:	4a71      	ldr	r2, [pc, #452]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004f88:	f043 0304 	orr.w	r3, r3, #4
 8004f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f9a:	4b6c      	ldr	r3, [pc, #432]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f9e:	4a6b      	ldr	r2, [pc, #428]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fa6:	4b69      	ldr	r3, [pc, #420]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = TIM4CH1_JoySel1_Pin;
 8004fb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004fc4:	230a      	movs	r3, #10
 8004fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(TIM4CH1_JoySel1_GPIO_Port, &GPIO_InitStruct);
 8004fc8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fd2:	f000 ff1d 	bl	8005e10 <HAL_GPIO_Init>
}
 8004fd6:	e0b4      	b.n	8005142 <HAL_TIM_Base_MspInit+0x272>
  else if(htim_base->Instance==TIM5)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a5f      	ldr	r2, [pc, #380]	@ (800515c <HAL_TIM_Base_MspInit+0x28c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d10c      	bne.n	8004ffc <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004fe2:	4b5a      	ldr	r3, [pc, #360]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe6:	4a59      	ldr	r2, [pc, #356]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004fe8:	f043 0308 	orr.w	r3, r3, #8
 8004fec:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fee:	4b57      	ldr	r3, [pc, #348]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ffa:	e0a2      	b.n	8005142 <HAL_TIM_Base_MspInit+0x272>
  else if(htim_base->Instance==TIM8)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a57      	ldr	r2, [pc, #348]	@ (8005160 <HAL_TIM_Base_MspInit+0x290>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d139      	bne.n	800507a <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005006:	4b51      	ldr	r3, [pc, #324]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8005008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800500a:	4a50      	ldr	r2, [pc, #320]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 800500c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005010:	6613      	str	r3, [r2, #96]	@ 0x60
 8005012:	4b4e      	ldr	r3, [pc, #312]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8005014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005016:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800501a:	623b      	str	r3, [r7, #32]
 800501c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800501e:	4b4b      	ldr	r3, [pc, #300]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8005020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005022:	4a4a      	ldr	r2, [pc, #296]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8005024:	f043 0302 	orr.w	r3, r3, #2
 8005028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800502a:	4b48      	ldr	r3, [pc, #288]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 800502c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TIM8CH1_joyX_Pin;
 8005036:	2340      	movs	r3, #64	@ 0x40
 8005038:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800503a:	2302      	movs	r3, #2
 800503c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503e:	2300      	movs	r3, #0
 8005040:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005042:	2300      	movs	r3, #0
 8005044:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8005046:	2305      	movs	r3, #5
 8005048:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(TIM8CH1_joyX_GPIO_Port, &GPIO_InitStruct);
 800504a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800504e:	4619      	mov	r1, r3
 8005050:	4844      	ldr	r0, [pc, #272]	@ (8005164 <HAL_TIM_Base_MspInit+0x294>)
 8005052:	f000 fedd 	bl	8005e10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM8CH3_JoyZUp_Pin;
 8005056:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800505a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800505c:	2302      	movs	r3, #2
 800505e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005060:	2300      	movs	r3, #0
 8005062:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005064:	2300      	movs	r3, #0
 8005066:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8005068:	230a      	movs	r3, #10
 800506a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(TIM8CH3_JoyZUp_GPIO_Port, &GPIO_InitStruct);
 800506c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005070:	4619      	mov	r1, r3
 8005072:	483c      	ldr	r0, [pc, #240]	@ (8005164 <HAL_TIM_Base_MspInit+0x294>)
 8005074:	f000 fecc 	bl	8005e10 <HAL_GPIO_Init>
}
 8005078:	e063      	b.n	8005142 <HAL_TIM_Base_MspInit+0x272>
  else if(htim_base->Instance==TIM16)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a3a      	ldr	r2, [pc, #232]	@ (8005168 <HAL_TIM_Base_MspInit+0x298>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d114      	bne.n	80050ae <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005084:	4b31      	ldr	r3, [pc, #196]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8005086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005088:	4a30      	ldr	r2, [pc, #192]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 800508a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800508e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005090:	4b2e      	ldr	r3, [pc, #184]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 8005092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800509c:	2200      	movs	r2, #0
 800509e:	2100      	movs	r1, #0
 80050a0:	2019      	movs	r0, #25
 80050a2:	f000 fb4e 	bl	8005742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80050a6:	2019      	movs	r0, #25
 80050a8:	f000 fb65 	bl	8005776 <HAL_NVIC_EnableIRQ>
}
 80050ac:	e049      	b.n	8005142 <HAL_TIM_Base_MspInit+0x272>
  else if(htim_base->Instance==TIM20)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a2e      	ldr	r2, [pc, #184]	@ (800516c <HAL_TIM_Base_MspInit+0x29c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d144      	bne.n	8005142 <HAL_TIM_Base_MspInit+0x272>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80050b8:	4b24      	ldr	r3, [pc, #144]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 80050ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050bc:	4a23      	ldr	r2, [pc, #140]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 80050be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80050c4:	4b21      	ldr	r3, [pc, #132]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 80050c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050d0:	4b1e      	ldr	r3, [pc, #120]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 80050d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d4:	4a1d      	ldr	r2, [pc, #116]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 80050d6:	f043 0302 	orr.w	r3, r3, #2
 80050da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050dc:	4b1b      	ldr	r3, [pc, #108]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 80050de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050e8:	4b18      	ldr	r3, [pc, #96]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 80050ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ec:	4a17      	ldr	r2, [pc, #92]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 80050ee:	f043 0304 	orr.w	r3, r3, #4
 80050f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050f4:	4b15      	ldr	r3, [pc, #84]	@ (800514c <HAL_TIM_Base_MspInit+0x27c>)
 80050f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM20CH1_JoySel2_Pin;
 8005100:	2304      	movs	r3, #4
 8005102:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005104:	2302      	movs	r3, #2
 8005106:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005108:	2300      	movs	r3, #0
 800510a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800510c:	2300      	movs	r3, #0
 800510e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8005110:	2303      	movs	r3, #3
 8005112:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(TIM20CH1_JoySel2_GPIO_Port, &GPIO_InitStruct);
 8005114:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005118:	4619      	mov	r1, r3
 800511a:	4812      	ldr	r0, [pc, #72]	@ (8005164 <HAL_TIM_Base_MspInit+0x294>)
 800511c:	f000 fe78 	bl	8005e10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM20CH3_JoyZDown_Pin;
 8005120:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005124:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005126:	2302      	movs	r3, #2
 8005128:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512a:	2300      	movs	r3, #0
 800512c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800512e:	2300      	movs	r3, #0
 8005130:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8005132:	2306      	movs	r3, #6
 8005134:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(TIM20CH3_JoyZDown_GPIO_Port, &GPIO_InitStruct);
 8005136:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800513a:	4619      	mov	r1, r3
 800513c:	4805      	ldr	r0, [pc, #20]	@ (8005154 <HAL_TIM_Base_MspInit+0x284>)
 800513e:	f000 fe67 	bl	8005e10 <HAL_GPIO_Init>
}
 8005142:	bf00      	nop
 8005144:	3750      	adds	r7, #80	@ 0x50
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40021000 	.word	0x40021000
 8005150:	40000400 	.word	0x40000400
 8005154:	48000800 	.word	0x48000800
 8005158:	40000800 	.word	0x40000800
 800515c:	40000c00 	.word	0x40000c00
 8005160:	40013400 	.word	0x40013400
 8005164:	48000400 	.word	0x48000400
 8005168:	40014400 	.word	0x40014400
 800516c:	40015000 	.word	0x40015000

08005170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005178:	f107 030c 	add.w	r3, r7, #12
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	609a      	str	r2, [r3, #8]
 8005184:	60da      	str	r2, [r3, #12]
 8005186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a11      	ldr	r2, [pc, #68]	@ (80051d4 <HAL_TIM_MspPostInit+0x64>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d11c      	bne.n	80051cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005192:	4b11      	ldr	r3, [pc, #68]	@ (80051d8 <HAL_TIM_MspPostInit+0x68>)
 8005194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005196:	4a10      	ldr	r2, [pc, #64]	@ (80051d8 <HAL_TIM_MspPostInit+0x68>)
 8005198:	f043 0304 	orr.w	r3, r3, #4
 800519c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800519e:	4b0e      	ldr	r3, [pc, #56]	@ (80051d8 <HAL_TIM_MspPostInit+0x68>)
 80051a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	60bb      	str	r3, [r7, #8]
 80051a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80051aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b0:	2302      	movs	r3, #2
 80051b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80051bc:	2301      	movs	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051c0:	f107 030c 	add.w	r3, r7, #12
 80051c4:	4619      	mov	r1, r3
 80051c6:	4805      	ldr	r0, [pc, #20]	@ (80051dc <HAL_TIM_MspPostInit+0x6c>)
 80051c8:	f000 fe22 	bl	8005e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80051cc:	bf00      	nop
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40021000 	.word	0x40021000
 80051dc:	48000800 	.word	0x48000800

080051e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b09e      	sub	sp, #120	@ 0x78
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	60da      	str	r2, [r3, #12]
 80051f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051f8:	f107 0310 	add.w	r3, r7, #16
 80051fc:	2254      	movs	r2, #84	@ 0x54
 80051fe:	2100      	movs	r1, #0
 8005200:	4618      	mov	r0, r3
 8005202:	f006 fbf7 	bl	800b9f4 <memset>
  if(huart->Instance==USART2)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a4d      	ldr	r2, [pc, #308]	@ (8005340 <HAL_UART_MspInit+0x160>)
 800520c:	4293      	cmp	r3, r2
 800520e:	f040 8092 	bne.w	8005336 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005212:	2302      	movs	r3, #2
 8005214:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005216:	2300      	movs	r3, #0
 8005218:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800521a:	f107 0310 	add.w	r3, r7, #16
 800521e:	4618      	mov	r0, r3
 8005220:	f001 fdae 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800522a:	f7ff fd7b 	bl	8004d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800522e:	4b45      	ldr	r3, [pc, #276]	@ (8005344 <HAL_UART_MspInit+0x164>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005232:	4a44      	ldr	r2, [pc, #272]	@ (8005344 <HAL_UART_MspInit+0x164>)
 8005234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005238:	6593      	str	r3, [r2, #88]	@ 0x58
 800523a:	4b42      	ldr	r3, [pc, #264]	@ (8005344 <HAL_UART_MspInit+0x164>)
 800523c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005246:	4b3f      	ldr	r3, [pc, #252]	@ (8005344 <HAL_UART_MspInit+0x164>)
 8005248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524a:	4a3e      	ldr	r2, [pc, #248]	@ (8005344 <HAL_UART_MspInit+0x164>)
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005252:	4b3c      	ldr	r3, [pc, #240]	@ (8005344 <HAL_UART_MspInit+0x164>)
 8005254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	60bb      	str	r3, [r7, #8]
 800525c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800525e:	230c      	movs	r3, #12
 8005260:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005262:	2302      	movs	r3, #2
 8005264:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005266:	2300      	movs	r3, #0
 8005268:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800526a:	2300      	movs	r3, #0
 800526c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800526e:	2307      	movs	r3, #7
 8005270:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005272:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005276:	4619      	mov	r1, r3
 8005278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800527c:	f000 fdc8 	bl	8005e10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8005280:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <HAL_UART_MspInit+0x168>)
 8005282:	4a32      	ldr	r2, [pc, #200]	@ (800534c <HAL_UART_MspInit+0x16c>)
 8005284:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005286:	4b30      	ldr	r3, [pc, #192]	@ (8005348 <HAL_UART_MspInit+0x168>)
 8005288:	221b      	movs	r2, #27
 800528a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800528c:	4b2e      	ldr	r3, [pc, #184]	@ (8005348 <HAL_UART_MspInit+0x168>)
 800528e:	2210      	movs	r2, #16
 8005290:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005292:	4b2d      	ldr	r3, [pc, #180]	@ (8005348 <HAL_UART_MspInit+0x168>)
 8005294:	2200      	movs	r2, #0
 8005296:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005298:	4b2b      	ldr	r3, [pc, #172]	@ (8005348 <HAL_UART_MspInit+0x168>)
 800529a:	2280      	movs	r2, #128	@ 0x80
 800529c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800529e:	4b2a      	ldr	r3, [pc, #168]	@ (8005348 <HAL_UART_MspInit+0x168>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052a4:	4b28      	ldr	r3, [pc, #160]	@ (8005348 <HAL_UART_MspInit+0x168>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80052aa:	4b27      	ldr	r3, [pc, #156]	@ (8005348 <HAL_UART_MspInit+0x168>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80052b0:	4b25      	ldr	r3, [pc, #148]	@ (8005348 <HAL_UART_MspInit+0x168>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80052b6:	4824      	ldr	r0, [pc, #144]	@ (8005348 <HAL_UART_MspInit+0x168>)
 80052b8:	f000 fa78 	bl	80057ac <HAL_DMA_Init>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80052c2:	f7ff fd2f 	bl	8004d24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005348 <HAL_UART_MspInit+0x168>)
 80052ca:	67da      	str	r2, [r3, #124]	@ 0x7c
 80052cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005348 <HAL_UART_MspInit+0x168>)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80052d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005350 <HAL_UART_MspInit+0x170>)
 80052d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005354 <HAL_UART_MspInit+0x174>)
 80052d6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80052d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005350 <HAL_UART_MspInit+0x170>)
 80052da:	221a      	movs	r2, #26
 80052dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052de:	4b1c      	ldr	r3, [pc, #112]	@ (8005350 <HAL_UART_MspInit+0x170>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005350 <HAL_UART_MspInit+0x170>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052ea:	4b19      	ldr	r3, [pc, #100]	@ (8005350 <HAL_UART_MspInit+0x170>)
 80052ec:	2280      	movs	r2, #128	@ 0x80
 80052ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052f0:	4b17      	ldr	r3, [pc, #92]	@ (8005350 <HAL_UART_MspInit+0x170>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052f6:	4b16      	ldr	r3, [pc, #88]	@ (8005350 <HAL_UART_MspInit+0x170>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80052fc:	4b14      	ldr	r3, [pc, #80]	@ (8005350 <HAL_UART_MspInit+0x170>)
 80052fe:	2200      	movs	r2, #0
 8005300:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005302:	4b13      	ldr	r3, [pc, #76]	@ (8005350 <HAL_UART_MspInit+0x170>)
 8005304:	2200      	movs	r2, #0
 8005306:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005308:	4811      	ldr	r0, [pc, #68]	@ (8005350 <HAL_UART_MspInit+0x170>)
 800530a:	f000 fa4f 	bl	80057ac <HAL_DMA_Init>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8005314:	f7ff fd06 	bl	8004d24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a0d      	ldr	r2, [pc, #52]	@ (8005350 <HAL_UART_MspInit+0x170>)
 800531c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005320:	4a0b      	ldr	r2, [pc, #44]	@ (8005350 <HAL_UART_MspInit+0x170>)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005326:	2200      	movs	r2, #0
 8005328:	2100      	movs	r1, #0
 800532a:	2026      	movs	r0, #38	@ 0x26
 800532c:	f000 fa09 	bl	8005742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005330:	2026      	movs	r0, #38	@ 0x26
 8005332:	f000 fa20 	bl	8005776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005336:	bf00      	nop
 8005338:	3778      	adds	r7, #120	@ 0x78
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40004400 	.word	0x40004400
 8005344:	40021000 	.word	0x40021000
 8005348:	20000cb0 	.word	0x20000cb0
 800534c:	40020008 	.word	0x40020008
 8005350:	20000d10 	.word	0x20000d10
 8005354:	4002001c 	.word	0x4002001c

08005358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800535c:	bf00      	nop
 800535e:	e7fd      	b.n	800535c <NMI_Handler+0x4>

08005360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005364:	bf00      	nop
 8005366:	e7fd      	b.n	8005364 <HardFault_Handler+0x4>

08005368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800536c:	bf00      	nop
 800536e:	e7fd      	b.n	800536c <MemManage_Handler+0x4>

08005370 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <BusFault_Handler+0x4>

08005378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800537c:	bf00      	nop
 800537e:	e7fd      	b.n	800537c <UsageFault_Handler+0x4>

08005380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800538e:	b480      	push	{r7}
 8005390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005392:	bf00      	nop
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053a0:	bf00      	nop
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053ae:	f000 f8cf 	bl	8005550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80053bc:	4802      	ldr	r0, [pc, #8]	@ (80053c8 <DMA1_Channel1_IRQHandler+0x10>)
 80053be:	f000 fbd8 	bl	8005b72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000cb0 	.word	0x20000cb0

080053cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80053d0:	4802      	ldr	r0, [pc, #8]	@ (80053dc <DMA1_Channel2_IRQHandler+0x10>)
 80053d2:	f000 fbce 	bl	8005b72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000d10 	.word	0x20000d10

080053e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80053e4:	4803      	ldr	r0, [pc, #12]	@ (80053f4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80053e6:	f002 fd8f 	bl	8007f08 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80053ea:	4803      	ldr	r0, [pc, #12]	@ (80053f8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80053ec:	f002 fd8c 	bl	8007f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80053f0:	bf00      	nop
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20000584 	.word	0x20000584
 80053f8:	20000a4c 	.word	0x20000a4c

080053fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005400:	4802      	ldr	r0, [pc, #8]	@ (800540c <TIM2_IRQHandler+0x10>)
 8005402:	f002 fd81 	bl	8007f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005406:	bf00      	nop
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000650 	.word	0x20000650

08005410 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005414:	4802      	ldr	r0, [pc, #8]	@ (8005420 <USART2_IRQHandler+0x10>)
 8005416:	f004 fda9 	bl	8009f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800541a:	bf00      	nop
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000be4 	.word	0x20000be4

08005424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005428:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800542c:	f000 fea2 	bl	8006174 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005430:	bf00      	nop
 8005432:	bd80      	pop	{r7, pc}

08005434 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005438:	4b06      	ldr	r3, [pc, #24]	@ (8005454 <SystemInit+0x20>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543e:	4a05      	ldr	r2, [pc, #20]	@ (8005454 <SystemInit+0x20>)
 8005440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005458:	480d      	ldr	r0, [pc, #52]	@ (8005490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800545a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800545c:	f7ff ffea 	bl	8005434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005460:	480c      	ldr	r0, [pc, #48]	@ (8005494 <LoopForever+0x6>)
  ldr r1, =_edata
 8005462:	490d      	ldr	r1, [pc, #52]	@ (8005498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005464:	4a0d      	ldr	r2, [pc, #52]	@ (800549c <LoopForever+0xe>)
  movs r3, #0
 8005466:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005468:	e002      	b.n	8005470 <LoopCopyDataInit>

0800546a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800546a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800546c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800546e:	3304      	adds	r3, #4

08005470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005474:	d3f9      	bcc.n	800546a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005476:	4a0a      	ldr	r2, [pc, #40]	@ (80054a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005478:	4c0a      	ldr	r4, [pc, #40]	@ (80054a4 <LoopForever+0x16>)
  movs r3, #0
 800547a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800547c:	e001      	b.n	8005482 <LoopFillZerobss>

0800547e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800547e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005480:	3204      	adds	r2, #4

08005482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005484:	d3fb      	bcc.n	800547e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005486:	f006 fac3 	bl	800ba10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800548a:	f7fc ff5b 	bl	8002344 <main>

0800548e <LoopForever>:

LoopForever:
    b LoopForever
 800548e:	e7fe      	b.n	800548e <LoopForever>
  ldr   r0, =_estack
 8005490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005498:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 800549c:	0800bde0 	.word	0x0800bde0
  ldr r2, =_sbss
 80054a0:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 80054a4:	2000141c 	.word	0x2000141c

080054a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80054a8:	e7fe      	b.n	80054a8 <ADC1_2_IRQHandler>

080054aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054b4:	2003      	movs	r0, #3
 80054b6:	f000 f939 	bl	800572c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054ba:	2000      	movs	r0, #0
 80054bc:	f000 f80e 	bl	80054dc <HAL_InitTick>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	71fb      	strb	r3, [r7, #7]
 80054ca:	e001      	b.n	80054d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054cc:	f7ff fc90 	bl	8004df0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054d0:	79fb      	ldrb	r3, [r7, #7]

}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80054e8:	4b16      	ldr	r3, [pc, #88]	@ (8005544 <HAL_InitTick+0x68>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d022      	beq.n	8005536 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054f0:	4b15      	ldr	r3, [pc, #84]	@ (8005548 <HAL_InitTick+0x6c>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b13      	ldr	r3, [pc, #76]	@ (8005544 <HAL_InitTick+0x68>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80054fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005500:	fbb2 f3f3 	udiv	r3, r2, r3
 8005504:	4618      	mov	r0, r3
 8005506:	f000 f944 	bl	8005792 <HAL_SYSTICK_Config>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10f      	bne.n	8005530 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b0f      	cmp	r3, #15
 8005514:	d809      	bhi.n	800552a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005516:	2200      	movs	r2, #0
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	f04f 30ff 	mov.w	r0, #4294967295
 800551e:	f000 f910 	bl	8005742 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005522:	4a0a      	ldr	r2, [pc, #40]	@ (800554c <HAL_InitTick+0x70>)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e007      	b.n	800553a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e004      	b.n	800553a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
 8005534:	e001      	b.n	800553a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800553a:	7bfb      	ldrb	r3, [r7, #15]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20000224 	.word	0x20000224
 8005548:	2000021c 	.word	0x2000021c
 800554c:	20000220 	.word	0x20000220

08005550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005554:	4b05      	ldr	r3, [pc, #20]	@ (800556c <HAL_IncTick+0x1c>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4b05      	ldr	r3, [pc, #20]	@ (8005570 <HAL_IncTick+0x20>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4413      	add	r3, r2
 800555e:	4a03      	ldr	r2, [pc, #12]	@ (800556c <HAL_IncTick+0x1c>)
 8005560:	6013      	str	r3, [r2, #0]
}
 8005562:	bf00      	nop
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	200012e0 	.word	0x200012e0
 8005570:	20000224 	.word	0x20000224

08005574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  return uwTick;
 8005578:	4b03      	ldr	r3, [pc, #12]	@ (8005588 <HAL_GetTick+0x14>)
 800557a:	681b      	ldr	r3, [r3, #0]
}
 800557c:	4618      	mov	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	200012e0 	.word	0x200012e0

0800558c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800559c:	4b0c      	ldr	r3, [pc, #48]	@ (80055d0 <__NVIC_SetPriorityGrouping+0x44>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80055a8:	4013      	ands	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055be:	4a04      	ldr	r2, [pc, #16]	@ (80055d0 <__NVIC_SetPriorityGrouping+0x44>)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	60d3      	str	r3, [r2, #12]
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	e000ed00 	.word	0xe000ed00

080055d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055d8:	4b04      	ldr	r3, [pc, #16]	@ (80055ec <__NVIC_GetPriorityGrouping+0x18>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	f003 0307 	and.w	r3, r3, #7
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	e000ed00 	.word	0xe000ed00

080055f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	db0b      	blt.n	800561a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	f003 021f 	and.w	r2, r3, #31
 8005608:	4907      	ldr	r1, [pc, #28]	@ (8005628 <__NVIC_EnableIRQ+0x38>)
 800560a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	2001      	movs	r0, #1
 8005612:	fa00 f202 	lsl.w	r2, r0, r2
 8005616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	e000e100 	.word	0xe000e100

0800562c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	6039      	str	r1, [r7, #0]
 8005636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563c:	2b00      	cmp	r3, #0
 800563e:	db0a      	blt.n	8005656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	b2da      	uxtb	r2, r3
 8005644:	490c      	ldr	r1, [pc, #48]	@ (8005678 <__NVIC_SetPriority+0x4c>)
 8005646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564a:	0112      	lsls	r2, r2, #4
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	440b      	add	r3, r1
 8005650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005654:	e00a      	b.n	800566c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	b2da      	uxtb	r2, r3
 800565a:	4908      	ldr	r1, [pc, #32]	@ (800567c <__NVIC_SetPriority+0x50>)
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	3b04      	subs	r3, #4
 8005664:	0112      	lsls	r2, r2, #4
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	440b      	add	r3, r1
 800566a:	761a      	strb	r2, [r3, #24]
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	e000e100 	.word	0xe000e100
 800567c:	e000ed00 	.word	0xe000ed00

08005680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005680:	b480      	push	{r7}
 8005682:	b089      	sub	sp, #36	@ 0x24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f1c3 0307 	rsb	r3, r3, #7
 800569a:	2b04      	cmp	r3, #4
 800569c:	bf28      	it	cs
 800569e:	2304      	movcs	r3, #4
 80056a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	3304      	adds	r3, #4
 80056a6:	2b06      	cmp	r3, #6
 80056a8:	d902      	bls.n	80056b0 <NVIC_EncodePriority+0x30>
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	3b03      	subs	r3, #3
 80056ae:	e000      	b.n	80056b2 <NVIC_EncodePriority+0x32>
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056b4:	f04f 32ff 	mov.w	r2, #4294967295
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	43da      	mvns	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	401a      	ands	r2, r3
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056c8:	f04f 31ff 	mov.w	r1, #4294967295
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	fa01 f303 	lsl.w	r3, r1, r3
 80056d2:	43d9      	mvns	r1, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d8:	4313      	orrs	r3, r2
         );
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3724      	adds	r7, #36	@ 0x24
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056f8:	d301      	bcc.n	80056fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056fa:	2301      	movs	r3, #1
 80056fc:	e00f      	b.n	800571e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005728 <SysTick_Config+0x40>)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3b01      	subs	r3, #1
 8005704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005706:	210f      	movs	r1, #15
 8005708:	f04f 30ff 	mov.w	r0, #4294967295
 800570c:	f7ff ff8e 	bl	800562c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005710:	4b05      	ldr	r3, [pc, #20]	@ (8005728 <SysTick_Config+0x40>)
 8005712:	2200      	movs	r2, #0
 8005714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005716:	4b04      	ldr	r3, [pc, #16]	@ (8005728 <SysTick_Config+0x40>)
 8005718:	2207      	movs	r2, #7
 800571a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	e000e010 	.word	0xe000e010

0800572c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff ff29 	bl	800558c <__NVIC_SetPriorityGrouping>
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b086      	sub	sp, #24
 8005746:	af00      	add	r7, sp, #0
 8005748:	4603      	mov	r3, r0
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005750:	f7ff ff40 	bl	80055d4 <__NVIC_GetPriorityGrouping>
 8005754:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	6978      	ldr	r0, [r7, #20]
 800575c:	f7ff ff90 	bl	8005680 <NVIC_EncodePriority>
 8005760:	4602      	mov	r2, r0
 8005762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005766:	4611      	mov	r1, r2
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff ff5f 	bl	800562c <__NVIC_SetPriority>
}
 800576e:	bf00      	nop
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	4603      	mov	r3, r0
 800577e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff ff33 	bl	80055f0 <__NVIC_EnableIRQ>
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff ffa4 	bl	80056e8 <SysTick_Config>
 80057a0:	4603      	mov	r3, r0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e08d      	b.n	80058da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	4b47      	ldr	r3, [pc, #284]	@ (80058e4 <HAL_DMA_Init+0x138>)
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d80f      	bhi.n	80057ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	4b45      	ldr	r3, [pc, #276]	@ (80058e8 <HAL_DMA_Init+0x13c>)
 80057d2:	4413      	add	r3, r2
 80057d4:	4a45      	ldr	r2, [pc, #276]	@ (80058ec <HAL_DMA_Init+0x140>)
 80057d6:	fba2 2303 	umull	r2, r3, r2, r3
 80057da:	091b      	lsrs	r3, r3, #4
 80057dc:	009a      	lsls	r2, r3, #2
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a42      	ldr	r2, [pc, #264]	@ (80058f0 <HAL_DMA_Init+0x144>)
 80057e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80057e8:	e00e      	b.n	8005808 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	4b40      	ldr	r3, [pc, #256]	@ (80058f4 <HAL_DMA_Init+0x148>)
 80057f2:	4413      	add	r3, r2
 80057f4:	4a3d      	ldr	r2, [pc, #244]	@ (80058ec <HAL_DMA_Init+0x140>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	091b      	lsrs	r3, r3, #4
 80057fc:	009a      	lsls	r2, r3, #2
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a3c      	ldr	r2, [pc, #240]	@ (80058f8 <HAL_DMA_Init+0x14c>)
 8005806:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800581e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005822:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800582c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa76 	bl	8005d4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005868:	d102      	bne.n	8005870 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005884:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d010      	beq.n	80058b0 <HAL_DMA_Init+0x104>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b04      	cmp	r3, #4
 8005894:	d80c      	bhi.n	80058b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fa96 	bl	8005dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80058ac:	605a      	str	r2, [r3, #4]
 80058ae:	e008      	b.n	80058c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40020407 	.word	0x40020407
 80058e8:	bffdfff8 	.word	0xbffdfff8
 80058ec:	cccccccd 	.word	0xcccccccd
 80058f0:	40020000 	.word	0x40020000
 80058f4:	bffdfbf8 	.word	0xbffdfbf8
 80058f8:	40020400 	.word	0x40020400

080058fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_DMA_Start_IT+0x20>
 8005918:	2302      	movs	r3, #2
 800591a:	e066      	b.n	80059ea <HAL_DMA_Start_IT+0xee>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d155      	bne.n	80059dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f9bb 	bl	8005cd0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595e:	2b00      	cmp	r3, #0
 8005960:	d008      	beq.n	8005974 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 020e 	orr.w	r2, r2, #14
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	e00f      	b.n	8005994 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0204 	bic.w	r2, r2, #4
 8005982:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 020a 	orr.w	r2, r2, #10
 8005992:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e005      	b.n	80059e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80059e4:	2302      	movs	r3, #2
 80059e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d005      	beq.n	8005a16 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2204      	movs	r2, #4
 8005a0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	73fb      	strb	r3, [r7, #15]
 8005a14:	e037      	b.n	8005a86 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 020e 	bic.w	r2, r2, #14
 8005a24:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a34:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4a:	f003 021f 	and.w	r2, r3, #31
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	2101      	movs	r1, #1
 8005a54:	fa01 f202 	lsl.w	r2, r1, r2
 8005a58:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a62:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00c      	beq.n	8005a86 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a7a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a84:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d00d      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	73fb      	strb	r3, [r7, #15]
 8005ad6:	e047      	b.n	8005b68 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 020e 	bic.w	r2, r2, #14
 8005ae6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0c:	f003 021f 	and.w	r2, r3, #31
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b14:	2101      	movs	r1, #1
 8005b16:	fa01 f202 	lsl.w	r2, r1, r2
 8005b1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00c      	beq.n	8005b48 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4798      	blx	r3
    }
  }
  return status;
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2204      	movs	r2, #4
 8005b94:	409a      	lsls	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d026      	beq.n	8005bec <HAL_DMA_IRQHandler+0x7a>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d021      	beq.n	8005bec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d107      	bne.n	8005bc6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0204 	bic.w	r2, r2, #4
 8005bc4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bca:	f003 021f 	and.w	r2, r3, #31
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd2:	2104      	movs	r1, #4
 8005bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d071      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005bea:	e06c      	b.n	8005cc6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	409a      	lsls	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d02e      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d029      	beq.n	8005c5e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 020a 	bic.w	r2, r2, #10
 8005c26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c34:	f003 021f 	and.w	r2, r3, #31
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3c:	2102      	movs	r1, #2
 8005c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d038      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005c5c:	e033      	b.n	8005cc6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c62:	f003 031f 	and.w	r3, r3, #31
 8005c66:	2208      	movs	r2, #8
 8005c68:	409a      	lsls	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d02a      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d025      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 020e 	bic.w	r2, r2, #14
 8005c8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c90:	f003 021f 	and.w	r2, r3, #31
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c98:	2101      	movs	r1, #1
 8005c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
}
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ce6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d004      	beq.n	8005cfa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005cf8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfe:	f003 021f 	and.w	r2, r3, #31
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	2101      	movs	r1, #1
 8005d08:	fa01 f202 	lsl.w	r2, r1, r2
 8005d0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b10      	cmp	r3, #16
 8005d1c:	d108      	bne.n	8005d30 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d2e:	e007      	b.n	8005d40 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	60da      	str	r2, [r3, #12]
}
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4b16      	ldr	r3, [pc, #88]	@ (8005db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d802      	bhi.n	8005d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005d60:	4b15      	ldr	r3, [pc, #84]	@ (8005db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e001      	b.n	8005d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005d66:	4b15      	ldr	r3, [pc, #84]	@ (8005dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005d68:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	3b08      	subs	r3, #8
 8005d76:	4a12      	ldr	r2, [pc, #72]	@ (8005dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	091b      	lsrs	r3, r3, #4
 8005d7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d84:	089b      	lsrs	r3, r3, #2
 8005d86:	009a      	lsls	r2, r3, #2
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a0b      	ldr	r2, [pc, #44]	@ (8005dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005d96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2201      	movs	r2, #1
 8005da0:	409a      	lsls	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40020407 	.word	0x40020407
 8005db8:	40020800 	.word	0x40020800
 8005dbc:	40020820 	.word	0x40020820
 8005dc0:	cccccccd 	.word	0xcccccccd
 8005dc4:	40020880 	.word	0x40020880

08005dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4b0b      	ldr	r3, [pc, #44]	@ (8005e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	461a      	mov	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a08      	ldr	r2, [pc, #32]	@ (8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005dea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	f003 031f 	and.w	r3, r3, #31
 8005df4:	2201      	movs	r2, #1
 8005df6:	409a      	lsls	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005dfc:	bf00      	nop
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	1000823f 	.word	0x1000823f
 8005e0c:	40020940 	.word	0x40020940

08005e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e1e:	e15a      	b.n	80060d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	2101      	movs	r1, #1
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 814c 	beq.w	80060d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d005      	beq.n	8005e50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d130      	bne.n	8005eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	2203      	movs	r2, #3
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	43db      	mvns	r3, r3
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4013      	ands	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e86:	2201      	movs	r2, #1
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4013      	ands	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	091b      	lsrs	r3, r3, #4
 8005e9c:	f003 0201 	and.w	r2, r3, #1
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d017      	beq.n	8005eee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	2203      	movs	r2, #3
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d123      	bne.n	8005f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	08da      	lsrs	r2, r3, #3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3208      	adds	r2, #8
 8005f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	220f      	movs	r2, #15
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	43db      	mvns	r3, r3
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	08da      	lsrs	r2, r3, #3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3208      	adds	r2, #8
 8005f3c:	6939      	ldr	r1, [r7, #16]
 8005f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	2203      	movs	r2, #3
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	43db      	mvns	r3, r3
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4013      	ands	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f003 0203 	and.w	r2, r3, #3
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80a6 	beq.w	80060d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f84:	4b5b      	ldr	r3, [pc, #364]	@ (80060f4 <HAL_GPIO_Init+0x2e4>)
 8005f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f88:	4a5a      	ldr	r2, [pc, #360]	@ (80060f4 <HAL_GPIO_Init+0x2e4>)
 8005f8a:	f043 0301 	orr.w	r3, r3, #1
 8005f8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f90:	4b58      	ldr	r3, [pc, #352]	@ (80060f4 <HAL_GPIO_Init+0x2e4>)
 8005f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f9c:	4a56      	ldr	r2, [pc, #344]	@ (80060f8 <HAL_GPIO_Init+0x2e8>)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	089b      	lsrs	r3, r3, #2
 8005fa2:	3302      	adds	r3, #2
 8005fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	220f      	movs	r2, #15
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005fc6:	d01f      	beq.n	8006008 <HAL_GPIO_Init+0x1f8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a4c      	ldr	r2, [pc, #304]	@ (80060fc <HAL_GPIO_Init+0x2ec>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d019      	beq.n	8006004 <HAL_GPIO_Init+0x1f4>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a4b      	ldr	r2, [pc, #300]	@ (8006100 <HAL_GPIO_Init+0x2f0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <HAL_GPIO_Init+0x1f0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a4a      	ldr	r2, [pc, #296]	@ (8006104 <HAL_GPIO_Init+0x2f4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00d      	beq.n	8005ffc <HAL_GPIO_Init+0x1ec>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a49      	ldr	r2, [pc, #292]	@ (8006108 <HAL_GPIO_Init+0x2f8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d007      	beq.n	8005ff8 <HAL_GPIO_Init+0x1e8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a48      	ldr	r2, [pc, #288]	@ (800610c <HAL_GPIO_Init+0x2fc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d101      	bne.n	8005ff4 <HAL_GPIO_Init+0x1e4>
 8005ff0:	2305      	movs	r3, #5
 8005ff2:	e00a      	b.n	800600a <HAL_GPIO_Init+0x1fa>
 8005ff4:	2306      	movs	r3, #6
 8005ff6:	e008      	b.n	800600a <HAL_GPIO_Init+0x1fa>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	e006      	b.n	800600a <HAL_GPIO_Init+0x1fa>
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e004      	b.n	800600a <HAL_GPIO_Init+0x1fa>
 8006000:	2302      	movs	r3, #2
 8006002:	e002      	b.n	800600a <HAL_GPIO_Init+0x1fa>
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <HAL_GPIO_Init+0x1fa>
 8006008:	2300      	movs	r3, #0
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	f002 0203 	and.w	r2, r2, #3
 8006010:	0092      	lsls	r2, r2, #2
 8006012:	4093      	lsls	r3, r2
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800601a:	4937      	ldr	r1, [pc, #220]	@ (80060f8 <HAL_GPIO_Init+0x2e8>)
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	089b      	lsrs	r3, r3, #2
 8006020:	3302      	adds	r3, #2
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006028:	4b39      	ldr	r3, [pc, #228]	@ (8006110 <HAL_GPIO_Init+0x300>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	43db      	mvns	r3, r3
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4013      	ands	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800604c:	4a30      	ldr	r2, [pc, #192]	@ (8006110 <HAL_GPIO_Init+0x300>)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006052:	4b2f      	ldr	r3, [pc, #188]	@ (8006110 <HAL_GPIO_Init+0x300>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	43db      	mvns	r3, r3
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4013      	ands	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006076:	4a26      	ldr	r2, [pc, #152]	@ (8006110 <HAL_GPIO_Init+0x300>)
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800607c:	4b24      	ldr	r3, [pc, #144]	@ (8006110 <HAL_GPIO_Init+0x300>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	43db      	mvns	r3, r3
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4013      	ands	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80060a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006110 <HAL_GPIO_Init+0x300>)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80060a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006110 <HAL_GPIO_Init+0x300>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	43db      	mvns	r3, r3
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4013      	ands	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80060ca:	4a11      	ldr	r2, [pc, #68]	@ (8006110 <HAL_GPIO_Init+0x300>)
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	3301      	adds	r3, #1
 80060d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	fa22 f303 	lsr.w	r3, r2, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f47f ae9d 	bne.w	8005e20 <HAL_GPIO_Init+0x10>
  }
}
 80060e6:	bf00      	nop
 80060e8:	bf00      	nop
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	40021000 	.word	0x40021000
 80060f8:	40010000 	.word	0x40010000
 80060fc:	48000400 	.word	0x48000400
 8006100:	48000800 	.word	0x48000800
 8006104:	48000c00 	.word	0x48000c00
 8006108:	48001000 	.word	0x48001000
 800610c:	48001400 	.word	0x48001400
 8006110:	40010400 	.word	0x40010400

08006114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	887b      	ldrh	r3, [r7, #2]
 8006126:	4013      	ands	r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
 8006130:	e001      	b.n	8006136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	807b      	strh	r3, [r7, #2]
 8006150:	4613      	mov	r3, r2
 8006152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006154:	787b      	ldrb	r3, [r7, #1]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800615a:	887a      	ldrh	r2, [r7, #2]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006160:	e002      	b.n	8006168 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006162:	887a      	ldrh	r2, [r7, #2]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800617e:	4b08      	ldr	r3, [pc, #32]	@ (80061a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006180:	695a      	ldr	r2, [r3, #20]
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	4013      	ands	r3, r2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d006      	beq.n	8006198 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800618a:	4a05      	ldr	r2, [pc, #20]	@ (80061a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	4618      	mov	r0, r3
 8006194:	f000 f806 	bl	80061a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40010400 	.word	0x40010400

080061a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	4603      	mov	r3, r0
 80061ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
	...

080061bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d141      	bne.n	800624e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061ca:	4b4b      	ldr	r3, [pc, #300]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d6:	d131      	bne.n	800623c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061d8:	4b47      	ldr	r3, [pc, #284]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061de:	4a46      	ldr	r2, [pc, #280]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061e8:	4b43      	ldr	r3, [pc, #268]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061f0:	4a41      	ldr	r2, [pc, #260]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061f8:	4b40      	ldr	r3, [pc, #256]	@ (80062fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2232      	movs	r2, #50	@ 0x32
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	4a3f      	ldr	r2, [pc, #252]	@ (8006300 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006204:	fba2 2303 	umull	r2, r3, r2, r3
 8006208:	0c9b      	lsrs	r3, r3, #18
 800620a:	3301      	adds	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800620e:	e002      	b.n	8006216 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3b01      	subs	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006216:	4b38      	ldr	r3, [pc, #224]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800621e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006222:	d102      	bne.n	800622a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f2      	bne.n	8006210 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800622a:	4b33      	ldr	r3, [pc, #204]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006236:	d158      	bne.n	80062ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e057      	b.n	80062ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800623c:	4b2e      	ldr	r3, [pc, #184]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800623e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006242:	4a2d      	ldr	r2, [pc, #180]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006248:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800624c:	e04d      	b.n	80062ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006254:	d141      	bne.n	80062da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006256:	4b28      	ldr	r3, [pc, #160]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800625e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006262:	d131      	bne.n	80062c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006264:	4b24      	ldr	r3, [pc, #144]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800626a:	4a23      	ldr	r2, [pc, #140]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800626c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006270:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006274:	4b20      	ldr	r3, [pc, #128]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800627c:	4a1e      	ldr	r2, [pc, #120]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800627e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006282:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006284:	4b1d      	ldr	r3, [pc, #116]	@ (80062fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2232      	movs	r2, #50	@ 0x32
 800628a:	fb02 f303 	mul.w	r3, r2, r3
 800628e:	4a1c      	ldr	r2, [pc, #112]	@ (8006300 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006290:	fba2 2303 	umull	r2, r3, r2, r3
 8006294:	0c9b      	lsrs	r3, r3, #18
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800629a:	e002      	b.n	80062a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3b01      	subs	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062a2:	4b15      	ldr	r3, [pc, #84]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ae:	d102      	bne.n	80062b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f2      	bne.n	800629c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062b6:	4b10      	ldr	r3, [pc, #64]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c2:	d112      	bne.n	80062ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e011      	b.n	80062ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062c8:	4b0b      	ldr	r3, [pc, #44]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062ce:	4a0a      	ldr	r2, [pc, #40]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80062d8:	e007      	b.n	80062ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062da:	4b07      	ldr	r3, [pc, #28]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062e2:	4a05      	ldr	r2, [pc, #20]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	40007000 	.word	0x40007000
 80062fc:	2000021c 	.word	0x2000021c
 8006300:	431bde83 	.word	0x431bde83

08006304 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006308:	4b05      	ldr	r3, [pc, #20]	@ (8006320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	4a04      	ldr	r2, [pc, #16]	@ (8006320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800630e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006312:	6093      	str	r3, [r2, #8]
}
 8006314:	bf00      	nop
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40007000 	.word	0x40007000

08006324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e2fe      	b.n	8006934 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d075      	beq.n	800642e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006342:	4b97      	ldr	r3, [pc, #604]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 030c 	and.w	r3, r3, #12
 800634a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800634c:	4b94      	ldr	r3, [pc, #592]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	2b0c      	cmp	r3, #12
 800635a:	d102      	bne.n	8006362 <HAL_RCC_OscConfig+0x3e>
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2b03      	cmp	r3, #3
 8006360:	d002      	beq.n	8006368 <HAL_RCC_OscConfig+0x44>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d10b      	bne.n	8006380 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006368:	4b8d      	ldr	r3, [pc, #564]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d05b      	beq.n	800642c <HAL_RCC_OscConfig+0x108>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d157      	bne.n	800642c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e2d9      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006388:	d106      	bne.n	8006398 <HAL_RCC_OscConfig+0x74>
 800638a:	4b85      	ldr	r3, [pc, #532]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a84      	ldr	r2, [pc, #528]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	e01d      	b.n	80063d4 <HAL_RCC_OscConfig+0xb0>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063a0:	d10c      	bne.n	80063bc <HAL_RCC_OscConfig+0x98>
 80063a2:	4b7f      	ldr	r3, [pc, #508]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a7e      	ldr	r2, [pc, #504]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	4b7c      	ldr	r3, [pc, #496]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a7b      	ldr	r2, [pc, #492]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e00b      	b.n	80063d4 <HAL_RCC_OscConfig+0xb0>
 80063bc:	4b78      	ldr	r3, [pc, #480]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a77      	ldr	r2, [pc, #476]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	4b75      	ldr	r3, [pc, #468]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a74      	ldr	r2, [pc, #464]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d013      	beq.n	8006404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063dc:	f7ff f8ca 	bl	8005574 <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063e4:	f7ff f8c6 	bl	8005574 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b64      	cmp	r3, #100	@ 0x64
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e29e      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063f6:	4b6a      	ldr	r3, [pc, #424]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0f0      	beq.n	80063e4 <HAL_RCC_OscConfig+0xc0>
 8006402:	e014      	b.n	800642e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006404:	f7ff f8b6 	bl	8005574 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800640c:	f7ff f8b2 	bl	8005574 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b64      	cmp	r3, #100	@ 0x64
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e28a      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800641e:	4b60      	ldr	r3, [pc, #384]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f0      	bne.n	800640c <HAL_RCC_OscConfig+0xe8>
 800642a:	e000      	b.n	800642e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800642c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d075      	beq.n	8006526 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800643a:	4b59      	ldr	r3, [pc, #356]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 030c 	and.w	r3, r3, #12
 8006442:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006444:	4b56      	ldr	r3, [pc, #344]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b0c      	cmp	r3, #12
 8006452:	d102      	bne.n	800645a <HAL_RCC_OscConfig+0x136>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d002      	beq.n	8006460 <HAL_RCC_OscConfig+0x13c>
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b04      	cmp	r3, #4
 800645e:	d11f      	bne.n	80064a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006460:	4b4f      	ldr	r3, [pc, #316]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_RCC_OscConfig+0x154>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e25d      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006478:	4b49      	ldr	r3, [pc, #292]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	061b      	lsls	r3, r3, #24
 8006486:	4946      	ldr	r1, [pc, #280]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006488:	4313      	orrs	r3, r2
 800648a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800648c:	4b45      	ldr	r3, [pc, #276]	@ (80065a4 <HAL_RCC_OscConfig+0x280>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff f823 	bl	80054dc <HAL_InitTick>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d043      	beq.n	8006524 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e249      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d023      	beq.n	80064f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a8:	4b3d      	ldr	r3, [pc, #244]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a3c      	ldr	r2, [pc, #240]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b4:	f7ff f85e 	bl	8005574 <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064bc:	f7ff f85a 	bl	8005574 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e232      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064ce:	4b34      	ldr	r3, [pc, #208]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0f0      	beq.n	80064bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064da:	4b31      	ldr	r3, [pc, #196]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	061b      	lsls	r3, r3, #24
 80064e8:	492d      	ldr	r1, [pc, #180]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	604b      	str	r3, [r1, #4]
 80064ee:	e01a      	b.n	8006526 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064f0:	4b2b      	ldr	r3, [pc, #172]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a2a      	ldr	r2, [pc, #168]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fc:	f7ff f83a 	bl	8005574 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006504:	f7ff f836 	bl	8005574 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e20e      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006516:	4b22      	ldr	r3, [pc, #136]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f0      	bne.n	8006504 <HAL_RCC_OscConfig+0x1e0>
 8006522:	e000      	b.n	8006526 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006524:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d041      	beq.n	80065b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01c      	beq.n	8006574 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800653a:	4b19      	ldr	r3, [pc, #100]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800653c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006540:	4a17      	ldr	r2, [pc, #92]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654a:	f7ff f813 	bl	8005574 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006552:	f7ff f80f 	bl	8005574 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e1e7      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006564:	4b0e      	ldr	r3, [pc, #56]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0ef      	beq.n	8006552 <HAL_RCC_OscConfig+0x22e>
 8006572:	e020      	b.n	80065b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006574:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800657a:	4a09      	ldr	r2, [pc, #36]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800657c:	f023 0301 	bic.w	r3, r3, #1
 8006580:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006584:	f7fe fff6 	bl	8005574 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800658a:	e00d      	b.n	80065a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800658c:	f7fe fff2 	bl	8005574 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d906      	bls.n	80065a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e1ca      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
 800659e:	bf00      	nop
 80065a0:	40021000 	.word	0x40021000
 80065a4:	20000220 	.word	0x20000220
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065a8:	4b8c      	ldr	r3, [pc, #560]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80065aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1ea      	bne.n	800658c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80a6 	beq.w	8006710 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065c4:	2300      	movs	r3, #0
 80065c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065c8:	4b84      	ldr	r3, [pc, #528]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80065ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_RCC_OscConfig+0x2b4>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <HAL_RCC_OscConfig+0x2b6>
 80065d8:	2300      	movs	r3, #0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00d      	beq.n	80065fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065de:	4b7f      	ldr	r3, [pc, #508]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80065e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e2:	4a7e      	ldr	r2, [pc, #504]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80065e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80065ea:	4b7c      	ldr	r3, [pc, #496]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80065ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80065f6:	2301      	movs	r3, #1
 80065f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065fa:	4b79      	ldr	r3, [pc, #484]	@ (80067e0 <HAL_RCC_OscConfig+0x4bc>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006602:	2b00      	cmp	r3, #0
 8006604:	d118      	bne.n	8006638 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006606:	4b76      	ldr	r3, [pc, #472]	@ (80067e0 <HAL_RCC_OscConfig+0x4bc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a75      	ldr	r2, [pc, #468]	@ (80067e0 <HAL_RCC_OscConfig+0x4bc>)
 800660c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006612:	f7fe ffaf 	bl	8005574 <HAL_GetTick>
 8006616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006618:	e008      	b.n	800662c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800661a:	f7fe ffab 	bl	8005574 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b02      	cmp	r3, #2
 8006626:	d901      	bls.n	800662c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e183      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800662c:	4b6c      	ldr	r3, [pc, #432]	@ (80067e0 <HAL_RCC_OscConfig+0x4bc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0f0      	beq.n	800661a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d108      	bne.n	8006652 <HAL_RCC_OscConfig+0x32e>
 8006640:	4b66      	ldr	r3, [pc, #408]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006646:	4a65      	ldr	r2, [pc, #404]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006648:	f043 0301 	orr.w	r3, r3, #1
 800664c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006650:	e024      	b.n	800669c <HAL_RCC_OscConfig+0x378>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b05      	cmp	r3, #5
 8006658:	d110      	bne.n	800667c <HAL_RCC_OscConfig+0x358>
 800665a:	4b60      	ldr	r3, [pc, #384]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006660:	4a5e      	ldr	r2, [pc, #376]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006662:	f043 0304 	orr.w	r3, r3, #4
 8006666:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800666a:	4b5c      	ldr	r3, [pc, #368]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006670:	4a5a      	ldr	r2, [pc, #360]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800667a:	e00f      	b.n	800669c <HAL_RCC_OscConfig+0x378>
 800667c:	4b57      	ldr	r3, [pc, #348]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800667e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006682:	4a56      	ldr	r2, [pc, #344]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006684:	f023 0301 	bic.w	r3, r3, #1
 8006688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800668c:	4b53      	ldr	r3, [pc, #332]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800668e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006692:	4a52      	ldr	r2, [pc, #328]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006694:	f023 0304 	bic.w	r3, r3, #4
 8006698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d016      	beq.n	80066d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a4:	f7fe ff66 	bl	8005574 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066aa:	e00a      	b.n	80066c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ac:	f7fe ff62 	bl	8005574 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e138      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066c2:	4b46      	ldr	r3, [pc, #280]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80066c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0ed      	beq.n	80066ac <HAL_RCC_OscConfig+0x388>
 80066d0:	e015      	b.n	80066fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d2:	f7fe ff4f 	bl	8005574 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066d8:	e00a      	b.n	80066f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066da:	f7fe ff4b 	bl	8005574 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e121      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066f0:	4b3a      	ldr	r3, [pc, #232]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80066f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1ed      	bne.n	80066da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066fe:	7ffb      	ldrb	r3, [r7, #31]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d105      	bne.n	8006710 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006704:	4b35      	ldr	r3, [pc, #212]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006708:	4a34      	ldr	r2, [pc, #208]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800670a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800670e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b00      	cmp	r3, #0
 800671a:	d03c      	beq.n	8006796 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01c      	beq.n	800675e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006724:	4b2d      	ldr	r3, [pc, #180]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006726:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800672a:	4a2c      	ldr	r2, [pc, #176]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006734:	f7fe ff1e 	bl	8005574 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800673c:	f7fe ff1a 	bl	8005574 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e0f2      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800674e:	4b23      	ldr	r3, [pc, #140]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006750:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0ef      	beq.n	800673c <HAL_RCC_OscConfig+0x418>
 800675c:	e01b      	b.n	8006796 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800675e:	4b1f      	ldr	r3, [pc, #124]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006760:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006764:	4a1d      	ldr	r2, [pc, #116]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676e:	f7fe ff01 	bl	8005574 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006776:	f7fe fefd 	bl	8005574 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e0d5      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006788:	4b14      	ldr	r3, [pc, #80]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800678a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1ef      	bne.n	8006776 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 80c9 	beq.w	8006932 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067a0:	4b0e      	ldr	r3, [pc, #56]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 030c 	and.w	r3, r3, #12
 80067a8:	2b0c      	cmp	r3, #12
 80067aa:	f000 8083 	beq.w	80068b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d15e      	bne.n	8006874 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b6:	4b09      	ldr	r3, [pc, #36]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a08      	ldr	r2, [pc, #32]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80067bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c2:	f7fe fed7 	bl	8005574 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067c8:	e00c      	b.n	80067e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ca:	f7fe fed3 	bl	8005574 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d905      	bls.n	80067e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e0ab      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
 80067dc:	40021000 	.word	0x40021000
 80067e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067e4:	4b55      	ldr	r3, [pc, #340]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1ec      	bne.n	80067ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067f0:	4b52      	ldr	r3, [pc, #328]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	4b52      	ldr	r3, [pc, #328]	@ (8006940 <HAL_RCC_OscConfig+0x61c>)
 80067f6:	4013      	ands	r3, r2
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6a11      	ldr	r1, [r2, #32]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006800:	3a01      	subs	r2, #1
 8006802:	0112      	lsls	r2, r2, #4
 8006804:	4311      	orrs	r1, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800680a:	0212      	lsls	r2, r2, #8
 800680c:	4311      	orrs	r1, r2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006812:	0852      	lsrs	r2, r2, #1
 8006814:	3a01      	subs	r2, #1
 8006816:	0552      	lsls	r2, r2, #21
 8006818:	4311      	orrs	r1, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800681e:	0852      	lsrs	r2, r2, #1
 8006820:	3a01      	subs	r2, #1
 8006822:	0652      	lsls	r2, r2, #25
 8006824:	4311      	orrs	r1, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800682a:	06d2      	lsls	r2, r2, #27
 800682c:	430a      	orrs	r2, r1
 800682e:	4943      	ldr	r1, [pc, #268]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 8006830:	4313      	orrs	r3, r2
 8006832:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006834:	4b41      	ldr	r3, [pc, #260]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a40      	ldr	r2, [pc, #256]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 800683a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800683e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006840:	4b3e      	ldr	r3, [pc, #248]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	4a3d      	ldr	r2, [pc, #244]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 8006846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800684a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684c:	f7fe fe92 	bl	8005574 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006854:	f7fe fe8e 	bl	8005574 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e066      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006866:	4b35      	ldr	r3, [pc, #212]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0f0      	beq.n	8006854 <HAL_RCC_OscConfig+0x530>
 8006872:	e05e      	b.n	8006932 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006874:	4b31      	ldr	r3, [pc, #196]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a30      	ldr	r2, [pc, #192]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 800687a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800687e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fe fe78 	bl	8005574 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006888:	f7fe fe74 	bl	8005574 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e04c      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800689a:	4b28      	ldr	r3, [pc, #160]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80068a6:	4b25      	ldr	r3, [pc, #148]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	4924      	ldr	r1, [pc, #144]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 80068ac:	4b25      	ldr	r3, [pc, #148]	@ (8006944 <HAL_RCC_OscConfig+0x620>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	60cb      	str	r3, [r1, #12]
 80068b2:	e03e      	b.n	8006932 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e039      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80068c0:	4b1e      	ldr	r3, [pc, #120]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f003 0203 	and.w	r2, r3, #3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d12c      	bne.n	800692e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068de:	3b01      	subs	r3, #1
 80068e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d123      	bne.n	800692e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d11b      	bne.n	800692e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006902:	429a      	cmp	r2, r3
 8006904:	d113      	bne.n	800692e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006910:	085b      	lsrs	r3, r3, #1
 8006912:	3b01      	subs	r3, #1
 8006914:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006916:	429a      	cmp	r2, r3
 8006918:	d109      	bne.n	800692e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006924:	085b      	lsrs	r3, r3, #1
 8006926:	3b01      	subs	r3, #1
 8006928:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800692a:	429a      	cmp	r2, r3
 800692c:	d001      	beq.n	8006932 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3720      	adds	r7, #32
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40021000 	.word	0x40021000
 8006940:	019f800c 	.word	0x019f800c
 8006944:	feeefffc 	.word	0xfeeefffc

08006948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006952:	2300      	movs	r3, #0
 8006954:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e11e      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006960:	4b91      	ldr	r3, [pc, #580]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d910      	bls.n	8006990 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696e:	4b8e      	ldr	r3, [pc, #568]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f023 020f 	bic.w	r2, r3, #15
 8006976:	498c      	ldr	r1, [pc, #560]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	4313      	orrs	r3, r2
 800697c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800697e:	4b8a      	ldr	r3, [pc, #552]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d001      	beq.n	8006990 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e106      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d073      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d129      	bne.n	80069f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069a4:	4b81      	ldr	r3, [pc, #516]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0f4      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80069b4:	f000 f99e 	bl	8006cf4 <RCC_GetSysClockFreqFromPLLSource>
 80069b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	4a7c      	ldr	r2, [pc, #496]	@ (8006bb0 <HAL_RCC_ClockConfig+0x268>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d93f      	bls.n	8006a42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80069c2:	4b7a      	ldr	r3, [pc, #488]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d033      	beq.n	8006a42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d12f      	bne.n	8006a42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069e2:	4b72      	ldr	r3, [pc, #456]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ea:	4a70      	ldr	r2, [pc, #448]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 80069ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80069f2:	2380      	movs	r3, #128	@ 0x80
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	e024      	b.n	8006a42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d107      	bne.n	8006a10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a00:	4b6a      	ldr	r3, [pc, #424]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d109      	bne.n	8006a20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e0c6      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a10:	4b66      	ldr	r3, [pc, #408]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0be      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006a20:	f000 f8ce 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 8006a24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	4a61      	ldr	r2, [pc, #388]	@ (8006bb0 <HAL_RCC_ClockConfig+0x268>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d909      	bls.n	8006a42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a2e:	4b5f      	ldr	r3, [pc, #380]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a36:	4a5d      	ldr	r2, [pc, #372]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006a3e:	2380      	movs	r3, #128	@ 0x80
 8006a40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a42:	4b5a      	ldr	r3, [pc, #360]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f023 0203 	bic.w	r2, r3, #3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4957      	ldr	r1, [pc, #348]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a54:	f7fe fd8e 	bl	8005574 <HAL_GetTick>
 8006a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a5c:	f7fe fd8a 	bl	8005574 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e095      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a72:	4b4e      	ldr	r3, [pc, #312]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 020c 	and.w	r2, r3, #12
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d1eb      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d023      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a9c:	4b43      	ldr	r3, [pc, #268]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4a42      	ldr	r2, [pc, #264]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006aa2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006aa6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006ab4:	4b3d      	ldr	r3, [pc, #244]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006abc:	4a3b      	ldr	r2, [pc, #236]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006abe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ac2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ac4:	4b39      	ldr	r3, [pc, #228]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	4936      	ldr	r1, [pc, #216]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	608b      	str	r3, [r1, #8]
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2b80      	cmp	r3, #128	@ 0x80
 8006adc:	d105      	bne.n	8006aea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006ade:	4b33      	ldr	r3, [pc, #204]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	4a32      	ldr	r2, [pc, #200]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006ae4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ae8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006aea:	4b2f      	ldr	r3, [pc, #188]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d21d      	bcs.n	8006b34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af8:	4b2b      	ldr	r3, [pc, #172]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f023 020f 	bic.w	r2, r3, #15
 8006b00:	4929      	ldr	r1, [pc, #164]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b08:	f7fe fd34 	bl	8005574 <HAL_GetTick>
 8006b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b0e:	e00a      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b10:	f7fe fd30 	bl	8005574 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e03b      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b26:	4b20      	ldr	r3, [pc, #128]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d1ed      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d008      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b40:	4b1a      	ldr	r3, [pc, #104]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4917      	ldr	r1, [pc, #92]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b5e:	4b13      	ldr	r3, [pc, #76]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	490f      	ldr	r1, [pc, #60]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b72:	f000 f825 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 8006b76:	4602      	mov	r2, r0
 8006b78:	4b0c      	ldr	r3, [pc, #48]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	091b      	lsrs	r3, r3, #4
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	490c      	ldr	r1, [pc, #48]	@ (8006bb4 <HAL_RCC_ClockConfig+0x26c>)
 8006b84:	5ccb      	ldrb	r3, [r1, r3]
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb8 <HAL_RCC_ClockConfig+0x270>)
 8006b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b92:	4b0a      	ldr	r3, [pc, #40]	@ (8006bbc <HAL_RCC_ClockConfig+0x274>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fe fca0 	bl	80054dc <HAL_InitTick>
 8006b9c:	4603      	mov	r3, r0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40022000 	.word	0x40022000
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	04c4b400 	.word	0x04c4b400
 8006bb4:	0800bd90 	.word	0x0800bd90
 8006bb8:	2000021c 	.word	0x2000021c
 8006bbc:	20000220 	.word	0x20000220

08006bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 030c 	and.w	r3, r3, #12
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d102      	bne.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	e047      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006bd8:	4b27      	ldr	r3, [pc, #156]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 030c 	and.w	r3, r3, #12
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d102      	bne.n	8006bea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006be4:	4b26      	ldr	r3, [pc, #152]	@ (8006c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	e03e      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006bea:	4b23      	ldr	r3, [pc, #140]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 030c 	and.w	r3, r3, #12
 8006bf2:	2b0c      	cmp	r3, #12
 8006bf4:	d136      	bne.n	8006c64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bf6:	4b20      	ldr	r3, [pc, #128]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c00:	4b1d      	ldr	r3, [pc, #116]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	091b      	lsrs	r3, r3, #4
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d10c      	bne.n	8006c2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c14:	4a1a      	ldr	r2, [pc, #104]	@ (8006c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1c:	4a16      	ldr	r2, [pc, #88]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c1e:	68d2      	ldr	r2, [r2, #12]
 8006c20:	0a12      	lsrs	r2, r2, #8
 8006c22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c26:	fb02 f303 	mul.w	r3, r2, r3
 8006c2a:	617b      	str	r3, [r7, #20]
      break;
 8006c2c:	e00c      	b.n	8006c48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c2e:	4a13      	ldr	r2, [pc, #76]	@ (8006c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c36:	4a10      	ldr	r2, [pc, #64]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c38:	68d2      	ldr	r2, [r2, #12]
 8006c3a:	0a12      	lsrs	r2, r2, #8
 8006c3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c40:	fb02 f303 	mul.w	r3, r2, r3
 8006c44:	617b      	str	r3, [r7, #20]
      break;
 8006c46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c48:	4b0b      	ldr	r3, [pc, #44]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	0e5b      	lsrs	r3, r3, #25
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	3301      	adds	r3, #1
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	e001      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006c68:	693b      	ldr	r3, [r7, #16]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	00f42400 	.word	0x00f42400
 8006c80:	016e3600 	.word	0x016e3600

08006c84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c88:	4b03      	ldr	r3, [pc, #12]	@ (8006c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	2000021c 	.word	0x2000021c

08006c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ca0:	f7ff fff0 	bl	8006c84 <HAL_RCC_GetHCLKFreq>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	4b06      	ldr	r3, [pc, #24]	@ (8006cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	0a1b      	lsrs	r3, r3, #8
 8006cac:	f003 0307 	and.w	r3, r3, #7
 8006cb0:	4904      	ldr	r1, [pc, #16]	@ (8006cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cb2:	5ccb      	ldrb	r3, [r1, r3]
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	0800bda0 	.word	0x0800bda0

08006cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ccc:	f7ff ffda 	bl	8006c84 <HAL_RCC_GetHCLKFreq>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	4b06      	ldr	r3, [pc, #24]	@ (8006cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	0adb      	lsrs	r3, r3, #11
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	4904      	ldr	r1, [pc, #16]	@ (8006cf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cde:	5ccb      	ldrb	r3, [r1, r3]
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	0800bda0 	.word	0x0800bda0

08006cf4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8006d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d04:	4b1b      	ldr	r3, [pc, #108]	@ (8006d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	091b      	lsrs	r3, r3, #4
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d10c      	bne.n	8006d32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d18:	4a17      	ldr	r2, [pc, #92]	@ (8006d78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d20:	4a14      	ldr	r2, [pc, #80]	@ (8006d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d22:	68d2      	ldr	r2, [r2, #12]
 8006d24:	0a12      	lsrs	r2, r2, #8
 8006d26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d2a:	fb02 f303 	mul.w	r3, r2, r3
 8006d2e:	617b      	str	r3, [r7, #20]
    break;
 8006d30:	e00c      	b.n	8006d4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d32:	4a12      	ldr	r2, [pc, #72]	@ (8006d7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8006d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d3c:	68d2      	ldr	r2, [r2, #12]
 8006d3e:	0a12      	lsrs	r2, r2, #8
 8006d40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d44:	fb02 f303 	mul.w	r3, r2, r3
 8006d48:	617b      	str	r3, [r7, #20]
    break;
 8006d4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d4c:	4b09      	ldr	r3, [pc, #36]	@ (8006d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	0e5b      	lsrs	r3, r3, #25
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	3301      	adds	r3, #1
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006d66:	687b      	ldr	r3, [r7, #4]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	371c      	adds	r7, #28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	40021000 	.word	0x40021000
 8006d78:	016e3600 	.word	0x016e3600
 8006d7c:	00f42400 	.word	0x00f42400

08006d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d88:	2300      	movs	r3, #0
 8006d8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8098 	beq.w	8006ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006da2:	4b43      	ldr	r3, [pc, #268]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10d      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dae:	4b40      	ldr	r3, [pc, #256]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db2:	4a3f      	ldr	r2, [pc, #252]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dba:	4b3d      	ldr	r3, [pc, #244]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dc2:	60bb      	str	r3, [r7, #8]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dca:	4b3a      	ldr	r3, [pc, #232]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a39      	ldr	r2, [pc, #228]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006dd6:	f7fe fbcd 	bl	8005574 <HAL_GetTick>
 8006dda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ddc:	e009      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dde:	f7fe fbc9 	bl	8005574 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d902      	bls.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	74fb      	strb	r3, [r7, #19]
        break;
 8006df0:	e005      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006df2:	4b30      	ldr	r3, [pc, #192]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0ef      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006dfe:	7cfb      	ldrb	r3, [r7, #19]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d159      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e04:	4b2a      	ldr	r3, [pc, #168]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d01e      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d019      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e20:	4b23      	ldr	r3, [pc, #140]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e2c:	4b20      	ldr	r3, [pc, #128]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e32:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e42:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e4c:	4a18      	ldr	r2, [pc, #96]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d016      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5e:	f7fe fb89 	bl	8005574 <HAL_GetTick>
 8006e62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e64:	e00b      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e66:	f7fe fb85 	bl	8005574 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d902      	bls.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	74fb      	strb	r3, [r7, #19]
            break;
 8006e7c:	e006      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0ec      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006e8c:	7cfb      	ldrb	r3, [r7, #19]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10b      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e92:	4b07      	ldr	r3, [pc, #28]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea0:	4903      	ldr	r1, [pc, #12]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ea8:	e008      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006eaa:	7cfb      	ldrb	r3, [r7, #19]
 8006eac:	74bb      	strb	r3, [r7, #18]
 8006eae:	e005      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006eb0:	40021000 	.word	0x40021000
 8006eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb8:	7cfb      	ldrb	r3, [r7, #19]
 8006eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ebc:	7c7b      	ldrb	r3, [r7, #17]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d105      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec2:	4ba7      	ldr	r3, [pc, #668]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec6:	4aa6      	ldr	r2, [pc, #664]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ecc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006eda:	4ba1      	ldr	r3, [pc, #644]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee0:	f023 0203 	bic.w	r2, r3, #3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	499d      	ldr	r1, [pc, #628]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006efc:	4b98      	ldr	r3, [pc, #608]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f02:	f023 020c 	bic.w	r2, r3, #12
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	4995      	ldr	r1, [pc, #596]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f1e:	4b90      	ldr	r3, [pc, #576]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	498c      	ldr	r1, [pc, #560]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f40:	4b87      	ldr	r3, [pc, #540]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	4984      	ldr	r1, [pc, #528]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f62:	4b7f      	ldr	r3, [pc, #508]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	497b      	ldr	r1, [pc, #492]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f84:	4b76      	ldr	r3, [pc, #472]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	4973      	ldr	r1, [pc, #460]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fa6:	4b6e      	ldr	r3, [pc, #440]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	496a      	ldr	r1, [pc, #424]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00a      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fc8:	4b65      	ldr	r3, [pc, #404]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	4962      	ldr	r1, [pc, #392]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fea:	4b5d      	ldr	r3, [pc, #372]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ff0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	4959      	ldr	r1, [pc, #356]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800700c:	4b54      	ldr	r3, [pc, #336]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007012:	f023 0203 	bic.w	r2, r3, #3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701a:	4951      	ldr	r1, [pc, #324]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800701c:	4313      	orrs	r3, r2
 800701e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800702e:	4b4c      	ldr	r3, [pc, #304]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007034:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703c:	4948      	ldr	r1, [pc, #288]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800703e:	4313      	orrs	r3, r2
 8007040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800704c:	2b00      	cmp	r3, #0
 800704e:	d015      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007050:	4b43      	ldr	r3, [pc, #268]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007056:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800705e:	4940      	ldr	r1, [pc, #256]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007060:	4313      	orrs	r3, r2
 8007062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800706e:	d105      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007070:	4b3b      	ldr	r3, [pc, #236]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	4a3a      	ldr	r2, [pc, #232]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800707a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007084:	2b00      	cmp	r3, #0
 8007086:	d015      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007088:	4b35      	ldr	r3, [pc, #212]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800708a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007096:	4932      	ldr	r1, [pc, #200]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007098:	4313      	orrs	r3, r2
 800709a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070a6:	d105      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d015      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070c0:	4b27      	ldr	r3, [pc, #156]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ce:	4924      	ldr	r1, [pc, #144]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070de:	d105      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d015      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070f8:	4b19      	ldr	r3, [pc, #100]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007106:	4916      	ldr	r1, [pc, #88]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007108:	4313      	orrs	r3, r2
 800710a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007112:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007116:	d105      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007118:	4b11      	ldr	r3, [pc, #68]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	4a10      	ldr	r2, [pc, #64]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800711e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007122:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d019      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007130:	4b0b      	ldr	r3, [pc, #44]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007136:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713e:	4908      	ldr	r1, [pc, #32]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007140:	4313      	orrs	r3, r2
 8007142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800714e:	d109      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007150:	4b03      	ldr	r3, [pc, #12]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	4a02      	ldr	r2, [pc, #8]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800715a:	60d3      	str	r3, [r2, #12]
 800715c:	e002      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800715e:	bf00      	nop
 8007160:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d015      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007170:	4b29      	ldr	r3, [pc, #164]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007176:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800717e:	4926      	ldr	r1, [pc, #152]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007180:	4313      	orrs	r3, r2
 8007182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800718e:	d105      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007190:	4b21      	ldr	r3, [pc, #132]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	4a20      	ldr	r2, [pc, #128]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800719a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d015      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80071a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071b6:	4918      	ldr	r1, [pc, #96]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c6:	d105      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80071c8:	4b13      	ldr	r3, [pc, #76]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	4a12      	ldr	r2, [pc, #72]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d015      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80071e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ee:	490a      	ldr	r1, [pc, #40]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071fe:	d105      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007200:	4b05      	ldr	r3, [pc, #20]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	4a04      	ldr	r2, [pc, #16]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800720a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800720c:	7cbb      	ldrb	r3, [r7, #18]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40021000 	.word	0x40021000

0800721c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e054      	b.n	80072d8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d111      	bne.n	800725e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f002 fb50 	bl	80098e8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a23      	ldr	r2, [pc, #140]	@ (80072e0 <HAL_TIM_Base_Init+0xc4>)
 8007254:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3304      	adds	r3, #4
 800726e:	4619      	mov	r1, r3
 8007270:	4610      	mov	r0, r2
 8007272:	f001 fc8f 	bl	8008b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	08004ed1 	.word	0x08004ed1

080072e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d001      	beq.n	80072fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e04c      	b.n	8007396 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a26      	ldr	r2, [pc, #152]	@ (80073a4 <HAL_TIM_Base_Start+0xc0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d022      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007316:	d01d      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a22      	ldr	r2, [pc, #136]	@ (80073a8 <HAL_TIM_Base_Start+0xc4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d018      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a21      	ldr	r2, [pc, #132]	@ (80073ac <HAL_TIM_Base_Start+0xc8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d013      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1f      	ldr	r2, [pc, #124]	@ (80073b0 <HAL_TIM_Base_Start+0xcc>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00e      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1e      	ldr	r2, [pc, #120]	@ (80073b4 <HAL_TIM_Base_Start+0xd0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d009      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1c      	ldr	r2, [pc, #112]	@ (80073b8 <HAL_TIM_Base_Start+0xd4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d004      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a1b      	ldr	r2, [pc, #108]	@ (80073bc <HAL_TIM_Base_Start+0xd8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d115      	bne.n	8007380 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	4b19      	ldr	r3, [pc, #100]	@ (80073c0 <HAL_TIM_Base_Start+0xdc>)
 800735c:	4013      	ands	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b06      	cmp	r3, #6
 8007364:	d015      	beq.n	8007392 <HAL_TIM_Base_Start+0xae>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800736c:	d011      	beq.n	8007392 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f042 0201 	orr.w	r2, r2, #1
 800737c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737e:	e008      	b.n	8007392 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0201 	orr.w	r2, r2, #1
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	e000      	b.n	8007394 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007392:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	40012c00 	.word	0x40012c00
 80073a8:	40000400 	.word	0x40000400
 80073ac:	40000800 	.word	0x40000800
 80073b0:	40000c00 	.word	0x40000c00
 80073b4:	40013400 	.word	0x40013400
 80073b8:	40014000 	.word	0x40014000
 80073bc:	40015000 	.word	0x40015000
 80073c0:	00010007 	.word	0x00010007

080073c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d001      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e054      	b.n	8007486 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a26      	ldr	r2, [pc, #152]	@ (8007494 <HAL_TIM_Base_Start_IT+0xd0>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d022      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007406:	d01d      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a22      	ldr	r2, [pc, #136]	@ (8007498 <HAL_TIM_Base_Start_IT+0xd4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d018      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a21      	ldr	r2, [pc, #132]	@ (800749c <HAL_TIM_Base_Start_IT+0xd8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d013      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1f      	ldr	r2, [pc, #124]	@ (80074a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00e      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a1e      	ldr	r2, [pc, #120]	@ (80074a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d009      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a1c      	ldr	r2, [pc, #112]	@ (80074a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a1b      	ldr	r2, [pc, #108]	@ (80074ac <HAL_TIM_Base_Start_IT+0xe8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d115      	bne.n	8007470 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689a      	ldr	r2, [r3, #8]
 800744a:	4b19      	ldr	r3, [pc, #100]	@ (80074b0 <HAL_TIM_Base_Start_IT+0xec>)
 800744c:	4013      	ands	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b06      	cmp	r3, #6
 8007454:	d015      	beq.n	8007482 <HAL_TIM_Base_Start_IT+0xbe>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800745c:	d011      	beq.n	8007482 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 0201 	orr.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800746e:	e008      	b.n	8007482 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0201 	orr.w	r2, r2, #1
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	e000      	b.n	8007484 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007482:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40012c00 	.word	0x40012c00
 8007498:	40000400 	.word	0x40000400
 800749c:	40000800 	.word	0x40000800
 80074a0:	40000c00 	.word	0x40000c00
 80074a4:	40013400 	.word	0x40013400
 80074a8:	40014000 	.word	0x40014000
 80074ac:	40015000 	.word	0x40015000
 80074b0:	00010007 	.word	0x00010007

080074b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e054      	b.n	8007570 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d111      	bne.n	80074f6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f002 fa04 	bl	80098e8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d102      	bne.n	80074ee <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a23      	ldr	r2, [pc, #140]	@ (8007578 <HAL_TIM_PWM_Init+0xc4>)
 80074ec:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3304      	adds	r3, #4
 8007506:	4619      	mov	r1, r3
 8007508:	4610      	mov	r0, r2
 800750a:	f001 fb43 	bl	8008b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	0800757d 	.word	0x0800757d

0800757c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d109      	bne.n	80075b4 <HAL_TIM_PWM_Start+0x24>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	bf14      	ite	ne
 80075ac:	2301      	movne	r3, #1
 80075ae:	2300      	moveq	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	e03c      	b.n	800762e <HAL_TIM_PWM_Start+0x9e>
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d109      	bne.n	80075ce <HAL_TIM_PWM_Start+0x3e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	bf14      	ite	ne
 80075c6:	2301      	movne	r3, #1
 80075c8:	2300      	moveq	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	e02f      	b.n	800762e <HAL_TIM_PWM_Start+0x9e>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d109      	bne.n	80075e8 <HAL_TIM_PWM_Start+0x58>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b01      	cmp	r3, #1
 80075de:	bf14      	ite	ne
 80075e0:	2301      	movne	r3, #1
 80075e2:	2300      	moveq	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	e022      	b.n	800762e <HAL_TIM_PWM_Start+0x9e>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2b0c      	cmp	r3, #12
 80075ec:	d109      	bne.n	8007602 <HAL_TIM_PWM_Start+0x72>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	bf14      	ite	ne
 80075fa:	2301      	movne	r3, #1
 80075fc:	2300      	moveq	r3, #0
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	e015      	b.n	800762e <HAL_TIM_PWM_Start+0x9e>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b10      	cmp	r3, #16
 8007606:	d109      	bne.n	800761c <HAL_TIM_PWM_Start+0x8c>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b01      	cmp	r3, #1
 8007612:	bf14      	ite	ne
 8007614:	2301      	movne	r3, #1
 8007616:	2300      	moveq	r3, #0
 8007618:	b2db      	uxtb	r3, r3
 800761a:	e008      	b.n	800762e <HAL_TIM_PWM_Start+0x9e>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b01      	cmp	r3, #1
 8007626:	bf14      	ite	ne
 8007628:	2301      	movne	r3, #1
 800762a:	2300      	moveq	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e0a6      	b.n	8007784 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d104      	bne.n	8007646 <HAL_TIM_PWM_Start+0xb6>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007644:	e023      	b.n	800768e <HAL_TIM_PWM_Start+0xfe>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b04      	cmp	r3, #4
 800764a:	d104      	bne.n	8007656 <HAL_TIM_PWM_Start+0xc6>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007654:	e01b      	b.n	800768e <HAL_TIM_PWM_Start+0xfe>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b08      	cmp	r3, #8
 800765a:	d104      	bne.n	8007666 <HAL_TIM_PWM_Start+0xd6>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2202      	movs	r2, #2
 8007660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007664:	e013      	b.n	800768e <HAL_TIM_PWM_Start+0xfe>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b0c      	cmp	r3, #12
 800766a:	d104      	bne.n	8007676 <HAL_TIM_PWM_Start+0xe6>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007674:	e00b      	b.n	800768e <HAL_TIM_PWM_Start+0xfe>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b10      	cmp	r3, #16
 800767a:	d104      	bne.n	8007686 <HAL_TIM_PWM_Start+0xf6>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007684:	e003      	b.n	800768e <HAL_TIM_PWM_Start+0xfe>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2202      	movs	r2, #2
 800768a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2201      	movs	r2, #1
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	f002 f900 	bl	800989c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a3a      	ldr	r2, [pc, #232]	@ (800778c <HAL_TIM_PWM_Start+0x1fc>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d018      	beq.n	80076d8 <HAL_TIM_PWM_Start+0x148>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a39      	ldr	r2, [pc, #228]	@ (8007790 <HAL_TIM_PWM_Start+0x200>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <HAL_TIM_PWM_Start+0x148>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a37      	ldr	r2, [pc, #220]	@ (8007794 <HAL_TIM_PWM_Start+0x204>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00e      	beq.n	80076d8 <HAL_TIM_PWM_Start+0x148>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a36      	ldr	r2, [pc, #216]	@ (8007798 <HAL_TIM_PWM_Start+0x208>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d009      	beq.n	80076d8 <HAL_TIM_PWM_Start+0x148>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a34      	ldr	r2, [pc, #208]	@ (800779c <HAL_TIM_PWM_Start+0x20c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d004      	beq.n	80076d8 <HAL_TIM_PWM_Start+0x148>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a33      	ldr	r2, [pc, #204]	@ (80077a0 <HAL_TIM_PWM_Start+0x210>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d101      	bne.n	80076dc <HAL_TIM_PWM_Start+0x14c>
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <HAL_TIM_PWM_Start+0x14e>
 80076dc:	2300      	movs	r3, #0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d007      	beq.n	80076f2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a25      	ldr	r2, [pc, #148]	@ (800778c <HAL_TIM_PWM_Start+0x1fc>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d022      	beq.n	8007742 <HAL_TIM_PWM_Start+0x1b2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007704:	d01d      	beq.n	8007742 <HAL_TIM_PWM_Start+0x1b2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a26      	ldr	r2, [pc, #152]	@ (80077a4 <HAL_TIM_PWM_Start+0x214>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d018      	beq.n	8007742 <HAL_TIM_PWM_Start+0x1b2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a24      	ldr	r2, [pc, #144]	@ (80077a8 <HAL_TIM_PWM_Start+0x218>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <HAL_TIM_PWM_Start+0x1b2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a23      	ldr	r2, [pc, #140]	@ (80077ac <HAL_TIM_PWM_Start+0x21c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00e      	beq.n	8007742 <HAL_TIM_PWM_Start+0x1b2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a19      	ldr	r2, [pc, #100]	@ (8007790 <HAL_TIM_PWM_Start+0x200>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d009      	beq.n	8007742 <HAL_TIM_PWM_Start+0x1b2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a18      	ldr	r2, [pc, #96]	@ (8007794 <HAL_TIM_PWM_Start+0x204>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d004      	beq.n	8007742 <HAL_TIM_PWM_Start+0x1b2>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a18      	ldr	r2, [pc, #96]	@ (80077a0 <HAL_TIM_PWM_Start+0x210>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d115      	bne.n	800776e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	4b19      	ldr	r3, [pc, #100]	@ (80077b0 <HAL_TIM_PWM_Start+0x220>)
 800774a:	4013      	ands	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b06      	cmp	r3, #6
 8007752:	d015      	beq.n	8007780 <HAL_TIM_PWM_Start+0x1f0>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800775a:	d011      	beq.n	8007780 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0201 	orr.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776c:	e008      	b.n	8007780 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0201 	orr.w	r2, r2, #1
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	e000      	b.n	8007782 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007780:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40012c00 	.word	0x40012c00
 8007790:	40013400 	.word	0x40013400
 8007794:	40014000 	.word	0x40014000
 8007798:	40014400 	.word	0x40014400
 800779c:	40014800 	.word	0x40014800
 80077a0:	40015000 	.word	0x40015000
 80077a4:	40000400 	.word	0x40000400
 80077a8:	40000800 	.word	0x40000800
 80077ac:	40000c00 	.word	0x40000c00
 80077b0:	00010007 	.word	0x00010007

080077b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e054      	b.n	8007870 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d111      	bne.n	80077f6 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f002 f884 	bl	80098e8 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d102      	bne.n	80077ee <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a23      	ldr	r2, [pc, #140]	@ (8007878 <HAL_TIM_IC_Init+0xc4>)
 80077ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2202      	movs	r2, #2
 80077fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3304      	adds	r3, #4
 8007806:	4619      	mov	r1, r3
 8007808:	4610      	mov	r0, r2
 800780a:	f001 f9c3 	bl	8008b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	0800787d 	.word	0x0800787d

0800787c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <HAL_TIM_IC_Start+0x1a>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	e023      	b.n	80078f2 <HAL_TIM_IC_Start+0x62>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d104      	bne.n	80078ba <HAL_TIM_IC_Start+0x2a>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	e01b      	b.n	80078f2 <HAL_TIM_IC_Start+0x62>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d104      	bne.n	80078ca <HAL_TIM_IC_Start+0x3a>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	e013      	b.n	80078f2 <HAL_TIM_IC_Start+0x62>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b0c      	cmp	r3, #12
 80078ce:	d104      	bne.n	80078da <HAL_TIM_IC_Start+0x4a>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	e00b      	b.n	80078f2 <HAL_TIM_IC_Start+0x62>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b10      	cmp	r3, #16
 80078de:	d104      	bne.n	80078ea <HAL_TIM_IC_Start+0x5a>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	e003      	b.n	80078f2 <HAL_TIM_IC_Start+0x62>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d104      	bne.n	8007904 <HAL_TIM_IC_Start+0x74>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007900:	b2db      	uxtb	r3, r3
 8007902:	e013      	b.n	800792c <HAL_TIM_IC_Start+0x9c>
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b04      	cmp	r3, #4
 8007908:	d104      	bne.n	8007914 <HAL_TIM_IC_Start+0x84>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007910:	b2db      	uxtb	r3, r3
 8007912:	e00b      	b.n	800792c <HAL_TIM_IC_Start+0x9c>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b08      	cmp	r3, #8
 8007918:	d104      	bne.n	8007924 <HAL_TIM_IC_Start+0x94>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007920:	b2db      	uxtb	r3, r3
 8007922:	e003      	b.n	800792c <HAL_TIM_IC_Start+0x9c>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800792a:	b2db      	uxtb	r3, r3
 800792c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d102      	bne.n	800793a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d001      	beq.n	800793e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e097      	b.n	8007a6e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d104      	bne.n	800794e <HAL_TIM_IC_Start+0xbe>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800794c:	e023      	b.n	8007996 <HAL_TIM_IC_Start+0x106>
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b04      	cmp	r3, #4
 8007952:	d104      	bne.n	800795e <HAL_TIM_IC_Start+0xce>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800795c:	e01b      	b.n	8007996 <HAL_TIM_IC_Start+0x106>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b08      	cmp	r3, #8
 8007962:	d104      	bne.n	800796e <HAL_TIM_IC_Start+0xde>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800796c:	e013      	b.n	8007996 <HAL_TIM_IC_Start+0x106>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b0c      	cmp	r3, #12
 8007972:	d104      	bne.n	800797e <HAL_TIM_IC_Start+0xee>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800797c:	e00b      	b.n	8007996 <HAL_TIM_IC_Start+0x106>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b10      	cmp	r3, #16
 8007982:	d104      	bne.n	800798e <HAL_TIM_IC_Start+0xfe>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800798c:	e003      	b.n	8007996 <HAL_TIM_IC_Start+0x106>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2202      	movs	r2, #2
 8007992:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <HAL_TIM_IC_Start+0x116>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079a4:	e013      	b.n	80079ce <HAL_TIM_IC_Start+0x13e>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d104      	bne.n	80079b6 <HAL_TIM_IC_Start+0x126>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079b4:	e00b      	b.n	80079ce <HAL_TIM_IC_Start+0x13e>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d104      	bne.n	80079c6 <HAL_TIM_IC_Start+0x136>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079c4:	e003      	b.n	80079ce <HAL_TIM_IC_Start+0x13e>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2202      	movs	r2, #2
 80079ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2201      	movs	r2, #1
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 ff60 	bl	800989c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a25      	ldr	r2, [pc, #148]	@ (8007a78 <HAL_TIM_IC_Start+0x1e8>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d022      	beq.n	8007a2c <HAL_TIM_IC_Start+0x19c>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ee:	d01d      	beq.n	8007a2c <HAL_TIM_IC_Start+0x19c>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a21      	ldr	r2, [pc, #132]	@ (8007a7c <HAL_TIM_IC_Start+0x1ec>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d018      	beq.n	8007a2c <HAL_TIM_IC_Start+0x19c>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a20      	ldr	r2, [pc, #128]	@ (8007a80 <HAL_TIM_IC_Start+0x1f0>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d013      	beq.n	8007a2c <HAL_TIM_IC_Start+0x19c>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a1e      	ldr	r2, [pc, #120]	@ (8007a84 <HAL_TIM_IC_Start+0x1f4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00e      	beq.n	8007a2c <HAL_TIM_IC_Start+0x19c>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a1d      	ldr	r2, [pc, #116]	@ (8007a88 <HAL_TIM_IC_Start+0x1f8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d009      	beq.n	8007a2c <HAL_TIM_IC_Start+0x19c>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8007a8c <HAL_TIM_IC_Start+0x1fc>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d004      	beq.n	8007a2c <HAL_TIM_IC_Start+0x19c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a1a      	ldr	r2, [pc, #104]	@ (8007a90 <HAL_TIM_IC_Start+0x200>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d115      	bne.n	8007a58 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	4b18      	ldr	r3, [pc, #96]	@ (8007a94 <HAL_TIM_IC_Start+0x204>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b06      	cmp	r3, #6
 8007a3c:	d015      	beq.n	8007a6a <HAL_TIM_IC_Start+0x1da>
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a44:	d011      	beq.n	8007a6a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f042 0201 	orr.w	r2, r2, #1
 8007a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a56:	e008      	b.n	8007a6a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0201 	orr.w	r2, r2, #1
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	e000      	b.n	8007a6c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	40012c00 	.word	0x40012c00
 8007a7c:	40000400 	.word	0x40000400
 8007a80:	40000800 	.word	0x40000800
 8007a84:	40000c00 	.word	0x40000c00
 8007a88:	40013400 	.word	0x40013400
 8007a8c:	40014000 	.word	0x40014000
 8007a90:	40015000 	.word	0x40015000
 8007a94:	00010007 	.word	0x00010007

08007a98 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e04c      	b.n	8007b46 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d111      	bne.n	8007adc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 ff11 	bl	80098e8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d102      	bne.n	8007ad4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8007b50 <HAL_TIM_OnePulse_Init+0xb8>)
 8007ad2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f001 f850 	bl	8008b94 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0208 	bic.w	r2, r2, #8
 8007b02:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6819      	ldr	r1, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	08007b55 	.word	0x08007b55

08007b54 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b90:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d108      	bne.n	8007baa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d105      	bne.n	8007baa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d102      	bne.n	8007baa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ba4:	7b3b      	ldrb	r3, [r7, #12]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d001      	beq.n	8007bae <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e059      	b.n	8007c62 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2202      	movs	r2, #2
 8007bba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0202 	orr.w	r2, r2, #2
 8007bdc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68da      	ldr	r2, [r3, #12]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f042 0204 	orr.w	r2, r2, #4
 8007bec:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 fe50 	bl	800989c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2201      	movs	r2, #1
 8007c02:	2104      	movs	r1, #4
 8007c04:	4618      	mov	r0, r3
 8007c06:	f001 fe49 	bl	800989c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a17      	ldr	r2, [pc, #92]	@ (8007c6c <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d018      	beq.n	8007c46 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a15      	ldr	r2, [pc, #84]	@ (8007c70 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d013      	beq.n	8007c46 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a14      	ldr	r2, [pc, #80]	@ (8007c74 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d00e      	beq.n	8007c46 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a12      	ldr	r2, [pc, #72]	@ (8007c78 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d009      	beq.n	8007c46 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a11      	ldr	r2, [pc, #68]	@ (8007c7c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d004      	beq.n	8007c46 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a0f      	ldr	r2, [pc, #60]	@ (8007c80 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d101      	bne.n	8007c4a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d007      	beq.n	8007c60 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	40013400 	.word	0x40013400
 8007c74:	40014000 	.word	0x40014000
 8007c78:	40014400 	.word	0x40014400
 8007c7c:	40014800 	.word	0x40014800
 8007c80:	40015000 	.word	0x40015000

08007c84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e0a2      	b.n	8007dde <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d111      	bne.n	8007cc8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f001 fe1b 	bl	80098e8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d102      	bne.n	8007cc0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8007de8 <HAL_TIM_Encoder_Init+0x164>)
 8007cbe:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	6812      	ldr	r2, [r2, #0]
 8007cda:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007cde:	f023 0307 	bic.w	r3, r3, #7
 8007ce2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3304      	adds	r3, #4
 8007cec:	4619      	mov	r1, r3
 8007cee:	4610      	mov	r0, r2
 8007cf0:	f000 ff50 	bl	8008b94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d1c:	f023 0303 	bic.w	r3, r3, #3
 8007d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	689a      	ldr	r2, [r3, #8]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	021b      	lsls	r3, r3, #8
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007d3a:	f023 030c 	bic.w	r3, r3, #12
 8007d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	4313      	orrs	r3, r2
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	011a      	lsls	r2, r3, #4
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	031b      	lsls	r3, r3, #12
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007d78:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007d80:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	08004e39 	.word	0x08004e39

08007dec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dfc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d110      	bne.n	8007e3e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d102      	bne.n	8007e28 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e22:	7b7b      	ldrb	r3, [r7, #13]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d001      	beq.n	8007e2c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e069      	b.n	8007f00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e3c:	e031      	b.n	8007ea2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d110      	bne.n	8007e66 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d102      	bne.n	8007e50 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e4a:	7b3b      	ldrb	r3, [r7, #12]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d001      	beq.n	8007e54 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e055      	b.n	8007f00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e64:	e01d      	b.n	8007ea2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d108      	bne.n	8007e7e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d105      	bne.n	8007e7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e72:	7b7b      	ldrb	r3, [r7, #13]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d102      	bne.n	8007e7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e78:	7b3b      	ldrb	r3, [r7, #12]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d001      	beq.n	8007e82 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e03e      	b.n	8007f00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2202      	movs	r2, #2
 8007e96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <HAL_TIM_Encoder_Start+0xc4>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d008      	beq.n	8007ec0 <HAL_TIM_Encoder_Start+0xd4>
 8007eae:	e00f      	b.n	8007ed0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 fcef 	bl	800989c <TIM_CCxChannelCmd>
      break;
 8007ebe:	e016      	b.n	8007eee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	2104      	movs	r1, #4
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f001 fce7 	bl	800989c <TIM_CCxChannelCmd>
      break;
 8007ece:	e00e      	b.n	8007eee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f001 fcdf 	bl	800989c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	2104      	movs	r1, #4
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f001 fcd8 	bl	800989c <TIM_CCxChannelCmd>
      break;
 8007eec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f042 0201 	orr.w	r2, r2, #1
 8007efc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d026      	beq.n	8007f78 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d021      	beq.n	8007f78 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f06f 0202 	mvn.w	r2, #2
 8007f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d005      	beq.n	8007f5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	4798      	blx	r3
 8007f5c:	e009      	b.n	8007f72 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d026      	beq.n	8007fd0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d021      	beq.n	8007fd0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f06f 0204 	mvn.w	r2, #4
 8007f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d005      	beq.n	8007fb6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	4798      	blx	r3
 8007fb4:	e009      	b.n	8007fca <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f003 0308 	and.w	r3, r3, #8
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d026      	beq.n	8008028 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f003 0308 	and.w	r3, r3, #8
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d021      	beq.n	8008028 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0208 	mvn.w	r2, #8
 8007fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2204      	movs	r2, #4
 8007ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d005      	beq.n	800800e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	4798      	blx	r3
 800800c:	e009      	b.n	8008022 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f003 0310 	and.w	r3, r3, #16
 800802e:	2b00      	cmp	r3, #0
 8008030:	d026      	beq.n	8008080 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f003 0310 	and.w	r3, r3, #16
 8008038:	2b00      	cmp	r3, #0
 800803a:	d021      	beq.n	8008080 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0210 	mvn.w	r2, #16
 8008044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2208      	movs	r2, #8
 800804a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008056:	2b00      	cmp	r3, #0
 8008058:	d005      	beq.n	8008066 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	4798      	blx	r3
 8008064:	e009      	b.n	800807a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00e      	beq.n	80080a8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	d009      	beq.n	80080a8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0201 	mvn.w	r2, #1
 800809c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d104      	bne.n	80080bc <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00e      	beq.n	80080da <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d009      	beq.n	80080da <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80080ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00e      	beq.n	8008102 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d009      	beq.n	8008102 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80080f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00e      	beq.n	800812a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008112:	2b00      	cmp	r3, #0
 8008114:	d009      	beq.n	800812a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800811e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f003 0320 	and.w	r3, r3, #32
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00e      	beq.n	8008152 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f003 0320 	and.w	r3, r3, #32
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f06f 0220 	mvn.w	r2, #32
 8008146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00e      	beq.n	800817a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d009      	beq.n	800817a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800816e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00e      	beq.n	80081a2 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d009      	beq.n	80081a2 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00e      	beq.n	80081ca <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80081be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00e      	beq.n	80081f2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d009      	beq.n	80081f2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80081e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081f2:	bf00      	nop
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b086      	sub	sp, #24
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008210:	2b01      	cmp	r3, #1
 8008212:	d101      	bne.n	8008218 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008214:	2302      	movs	r3, #2
 8008216:	e088      	b.n	800832a <HAL_TIM_IC_ConfigChannel+0x130>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d11b      	bne.n	800825e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008236:	f001 f96b 	bl	8009510 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	699a      	ldr	r2, [r3, #24]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 020c 	bic.w	r2, r2, #12
 8008248:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6999      	ldr	r1, [r3, #24]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	619a      	str	r2, [r3, #24]
 800825c:	e060      	b.n	8008320 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b04      	cmp	r3, #4
 8008262:	d11c      	bne.n	800829e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008274:	f001 f9ef 	bl	8009656 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008286:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6999      	ldr	r1, [r3, #24]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	021a      	lsls	r2, r3, #8
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	619a      	str	r2, [r3, #24]
 800829c:	e040      	b.n	8008320 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b08      	cmp	r3, #8
 80082a2:	d11b      	bne.n	80082dc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80082b4:	f001 fa3c 	bl	8009730 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	69da      	ldr	r2, [r3, #28]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 020c 	bic.w	r2, r2, #12
 80082c6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69d9      	ldr	r1, [r3, #28]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	61da      	str	r2, [r3, #28]
 80082da:	e021      	b.n	8008320 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b0c      	cmp	r3, #12
 80082e0:	d11c      	bne.n	800831c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80082f2:	f001 fa59 	bl	80097a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	69da      	ldr	r2, [r3, #28]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008304:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69d9      	ldr	r1, [r3, #28]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	021a      	lsls	r2, r3, #8
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	61da      	str	r2, [r3, #28]
 800831a:	e001      	b.n	8008320 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008328:	7dfb      	ldrb	r3, [r7, #23]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800834a:	2b01      	cmp	r3, #1
 800834c:	d101      	bne.n	8008352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800834e:	2302      	movs	r3, #2
 8008350:	e0ff      	b.n	8008552 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b14      	cmp	r3, #20
 800835e:	f200 80f0 	bhi.w	8008542 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008362:	a201      	add	r2, pc, #4	@ (adr r2, 8008368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	080083bd 	.word	0x080083bd
 800836c:	08008543 	.word	0x08008543
 8008370:	08008543 	.word	0x08008543
 8008374:	08008543 	.word	0x08008543
 8008378:	080083fd 	.word	0x080083fd
 800837c:	08008543 	.word	0x08008543
 8008380:	08008543 	.word	0x08008543
 8008384:	08008543 	.word	0x08008543
 8008388:	0800843f 	.word	0x0800843f
 800838c:	08008543 	.word	0x08008543
 8008390:	08008543 	.word	0x08008543
 8008394:	08008543 	.word	0x08008543
 8008398:	0800847f 	.word	0x0800847f
 800839c:	08008543 	.word	0x08008543
 80083a0:	08008543 	.word	0x08008543
 80083a4:	08008543 	.word	0x08008543
 80083a8:	080084c1 	.word	0x080084c1
 80083ac:	08008543 	.word	0x08008543
 80083b0:	08008543 	.word	0x08008543
 80083b4:	08008543 	.word	0x08008543
 80083b8:	08008501 	.word	0x08008501
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68b9      	ldr	r1, [r7, #8]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fc9a 	bl	8008cfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699a      	ldr	r2, [r3, #24]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f042 0208 	orr.w	r2, r2, #8
 80083d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	699a      	ldr	r2, [r3, #24]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0204 	bic.w	r2, r2, #4
 80083e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6999      	ldr	r1, [r3, #24]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	691a      	ldr	r2, [r3, #16]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	619a      	str	r2, [r3, #24]
      break;
 80083fa:	e0a5      	b.n	8008548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68b9      	ldr	r1, [r7, #8]
 8008402:	4618      	mov	r0, r3
 8008404:	f000 fd14 	bl	8008e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699a      	ldr	r2, [r3, #24]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	699a      	ldr	r2, [r3, #24]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6999      	ldr	r1, [r3, #24]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	021a      	lsls	r2, r3, #8
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	619a      	str	r2, [r3, #24]
      break;
 800843c:	e084      	b.n	8008548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68b9      	ldr	r1, [r7, #8]
 8008444:	4618      	mov	r0, r3
 8008446:	f000 fd87 	bl	8008f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69da      	ldr	r2, [r3, #28]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f042 0208 	orr.w	r2, r2, #8
 8008458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	69da      	ldr	r2, [r3, #28]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0204 	bic.w	r2, r2, #4
 8008468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	69d9      	ldr	r1, [r3, #28]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	691a      	ldr	r2, [r3, #16]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	61da      	str	r2, [r3, #28]
      break;
 800847c:	e064      	b.n	8008548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68b9      	ldr	r1, [r7, #8]
 8008484:	4618      	mov	r0, r3
 8008486:	f000 fdf9 	bl	800907c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69da      	ldr	r2, [r3, #28]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69da      	ldr	r2, [r3, #28]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69d9      	ldr	r1, [r3, #28]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	021a      	lsls	r2, r3, #8
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	61da      	str	r2, [r3, #28]
      break;
 80084be:	e043      	b.n	8008548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68b9      	ldr	r1, [r7, #8]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 fe6c 	bl	80091a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0208 	orr.w	r2, r2, #8
 80084da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f022 0204 	bic.w	r2, r2, #4
 80084ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	691a      	ldr	r2, [r3, #16]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80084fe:	e023      	b.n	8008548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	4618      	mov	r0, r3
 8008508:	f000 feb6 	bl	8009278 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800851a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800852a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	021a      	lsls	r2, r3, #8
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	430a      	orrs	r2, r1
 800853e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008540:	e002      	b.n	8008548 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	75fb      	strb	r3, [r7, #23]
      break;
 8008546:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008550:	7dfb      	ldrb	r3, [r7, #23]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop

0800855c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008570:	2b01      	cmp	r3, #1
 8008572:	d101      	bne.n	8008578 <HAL_TIM_ConfigClockSource+0x1c>
 8008574:	2302      	movs	r3, #2
 8008576:	e0f6      	b.n	8008766 <HAL_TIM_ConfigClockSource+0x20a>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008596:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800859a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a6f      	ldr	r2, [pc, #444]	@ (8008770 <HAL_TIM_ConfigClockSource+0x214>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	f000 80c1 	beq.w	800873a <HAL_TIM_ConfigClockSource+0x1de>
 80085b8:	4a6d      	ldr	r2, [pc, #436]	@ (8008770 <HAL_TIM_ConfigClockSource+0x214>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	f200 80c6 	bhi.w	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 80085c0:	4a6c      	ldr	r2, [pc, #432]	@ (8008774 <HAL_TIM_ConfigClockSource+0x218>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	f000 80b9 	beq.w	800873a <HAL_TIM_ConfigClockSource+0x1de>
 80085c8:	4a6a      	ldr	r2, [pc, #424]	@ (8008774 <HAL_TIM_ConfigClockSource+0x218>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	f200 80be 	bhi.w	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 80085d0:	4a69      	ldr	r2, [pc, #420]	@ (8008778 <HAL_TIM_ConfigClockSource+0x21c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	f000 80b1 	beq.w	800873a <HAL_TIM_ConfigClockSource+0x1de>
 80085d8:	4a67      	ldr	r2, [pc, #412]	@ (8008778 <HAL_TIM_ConfigClockSource+0x21c>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	f200 80b6 	bhi.w	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 80085e0:	4a66      	ldr	r2, [pc, #408]	@ (800877c <HAL_TIM_ConfigClockSource+0x220>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	f000 80a9 	beq.w	800873a <HAL_TIM_ConfigClockSource+0x1de>
 80085e8:	4a64      	ldr	r2, [pc, #400]	@ (800877c <HAL_TIM_ConfigClockSource+0x220>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	f200 80ae 	bhi.w	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 80085f0:	4a63      	ldr	r2, [pc, #396]	@ (8008780 <HAL_TIM_ConfigClockSource+0x224>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	f000 80a1 	beq.w	800873a <HAL_TIM_ConfigClockSource+0x1de>
 80085f8:	4a61      	ldr	r2, [pc, #388]	@ (8008780 <HAL_TIM_ConfigClockSource+0x224>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	f200 80a6 	bhi.w	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 8008600:	4a60      	ldr	r2, [pc, #384]	@ (8008784 <HAL_TIM_ConfigClockSource+0x228>)
 8008602:	4293      	cmp	r3, r2
 8008604:	f000 8099 	beq.w	800873a <HAL_TIM_ConfigClockSource+0x1de>
 8008608:	4a5e      	ldr	r2, [pc, #376]	@ (8008784 <HAL_TIM_ConfigClockSource+0x228>)
 800860a:	4293      	cmp	r3, r2
 800860c:	f200 809e 	bhi.w	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 8008610:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008614:	f000 8091 	beq.w	800873a <HAL_TIM_ConfigClockSource+0x1de>
 8008618:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800861c:	f200 8096 	bhi.w	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 8008620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008624:	f000 8089 	beq.w	800873a <HAL_TIM_ConfigClockSource+0x1de>
 8008628:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800862c:	f200 808e 	bhi.w	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 8008630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008634:	d03e      	beq.n	80086b4 <HAL_TIM_ConfigClockSource+0x158>
 8008636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800863a:	f200 8087 	bhi.w	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 800863e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008642:	f000 8086 	beq.w	8008752 <HAL_TIM_ConfigClockSource+0x1f6>
 8008646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800864a:	d87f      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 800864c:	2b70      	cmp	r3, #112	@ 0x70
 800864e:	d01a      	beq.n	8008686 <HAL_TIM_ConfigClockSource+0x12a>
 8008650:	2b70      	cmp	r3, #112	@ 0x70
 8008652:	d87b      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 8008654:	2b60      	cmp	r3, #96	@ 0x60
 8008656:	d050      	beq.n	80086fa <HAL_TIM_ConfigClockSource+0x19e>
 8008658:	2b60      	cmp	r3, #96	@ 0x60
 800865a:	d877      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 800865c:	2b50      	cmp	r3, #80	@ 0x50
 800865e:	d03c      	beq.n	80086da <HAL_TIM_ConfigClockSource+0x17e>
 8008660:	2b50      	cmp	r3, #80	@ 0x50
 8008662:	d873      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 8008664:	2b40      	cmp	r3, #64	@ 0x40
 8008666:	d058      	beq.n	800871a <HAL_TIM_ConfigClockSource+0x1be>
 8008668:	2b40      	cmp	r3, #64	@ 0x40
 800866a:	d86f      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 800866c:	2b30      	cmp	r3, #48	@ 0x30
 800866e:	d064      	beq.n	800873a <HAL_TIM_ConfigClockSource+0x1de>
 8008670:	2b30      	cmp	r3, #48	@ 0x30
 8008672:	d86b      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 8008674:	2b20      	cmp	r3, #32
 8008676:	d060      	beq.n	800873a <HAL_TIM_ConfigClockSource+0x1de>
 8008678:	2b20      	cmp	r3, #32
 800867a:	d867      	bhi.n	800874c <HAL_TIM_ConfigClockSource+0x1f0>
 800867c:	2b00      	cmp	r3, #0
 800867e:	d05c      	beq.n	800873a <HAL_TIM_ConfigClockSource+0x1de>
 8008680:	2b10      	cmp	r3, #16
 8008682:	d05a      	beq.n	800873a <HAL_TIM_ConfigClockSource+0x1de>
 8008684:	e062      	b.n	800874c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008696:	f001 f8e1 	bl	800985c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	609a      	str	r2, [r3, #8]
      break;
 80086b2:	e04f      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086c4:	f001 f8ca 	bl	800985c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689a      	ldr	r2, [r3, #8]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086d6:	609a      	str	r2, [r3, #8]
      break;
 80086d8:	e03c      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e6:	461a      	mov	r2, r3
 80086e8:	f000 ff86 	bl	80095f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2150      	movs	r1, #80	@ 0x50
 80086f2:	4618      	mov	r0, r3
 80086f4:	f001 f895 	bl	8009822 <TIM_ITRx_SetConfig>
      break;
 80086f8:	e02c      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008706:	461a      	mov	r2, r3
 8008708:	f000 ffe2 	bl	80096d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2160      	movs	r1, #96	@ 0x60
 8008712:	4618      	mov	r0, r3
 8008714:	f001 f885 	bl	8009822 <TIM_ITRx_SetConfig>
      break;
 8008718:	e01c      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008726:	461a      	mov	r2, r3
 8008728:	f000 ff66 	bl	80095f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2140      	movs	r1, #64	@ 0x40
 8008732:	4618      	mov	r0, r3
 8008734:	f001 f875 	bl	8009822 <TIM_ITRx_SetConfig>
      break;
 8008738:	e00c      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4619      	mov	r1, r3
 8008744:	4610      	mov	r0, r2
 8008746:	f001 f86c 	bl	8009822 <TIM_ITRx_SetConfig>
      break;
 800874a:	e003      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	73fb      	strb	r3, [r7, #15]
      break;
 8008750:	e000      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	00100070 	.word	0x00100070
 8008774:	00100060 	.word	0x00100060
 8008778:	00100050 	.word	0x00100050
 800877c:	00100040 	.word	0x00100040
 8008780:	00100030 	.word	0x00100030
 8008784:	00100020 	.word	0x00100020

08008788 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <HAL_TIM_SlaveConfigSynchro+0x18>
 800879c:	2302      	movs	r3, #2
 800879e:	e031      	b.n	8008804 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2202      	movs	r2, #2
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fdcc 	bl	8009350 <TIM_SlaveTimer_SetConfig>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d009      	beq.n	80087d2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e018      	b.n	8008804 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68da      	ldr	r2, [r3, #12]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087e0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68da      	ldr	r2, [r3, #12]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80087f0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	460b      	mov	r3, r1
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e14a      	b.n	8008b86 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	f040 80dd 	bne.w	8008ab8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80088fe:	7afb      	ldrb	r3, [r7, #11]
 8008900:	2b1f      	cmp	r3, #31
 8008902:	f200 80d6 	bhi.w	8008ab2 <HAL_TIM_RegisterCallback+0x1de>
 8008906:	a201      	add	r2, pc, #4	@ (adr r2, 800890c <HAL_TIM_RegisterCallback+0x38>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	0800898d 	.word	0x0800898d
 8008910:	08008995 	.word	0x08008995
 8008914:	0800899d 	.word	0x0800899d
 8008918:	080089a5 	.word	0x080089a5
 800891c:	080089ad 	.word	0x080089ad
 8008920:	080089b5 	.word	0x080089b5
 8008924:	080089bd 	.word	0x080089bd
 8008928:	080089c5 	.word	0x080089c5
 800892c:	080089cd 	.word	0x080089cd
 8008930:	080089d5 	.word	0x080089d5
 8008934:	080089dd 	.word	0x080089dd
 8008938:	080089e5 	.word	0x080089e5
 800893c:	080089ed 	.word	0x080089ed
 8008940:	080089f5 	.word	0x080089f5
 8008944:	080089ff 	.word	0x080089ff
 8008948:	08008a09 	.word	0x08008a09
 800894c:	08008a13 	.word	0x08008a13
 8008950:	08008a1d 	.word	0x08008a1d
 8008954:	08008a27 	.word	0x08008a27
 8008958:	08008a31 	.word	0x08008a31
 800895c:	08008a3b 	.word	0x08008a3b
 8008960:	08008a45 	.word	0x08008a45
 8008964:	08008a4f 	.word	0x08008a4f
 8008968:	08008a59 	.word	0x08008a59
 800896c:	08008a63 	.word	0x08008a63
 8008970:	08008a6d 	.word	0x08008a6d
 8008974:	08008a77 	.word	0x08008a77
 8008978:	08008a81 	.word	0x08008a81
 800897c:	08008a8b 	.word	0x08008a8b
 8008980:	08008a95 	.word	0x08008a95
 8008984:	08008a9f 	.word	0x08008a9f
 8008988:	08008aa9 	.word	0x08008aa9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008992:	e0f7      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800899a:	e0f3      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80089a2:	e0ef      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80089aa:	e0eb      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80089b2:	e0e7      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80089ba:	e0e3      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80089c2:	e0df      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80089ca:	e0db      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80089d2:	e0d7      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80089da:	e0d3      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80089e2:	e0cf      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80089ea:	e0cb      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80089f2:	e0c7      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80089fc:	e0c2      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008a06:	e0bd      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008a10:	e0b8      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008a1a:	e0b3      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008a24:	e0ae      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008a2e:	e0a9      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008a38:	e0a4      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008a42:	e09f      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008a4c:	e09a      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008a56:	e095      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008a60:	e090      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008a6a:	e08b      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008a74:	e086      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008a7e:	e081      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008a88:	e07c      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008a92:	e077      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008a9c:	e072      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008aa6:	e06d      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008ab0:	e068      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	75fb      	strb	r3, [r7, #23]
        break;
 8008ab6:	e065      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d15d      	bne.n	8008b80 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008ac4:	7afb      	ldrb	r3, [r7, #11]
 8008ac6:	2b0d      	cmp	r3, #13
 8008ac8:	d857      	bhi.n	8008b7a <HAL_TIM_RegisterCallback+0x2a6>
 8008aca:	a201      	add	r2, pc, #4	@ (adr r2, 8008ad0 <HAL_TIM_RegisterCallback+0x1fc>)
 8008acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad0:	08008b09 	.word	0x08008b09
 8008ad4:	08008b11 	.word	0x08008b11
 8008ad8:	08008b19 	.word	0x08008b19
 8008adc:	08008b21 	.word	0x08008b21
 8008ae0:	08008b29 	.word	0x08008b29
 8008ae4:	08008b31 	.word	0x08008b31
 8008ae8:	08008b39 	.word	0x08008b39
 8008aec:	08008b41 	.word	0x08008b41
 8008af0:	08008b49 	.word	0x08008b49
 8008af4:	08008b51 	.word	0x08008b51
 8008af8:	08008b59 	.word	0x08008b59
 8008afc:	08008b61 	.word	0x08008b61
 8008b00:	08008b69 	.word	0x08008b69
 8008b04:	08008b71 	.word	0x08008b71
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008b0e:	e039      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008b16:	e035      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008b1e:	e031      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008b26:	e02d      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008b2e:	e029      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008b36:	e025      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008b3e:	e021      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008b46:	e01d      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008b4e:	e019      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008b56:	e015      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008b5e:	e011      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008b66:	e00d      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008b6e:	e009      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008b78:	e004      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	75fb      	strb	r3, [r7, #23]
        break;
 8008b7e:	e001      	b.n	8008b84 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop

08008b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a4c      	ldr	r2, [pc, #304]	@ (8008cd8 <TIM_Base_SetConfig+0x144>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d017      	beq.n	8008bdc <TIM_Base_SetConfig+0x48>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bb2:	d013      	beq.n	8008bdc <TIM_Base_SetConfig+0x48>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a49      	ldr	r2, [pc, #292]	@ (8008cdc <TIM_Base_SetConfig+0x148>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d00f      	beq.n	8008bdc <TIM_Base_SetConfig+0x48>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a48      	ldr	r2, [pc, #288]	@ (8008ce0 <TIM_Base_SetConfig+0x14c>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d00b      	beq.n	8008bdc <TIM_Base_SetConfig+0x48>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a47      	ldr	r2, [pc, #284]	@ (8008ce4 <TIM_Base_SetConfig+0x150>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d007      	beq.n	8008bdc <TIM_Base_SetConfig+0x48>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a46      	ldr	r2, [pc, #280]	@ (8008ce8 <TIM_Base_SetConfig+0x154>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d003      	beq.n	8008bdc <TIM_Base_SetConfig+0x48>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a45      	ldr	r2, [pc, #276]	@ (8008cec <TIM_Base_SetConfig+0x158>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d108      	bne.n	8008bee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a39      	ldr	r2, [pc, #228]	@ (8008cd8 <TIM_Base_SetConfig+0x144>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d023      	beq.n	8008c3e <TIM_Base_SetConfig+0xaa>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bfc:	d01f      	beq.n	8008c3e <TIM_Base_SetConfig+0xaa>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a36      	ldr	r2, [pc, #216]	@ (8008cdc <TIM_Base_SetConfig+0x148>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d01b      	beq.n	8008c3e <TIM_Base_SetConfig+0xaa>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a35      	ldr	r2, [pc, #212]	@ (8008ce0 <TIM_Base_SetConfig+0x14c>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d017      	beq.n	8008c3e <TIM_Base_SetConfig+0xaa>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a34      	ldr	r2, [pc, #208]	@ (8008ce4 <TIM_Base_SetConfig+0x150>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d013      	beq.n	8008c3e <TIM_Base_SetConfig+0xaa>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a33      	ldr	r2, [pc, #204]	@ (8008ce8 <TIM_Base_SetConfig+0x154>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00f      	beq.n	8008c3e <TIM_Base_SetConfig+0xaa>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a33      	ldr	r2, [pc, #204]	@ (8008cf0 <TIM_Base_SetConfig+0x15c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00b      	beq.n	8008c3e <TIM_Base_SetConfig+0xaa>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a32      	ldr	r2, [pc, #200]	@ (8008cf4 <TIM_Base_SetConfig+0x160>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d007      	beq.n	8008c3e <TIM_Base_SetConfig+0xaa>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a31      	ldr	r2, [pc, #196]	@ (8008cf8 <TIM_Base_SetConfig+0x164>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d003      	beq.n	8008c3e <TIM_Base_SetConfig+0xaa>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a2c      	ldr	r2, [pc, #176]	@ (8008cec <TIM_Base_SetConfig+0x158>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d108      	bne.n	8008c50 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a18      	ldr	r2, [pc, #96]	@ (8008cd8 <TIM_Base_SetConfig+0x144>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d013      	beq.n	8008ca4 <TIM_Base_SetConfig+0x110>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ce8 <TIM_Base_SetConfig+0x154>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d00f      	beq.n	8008ca4 <TIM_Base_SetConfig+0x110>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a1a      	ldr	r2, [pc, #104]	@ (8008cf0 <TIM_Base_SetConfig+0x15c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d00b      	beq.n	8008ca4 <TIM_Base_SetConfig+0x110>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a19      	ldr	r2, [pc, #100]	@ (8008cf4 <TIM_Base_SetConfig+0x160>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d007      	beq.n	8008ca4 <TIM_Base_SetConfig+0x110>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a18      	ldr	r2, [pc, #96]	@ (8008cf8 <TIM_Base_SetConfig+0x164>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d003      	beq.n	8008ca4 <TIM_Base_SetConfig+0x110>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a13      	ldr	r2, [pc, #76]	@ (8008cec <TIM_Base_SetConfig+0x158>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d103      	bne.n	8008cac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	691a      	ldr	r2, [r3, #16]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d105      	bne.n	8008cca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	f023 0201 	bic.w	r2, r3, #1
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	611a      	str	r2, [r3, #16]
  }
}
 8008cca:	bf00      	nop
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40000400 	.word	0x40000400
 8008ce0:	40000800 	.word	0x40000800
 8008ce4:	40000c00 	.word	0x40000c00
 8008ce8:	40013400 	.word	0x40013400
 8008cec:	40015000 	.word	0x40015000
 8008cf0:	40014000 	.word	0x40014000
 8008cf4:	40014400 	.word	0x40014400
 8008cf8:	40014800 	.word	0x40014800

08008cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	f023 0201 	bic.w	r2, r3, #1
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f023 0303 	bic.w	r3, r3, #3
 8008d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f023 0302 	bic.w	r3, r3, #2
 8008d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a30      	ldr	r2, [pc, #192]	@ (8008e18 <TIM_OC1_SetConfig+0x11c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d013      	beq.n	8008d84 <TIM_OC1_SetConfig+0x88>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a2f      	ldr	r2, [pc, #188]	@ (8008e1c <TIM_OC1_SetConfig+0x120>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00f      	beq.n	8008d84 <TIM_OC1_SetConfig+0x88>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a2e      	ldr	r2, [pc, #184]	@ (8008e20 <TIM_OC1_SetConfig+0x124>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d00b      	beq.n	8008d84 <TIM_OC1_SetConfig+0x88>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8008e24 <TIM_OC1_SetConfig+0x128>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d007      	beq.n	8008d84 <TIM_OC1_SetConfig+0x88>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a2c      	ldr	r2, [pc, #176]	@ (8008e28 <TIM_OC1_SetConfig+0x12c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d003      	beq.n	8008d84 <TIM_OC1_SetConfig+0x88>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a2b      	ldr	r2, [pc, #172]	@ (8008e2c <TIM_OC1_SetConfig+0x130>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d10c      	bne.n	8008d9e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f023 0308 	bic.w	r3, r3, #8
 8008d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f023 0304 	bic.w	r3, r3, #4
 8008d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e18 <TIM_OC1_SetConfig+0x11c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d013      	beq.n	8008dce <TIM_OC1_SetConfig+0xd2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a1c      	ldr	r2, [pc, #112]	@ (8008e1c <TIM_OC1_SetConfig+0x120>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d00f      	beq.n	8008dce <TIM_OC1_SetConfig+0xd2>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a1b      	ldr	r2, [pc, #108]	@ (8008e20 <TIM_OC1_SetConfig+0x124>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d00b      	beq.n	8008dce <TIM_OC1_SetConfig+0xd2>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a1a      	ldr	r2, [pc, #104]	@ (8008e24 <TIM_OC1_SetConfig+0x128>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d007      	beq.n	8008dce <TIM_OC1_SetConfig+0xd2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a19      	ldr	r2, [pc, #100]	@ (8008e28 <TIM_OC1_SetConfig+0x12c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d003      	beq.n	8008dce <TIM_OC1_SetConfig+0xd2>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a18      	ldr	r2, [pc, #96]	@ (8008e2c <TIM_OC1_SetConfig+0x130>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d111      	bne.n	8008df2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	621a      	str	r2, [r3, #32]
}
 8008e0c:	bf00      	nop
 8008e0e:	371c      	adds	r7, #28
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	40012c00 	.word	0x40012c00
 8008e1c:	40013400 	.word	0x40013400
 8008e20:	40014000 	.word	0x40014000
 8008e24:	40014400 	.word	0x40014400
 8008e28:	40014800 	.word	0x40014800
 8008e2c:	40015000 	.word	0x40015000

08008e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	f023 0210 	bic.w	r2, r3, #16
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	021b      	lsls	r3, r3, #8
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f023 0320 	bic.w	r3, r3, #32
 8008e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	011b      	lsls	r3, r3, #4
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8008f40 <TIM_OC2_SetConfig+0x110>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d007      	beq.n	8008ea4 <TIM_OC2_SetConfig+0x74>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a2b      	ldr	r2, [pc, #172]	@ (8008f44 <TIM_OC2_SetConfig+0x114>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d003      	beq.n	8008ea4 <TIM_OC2_SetConfig+0x74>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8008f48 <TIM_OC2_SetConfig+0x118>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d10d      	bne.n	8008ec0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	011b      	lsls	r3, r3, #4
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ebe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8008f40 <TIM_OC2_SetConfig+0x110>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d013      	beq.n	8008ef0 <TIM_OC2_SetConfig+0xc0>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a1e      	ldr	r2, [pc, #120]	@ (8008f44 <TIM_OC2_SetConfig+0x114>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d00f      	beq.n	8008ef0 <TIM_OC2_SetConfig+0xc0>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8008f4c <TIM_OC2_SetConfig+0x11c>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d00b      	beq.n	8008ef0 <TIM_OC2_SetConfig+0xc0>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a1d      	ldr	r2, [pc, #116]	@ (8008f50 <TIM_OC2_SetConfig+0x120>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d007      	beq.n	8008ef0 <TIM_OC2_SetConfig+0xc0>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f54 <TIM_OC2_SetConfig+0x124>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d003      	beq.n	8008ef0 <TIM_OC2_SetConfig+0xc0>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a17      	ldr	r2, [pc, #92]	@ (8008f48 <TIM_OC2_SetConfig+0x118>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d113      	bne.n	8008f18 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	621a      	str	r2, [r3, #32]
}
 8008f32:	bf00      	nop
 8008f34:	371c      	adds	r7, #28
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	40012c00 	.word	0x40012c00
 8008f44:	40013400 	.word	0x40013400
 8008f48:	40015000 	.word	0x40015000
 8008f4c:	40014000 	.word	0x40014000
 8008f50:	40014400 	.word	0x40014400
 8008f54:	40014800 	.word	0x40014800

08008f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a1b      	ldr	r3, [r3, #32]
 8008f6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f023 0303 	bic.w	r3, r3, #3
 8008f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	021b      	lsls	r3, r3, #8
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8009064 <TIM_OC3_SetConfig+0x10c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d007      	beq.n	8008fca <TIM_OC3_SetConfig+0x72>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8009068 <TIM_OC3_SetConfig+0x110>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d003      	beq.n	8008fca <TIM_OC3_SetConfig+0x72>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a29      	ldr	r2, [pc, #164]	@ (800906c <TIM_OC3_SetConfig+0x114>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d10d      	bne.n	8008fe6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	021b      	lsls	r3, r3, #8
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8009064 <TIM_OC3_SetConfig+0x10c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d013      	beq.n	8009016 <TIM_OC3_SetConfig+0xbe>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8009068 <TIM_OC3_SetConfig+0x110>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d00f      	beq.n	8009016 <TIM_OC3_SetConfig+0xbe>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8009070 <TIM_OC3_SetConfig+0x118>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d00b      	beq.n	8009016 <TIM_OC3_SetConfig+0xbe>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a1c      	ldr	r2, [pc, #112]	@ (8009074 <TIM_OC3_SetConfig+0x11c>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d007      	beq.n	8009016 <TIM_OC3_SetConfig+0xbe>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a1b      	ldr	r2, [pc, #108]	@ (8009078 <TIM_OC3_SetConfig+0x120>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d003      	beq.n	8009016 <TIM_OC3_SetConfig+0xbe>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a16      	ldr	r2, [pc, #88]	@ (800906c <TIM_OC3_SetConfig+0x114>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d113      	bne.n	800903e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800901c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	011b      	lsls	r3, r3, #4
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4313      	orrs	r3, r2
 8009030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	011b      	lsls	r3, r3, #4
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	4313      	orrs	r3, r2
 800903c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	621a      	str	r2, [r3, #32]
}
 8009058:	bf00      	nop
 800905a:	371c      	adds	r7, #28
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	40012c00 	.word	0x40012c00
 8009068:	40013400 	.word	0x40013400
 800906c:	40015000 	.word	0x40015000
 8009070:	40014000 	.word	0x40014000
 8009074:	40014400 	.word	0x40014400
 8009078:	40014800 	.word	0x40014800

0800907c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	031b      	lsls	r3, r3, #12
 80090d2:	697a      	ldr	r2, [r7, #20]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a2c      	ldr	r2, [pc, #176]	@ (800918c <TIM_OC4_SetConfig+0x110>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d007      	beq.n	80090f0 <TIM_OC4_SetConfig+0x74>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a2b      	ldr	r2, [pc, #172]	@ (8009190 <TIM_OC4_SetConfig+0x114>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d003      	beq.n	80090f0 <TIM_OC4_SetConfig+0x74>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a2a      	ldr	r2, [pc, #168]	@ (8009194 <TIM_OC4_SetConfig+0x118>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d10d      	bne.n	800910c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	031b      	lsls	r3, r3, #12
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	4313      	orrs	r3, r2
 8009102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800910a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a1f      	ldr	r2, [pc, #124]	@ (800918c <TIM_OC4_SetConfig+0x110>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d013      	beq.n	800913c <TIM_OC4_SetConfig+0xc0>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a1e      	ldr	r2, [pc, #120]	@ (8009190 <TIM_OC4_SetConfig+0x114>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d00f      	beq.n	800913c <TIM_OC4_SetConfig+0xc0>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a1e      	ldr	r2, [pc, #120]	@ (8009198 <TIM_OC4_SetConfig+0x11c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d00b      	beq.n	800913c <TIM_OC4_SetConfig+0xc0>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a1d      	ldr	r2, [pc, #116]	@ (800919c <TIM_OC4_SetConfig+0x120>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d007      	beq.n	800913c <TIM_OC4_SetConfig+0xc0>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a1c      	ldr	r2, [pc, #112]	@ (80091a0 <TIM_OC4_SetConfig+0x124>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d003      	beq.n	800913c <TIM_OC4_SetConfig+0xc0>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a17      	ldr	r2, [pc, #92]	@ (8009194 <TIM_OC4_SetConfig+0x118>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d113      	bne.n	8009164 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009142:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800914a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	019b      	lsls	r3, r3, #6
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	4313      	orrs	r3, r2
 8009156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	019b      	lsls	r3, r3, #6
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	4313      	orrs	r3, r2
 8009162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	621a      	str	r2, [r3, #32]
}
 800917e:	bf00      	nop
 8009180:	371c      	adds	r7, #28
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	40012c00 	.word	0x40012c00
 8009190:	40013400 	.word	0x40013400
 8009194:	40015000 	.word	0x40015000
 8009198:	40014000 	.word	0x40014000
 800919c:	40014400 	.word	0x40014400
 80091a0:	40014800 	.word	0x40014800

080091a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80091e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	041b      	lsls	r3, r3, #16
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a19      	ldr	r2, [pc, #100]	@ (8009260 <TIM_OC5_SetConfig+0xbc>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d013      	beq.n	8009226 <TIM_OC5_SetConfig+0x82>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a18      	ldr	r2, [pc, #96]	@ (8009264 <TIM_OC5_SetConfig+0xc0>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d00f      	beq.n	8009226 <TIM_OC5_SetConfig+0x82>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a17      	ldr	r2, [pc, #92]	@ (8009268 <TIM_OC5_SetConfig+0xc4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d00b      	beq.n	8009226 <TIM_OC5_SetConfig+0x82>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a16      	ldr	r2, [pc, #88]	@ (800926c <TIM_OC5_SetConfig+0xc8>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d007      	beq.n	8009226 <TIM_OC5_SetConfig+0x82>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a15      	ldr	r2, [pc, #84]	@ (8009270 <TIM_OC5_SetConfig+0xcc>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d003      	beq.n	8009226 <TIM_OC5_SetConfig+0x82>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a14      	ldr	r2, [pc, #80]	@ (8009274 <TIM_OC5_SetConfig+0xd0>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d109      	bne.n	800923a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800922c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	021b      	lsls	r3, r3, #8
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	4313      	orrs	r3, r2
 8009238:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	621a      	str	r2, [r3, #32]
}
 8009254:	bf00      	nop
 8009256:	371c      	adds	r7, #28
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	40012c00 	.word	0x40012c00
 8009264:	40013400 	.word	0x40013400
 8009268:	40014000 	.word	0x40014000
 800926c:	40014400 	.word	0x40014400
 8009270:	40014800 	.word	0x40014800
 8009274:	40015000 	.word	0x40015000

08009278 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009278:	b480      	push	{r7}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800929e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	021b      	lsls	r3, r3, #8
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	051b      	lsls	r3, r3, #20
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a1a      	ldr	r2, [pc, #104]	@ (8009338 <TIM_OC6_SetConfig+0xc0>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d013      	beq.n	80092fc <TIM_OC6_SetConfig+0x84>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a19      	ldr	r2, [pc, #100]	@ (800933c <TIM_OC6_SetConfig+0xc4>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d00f      	beq.n	80092fc <TIM_OC6_SetConfig+0x84>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a18      	ldr	r2, [pc, #96]	@ (8009340 <TIM_OC6_SetConfig+0xc8>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d00b      	beq.n	80092fc <TIM_OC6_SetConfig+0x84>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a17      	ldr	r2, [pc, #92]	@ (8009344 <TIM_OC6_SetConfig+0xcc>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d007      	beq.n	80092fc <TIM_OC6_SetConfig+0x84>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a16      	ldr	r2, [pc, #88]	@ (8009348 <TIM_OC6_SetConfig+0xd0>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d003      	beq.n	80092fc <TIM_OC6_SetConfig+0x84>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a15      	ldr	r2, [pc, #84]	@ (800934c <TIM_OC6_SetConfig+0xd4>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d109      	bne.n	8009310 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009302:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	029b      	lsls	r3, r3, #10
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	4313      	orrs	r3, r2
 800930e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	621a      	str	r2, [r3, #32]
}
 800932a:	bf00      	nop
 800932c:	371c      	adds	r7, #28
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	40012c00 	.word	0x40012c00
 800933c:	40013400 	.word	0x40013400
 8009340:	40014000 	.word	0x40014000
 8009344:	40014400 	.word	0x40014400
 8009348:	40014800 	.word	0x40014800
 800934c:	40015000 	.word	0x40015000

08009350 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800936c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009370:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	4313      	orrs	r3, r2
 800937a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009382:	f023 0307 	bic.w	r3, r3, #7
 8009386:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	4313      	orrs	r3, r2
 8009390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	4a56      	ldr	r2, [pc, #344]	@ (80094f8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	f000 80a2 	beq.w	80094ea <TIM_SlaveTimer_SetConfig+0x19a>
 80093a6:	4a54      	ldr	r2, [pc, #336]	@ (80094f8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	f200 809b 	bhi.w	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 80093ae:	4a53      	ldr	r2, [pc, #332]	@ (80094fc <TIM_SlaveTimer_SetConfig+0x1ac>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	f000 809a 	beq.w	80094ea <TIM_SlaveTimer_SetConfig+0x19a>
 80093b6:	4a51      	ldr	r2, [pc, #324]	@ (80094fc <TIM_SlaveTimer_SetConfig+0x1ac>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	f200 8093 	bhi.w	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 80093be:	4a50      	ldr	r2, [pc, #320]	@ (8009500 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	f000 8092 	beq.w	80094ea <TIM_SlaveTimer_SetConfig+0x19a>
 80093c6:	4a4e      	ldr	r2, [pc, #312]	@ (8009500 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	f200 808b 	bhi.w	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 80093ce:	4a4d      	ldr	r2, [pc, #308]	@ (8009504 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	f000 808a 	beq.w	80094ea <TIM_SlaveTimer_SetConfig+0x19a>
 80093d6:	4a4b      	ldr	r2, [pc, #300]	@ (8009504 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	f200 8083 	bhi.w	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 80093de:	4a4a      	ldr	r2, [pc, #296]	@ (8009508 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	f000 8082 	beq.w	80094ea <TIM_SlaveTimer_SetConfig+0x19a>
 80093e6:	4a48      	ldr	r2, [pc, #288]	@ (8009508 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d87b      	bhi.n	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 80093ec:	4a47      	ldr	r2, [pc, #284]	@ (800950c <TIM_SlaveTimer_SetConfig+0x1bc>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d07b      	beq.n	80094ea <TIM_SlaveTimer_SetConfig+0x19a>
 80093f2:	4a46      	ldr	r2, [pc, #280]	@ (800950c <TIM_SlaveTimer_SetConfig+0x1bc>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d875      	bhi.n	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 80093f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80093fc:	d075      	beq.n	80094ea <TIM_SlaveTimer_SetConfig+0x19a>
 80093fe:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009402:	d86f      	bhi.n	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 8009404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009408:	d06f      	beq.n	80094ea <TIM_SlaveTimer_SetConfig+0x19a>
 800940a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800940e:	d869      	bhi.n	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 8009410:	2b70      	cmp	r3, #112	@ 0x70
 8009412:	d01a      	beq.n	800944a <TIM_SlaveTimer_SetConfig+0xfa>
 8009414:	2b70      	cmp	r3, #112	@ 0x70
 8009416:	d865      	bhi.n	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 8009418:	2b60      	cmp	r3, #96	@ 0x60
 800941a:	d059      	beq.n	80094d0 <TIM_SlaveTimer_SetConfig+0x180>
 800941c:	2b60      	cmp	r3, #96	@ 0x60
 800941e:	d861      	bhi.n	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 8009420:	2b50      	cmp	r3, #80	@ 0x50
 8009422:	d04b      	beq.n	80094bc <TIM_SlaveTimer_SetConfig+0x16c>
 8009424:	2b50      	cmp	r3, #80	@ 0x50
 8009426:	d85d      	bhi.n	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 8009428:	2b40      	cmp	r3, #64	@ 0x40
 800942a:	d019      	beq.n	8009460 <TIM_SlaveTimer_SetConfig+0x110>
 800942c:	2b40      	cmp	r3, #64	@ 0x40
 800942e:	d859      	bhi.n	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 8009430:	2b30      	cmp	r3, #48	@ 0x30
 8009432:	d05a      	beq.n	80094ea <TIM_SlaveTimer_SetConfig+0x19a>
 8009434:	2b30      	cmp	r3, #48	@ 0x30
 8009436:	d855      	bhi.n	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 8009438:	2b20      	cmp	r3, #32
 800943a:	d056      	beq.n	80094ea <TIM_SlaveTimer_SetConfig+0x19a>
 800943c:	2b20      	cmp	r3, #32
 800943e:	d851      	bhi.n	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
 8009440:	2b00      	cmp	r3, #0
 8009442:	d052      	beq.n	80094ea <TIM_SlaveTimer_SetConfig+0x19a>
 8009444:	2b10      	cmp	r3, #16
 8009446:	d050      	beq.n	80094ea <TIM_SlaveTimer_SetConfig+0x19a>
 8009448:	e04c      	b.n	80094e4 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800945a:	f000 f9ff 	bl	800985c <TIM_ETR_SetConfig>
      break;
 800945e:	e045      	b.n	80094ec <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b05      	cmp	r3, #5
 8009466:	d004      	beq.n	8009472 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800946c:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009470:	d101      	bne.n	8009476 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e03b      	b.n	80094ee <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6a1b      	ldr	r3, [r3, #32]
 800947c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	6a1a      	ldr	r2, [r3, #32]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 0201 	bic.w	r2, r2, #1
 800948c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800949c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	011b      	lsls	r3, r3, #4
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	621a      	str	r2, [r3, #32]
      break;
 80094ba:	e017      	b.n	80094ec <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094c8:	461a      	mov	r2, r3
 80094ca:	f000 f895 	bl	80095f8 <TIM_TI1_ConfigInputStage>
      break;
 80094ce:	e00d      	b.n	80094ec <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094dc:	461a      	mov	r2, r3
 80094de:	f000 f8f7 	bl	80096d0 <TIM_TI2_ConfigInputStage>
      break;
 80094e2:	e003      	b.n	80094ec <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	75fb      	strb	r3, [r7, #23]
      break;
 80094e8:	e000      	b.n	80094ec <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80094ea:	bf00      	nop
  }

  return status;
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	00100070 	.word	0x00100070
 80094fc:	00100060 	.word	0x00100060
 8009500:	00100050 	.word	0x00100050
 8009504:	00100040 	.word	0x00100040
 8009508:	00100030 	.word	0x00100030
 800950c:	00100020 	.word	0x00100020

08009510 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6a1b      	ldr	r3, [r3, #32]
 8009528:	f023 0201 	bic.w	r2, r3, #1
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	4a28      	ldr	r2, [pc, #160]	@ (80095dc <TIM_TI1_SetConfig+0xcc>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d01b      	beq.n	8009576 <TIM_TI1_SetConfig+0x66>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009544:	d017      	beq.n	8009576 <TIM_TI1_SetConfig+0x66>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4a25      	ldr	r2, [pc, #148]	@ (80095e0 <TIM_TI1_SetConfig+0xd0>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d013      	beq.n	8009576 <TIM_TI1_SetConfig+0x66>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	4a24      	ldr	r2, [pc, #144]	@ (80095e4 <TIM_TI1_SetConfig+0xd4>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d00f      	beq.n	8009576 <TIM_TI1_SetConfig+0x66>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	4a23      	ldr	r2, [pc, #140]	@ (80095e8 <TIM_TI1_SetConfig+0xd8>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d00b      	beq.n	8009576 <TIM_TI1_SetConfig+0x66>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4a22      	ldr	r2, [pc, #136]	@ (80095ec <TIM_TI1_SetConfig+0xdc>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d007      	beq.n	8009576 <TIM_TI1_SetConfig+0x66>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4a21      	ldr	r2, [pc, #132]	@ (80095f0 <TIM_TI1_SetConfig+0xe0>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d003      	beq.n	8009576 <TIM_TI1_SetConfig+0x66>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4a20      	ldr	r2, [pc, #128]	@ (80095f4 <TIM_TI1_SetConfig+0xe4>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d101      	bne.n	800957a <TIM_TI1_SetConfig+0x6a>
 8009576:	2301      	movs	r3, #1
 8009578:	e000      	b.n	800957c <TIM_TI1_SetConfig+0x6c>
 800957a:	2300      	movs	r3, #0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d008      	beq.n	8009592 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f023 0303 	bic.w	r3, r3, #3
 8009586:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4313      	orrs	r3, r2
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	e003      	b.n	800959a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f043 0301 	orr.w	r3, r3, #1
 8009598:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	011b      	lsls	r3, r3, #4
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	f023 030a 	bic.w	r3, r3, #10
 80095b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	f003 030a 	and.w	r3, r3, #10
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	4313      	orrs	r3, r2
 80095c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	621a      	str	r2, [r3, #32]
}
 80095ce:	bf00      	nop
 80095d0:	371c      	adds	r7, #28
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	40012c00 	.word	0x40012c00
 80095e0:	40000400 	.word	0x40000400
 80095e4:	40000800 	.word	0x40000800
 80095e8:	40000c00 	.word	0x40000c00
 80095ec:	40013400 	.word	0x40013400
 80095f0:	40014000 	.word	0x40014000
 80095f4:	40015000 	.word	0x40015000

080095f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	f023 0201 	bic.w	r2, r3, #1
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	011b      	lsls	r3, r3, #4
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	4313      	orrs	r3, r2
 800962c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f023 030a 	bic.w	r3, r3, #10
 8009634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4313      	orrs	r3, r2
 800963c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	621a      	str	r2, [r3, #32]
}
 800964a:	bf00      	nop
 800964c:	371c      	adds	r7, #28
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009656:	b480      	push	{r7}
 8009658:	b087      	sub	sp, #28
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	607a      	str	r2, [r7, #4]
 8009662:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	f023 0210 	bic.w	r2, r3, #16
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	021b      	lsls	r3, r3, #8
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	4313      	orrs	r3, r2
 800968c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009694:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	031b      	lsls	r3, r3, #12
 800969a:	b29b      	uxth	r3, r3
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	4313      	orrs	r3, r2
 80096a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80096a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	011b      	lsls	r3, r3, #4
 80096ae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	697a      	ldr	r2, [r7, #20]
 80096c2:	621a      	str	r2, [r3, #32]
}
 80096c4:	bf00      	nop
 80096c6:	371c      	adds	r7, #28
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	f023 0210 	bic.w	r2, r3, #16
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80096fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	031b      	lsls	r3, r3, #12
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	4313      	orrs	r3, r2
 8009704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800970c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	011b      	lsls	r3, r3, #4
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	621a      	str	r2, [r3, #32]
}
 8009724:	bf00      	nop
 8009726:	371c      	adds	r7, #28
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
 800973c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f023 0303 	bic.w	r3, r3, #3
 800975c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4313      	orrs	r3, r2
 8009764:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800976c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	011b      	lsls	r3, r3, #4
 8009772:	b2db      	uxtb	r3, r3
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	4313      	orrs	r3, r2
 8009778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009780:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	021b      	lsls	r3, r3, #8
 8009786:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	4313      	orrs	r3, r2
 800978e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	621a      	str	r2, [r3, #32]
}
 800979c:	bf00      	nop
 800979e:	371c      	adds	r7, #28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
 80097b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6a1b      	ldr	r3, [r3, #32]
 80097c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	021b      	lsls	r3, r3, #8
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	4313      	orrs	r3, r2
 80097de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	031b      	lsls	r3, r3, #12
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80097fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	031b      	lsls	r3, r3, #12
 8009800:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	4313      	orrs	r3, r2
 8009808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	621a      	str	r2, [r3, #32]
}
 8009816:	bf00      	nop
 8009818:	371c      	adds	r7, #28
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009822:	b480      	push	{r7}
 8009824:	b085      	sub	sp, #20
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800983c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4313      	orrs	r3, r2
 8009844:	f043 0307 	orr.w	r3, r3, #7
 8009848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	609a      	str	r2, [r3, #8]
}
 8009850:	bf00      	nop
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	021a      	lsls	r2, r3, #8
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	431a      	orrs	r2, r3
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	4313      	orrs	r3, r2
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	4313      	orrs	r3, r2
 8009888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	609a      	str	r2, [r3, #8]
}
 8009890:	bf00      	nop
 8009892:	371c      	adds	r7, #28
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f003 031f 	and.w	r3, r3, #31
 80098ae:	2201      	movs	r2, #1
 80098b0:	fa02 f303 	lsl.w	r3, r2, r3
 80098b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6a1a      	ldr	r2, [r3, #32]
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	43db      	mvns	r3, r3
 80098be:	401a      	ands	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6a1a      	ldr	r2, [r3, #32]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f003 031f 	and.w	r3, r3, #31
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	fa01 f303 	lsl.w	r3, r1, r3
 80098d4:	431a      	orrs	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	621a      	str	r2, [r3, #32]
}
 80098da:	bf00      	nop
 80098dc:	371c      	adds	r7, #28
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
	...

080098e8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a26      	ldr	r2, [pc, #152]	@ (800998c <TIM_ResetCallback+0xa4>)
 80098f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a25      	ldr	r2, [pc, #148]	@ (8009990 <TIM_ResetCallback+0xa8>)
 80098fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a24      	ldr	r2, [pc, #144]	@ (8009994 <TIM_ResetCallback+0xac>)
 8009904:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a23      	ldr	r2, [pc, #140]	@ (8009998 <TIM_ResetCallback+0xb0>)
 800990c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a22      	ldr	r2, [pc, #136]	@ (800999c <TIM_ResetCallback+0xb4>)
 8009914:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a21      	ldr	r2, [pc, #132]	@ (80099a0 <TIM_ResetCallback+0xb8>)
 800991c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a20      	ldr	r2, [pc, #128]	@ (80099a4 <TIM_ResetCallback+0xbc>)
 8009924:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a1f      	ldr	r2, [pc, #124]	@ (80099a8 <TIM_ResetCallback+0xc0>)
 800992c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a1e      	ldr	r2, [pc, #120]	@ (80099ac <TIM_ResetCallback+0xc4>)
 8009934:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a1d      	ldr	r2, [pc, #116]	@ (80099b0 <TIM_ResetCallback+0xc8>)
 800993c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a1c      	ldr	r2, [pc, #112]	@ (80099b4 <TIM_ResetCallback+0xcc>)
 8009944:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a1b      	ldr	r2, [pc, #108]	@ (80099b8 <TIM_ResetCallback+0xd0>)
 800994c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a1a      	ldr	r2, [pc, #104]	@ (80099bc <TIM_ResetCallback+0xd4>)
 8009954:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a19      	ldr	r2, [pc, #100]	@ (80099c0 <TIM_ResetCallback+0xd8>)
 800995c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a18      	ldr	r2, [pc, #96]	@ (80099c4 <TIM_ResetCallback+0xdc>)
 8009964:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a17      	ldr	r2, [pc, #92]	@ (80099c8 <TIM_ResetCallback+0xe0>)
 800996c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a16      	ldr	r2, [pc, #88]	@ (80099cc <TIM_ResetCallback+0xe4>)
 8009974:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a15      	ldr	r2, [pc, #84]	@ (80099d0 <TIM_ResetCallback+0xe8>)
 800997c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	0800880d 	.word	0x0800880d
 8009990:	08008821 	.word	0x08008821
 8009994:	08008899 	.word	0x08008899
 8009998:	080088ad 	.word	0x080088ad
 800999c:	08008849 	.word	0x08008849
 80099a0:	0800885d 	.word	0x0800885d
 80099a4:	08008835 	.word	0x08008835
 80099a8:	08008871 	.word	0x08008871
 80099ac:	08008885 	.word	0x08008885
 80099b0:	080088c1 	.word	0x080088c1
 80099b4:	08009b01 	.word	0x08009b01
 80099b8:	08009b15 	.word	0x08009b15
 80099bc:	08009b29 	.word	0x08009b29
 80099c0:	08009b3d 	.word	0x08009b3d
 80099c4:	08009b51 	.word	0x08009b51
 80099c8:	08009b65 	.word	0x08009b65
 80099cc:	08009b79 	.word	0x08009b79
 80099d0:	08009b8d 	.word	0x08009b8d

080099d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d101      	bne.n	80099ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099e8:	2302      	movs	r3, #2
 80099ea:	e074      	b.n	8009ad6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a34      	ldr	r2, [pc, #208]	@ (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d009      	beq.n	8009a2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a33      	ldr	r2, [pc, #204]	@ (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d004      	beq.n	8009a2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a31      	ldr	r2, [pc, #196]	@ (8009aec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d108      	bne.n	8009a3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009a30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a21      	ldr	r2, [pc, #132]	@ (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d022      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a6c:	d01d      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a1f      	ldr	r2, [pc, #124]	@ (8009af0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d018      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009af4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d013      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a1c      	ldr	r2, [pc, #112]	@ (8009af8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d00e      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a15      	ldr	r2, [pc, #84]	@ (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d009      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a18      	ldr	r2, [pc, #96]	@ (8009afc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d004      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a11      	ldr	r2, [pc, #68]	@ (8009aec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d10c      	bne.n	8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	40012c00 	.word	0x40012c00
 8009ae8:	40013400 	.word	0x40013400
 8009aec:	40015000 	.word	0x40015000
 8009af0:	40000400 	.word	0x40000400
 8009af4:	40000800 	.word	0x40000800
 8009af8:	40000c00 	.word	0x40000c00
 8009afc:	40014000 	.word	0x40014000

08009b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e050      	b.n	8009c54 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d114      	bne.n	8009be6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fdc5 	bl	800a754 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d103      	bne.n	8009bdc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a21      	ldr	r2, [pc, #132]	@ (8009c5c <HAL_UART_Init+0xbc>)
 8009bd8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2224      	movs	r2, #36	@ 0x24
 8009bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f022 0201 	bic.w	r2, r2, #1
 8009bfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d002      	beq.n	8009c0c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f001 f8f2 	bl	800adf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fdf3 	bl	800a7f8 <UART_SetConfig>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d101      	bne.n	8009c1c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e01b      	b.n	8009c54 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689a      	ldr	r2, [r3, #8]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f042 0201 	orr.w	r2, r2, #1
 8009c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f001 f971 	bl	800af34 <UART_CheckIdleState>
 8009c52:	4603      	mov	r3, r0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	080051e1 	.word	0x080051e1

08009c60 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	607a      	str	r2, [r7, #4]
 8009c6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d109      	bne.n	8009c8c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e09c      	b.n	8009dc6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c92:	2b20      	cmp	r3, #32
 8009c94:	d16c      	bne.n	8009d70 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009c96:	7afb      	ldrb	r3, [r7, #11]
 8009c98:	2b0c      	cmp	r3, #12
 8009c9a:	d85e      	bhi.n	8009d5a <HAL_UART_RegisterCallback+0xfa>
 8009c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca4 <HAL_UART_RegisterCallback+0x44>)
 8009c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	08009cd9 	.word	0x08009cd9
 8009ca8:	08009ce3 	.word	0x08009ce3
 8009cac:	08009ced 	.word	0x08009ced
 8009cb0:	08009cf7 	.word	0x08009cf7
 8009cb4:	08009d01 	.word	0x08009d01
 8009cb8:	08009d0b 	.word	0x08009d0b
 8009cbc:	08009d15 	.word	0x08009d15
 8009cc0:	08009d1f 	.word	0x08009d1f
 8009cc4:	08009d29 	.word	0x08009d29
 8009cc8:	08009d33 	.word	0x08009d33
 8009ccc:	08009d3d 	.word	0x08009d3d
 8009cd0:	08009d47 	.word	0x08009d47
 8009cd4:	08009d51 	.word	0x08009d51
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009ce0:	e070      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009cea:	e06b      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009cf4:	e066      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009cfe:	e061      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009d08:	e05c      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009d12:	e057      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009d1c:	e052      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009d26:	e04d      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009d30:	e048      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009d3a:	e043      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009d44:	e03e      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009d4e:	e039      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009d58:	e034      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	75fb      	strb	r3, [r7, #23]
        break;
 8009d6e:	e029      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d11a      	bne.n	8009db0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009d7a:	7afb      	ldrb	r3, [r7, #11]
 8009d7c:	2b0b      	cmp	r3, #11
 8009d7e:	d002      	beq.n	8009d86 <HAL_UART_RegisterCallback+0x126>
 8009d80:	2b0c      	cmp	r3, #12
 8009d82:	d005      	beq.n	8009d90 <HAL_UART_RegisterCallback+0x130>
 8009d84:	e009      	b.n	8009d9a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009d8e:	e019      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009d98:	e014      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009da0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	75fb      	strb	r3, [r7, #23]
        break;
 8009dae:	e009      	b.n	8009dc4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009db6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop

08009dd4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08a      	sub	sp, #40	@ 0x28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	4613      	mov	r3, r2
 8009de0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009de8:	2b20      	cmp	r3, #32
 8009dea:	d167      	bne.n	8009ebc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d002      	beq.n	8009df8 <HAL_UART_Transmit_DMA+0x24>
 8009df2:	88fb      	ldrh	r3, [r7, #6]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d101      	bne.n	8009dfc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e060      	b.n	8009ebe <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	88fa      	ldrh	r2, [r7, #6]
 8009e06:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	88fa      	ldrh	r2, [r7, #6]
 8009e0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2221      	movs	r2, #33	@ 0x21
 8009e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d028      	beq.n	8009e7c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e2e:	4a26      	ldr	r2, [pc, #152]	@ (8009ec8 <HAL_UART_Transmit_DMA+0xf4>)
 8009e30:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e36:	4a25      	ldr	r2, [pc, #148]	@ (8009ecc <HAL_UART_Transmit_DMA+0xf8>)
 8009e38:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e3e:	4a24      	ldr	r2, [pc, #144]	@ (8009ed0 <HAL_UART_Transmit_DMA+0xfc>)
 8009e40:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e46:	2200      	movs	r2, #0
 8009e48:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e52:	4619      	mov	r1, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3328      	adds	r3, #40	@ 0x28
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	88fb      	ldrh	r3, [r7, #6]
 8009e5e:	f7fb fd4d 	bl	80058fc <HAL_DMA_Start_IT>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d009      	beq.n	8009e7c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2210      	movs	r2, #16
 8009e6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2220      	movs	r2, #32
 8009e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e020      	b.n	8009ebe <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2240      	movs	r2, #64	@ 0x40
 8009e82:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	3308      	adds	r3, #8
 8009e8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	e853 3f00 	ldrex	r3, [r3]
 8009e92:	613b      	str	r3, [r7, #16]
   return(result);
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3308      	adds	r3, #8
 8009ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ea4:	623a      	str	r2, [r7, #32]
 8009ea6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea8:	69f9      	ldr	r1, [r7, #28]
 8009eaa:	6a3a      	ldr	r2, [r7, #32]
 8009eac:	e841 2300 	strex	r3, r2, [r1]
 8009eb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1e5      	bne.n	8009e84 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	e000      	b.n	8009ebe <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009ebc:	2302      	movs	r3, #2
  }
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3728      	adds	r7, #40	@ 0x28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	0800b3ff 	.word	0x0800b3ff
 8009ecc:	0800b49d 	.word	0x0800b49d
 8009ed0:	0800b637 	.word	0x0800b637

08009ed4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b08a      	sub	sp, #40	@ 0x28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ee8:	2b20      	cmp	r3, #32
 8009eea:	d137      	bne.n	8009f5c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <HAL_UART_Receive_DMA+0x24>
 8009ef2:	88fb      	ldrh	r3, [r7, #6]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e030      	b.n	8009f5e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a18      	ldr	r2, [pc, #96]	@ (8009f68 <HAL_UART_Receive_DMA+0x94>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d01f      	beq.n	8009f4c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d018      	beq.n	8009f4c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	e853 3f00 	ldrex	r3, [r3]
 8009f26:	613b      	str	r3, [r7, #16]
   return(result);
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	461a      	mov	r2, r3
 8009f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f38:	623b      	str	r3, [r7, #32]
 8009f3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3c:	69f9      	ldr	r1, [r7, #28]
 8009f3e:	6a3a      	ldr	r2, [r7, #32]
 8009f40:	e841 2300 	strex	r3, r2, [r1]
 8009f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1e6      	bne.n	8009f1a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009f4c:	88fb      	ldrh	r3, [r7, #6]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	68b9      	ldr	r1, [r7, #8]
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f001 f906 	bl	800b164 <UART_Start_Receive_DMA>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	e000      	b.n	8009f5e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009f5c:	2302      	movs	r3, #2
  }
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3728      	adds	r7, #40	@ 0x28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	40008000 	.word	0x40008000

08009f6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b0ba      	sub	sp, #232	@ 0xe8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009f96:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d11b      	bne.n	8009fe0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fac:	f003 0320 	and.w	r3, r3, #32
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d015      	beq.n	8009fe0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fb8:	f003 0320 	and.w	r3, r3, #32
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d105      	bne.n	8009fcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d009      	beq.n	8009fe0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 82f3 	beq.w	800a5bc <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	4798      	blx	r3
      }
      return;
 8009fde:	e2ed      	b.n	800a5bc <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 8129 	beq.w	800a23c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009fea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009fee:	4b90      	ldr	r3, [pc, #576]	@ (800a230 <HAL_UART_IRQHandler+0x2c4>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ff6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009ffa:	4b8e      	ldr	r3, [pc, #568]	@ (800a234 <HAL_UART_IRQHandler+0x2c8>)
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 811c 	beq.w	800a23c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d011      	beq.n	800a034 <HAL_UART_IRQHandler+0xc8>
 800a010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00b      	beq.n	800a034 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2201      	movs	r2, #1
 800a022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a02a:	f043 0201 	orr.w	r2, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a038:	f003 0302 	and.w	r3, r3, #2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d011      	beq.n	800a064 <HAL_UART_IRQHandler+0xf8>
 800a040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00b      	beq.n	800a064 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2202      	movs	r2, #2
 800a052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a05a:	f043 0204 	orr.w	r2, r3, #4
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a068:	f003 0304 	and.w	r3, r3, #4
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d011      	beq.n	800a094 <HAL_UART_IRQHandler+0x128>
 800a070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a074:	f003 0301 	and.w	r3, r3, #1
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00b      	beq.n	800a094 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2204      	movs	r2, #4
 800a082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a08a:	f043 0202 	orr.w	r2, r3, #2
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a098:	f003 0308 	and.w	r3, r3, #8
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d017      	beq.n	800a0d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0a4:	f003 0320 	and.w	r3, r3, #32
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d105      	bne.n	800a0b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a0ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a0b0:	4b5f      	ldr	r3, [pc, #380]	@ (800a230 <HAL_UART_IRQHandler+0x2c4>)
 800a0b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00b      	beq.n	800a0d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2208      	movs	r2, #8
 800a0be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0c6:	f043 0208 	orr.w	r2, r3, #8
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a0d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d012      	beq.n	800a102 <HAL_UART_IRQHandler+0x196>
 800a0dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00c      	beq.n	800a102 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0f8:	f043 0220 	orr.w	r2, r3, #32
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 8259 	beq.w	800a5c0 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a112:	f003 0320 	and.w	r3, r3, #32
 800a116:	2b00      	cmp	r3, #0
 800a118:	d013      	beq.n	800a142 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a11a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a11e:	f003 0320 	and.w	r3, r3, #32
 800a122:	2b00      	cmp	r3, #0
 800a124:	d105      	bne.n	800a132 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a12a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d007      	beq.n	800a142 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a148:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a156:	2b40      	cmp	r3, #64	@ 0x40
 800a158:	d005      	beq.n	800a166 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a15a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a15e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a162:	2b00      	cmp	r3, #0
 800a164:	d058      	beq.n	800a218 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f001 f8e3 	bl	800b332 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a176:	2b40      	cmp	r3, #64	@ 0x40
 800a178:	d148      	bne.n	800a20c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3308      	adds	r3, #8
 800a180:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a184:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a188:	e853 3f00 	ldrex	r3, [r3]
 800a18c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a1a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a1aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a1b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a1b6:	e841 2300 	strex	r3, r2, [r1]
 800a1ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a1be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1d9      	bne.n	800a17a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d017      	beq.n	800a200 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1d6:	4a18      	ldr	r2, [pc, #96]	@ (800a238 <HAL_UART_IRQHandler+0x2cc>)
 800a1d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fb fc5f 	bl	8005aa4 <HAL_DMA_Abort_IT>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d01f      	beq.n	800a22c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1fe:	e015      	b.n	800a22c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a20a:	e00f      	b.n	800a22c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a216:	e009      	b.n	800a22c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a22a:	e1c9      	b.n	800a5c0 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a22c:	bf00      	nop
    return;
 800a22e:	e1c7      	b.n	800a5c0 <HAL_UART_IRQHandler+0x654>
 800a230:	10000001 	.word	0x10000001
 800a234:	04000120 	.word	0x04000120
 800a238:	0800b6bb 	.word	0x0800b6bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a240:	2b01      	cmp	r3, #1
 800a242:	f040 8157 	bne.w	800a4f4 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a24a:	f003 0310 	and.w	r3, r3, #16
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f000 8150 	beq.w	800a4f4 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a258:	f003 0310 	and.w	r3, r3, #16
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f000 8149 	beq.w	800a4f4 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2210      	movs	r2, #16
 800a268:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a274:	2b40      	cmp	r3, #64	@ 0x40
 800a276:	f040 80bd 	bne.w	800a3f4 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a288:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 8199 	beq.w	800a5c4 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a298:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a29c:	429a      	cmp	r2, r3
 800a29e:	f080 8191 	bcs.w	800a5c4 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0320 	and.w	r3, r3, #32
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f040 8087 	bne.w	800a3ce <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a2cc:	e853 3f00 	ldrex	r3, [r3]
 800a2d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a2d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a2d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a2ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a2f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a2fa:	e841 2300 	strex	r3, r2, [r1]
 800a2fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1da      	bne.n	800a2c0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3308      	adds	r3, #8
 800a310:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a314:	e853 3f00 	ldrex	r3, [r3]
 800a318:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a31a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a31c:	f023 0301 	bic.w	r3, r3, #1
 800a320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3308      	adds	r3, #8
 800a32a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a32e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a332:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a334:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a336:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a33a:	e841 2300 	strex	r3, r2, [r1]
 800a33e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1e1      	bne.n	800a30a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3308      	adds	r3, #8
 800a34c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a350:	e853 3f00 	ldrex	r3, [r3]
 800a354:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a35c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3308      	adds	r3, #8
 800a366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a36a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a36c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a370:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a372:	e841 2300 	strex	r3, r2, [r1]
 800a376:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1e3      	bne.n	800a346 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2220      	movs	r2, #32
 800a382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a394:	e853 3f00 	ldrex	r3, [r3]
 800a398:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a39a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a39c:	f023 0310 	bic.w	r3, r3, #16
 800a3a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e4      	bne.n	800a38c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fb fb12 	bl	80059f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a3e6:	b292      	uxth	r2, r2
 800a3e8:	1a8a      	subs	r2, r1, r2
 800a3ea:	b292      	uxth	r2, r2
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3f2:	e0e7      	b.n	800a5c4 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a400:	b29b      	uxth	r3, r3
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a40e:	b29b      	uxth	r3, r3
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 80d9 	beq.w	800a5c8 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a416:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f000 80d4 	beq.w	800a5c8 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a428:	e853 3f00 	ldrex	r3, [r3]
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a434:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	461a      	mov	r2, r3
 800a43e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a442:	647b      	str	r3, [r7, #68]	@ 0x44
 800a444:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a446:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a448:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a44a:	e841 2300 	strex	r3, r2, [r1]
 800a44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1e4      	bne.n	800a420 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3308      	adds	r3, #8
 800a45c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a460:	e853 3f00 	ldrex	r3, [r3]
 800a464:	623b      	str	r3, [r7, #32]
   return(result);
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a46c:	f023 0301 	bic.w	r3, r3, #1
 800a470:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3308      	adds	r3, #8
 800a47a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a47e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a480:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a486:	e841 2300 	strex	r3, r2, [r1]
 800a48a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1e1      	bne.n	800a456 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2220      	movs	r2, #32
 800a496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	e853 3f00 	ldrex	r3, [r3]
 800a4b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f023 0310 	bic.w	r3, r3, #16
 800a4ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a4c8:	61fb      	str	r3, [r7, #28]
 800a4ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4cc:	69b9      	ldr	r1, [r7, #24]
 800a4ce:	69fa      	ldr	r2, [r7, #28]
 800a4d0:	e841 2300 	strex	r3, r2, [r1]
 800a4d4:	617b      	str	r3, [r7, #20]
   return(result);
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1e4      	bne.n	800a4a6 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a4e8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a4f2:	e069      	b.n	800a5c8 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d010      	beq.n	800a522 <HAL_UART_IRQHandler+0x5b6>
 800a500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00a      	beq.n	800a522 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a514:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a520:	e055      	b.n	800a5ce <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d014      	beq.n	800a558 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a52e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a536:	2b00      	cmp	r3, #0
 800a538:	d105      	bne.n	800a546 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a53a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a53e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a542:	2b00      	cmp	r3, #0
 800a544:	d008      	beq.n	800a558 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d03e      	beq.n	800a5cc <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	4798      	blx	r3
    }
    return;
 800a556:	e039      	b.n	800a5cc <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a55c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a560:	2b00      	cmp	r3, #0
 800a562:	d009      	beq.n	800a578 <HAL_UART_IRQHandler+0x60c>
 800a564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d003      	beq.n	800a578 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f001 f8ba 	bl	800b6ea <UART_EndTransmit_IT>
    return;
 800a576:	e02a      	b.n	800a5ce <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a57c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00b      	beq.n	800a59c <HAL_UART_IRQHandler+0x630>
 800a584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a588:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d005      	beq.n	800a59c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a59a:	e018      	b.n	800a5ce <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a59c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d012      	beq.n	800a5ce <HAL_UART_IRQHandler+0x662>
 800a5a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	da0e      	bge.n	800a5ce <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5ba:	e008      	b.n	800a5ce <HAL_UART_IRQHandler+0x662>
      return;
 800a5bc:	bf00      	nop
 800a5be:	e006      	b.n	800a5ce <HAL_UART_IRQHandler+0x662>
    return;
 800a5c0:	bf00      	nop
 800a5c2:	e004      	b.n	800a5ce <HAL_UART_IRQHandler+0x662>
      return;
 800a5c4:	bf00      	nop
 800a5c6:	e002      	b.n	800a5ce <HAL_UART_IRQHandler+0x662>
      return;
 800a5c8:	bf00      	nop
 800a5ca:	e000      	b.n	800a5ce <HAL_UART_IRQHandler+0x662>
    return;
 800a5cc:	bf00      	nop
  }
}
 800a5ce:	37e8      	adds	r7, #232	@ 0xe8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a09      	ldr	r2, [pc, #36]	@ (800a6c0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d009      	beq.n	800a6b4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	430a      	orrs	r2, r1
 800a6b2:	615a      	str	r2, [r3, #20]
  }
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	40008000 	.word	0x40008000

0800a6c4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a18      	ldr	r2, [pc, #96]	@ (800a734 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d027      	beq.n	800a726 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6dc:	2b20      	cmp	r3, #32
 800a6de:	d120      	bne.n	800a722 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d101      	bne.n	800a6ee <HAL_UART_EnableReceiverTimeout+0x2a>
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	e01c      	b.n	800a728 <HAL_UART_EnableReceiverTimeout+0x64>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2224      	movs	r2, #36	@ 0x24
 800a6fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	685a      	ldr	r2, [r3, #4]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a70c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2220      	movs	r2, #32
 800a712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	e002      	b.n	800a728 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a722:	2302      	movs	r3, #2
 800a724:	e000      	b.n	800a728 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
  }
}
 800a728:	4618      	mov	r0, r3
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	40008000 	.word	0x40008000

0800a738 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a746:	4618      	mov	r0, r3
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
	...

0800a754 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a1a      	ldr	r2, [pc, #104]	@ (800a7c8 <UART_InitCallbacksToDefault+0x74>)
 800a760:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a19      	ldr	r2, [pc, #100]	@ (800a7cc <UART_InitCallbacksToDefault+0x78>)
 800a768:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a18      	ldr	r2, [pc, #96]	@ (800a7d0 <UART_InitCallbacksToDefault+0x7c>)
 800a770:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a17      	ldr	r2, [pc, #92]	@ (800a7d4 <UART_InitCallbacksToDefault+0x80>)
 800a778:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a16      	ldr	r2, [pc, #88]	@ (800a7d8 <UART_InitCallbacksToDefault+0x84>)
 800a780:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a15      	ldr	r2, [pc, #84]	@ (800a7dc <UART_InitCallbacksToDefault+0x88>)
 800a788:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a14      	ldr	r2, [pc, #80]	@ (800a7e0 <UART_InitCallbacksToDefault+0x8c>)
 800a790:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a13      	ldr	r2, [pc, #76]	@ (800a7e4 <UART_InitCallbacksToDefault+0x90>)
 800a798:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a12      	ldr	r2, [pc, #72]	@ (800a7e8 <UART_InitCallbacksToDefault+0x94>)
 800a7a0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a11      	ldr	r2, [pc, #68]	@ (800a7ec <UART_InitCallbacksToDefault+0x98>)
 800a7a8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a10      	ldr	r2, [pc, #64]	@ (800a7f0 <UART_InitCallbacksToDefault+0x9c>)
 800a7b0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a7f4 <UART_InitCallbacksToDefault+0xa0>)
 800a7b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	0800a5e9 	.word	0x0800a5e9
 800a7cc:	0800a5d5 	.word	0x0800a5d5
 800a7d0:	0800a611 	.word	0x0800a611
 800a7d4:	0800a5fd 	.word	0x0800a5fd
 800a7d8:	0800a625 	.word	0x0800a625
 800a7dc:	0800a639 	.word	0x0800a639
 800a7e0:	0800a64d 	.word	0x0800a64d
 800a7e4:	0800a661 	.word	0x0800a661
 800a7e8:	0800b745 	.word	0x0800b745
 800a7ec:	0800b759 	.word	0x0800b759
 800a7f0:	0800b76d 	.word	0x0800b76d
 800a7f4:	0800a675 	.word	0x0800a675

0800a7f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7fc:	b08c      	sub	sp, #48	@ 0x30
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a802:	2300      	movs	r3, #0
 800a804:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	689a      	ldr	r2, [r3, #8]
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	431a      	orrs	r2, r3
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	431a      	orrs	r2, r3
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	69db      	ldr	r3, [r3, #28]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	4baa      	ldr	r3, [pc, #680]	@ (800aad0 <UART_SetConfig+0x2d8>)
 800a828:	4013      	ands	r3, r2
 800a82a:	697a      	ldr	r2, [r7, #20]
 800a82c:	6812      	ldr	r2, [r2, #0]
 800a82e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a830:	430b      	orrs	r3, r1
 800a832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	68da      	ldr	r2, [r3, #12]
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	430a      	orrs	r2, r1
 800a848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a9f      	ldr	r2, [pc, #636]	@ (800aad4 <UART_SetConfig+0x2dc>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d004      	beq.n	800a864 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a860:	4313      	orrs	r3, r2
 800a862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a86e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	6812      	ldr	r2, [r2, #0]
 800a876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a878:	430b      	orrs	r3, r1
 800a87a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a882:	f023 010f 	bic.w	r1, r3, #15
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a90      	ldr	r2, [pc, #576]	@ (800aad8 <UART_SetConfig+0x2e0>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d125      	bne.n	800a8e8 <UART_SetConfig+0xf0>
 800a89c:	4b8f      	ldr	r3, [pc, #572]	@ (800aadc <UART_SetConfig+0x2e4>)
 800a89e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8a2:	f003 0303 	and.w	r3, r3, #3
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	d81a      	bhi.n	800a8e0 <UART_SetConfig+0xe8>
 800a8aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a8b0 <UART_SetConfig+0xb8>)
 800a8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b0:	0800a8c1 	.word	0x0800a8c1
 800a8b4:	0800a8d1 	.word	0x0800a8d1
 800a8b8:	0800a8c9 	.word	0x0800a8c9
 800a8bc:	0800a8d9 	.word	0x0800a8d9
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8c6:	e116      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8ce:	e112      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a8d0:	2304      	movs	r3, #4
 800a8d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8d6:	e10e      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a8d8:	2308      	movs	r3, #8
 800a8da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8de:	e10a      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a8e0:	2310      	movs	r3, #16
 800a8e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8e6:	e106      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a7c      	ldr	r2, [pc, #496]	@ (800aae0 <UART_SetConfig+0x2e8>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d138      	bne.n	800a964 <UART_SetConfig+0x16c>
 800a8f2:	4b7a      	ldr	r3, [pc, #488]	@ (800aadc <UART_SetConfig+0x2e4>)
 800a8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8f8:	f003 030c 	and.w	r3, r3, #12
 800a8fc:	2b0c      	cmp	r3, #12
 800a8fe:	d82d      	bhi.n	800a95c <UART_SetConfig+0x164>
 800a900:	a201      	add	r2, pc, #4	@ (adr r2, 800a908 <UART_SetConfig+0x110>)
 800a902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a906:	bf00      	nop
 800a908:	0800a93d 	.word	0x0800a93d
 800a90c:	0800a95d 	.word	0x0800a95d
 800a910:	0800a95d 	.word	0x0800a95d
 800a914:	0800a95d 	.word	0x0800a95d
 800a918:	0800a94d 	.word	0x0800a94d
 800a91c:	0800a95d 	.word	0x0800a95d
 800a920:	0800a95d 	.word	0x0800a95d
 800a924:	0800a95d 	.word	0x0800a95d
 800a928:	0800a945 	.word	0x0800a945
 800a92c:	0800a95d 	.word	0x0800a95d
 800a930:	0800a95d 	.word	0x0800a95d
 800a934:	0800a95d 	.word	0x0800a95d
 800a938:	0800a955 	.word	0x0800a955
 800a93c:	2300      	movs	r3, #0
 800a93e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a942:	e0d8      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a944:	2302      	movs	r3, #2
 800a946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a94a:	e0d4      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a94c:	2304      	movs	r3, #4
 800a94e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a952:	e0d0      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a954:	2308      	movs	r3, #8
 800a956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a95a:	e0cc      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a95c:	2310      	movs	r3, #16
 800a95e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a962:	e0c8      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a5e      	ldr	r2, [pc, #376]	@ (800aae4 <UART_SetConfig+0x2ec>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d125      	bne.n	800a9ba <UART_SetConfig+0x1c2>
 800a96e:	4b5b      	ldr	r3, [pc, #364]	@ (800aadc <UART_SetConfig+0x2e4>)
 800a970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a974:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a978:	2b30      	cmp	r3, #48	@ 0x30
 800a97a:	d016      	beq.n	800a9aa <UART_SetConfig+0x1b2>
 800a97c:	2b30      	cmp	r3, #48	@ 0x30
 800a97e:	d818      	bhi.n	800a9b2 <UART_SetConfig+0x1ba>
 800a980:	2b20      	cmp	r3, #32
 800a982:	d00a      	beq.n	800a99a <UART_SetConfig+0x1a2>
 800a984:	2b20      	cmp	r3, #32
 800a986:	d814      	bhi.n	800a9b2 <UART_SetConfig+0x1ba>
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <UART_SetConfig+0x19a>
 800a98c:	2b10      	cmp	r3, #16
 800a98e:	d008      	beq.n	800a9a2 <UART_SetConfig+0x1aa>
 800a990:	e00f      	b.n	800a9b2 <UART_SetConfig+0x1ba>
 800a992:	2300      	movs	r3, #0
 800a994:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a998:	e0ad      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a99a:	2302      	movs	r3, #2
 800a99c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9a0:	e0a9      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a9a2:	2304      	movs	r3, #4
 800a9a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9a8:	e0a5      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a9aa:	2308      	movs	r3, #8
 800a9ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9b0:	e0a1      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a9b2:	2310      	movs	r3, #16
 800a9b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9b8:	e09d      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a4a      	ldr	r2, [pc, #296]	@ (800aae8 <UART_SetConfig+0x2f0>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d125      	bne.n	800aa10 <UART_SetConfig+0x218>
 800a9c4:	4b45      	ldr	r3, [pc, #276]	@ (800aadc <UART_SetConfig+0x2e4>)
 800a9c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a9ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800a9d0:	d016      	beq.n	800aa00 <UART_SetConfig+0x208>
 800a9d2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a9d4:	d818      	bhi.n	800aa08 <UART_SetConfig+0x210>
 800a9d6:	2b80      	cmp	r3, #128	@ 0x80
 800a9d8:	d00a      	beq.n	800a9f0 <UART_SetConfig+0x1f8>
 800a9da:	2b80      	cmp	r3, #128	@ 0x80
 800a9dc:	d814      	bhi.n	800aa08 <UART_SetConfig+0x210>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d002      	beq.n	800a9e8 <UART_SetConfig+0x1f0>
 800a9e2:	2b40      	cmp	r3, #64	@ 0x40
 800a9e4:	d008      	beq.n	800a9f8 <UART_SetConfig+0x200>
 800a9e6:	e00f      	b.n	800aa08 <UART_SetConfig+0x210>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9ee:	e082      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9f6:	e07e      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9fe:	e07a      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aa00:	2308      	movs	r3, #8
 800aa02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa06:	e076      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aa08:	2310      	movs	r3, #16
 800aa0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa0e:	e072      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a35      	ldr	r2, [pc, #212]	@ (800aaec <UART_SetConfig+0x2f4>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d12a      	bne.n	800aa70 <UART_SetConfig+0x278>
 800aa1a:	4b30      	ldr	r3, [pc, #192]	@ (800aadc <UART_SetConfig+0x2e4>)
 800aa1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa28:	d01a      	beq.n	800aa60 <UART_SetConfig+0x268>
 800aa2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa2e:	d81b      	bhi.n	800aa68 <UART_SetConfig+0x270>
 800aa30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa34:	d00c      	beq.n	800aa50 <UART_SetConfig+0x258>
 800aa36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa3a:	d815      	bhi.n	800aa68 <UART_SetConfig+0x270>
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d003      	beq.n	800aa48 <UART_SetConfig+0x250>
 800aa40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa44:	d008      	beq.n	800aa58 <UART_SetConfig+0x260>
 800aa46:	e00f      	b.n	800aa68 <UART_SetConfig+0x270>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa4e:	e052      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aa50:	2302      	movs	r3, #2
 800aa52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa56:	e04e      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aa58:	2304      	movs	r3, #4
 800aa5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa5e:	e04a      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aa60:	2308      	movs	r3, #8
 800aa62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa66:	e046      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aa68:	2310      	movs	r3, #16
 800aa6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa6e:	e042      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a17      	ldr	r2, [pc, #92]	@ (800aad4 <UART_SetConfig+0x2dc>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d13a      	bne.n	800aaf0 <UART_SetConfig+0x2f8>
 800aa7a:	4b18      	ldr	r3, [pc, #96]	@ (800aadc <UART_SetConfig+0x2e4>)
 800aa7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800aa84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa88:	d01a      	beq.n	800aac0 <UART_SetConfig+0x2c8>
 800aa8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa8e:	d81b      	bhi.n	800aac8 <UART_SetConfig+0x2d0>
 800aa90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa94:	d00c      	beq.n	800aab0 <UART_SetConfig+0x2b8>
 800aa96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa9a:	d815      	bhi.n	800aac8 <UART_SetConfig+0x2d0>
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d003      	beq.n	800aaa8 <UART_SetConfig+0x2b0>
 800aaa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aaa4:	d008      	beq.n	800aab8 <UART_SetConfig+0x2c0>
 800aaa6:	e00f      	b.n	800aac8 <UART_SetConfig+0x2d0>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaae:	e022      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aab0:	2302      	movs	r3, #2
 800aab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aab6:	e01e      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aab8:	2304      	movs	r3, #4
 800aaba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aabe:	e01a      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aac0:	2308      	movs	r3, #8
 800aac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aac6:	e016      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aac8:	2310      	movs	r3, #16
 800aaca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aace:	e012      	b.n	800aaf6 <UART_SetConfig+0x2fe>
 800aad0:	cfff69f3 	.word	0xcfff69f3
 800aad4:	40008000 	.word	0x40008000
 800aad8:	40013800 	.word	0x40013800
 800aadc:	40021000 	.word	0x40021000
 800aae0:	40004400 	.word	0x40004400
 800aae4:	40004800 	.word	0x40004800
 800aae8:	40004c00 	.word	0x40004c00
 800aaec:	40005000 	.word	0x40005000
 800aaf0:	2310      	movs	r3, #16
 800aaf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4aae      	ldr	r2, [pc, #696]	@ (800adb4 <UART_SetConfig+0x5bc>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	f040 8097 	bne.w	800ac30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab06:	2b08      	cmp	r3, #8
 800ab08:	d823      	bhi.n	800ab52 <UART_SetConfig+0x35a>
 800ab0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab10 <UART_SetConfig+0x318>)
 800ab0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab10:	0800ab35 	.word	0x0800ab35
 800ab14:	0800ab53 	.word	0x0800ab53
 800ab18:	0800ab3d 	.word	0x0800ab3d
 800ab1c:	0800ab53 	.word	0x0800ab53
 800ab20:	0800ab43 	.word	0x0800ab43
 800ab24:	0800ab53 	.word	0x0800ab53
 800ab28:	0800ab53 	.word	0x0800ab53
 800ab2c:	0800ab53 	.word	0x0800ab53
 800ab30:	0800ab4b 	.word	0x0800ab4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab34:	f7fc f8b2 	bl	8006c9c <HAL_RCC_GetPCLK1Freq>
 800ab38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab3a:	e010      	b.n	800ab5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab3c:	4b9e      	ldr	r3, [pc, #632]	@ (800adb8 <UART_SetConfig+0x5c0>)
 800ab3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab40:	e00d      	b.n	800ab5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab42:	f7fc f83d 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 800ab46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab48:	e009      	b.n	800ab5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab50:	e005      	b.n	800ab5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ab52:	2300      	movs	r3, #0
 800ab54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ab5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f000 8130 	beq.w	800adc6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6a:	4a94      	ldr	r2, [pc, #592]	@ (800adbc <UART_SetConfig+0x5c4>)
 800ab6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab70:	461a      	mov	r2, r3
 800ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	005b      	lsls	r3, r3, #1
 800ab82:	4413      	add	r3, r2
 800ab84:	69ba      	ldr	r2, [r7, #24]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d305      	bcc.n	800ab96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab90:	69ba      	ldr	r2, [r7, #24]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d903      	bls.n	800ab9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ab9c:	e113      	b.n	800adc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba0:	2200      	movs	r2, #0
 800aba2:	60bb      	str	r3, [r7, #8]
 800aba4:	60fa      	str	r2, [r7, #12]
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abaa:	4a84      	ldr	r2, [pc, #528]	@ (800adbc <UART_SetConfig+0x5c4>)
 800abac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	2200      	movs	r2, #0
 800abb4:	603b      	str	r3, [r7, #0]
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800abc0:	f7f6 f914 	bl	8000dec <__aeabi_uldivmod>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	4610      	mov	r0, r2
 800abca:	4619      	mov	r1, r3
 800abcc:	f04f 0200 	mov.w	r2, #0
 800abd0:	f04f 0300 	mov.w	r3, #0
 800abd4:	020b      	lsls	r3, r1, #8
 800abd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800abda:	0202      	lsls	r2, r0, #8
 800abdc:	6979      	ldr	r1, [r7, #20]
 800abde:	6849      	ldr	r1, [r1, #4]
 800abe0:	0849      	lsrs	r1, r1, #1
 800abe2:	2000      	movs	r0, #0
 800abe4:	460c      	mov	r4, r1
 800abe6:	4605      	mov	r5, r0
 800abe8:	eb12 0804 	adds.w	r8, r2, r4
 800abec:	eb43 0905 	adc.w	r9, r3, r5
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	469a      	mov	sl, r3
 800abf8:	4693      	mov	fp, r2
 800abfa:	4652      	mov	r2, sl
 800abfc:	465b      	mov	r3, fp
 800abfe:	4640      	mov	r0, r8
 800ac00:	4649      	mov	r1, r9
 800ac02:	f7f6 f8f3 	bl	8000dec <__aeabi_uldivmod>
 800ac06:	4602      	mov	r2, r0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac0e:	6a3b      	ldr	r3, [r7, #32]
 800ac10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac14:	d308      	bcc.n	800ac28 <UART_SetConfig+0x430>
 800ac16:	6a3b      	ldr	r3, [r7, #32]
 800ac18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac1c:	d204      	bcs.n	800ac28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	6a3a      	ldr	r2, [r7, #32]
 800ac24:	60da      	str	r2, [r3, #12]
 800ac26:	e0ce      	b.n	800adc6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ac2e:	e0ca      	b.n	800adc6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	69db      	ldr	r3, [r3, #28]
 800ac34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac38:	d166      	bne.n	800ad08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ac3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac3e:	2b08      	cmp	r3, #8
 800ac40:	d827      	bhi.n	800ac92 <UART_SetConfig+0x49a>
 800ac42:	a201      	add	r2, pc, #4	@ (adr r2, 800ac48 <UART_SetConfig+0x450>)
 800ac44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac48:	0800ac6d 	.word	0x0800ac6d
 800ac4c:	0800ac75 	.word	0x0800ac75
 800ac50:	0800ac7d 	.word	0x0800ac7d
 800ac54:	0800ac93 	.word	0x0800ac93
 800ac58:	0800ac83 	.word	0x0800ac83
 800ac5c:	0800ac93 	.word	0x0800ac93
 800ac60:	0800ac93 	.word	0x0800ac93
 800ac64:	0800ac93 	.word	0x0800ac93
 800ac68:	0800ac8b 	.word	0x0800ac8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac6c:	f7fc f816 	bl	8006c9c <HAL_RCC_GetPCLK1Freq>
 800ac70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac72:	e014      	b.n	800ac9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac74:	f7fc f828 	bl	8006cc8 <HAL_RCC_GetPCLK2Freq>
 800ac78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac7a:	e010      	b.n	800ac9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac7c:	4b4e      	ldr	r3, [pc, #312]	@ (800adb8 <UART_SetConfig+0x5c0>)
 800ac7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac80:	e00d      	b.n	800ac9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac82:	f7fb ff9d 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 800ac86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac88:	e009      	b.n	800ac9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac90:	e005      	b.n	800ac9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ac9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 8090 	beq.w	800adc6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acaa:	4a44      	ldr	r2, [pc, #272]	@ (800adbc <UART_SetConfig+0x5c4>)
 800acac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acb0:	461a      	mov	r2, r3
 800acb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800acb8:	005a      	lsls	r2, r3, #1
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	085b      	lsrs	r3, r3, #1
 800acc0:	441a      	add	r2, r3
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	2b0f      	cmp	r3, #15
 800acd0:	d916      	bls.n	800ad00 <UART_SetConfig+0x508>
 800acd2:	6a3b      	ldr	r3, [r7, #32]
 800acd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acd8:	d212      	bcs.n	800ad00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acda:	6a3b      	ldr	r3, [r7, #32]
 800acdc:	b29b      	uxth	r3, r3
 800acde:	f023 030f 	bic.w	r3, r3, #15
 800ace2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ace4:	6a3b      	ldr	r3, [r7, #32]
 800ace6:	085b      	lsrs	r3, r3, #1
 800ace8:	b29b      	uxth	r3, r3
 800acea:	f003 0307 	and.w	r3, r3, #7
 800acee:	b29a      	uxth	r2, r3
 800acf0:	8bfb      	ldrh	r3, [r7, #30]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	8bfa      	ldrh	r2, [r7, #30]
 800acfc:	60da      	str	r2, [r3, #12]
 800acfe:	e062      	b.n	800adc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad06:	e05e      	b.n	800adc6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad0c:	2b08      	cmp	r3, #8
 800ad0e:	d828      	bhi.n	800ad62 <UART_SetConfig+0x56a>
 800ad10:	a201      	add	r2, pc, #4	@ (adr r2, 800ad18 <UART_SetConfig+0x520>)
 800ad12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad16:	bf00      	nop
 800ad18:	0800ad3d 	.word	0x0800ad3d
 800ad1c:	0800ad45 	.word	0x0800ad45
 800ad20:	0800ad4d 	.word	0x0800ad4d
 800ad24:	0800ad63 	.word	0x0800ad63
 800ad28:	0800ad53 	.word	0x0800ad53
 800ad2c:	0800ad63 	.word	0x0800ad63
 800ad30:	0800ad63 	.word	0x0800ad63
 800ad34:	0800ad63 	.word	0x0800ad63
 800ad38:	0800ad5b 	.word	0x0800ad5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad3c:	f7fb ffae 	bl	8006c9c <HAL_RCC_GetPCLK1Freq>
 800ad40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad42:	e014      	b.n	800ad6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad44:	f7fb ffc0 	bl	8006cc8 <HAL_RCC_GetPCLK2Freq>
 800ad48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad4a:	e010      	b.n	800ad6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad4c:	4b1a      	ldr	r3, [pc, #104]	@ (800adb8 <UART_SetConfig+0x5c0>)
 800ad4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad50:	e00d      	b.n	800ad6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad52:	f7fb ff35 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 800ad56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad58:	e009      	b.n	800ad6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad60:	e005      	b.n	800ad6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ad62:	2300      	movs	r3, #0
 800ad64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ad6c:	bf00      	nop
    }

    if (pclk != 0U)
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d028      	beq.n	800adc6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad78:	4a10      	ldr	r2, [pc, #64]	@ (800adbc <UART_SetConfig+0x5c4>)
 800ad7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad82:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	085b      	lsrs	r3, r3, #1
 800ad8c:	441a      	add	r2, r3
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad98:	6a3b      	ldr	r3, [r7, #32]
 800ad9a:	2b0f      	cmp	r3, #15
 800ad9c:	d910      	bls.n	800adc0 <UART_SetConfig+0x5c8>
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ada4:	d20c      	bcs.n	800adc0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	60da      	str	r2, [r3, #12]
 800adb0:	e009      	b.n	800adc6 <UART_SetConfig+0x5ce>
 800adb2:	bf00      	nop
 800adb4:	40008000 	.word	0x40008000
 800adb8:	00f42400 	.word	0x00f42400
 800adbc:	0800bda8 	.word	0x0800bda8
      }
      else
      {
        ret = HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2201      	movs	r2, #1
 800adca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2201      	movs	r2, #1
 800add2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	2200      	movs	r2, #0
 800adda:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	2200      	movs	r2, #0
 800ade0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ade2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3730      	adds	r7, #48	@ 0x30
 800adea:	46bd      	mov	sp, r7
 800adec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800adf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adfc:	f003 0308 	and.w	r3, r3, #8
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00a      	beq.n	800ae1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	430a      	orrs	r2, r1
 800ae18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00a      	beq.n	800ae3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	430a      	orrs	r2, r1
 800ae3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae40:	f003 0302 	and.w	r3, r3, #2
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00a      	beq.n	800ae5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae62:	f003 0304 	and.w	r3, r3, #4
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	430a      	orrs	r2, r1
 800ae7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae84:	f003 0310 	and.w	r3, r3, #16
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00a      	beq.n	800aea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	430a      	orrs	r2, r1
 800aea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea6:	f003 0320 	and.w	r3, r3, #32
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00a      	beq.n	800aec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	430a      	orrs	r2, r1
 800aec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d01a      	beq.n	800af06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	430a      	orrs	r2, r1
 800aee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aeee:	d10a      	bne.n	800af06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	430a      	orrs	r2, r1
 800af04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00a      	beq.n	800af28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	430a      	orrs	r2, r1
 800af26:	605a      	str	r2, [r3, #4]
  }
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b098      	sub	sp, #96	@ 0x60
 800af38:	af02      	add	r7, sp, #8
 800af3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af44:	f7fa fb16 	bl	8005574 <HAL_GetTick>
 800af48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f003 0308 	and.w	r3, r3, #8
 800af54:	2b08      	cmp	r3, #8
 800af56:	d12f      	bne.n	800afb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af60:	2200      	movs	r2, #0
 800af62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f88e 	bl	800b088 <UART_WaitOnFlagUntilTimeout>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d022      	beq.n	800afb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7a:	e853 3f00 	ldrex	r3, [r3]
 800af7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af86:	653b      	str	r3, [r7, #80]	@ 0x50
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	461a      	mov	r2, r3
 800af8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af90:	647b      	str	r3, [r7, #68]	@ 0x44
 800af92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af98:	e841 2300 	strex	r3, r2, [r1]
 800af9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1e6      	bne.n	800af72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afb4:	2303      	movs	r3, #3
 800afb6:	e063      	b.n	800b080 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f003 0304 	and.w	r3, r3, #4
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	d149      	bne.n	800b05a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afce:	2200      	movs	r2, #0
 800afd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f857 	bl	800b088 <UART_WaitOnFlagUntilTimeout>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d03c      	beq.n	800b05a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe8:	e853 3f00 	ldrex	r3, [r3]
 800afec:	623b      	str	r3, [r7, #32]
   return(result);
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	461a      	mov	r2, r3
 800affc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800affe:	633b      	str	r3, [r7, #48]	@ 0x30
 800b000:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b006:	e841 2300 	strex	r3, r2, [r1]
 800b00a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1e6      	bne.n	800afe0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	3308      	adds	r3, #8
 800b018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	e853 3f00 	ldrex	r3, [r3]
 800b020:	60fb      	str	r3, [r7, #12]
   return(result);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f023 0301 	bic.w	r3, r3, #1
 800b028:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	3308      	adds	r3, #8
 800b030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b032:	61fa      	str	r2, [r7, #28]
 800b034:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b036:	69b9      	ldr	r1, [r7, #24]
 800b038:	69fa      	ldr	r2, [r7, #28]
 800b03a:	e841 2300 	strex	r3, r2, [r1]
 800b03e:	617b      	str	r3, [r7, #20]
   return(result);
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1e5      	bne.n	800b012 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2220      	movs	r2, #32
 800b04a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e012      	b.n	800b080 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2220      	movs	r2, #32
 800b05e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2220      	movs	r2, #32
 800b066:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3758      	adds	r7, #88	@ 0x58
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	4613      	mov	r3, r2
 800b096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b098:	e04f      	b.n	800b13a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a0:	d04b      	beq.n	800b13a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0a2:	f7fa fa67 	bl	8005574 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	69ba      	ldr	r2, [r7, #24]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d302      	bcc.n	800b0b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e04e      	b.n	800b15a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f003 0304 	and.w	r3, r3, #4
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d037      	beq.n	800b13a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	2b80      	cmp	r3, #128	@ 0x80
 800b0ce:	d034      	beq.n	800b13a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2b40      	cmp	r3, #64	@ 0x40
 800b0d4:	d031      	beq.n	800b13a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	69db      	ldr	r3, [r3, #28]
 800b0dc:	f003 0308 	and.w	r3, r3, #8
 800b0e0:	2b08      	cmp	r3, #8
 800b0e2:	d110      	bne.n	800b106 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2208      	movs	r2, #8
 800b0ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 f920 	bl	800b332 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2208      	movs	r2, #8
 800b0f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e029      	b.n	800b15a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	69db      	ldr	r3, [r3, #28]
 800b10c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b114:	d111      	bne.n	800b13a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b11e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 f906 	bl	800b332 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2220      	movs	r2, #32
 800b12a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b136:	2303      	movs	r3, #3
 800b138:	e00f      	b.n	800b15a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	69da      	ldr	r2, [r3, #28]
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	4013      	ands	r3, r2
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	429a      	cmp	r2, r3
 800b148:	bf0c      	ite	eq
 800b14a:	2301      	moveq	r3, #1
 800b14c:	2300      	movne	r3, #0
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	461a      	mov	r2, r3
 800b152:	79fb      	ldrb	r3, [r7, #7]
 800b154:	429a      	cmp	r2, r3
 800b156:	d0a0      	beq.n	800b09a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b096      	sub	sp, #88	@ 0x58
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4613      	mov	r3, r2
 800b170:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	88fa      	ldrh	r2, [r7, #6]
 800b17c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2222      	movs	r2, #34	@ 0x22
 800b18c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b196:	2b00      	cmp	r3, #0
 800b198:	d02d      	beq.n	800b1f6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1a0:	4a40      	ldr	r2, [pc, #256]	@ (800b2a4 <UART_Start_Receive_DMA+0x140>)
 800b1a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1aa:	4a3f      	ldr	r2, [pc, #252]	@ (800b2a8 <UART_Start_Receive_DMA+0x144>)
 800b1ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1b4:	4a3d      	ldr	r2, [pc, #244]	@ (800b2ac <UART_Start_Receive_DMA+0x148>)
 800b1b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1be:	2200      	movs	r2, #0
 800b1c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3324      	adds	r3, #36	@ 0x24
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	88fb      	ldrh	r3, [r7, #6]
 800b1d8:	f7fa fb90 	bl	80058fc <HAL_DMA_Start_IT>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d009      	beq.n	800b1f6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2210      	movs	r2, #16
 800b1e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2220      	movs	r2, #32
 800b1ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e051      	b.n	800b29a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d018      	beq.n	800b230 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b206:	e853 3f00 	ldrex	r3, [r3]
 800b20a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b20e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b212:	657b      	str	r3, [r7, #84]	@ 0x54
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	461a      	mov	r2, r3
 800b21a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b21c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b21e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b220:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b224:	e841 2300 	strex	r3, r2, [r1]
 800b228:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b22a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1e6      	bne.n	800b1fe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	3308      	adds	r3, #8
 800b236:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23a:	e853 3f00 	ldrex	r3, [r3]
 800b23e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b242:	f043 0301 	orr.w	r3, r3, #1
 800b246:	653b      	str	r3, [r7, #80]	@ 0x50
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3308      	adds	r3, #8
 800b24e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b250:	637a      	str	r2, [r7, #52]	@ 0x34
 800b252:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b254:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b256:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b258:	e841 2300 	strex	r3, r2, [r1]
 800b25c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1e5      	bne.n	800b230 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	3308      	adds	r3, #8
 800b26a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	e853 3f00 	ldrex	r3, [r3]
 800b272:	613b      	str	r3, [r7, #16]
   return(result);
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b27a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	3308      	adds	r3, #8
 800b282:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b284:	623a      	str	r2, [r7, #32]
 800b286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b288:	69f9      	ldr	r1, [r7, #28]
 800b28a:	6a3a      	ldr	r2, [r7, #32]
 800b28c:	e841 2300 	strex	r3, r2, [r1]
 800b290:	61bb      	str	r3, [r7, #24]
   return(result);
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1e5      	bne.n	800b264 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3758      	adds	r7, #88	@ 0x58
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	0800b4bd 	.word	0x0800b4bd
 800b2a8:	0800b5f1 	.word	0x0800b5f1
 800b2ac:	0800b637 	.word	0x0800b637

0800b2b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b08f      	sub	sp, #60	@ 0x3c
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2be:	6a3b      	ldr	r3, [r7, #32]
 800b2c0:	e853 3f00 	ldrex	r3, [r3]
 800b2c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b2cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2d8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2de:	e841 2300 	strex	r3, r2, [r1]
 800b2e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1e6      	bne.n	800b2b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3308      	adds	r3, #8
 800b2f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b300:	633b      	str	r3, [r7, #48]	@ 0x30
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3308      	adds	r3, #8
 800b308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b30a:	61ba      	str	r2, [r7, #24]
 800b30c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30e:	6979      	ldr	r1, [r7, #20]
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	e841 2300 	strex	r3, r2, [r1]
 800b316:	613b      	str	r3, [r7, #16]
   return(result);
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1e5      	bne.n	800b2ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2220      	movs	r2, #32
 800b322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b326:	bf00      	nop
 800b328:	373c      	adds	r7, #60	@ 0x3c
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b332:	b480      	push	{r7}
 800b334:	b095      	sub	sp, #84	@ 0x54
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b342:	e853 3f00 	ldrex	r3, [r3]
 800b346:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b34e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	461a      	mov	r2, r3
 800b356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b358:	643b      	str	r3, [r7, #64]	@ 0x40
 800b35a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b35e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b360:	e841 2300 	strex	r3, r2, [r1]
 800b364:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1e6      	bne.n	800b33a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3308      	adds	r3, #8
 800b372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b374:	6a3b      	ldr	r3, [r7, #32]
 800b376:	e853 3f00 	ldrex	r3, [r3]
 800b37a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b382:	f023 0301 	bic.w	r3, r3, #1
 800b386:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	3308      	adds	r3, #8
 800b38e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b390:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b392:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b398:	e841 2300 	strex	r3, r2, [r1]
 800b39c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1e3      	bne.n	800b36c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d118      	bne.n	800b3de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	f023 0310 	bic.w	r3, r3, #16
 800b3c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ca:	61bb      	str	r3, [r7, #24]
 800b3cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6979      	ldr	r1, [r7, #20]
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e6      	bne.n	800b3ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2220      	movs	r2, #32
 800b3e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b3f2:	bf00      	nop
 800b3f4:	3754      	adds	r7, #84	@ 0x54
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b090      	sub	sp, #64	@ 0x40
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b40a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 0320 	and.w	r3, r3, #32
 800b416:	2b00      	cmp	r3, #0
 800b418:	d137      	bne.n	800b48a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b41c:	2200      	movs	r2, #0
 800b41e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	3308      	adds	r3, #8
 800b428:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b42c:	e853 3f00 	ldrex	r3, [r3]
 800b430:	623b      	str	r3, [r7, #32]
   return(result);
 800b432:	6a3b      	ldr	r3, [r7, #32]
 800b434:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b438:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	3308      	adds	r3, #8
 800b440:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b442:	633a      	str	r2, [r7, #48]	@ 0x30
 800b444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b44a:	e841 2300 	strex	r3, r2, [r1]
 800b44e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1e5      	bne.n	800b422 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	e853 3f00 	ldrex	r3, [r3]
 800b462:	60fb      	str	r3, [r7, #12]
   return(result);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b46a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b46c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	461a      	mov	r2, r3
 800b472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b474:	61fb      	str	r3, [r7, #28]
 800b476:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b478:	69b9      	ldr	r1, [r7, #24]
 800b47a:	69fa      	ldr	r2, [r7, #28]
 800b47c:	e841 2300 	strex	r3, r2, [r1]
 800b480:	617b      	str	r3, [r7, #20]
   return(result);
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1e6      	bne.n	800b456 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b488:	e004      	b.n	800b494 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b48c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b490:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b492:	4798      	blx	r3
}
 800b494:	bf00      	nop
 800b496:	3740      	adds	r7, #64	@ 0x40
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4b4:	bf00      	nop
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b09c      	sub	sp, #112	@ 0x70
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0320 	and.w	r3, r3, #32
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d171      	bne.n	800b5bc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b4d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4e8:	e853 3f00 	ldrex	r3, [r3]
 800b4ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b4ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b4fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b500:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b502:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b504:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b50c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1e6      	bne.n	800b4e0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3308      	adds	r3, #8
 800b518:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51c:	e853 3f00 	ldrex	r3, [r3]
 800b520:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b524:	f023 0301 	bic.w	r3, r3, #1
 800b528:	667b      	str	r3, [r7, #100]	@ 0x64
 800b52a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3308      	adds	r3, #8
 800b530:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b532:	647a      	str	r2, [r7, #68]	@ 0x44
 800b534:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b536:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b538:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b53a:	e841 2300 	strex	r3, r2, [r1]
 800b53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1e5      	bne.n	800b512 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3308      	adds	r3, #8
 800b54c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b550:	e853 3f00 	ldrex	r3, [r3]
 800b554:	623b      	str	r3, [r7, #32]
   return(result);
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b55c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b55e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3308      	adds	r3, #8
 800b564:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b566:	633a      	str	r2, [r7, #48]	@ 0x30
 800b568:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b56c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b56e:	e841 2300 	strex	r3, r2, [r1]
 800b572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1e5      	bne.n	800b546 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b57a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b57c:	2220      	movs	r2, #32
 800b57e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b586:	2b01      	cmp	r3, #1
 800b588:	d118      	bne.n	800b5bc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b58a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	e853 3f00 	ldrex	r3, [r3]
 800b596:	60fb      	str	r3, [r7, #12]
   return(result);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f023 0310 	bic.w	r3, r3, #16
 800b59e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b5a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5a8:	61fb      	str	r3, [r7, #28]
 800b5aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ac:	69b9      	ldr	r1, [r7, #24]
 800b5ae:	69fa      	ldr	r2, [r7, #28]
 800b5b0:	e841 2300 	strex	r3, r2, [r1]
 800b5b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1e6      	bne.n	800b58a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5be:	2200      	movs	r2, #0
 800b5c0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d109      	bne.n	800b5de <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b5ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b5d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b5d2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5da:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5dc:	e004      	b.n	800b5e8 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b5de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b5e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5e6:	4798      	blx	r3
}
 800b5e8:	bf00      	nop
 800b5ea:	3770      	adds	r7, #112	@ 0x70
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2201      	movs	r2, #1
 800b602:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d10b      	bne.n	800b624 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b618:	0852      	lsrs	r2, r2, #1
 800b61a:	b292      	uxth	r2, r2
 800b61c:	4611      	mov	r1, r2
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b622:	e004      	b.n	800b62e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	4798      	blx	r3
}
 800b62e:	bf00      	nop
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b086      	sub	sp, #24
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b642:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b64a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b652:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b65e:	2b80      	cmp	r3, #128	@ 0x80
 800b660:	d109      	bne.n	800b676 <UART_DMAError+0x40>
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	2b21      	cmp	r3, #33	@ 0x21
 800b666:	d106      	bne.n	800b676 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b670:	6978      	ldr	r0, [r7, #20]
 800b672:	f7ff fe1d 	bl	800b2b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b680:	2b40      	cmp	r3, #64	@ 0x40
 800b682:	d109      	bne.n	800b698 <UART_DMAError+0x62>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2b22      	cmp	r3, #34	@ 0x22
 800b688:	d106      	bne.n	800b698 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b692:	6978      	ldr	r0, [r7, #20]
 800b694:	f7ff fe4d 	bl	800b332 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b69e:	f043 0210 	orr.w	r2, r3, #16
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b6ae:	6978      	ldr	r0, [r7, #20]
 800b6b0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6b2:	bf00      	nop
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b084      	sub	sp, #16
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6e2:	bf00      	nop
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b088      	sub	sp, #32
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	e853 3f00 	ldrex	r3, [r3]
 800b6fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b706:	61fb      	str	r3, [r7, #28]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	461a      	mov	r2, r3
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	61bb      	str	r3, [r7, #24]
 800b712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b714:	6979      	ldr	r1, [r7, #20]
 800b716:	69ba      	ldr	r2, [r7, #24]
 800b718:	e841 2300 	strex	r3, r2, [r1]
 800b71c:	613b      	str	r3, [r7, #16]
   return(result);
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e6      	bne.n	800b6f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2220      	movs	r2, #32
 800b728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b73c:	bf00      	nop
 800b73e:	3720      	adds	r7, #32
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b760:	bf00      	nop
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b774:	bf00      	nop
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d101      	bne.n	800b796 <HAL_UARTEx_DisableFifoMode+0x16>
 800b792:	2302      	movs	r3, #2
 800b794:	e027      	b.n	800b7e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2224      	movs	r2, #36	@ 0x24
 800b7a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f022 0201 	bic.w	r2, r2, #1
 800b7bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b7c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2220      	movs	r2, #32
 800b7d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b802:	2b01      	cmp	r3, #1
 800b804:	d101      	bne.n	800b80a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b806:	2302      	movs	r3, #2
 800b808:	e02d      	b.n	800b866 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2224      	movs	r2, #36	@ 0x24
 800b816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f022 0201 	bic.w	r2, r2, #1
 800b830:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	683a      	ldr	r2, [r7, #0]
 800b842:	430a      	orrs	r2, r1
 800b844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 f850 	bl	800b8ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2220      	movs	r2, #32
 800b858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b084      	sub	sp, #16
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d101      	bne.n	800b886 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b882:	2302      	movs	r3, #2
 800b884:	e02d      	b.n	800b8e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2224      	movs	r2, #36	@ 0x24
 800b892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f022 0201 	bic.w	r2, r2, #1
 800b8ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	683a      	ldr	r2, [r7, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f812 	bl	800b8ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2220      	movs	r2, #32
 800b8d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
	...

0800b8ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d108      	bne.n	800b90e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b90c:	e031      	b.n	800b972 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b90e:	2308      	movs	r3, #8
 800b910:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b912:	2308      	movs	r3, #8
 800b914:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	0e5b      	lsrs	r3, r3, #25
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	f003 0307 	and.w	r3, r3, #7
 800b924:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	0f5b      	lsrs	r3, r3, #29
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	f003 0307 	and.w	r3, r3, #7
 800b934:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b936:	7bbb      	ldrb	r3, [r7, #14]
 800b938:	7b3a      	ldrb	r2, [r7, #12]
 800b93a:	4911      	ldr	r1, [pc, #68]	@ (800b980 <UARTEx_SetNbDataToProcess+0x94>)
 800b93c:	5c8a      	ldrb	r2, [r1, r2]
 800b93e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b942:	7b3a      	ldrb	r2, [r7, #12]
 800b944:	490f      	ldr	r1, [pc, #60]	@ (800b984 <UARTEx_SetNbDataToProcess+0x98>)
 800b946:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b948:	fb93 f3f2 	sdiv	r3, r3, r2
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b954:	7bfb      	ldrb	r3, [r7, #15]
 800b956:	7b7a      	ldrb	r2, [r7, #13]
 800b958:	4909      	ldr	r1, [pc, #36]	@ (800b980 <UARTEx_SetNbDataToProcess+0x94>)
 800b95a:	5c8a      	ldrb	r2, [r1, r2]
 800b95c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b960:	7b7a      	ldrb	r2, [r7, #13]
 800b962:	4908      	ldr	r1, [pc, #32]	@ (800b984 <UARTEx_SetNbDataToProcess+0x98>)
 800b964:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b966:	fb93 f3f2 	sdiv	r3, r3, r2
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b972:	bf00      	nop
 800b974:	3714      	adds	r7, #20
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	0800bdc0 	.word	0x0800bdc0
 800b984:	0800bdc8 	.word	0x0800bdc8

0800b988 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	ed93 7a06 	vldr	s14, [r3, #24]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	edd3 7a07 	vldr	s15, [r3, #28]
 800b99e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	edd3 7a08 	vldr	s15, [r3, #32]
 800b9a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	edd3 7a06 	vldr	s15, [r3, #24]
 800b9b8:	eeb1 7a67 	vneg.f32	s14, s15
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	edd3 7a08 	vldr	s15, [r3, #32]
 800b9c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b9c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a1a      	ldr	r2, [r3, #32]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d006      	beq.n	800b9ec <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	330c      	adds	r3, #12
 800b9e2:	220c      	movs	r2, #12
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 f804 	bl	800b9f4 <memset>
  }

}
 800b9ec:	bf00      	nop
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <memset>:
 800b9f4:	4402      	add	r2, r0
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d100      	bne.n	800b9fe <memset+0xa>
 800b9fc:	4770      	bx	lr
 800b9fe:	f803 1b01 	strb.w	r1, [r3], #1
 800ba02:	e7f9      	b.n	800b9f8 <memset+0x4>

0800ba04 <__errno>:
 800ba04:	4b01      	ldr	r3, [pc, #4]	@ (800ba0c <__errno+0x8>)
 800ba06:	6818      	ldr	r0, [r3, #0]
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	20000228 	.word	0x20000228

0800ba10 <__libc_init_array>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	4d0d      	ldr	r5, [pc, #52]	@ (800ba48 <__libc_init_array+0x38>)
 800ba14:	4c0d      	ldr	r4, [pc, #52]	@ (800ba4c <__libc_init_array+0x3c>)
 800ba16:	1b64      	subs	r4, r4, r5
 800ba18:	10a4      	asrs	r4, r4, #2
 800ba1a:	2600      	movs	r6, #0
 800ba1c:	42a6      	cmp	r6, r4
 800ba1e:	d109      	bne.n	800ba34 <__libc_init_array+0x24>
 800ba20:	4d0b      	ldr	r5, [pc, #44]	@ (800ba50 <__libc_init_array+0x40>)
 800ba22:	4c0c      	ldr	r4, [pc, #48]	@ (800ba54 <__libc_init_array+0x44>)
 800ba24:	f000 f9a8 	bl	800bd78 <_init>
 800ba28:	1b64      	subs	r4, r4, r5
 800ba2a:	10a4      	asrs	r4, r4, #2
 800ba2c:	2600      	movs	r6, #0
 800ba2e:	42a6      	cmp	r6, r4
 800ba30:	d105      	bne.n	800ba3e <__libc_init_array+0x2e>
 800ba32:	bd70      	pop	{r4, r5, r6, pc}
 800ba34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba38:	4798      	blx	r3
 800ba3a:	3601      	adds	r6, #1
 800ba3c:	e7ee      	b.n	800ba1c <__libc_init_array+0xc>
 800ba3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba42:	4798      	blx	r3
 800ba44:	3601      	adds	r6, #1
 800ba46:	e7f2      	b.n	800ba2e <__libc_init_array+0x1e>
 800ba48:	0800bdd8 	.word	0x0800bdd8
 800ba4c:	0800bdd8 	.word	0x0800bdd8
 800ba50:	0800bdd8 	.word	0x0800bdd8
 800ba54:	0800bddc 	.word	0x0800bddc

0800ba58 <memcpy>:
 800ba58:	440a      	add	r2, r1
 800ba5a:	4291      	cmp	r1, r2
 800ba5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba60:	d100      	bne.n	800ba64 <memcpy+0xc>
 800ba62:	4770      	bx	lr
 800ba64:	b510      	push	{r4, lr}
 800ba66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba6e:	4291      	cmp	r1, r2
 800ba70:	d1f9      	bne.n	800ba66 <memcpy+0xe>
 800ba72:	bd10      	pop	{r4, pc}

0800ba74 <sqrt>:
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	ed2d 8b02 	vpush	{d8}
 800ba7a:	ec55 4b10 	vmov	r4, r5, d0
 800ba7e:	f000 f825 	bl	800bacc <__ieee754_sqrt>
 800ba82:	4622      	mov	r2, r4
 800ba84:	462b      	mov	r3, r5
 800ba86:	4620      	mov	r0, r4
 800ba88:	4629      	mov	r1, r5
 800ba8a:	eeb0 8a40 	vmov.f32	s16, s0
 800ba8e:	eef0 8a60 	vmov.f32	s17, s1
 800ba92:	f7f5 f817 	bl	8000ac4 <__aeabi_dcmpun>
 800ba96:	b990      	cbnz	r0, 800babe <sqrt+0x4a>
 800ba98:	2200      	movs	r2, #0
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	4629      	mov	r1, r5
 800baa0:	f7f4 ffe8 	bl	8000a74 <__aeabi_dcmplt>
 800baa4:	b158      	cbz	r0, 800babe <sqrt+0x4a>
 800baa6:	f7ff ffad 	bl	800ba04 <__errno>
 800baaa:	2321      	movs	r3, #33	@ 0x21
 800baac:	6003      	str	r3, [r0, #0]
 800baae:	2200      	movs	r2, #0
 800bab0:	2300      	movs	r3, #0
 800bab2:	4610      	mov	r0, r2
 800bab4:	4619      	mov	r1, r3
 800bab6:	f7f4 fe95 	bl	80007e4 <__aeabi_ddiv>
 800baba:	ec41 0b18 	vmov	d8, r0, r1
 800babe:	eeb0 0a48 	vmov.f32	s0, s16
 800bac2:	eef0 0a68 	vmov.f32	s1, s17
 800bac6:	ecbd 8b02 	vpop	{d8}
 800baca:	bd38      	pop	{r3, r4, r5, pc}

0800bacc <__ieee754_sqrt>:
 800bacc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad0:	4a68      	ldr	r2, [pc, #416]	@ (800bc74 <__ieee754_sqrt+0x1a8>)
 800bad2:	ec55 4b10 	vmov	r4, r5, d0
 800bad6:	43aa      	bics	r2, r5
 800bad8:	462b      	mov	r3, r5
 800bada:	4621      	mov	r1, r4
 800badc:	d110      	bne.n	800bb00 <__ieee754_sqrt+0x34>
 800bade:	4622      	mov	r2, r4
 800bae0:	4620      	mov	r0, r4
 800bae2:	4629      	mov	r1, r5
 800bae4:	f7f4 fd54 	bl	8000590 <__aeabi_dmul>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	4620      	mov	r0, r4
 800baee:	4629      	mov	r1, r5
 800baf0:	f7f4 fb98 	bl	8000224 <__adddf3>
 800baf4:	4604      	mov	r4, r0
 800baf6:	460d      	mov	r5, r1
 800baf8:	ec45 4b10 	vmov	d0, r4, r5
 800bafc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb00:	2d00      	cmp	r5, #0
 800bb02:	dc0e      	bgt.n	800bb22 <__ieee754_sqrt+0x56>
 800bb04:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bb08:	4322      	orrs	r2, r4
 800bb0a:	d0f5      	beq.n	800baf8 <__ieee754_sqrt+0x2c>
 800bb0c:	b19d      	cbz	r5, 800bb36 <__ieee754_sqrt+0x6a>
 800bb0e:	4622      	mov	r2, r4
 800bb10:	4620      	mov	r0, r4
 800bb12:	4629      	mov	r1, r5
 800bb14:	f7f4 fb84 	bl	8000220 <__aeabi_dsub>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	f7f4 fe62 	bl	80007e4 <__aeabi_ddiv>
 800bb20:	e7e8      	b.n	800baf4 <__ieee754_sqrt+0x28>
 800bb22:	152a      	asrs	r2, r5, #20
 800bb24:	d115      	bne.n	800bb52 <__ieee754_sqrt+0x86>
 800bb26:	2000      	movs	r0, #0
 800bb28:	e009      	b.n	800bb3e <__ieee754_sqrt+0x72>
 800bb2a:	0acb      	lsrs	r3, r1, #11
 800bb2c:	3a15      	subs	r2, #21
 800bb2e:	0549      	lsls	r1, r1, #21
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d0fa      	beq.n	800bb2a <__ieee754_sqrt+0x5e>
 800bb34:	e7f7      	b.n	800bb26 <__ieee754_sqrt+0x5a>
 800bb36:	462a      	mov	r2, r5
 800bb38:	e7fa      	b.n	800bb30 <__ieee754_sqrt+0x64>
 800bb3a:	005b      	lsls	r3, r3, #1
 800bb3c:	3001      	adds	r0, #1
 800bb3e:	02dc      	lsls	r4, r3, #11
 800bb40:	d5fb      	bpl.n	800bb3a <__ieee754_sqrt+0x6e>
 800bb42:	1e44      	subs	r4, r0, #1
 800bb44:	1b12      	subs	r2, r2, r4
 800bb46:	f1c0 0420 	rsb	r4, r0, #32
 800bb4a:	fa21 f404 	lsr.w	r4, r1, r4
 800bb4e:	4323      	orrs	r3, r4
 800bb50:	4081      	lsls	r1, r0
 800bb52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb56:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bb5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb5e:	07d2      	lsls	r2, r2, #31
 800bb60:	bf5c      	itt	pl
 800bb62:	005b      	lslpl	r3, r3, #1
 800bb64:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bb68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bb6c:	bf58      	it	pl
 800bb6e:	0049      	lslpl	r1, r1, #1
 800bb70:	2600      	movs	r6, #0
 800bb72:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bb76:	106d      	asrs	r5, r5, #1
 800bb78:	0049      	lsls	r1, r1, #1
 800bb7a:	2016      	movs	r0, #22
 800bb7c:	4632      	mov	r2, r6
 800bb7e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bb82:	1917      	adds	r7, r2, r4
 800bb84:	429f      	cmp	r7, r3
 800bb86:	bfde      	ittt	le
 800bb88:	193a      	addle	r2, r7, r4
 800bb8a:	1bdb      	suble	r3, r3, r7
 800bb8c:	1936      	addle	r6, r6, r4
 800bb8e:	0fcf      	lsrs	r7, r1, #31
 800bb90:	3801      	subs	r0, #1
 800bb92:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bb96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bb9a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bb9e:	d1f0      	bne.n	800bb82 <__ieee754_sqrt+0xb6>
 800bba0:	4604      	mov	r4, r0
 800bba2:	2720      	movs	r7, #32
 800bba4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	eb00 0e0c 	add.w	lr, r0, ip
 800bbae:	db02      	blt.n	800bbb6 <__ieee754_sqrt+0xea>
 800bbb0:	d113      	bne.n	800bbda <__ieee754_sqrt+0x10e>
 800bbb2:	458e      	cmp	lr, r1
 800bbb4:	d811      	bhi.n	800bbda <__ieee754_sqrt+0x10e>
 800bbb6:	f1be 0f00 	cmp.w	lr, #0
 800bbba:	eb0e 000c 	add.w	r0, lr, ip
 800bbbe:	da42      	bge.n	800bc46 <__ieee754_sqrt+0x17a>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	db40      	blt.n	800bc46 <__ieee754_sqrt+0x17a>
 800bbc4:	f102 0801 	add.w	r8, r2, #1
 800bbc8:	1a9b      	subs	r3, r3, r2
 800bbca:	458e      	cmp	lr, r1
 800bbcc:	bf88      	it	hi
 800bbce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bbd2:	eba1 010e 	sub.w	r1, r1, lr
 800bbd6:	4464      	add	r4, ip
 800bbd8:	4642      	mov	r2, r8
 800bbda:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bbde:	3f01      	subs	r7, #1
 800bbe0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bbe4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bbe8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bbec:	d1dc      	bne.n	800bba8 <__ieee754_sqrt+0xdc>
 800bbee:	4319      	orrs	r1, r3
 800bbf0:	d01b      	beq.n	800bc2a <__ieee754_sqrt+0x15e>
 800bbf2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800bc78 <__ieee754_sqrt+0x1ac>
 800bbf6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800bc7c <__ieee754_sqrt+0x1b0>
 800bbfa:	e9da 0100 	ldrd	r0, r1, [sl]
 800bbfe:	e9db 2300 	ldrd	r2, r3, [fp]
 800bc02:	f7f4 fb0d 	bl	8000220 <__aeabi_dsub>
 800bc06:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4640      	mov	r0, r8
 800bc10:	4649      	mov	r1, r9
 800bc12:	f7f4 ff39 	bl	8000a88 <__aeabi_dcmple>
 800bc16:	b140      	cbz	r0, 800bc2a <__ieee754_sqrt+0x15e>
 800bc18:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bc1c:	e9da 0100 	ldrd	r0, r1, [sl]
 800bc20:	e9db 2300 	ldrd	r2, r3, [fp]
 800bc24:	d111      	bne.n	800bc4a <__ieee754_sqrt+0x17e>
 800bc26:	3601      	adds	r6, #1
 800bc28:	463c      	mov	r4, r7
 800bc2a:	1072      	asrs	r2, r6, #1
 800bc2c:	0863      	lsrs	r3, r4, #1
 800bc2e:	07f1      	lsls	r1, r6, #31
 800bc30:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bc34:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bc38:	bf48      	it	mi
 800bc3a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bc3e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bc42:	4618      	mov	r0, r3
 800bc44:	e756      	b.n	800baf4 <__ieee754_sqrt+0x28>
 800bc46:	4690      	mov	r8, r2
 800bc48:	e7be      	b.n	800bbc8 <__ieee754_sqrt+0xfc>
 800bc4a:	f7f4 faeb 	bl	8000224 <__adddf3>
 800bc4e:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc52:	4602      	mov	r2, r0
 800bc54:	460b      	mov	r3, r1
 800bc56:	4640      	mov	r0, r8
 800bc58:	4649      	mov	r1, r9
 800bc5a:	f7f4 ff0b 	bl	8000a74 <__aeabi_dcmplt>
 800bc5e:	b120      	cbz	r0, 800bc6a <__ieee754_sqrt+0x19e>
 800bc60:	1ca0      	adds	r0, r4, #2
 800bc62:	bf08      	it	eq
 800bc64:	3601      	addeq	r6, #1
 800bc66:	3402      	adds	r4, #2
 800bc68:	e7df      	b.n	800bc2a <__ieee754_sqrt+0x15e>
 800bc6a:	1c63      	adds	r3, r4, #1
 800bc6c:	f023 0401 	bic.w	r4, r3, #1
 800bc70:	e7db      	b.n	800bc2a <__ieee754_sqrt+0x15e>
 800bc72:	bf00      	nop
 800bc74:	7ff00000 	.word	0x7ff00000
 800bc78:	20000280 	.word	0x20000280
 800bc7c:	20000278 	.word	0x20000278

0800bc80 <floor>:
 800bc80:	ec51 0b10 	vmov	r0, r1, d0
 800bc84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc8c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800bc90:	2e13      	cmp	r6, #19
 800bc92:	460c      	mov	r4, r1
 800bc94:	4605      	mov	r5, r0
 800bc96:	4680      	mov	r8, r0
 800bc98:	dc34      	bgt.n	800bd04 <floor+0x84>
 800bc9a:	2e00      	cmp	r6, #0
 800bc9c:	da17      	bge.n	800bcce <floor+0x4e>
 800bc9e:	a332      	add	r3, pc, #200	@ (adr r3, 800bd68 <floor+0xe8>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	f7f4 fabe 	bl	8000224 <__adddf3>
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f7f4 ff00 	bl	8000ab0 <__aeabi_dcmpgt>
 800bcb0:	b150      	cbz	r0, 800bcc8 <floor+0x48>
 800bcb2:	2c00      	cmp	r4, #0
 800bcb4:	da55      	bge.n	800bd62 <floor+0xe2>
 800bcb6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800bcba:	432c      	orrs	r4, r5
 800bcbc:	2500      	movs	r5, #0
 800bcbe:	42ac      	cmp	r4, r5
 800bcc0:	4c2b      	ldr	r4, [pc, #172]	@ (800bd70 <floor+0xf0>)
 800bcc2:	bf08      	it	eq
 800bcc4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4628      	mov	r0, r5
 800bccc:	e023      	b.n	800bd16 <floor+0x96>
 800bcce:	4f29      	ldr	r7, [pc, #164]	@ (800bd74 <floor+0xf4>)
 800bcd0:	4137      	asrs	r7, r6
 800bcd2:	ea01 0307 	and.w	r3, r1, r7
 800bcd6:	4303      	orrs	r3, r0
 800bcd8:	d01d      	beq.n	800bd16 <floor+0x96>
 800bcda:	a323      	add	r3, pc, #140	@ (adr r3, 800bd68 <floor+0xe8>)
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	f7f4 faa0 	bl	8000224 <__adddf3>
 800bce4:	2200      	movs	r2, #0
 800bce6:	2300      	movs	r3, #0
 800bce8:	f7f4 fee2 	bl	8000ab0 <__aeabi_dcmpgt>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d0eb      	beq.n	800bcc8 <floor+0x48>
 800bcf0:	2c00      	cmp	r4, #0
 800bcf2:	bfbe      	ittt	lt
 800bcf4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800bcf8:	4133      	asrlt	r3, r6
 800bcfa:	18e4      	addlt	r4, r4, r3
 800bcfc:	ea24 0407 	bic.w	r4, r4, r7
 800bd00:	2500      	movs	r5, #0
 800bd02:	e7e1      	b.n	800bcc8 <floor+0x48>
 800bd04:	2e33      	cmp	r6, #51	@ 0x33
 800bd06:	dd0a      	ble.n	800bd1e <floor+0x9e>
 800bd08:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800bd0c:	d103      	bne.n	800bd16 <floor+0x96>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	f7f4 fa87 	bl	8000224 <__adddf3>
 800bd16:	ec41 0b10 	vmov	d0, r0, r1
 800bd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd1e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800bd22:	f04f 37ff 	mov.w	r7, #4294967295
 800bd26:	40df      	lsrs	r7, r3
 800bd28:	4207      	tst	r7, r0
 800bd2a:	d0f4      	beq.n	800bd16 <floor+0x96>
 800bd2c:	a30e      	add	r3, pc, #56	@ (adr r3, 800bd68 <floor+0xe8>)
 800bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd32:	f7f4 fa77 	bl	8000224 <__adddf3>
 800bd36:	2200      	movs	r2, #0
 800bd38:	2300      	movs	r3, #0
 800bd3a:	f7f4 feb9 	bl	8000ab0 <__aeabi_dcmpgt>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d0c2      	beq.n	800bcc8 <floor+0x48>
 800bd42:	2c00      	cmp	r4, #0
 800bd44:	da0a      	bge.n	800bd5c <floor+0xdc>
 800bd46:	2e14      	cmp	r6, #20
 800bd48:	d101      	bne.n	800bd4e <floor+0xce>
 800bd4a:	3401      	adds	r4, #1
 800bd4c:	e006      	b.n	800bd5c <floor+0xdc>
 800bd4e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800bd52:	2301      	movs	r3, #1
 800bd54:	40b3      	lsls	r3, r6
 800bd56:	441d      	add	r5, r3
 800bd58:	4545      	cmp	r5, r8
 800bd5a:	d3f6      	bcc.n	800bd4a <floor+0xca>
 800bd5c:	ea25 0507 	bic.w	r5, r5, r7
 800bd60:	e7b2      	b.n	800bcc8 <floor+0x48>
 800bd62:	2500      	movs	r5, #0
 800bd64:	462c      	mov	r4, r5
 800bd66:	e7af      	b.n	800bcc8 <floor+0x48>
 800bd68:	8800759c 	.word	0x8800759c
 800bd6c:	7e37e43c 	.word	0x7e37e43c
 800bd70:	bff00000 	.word	0xbff00000
 800bd74:	000fffff 	.word	0x000fffff

0800bd78 <_init>:
 800bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7a:	bf00      	nop
 800bd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd7e:	bc08      	pop	{r3}
 800bd80:	469e      	mov	lr, r3
 800bd82:	4770      	bx	lr

0800bd84 <_fini>:
 800bd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd86:	bf00      	nop
 800bd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd8a:	bc08      	pop	{r3}
 800bd8c:	469e      	mov	lr, r3
 800bd8e:	4770      	bx	lr
