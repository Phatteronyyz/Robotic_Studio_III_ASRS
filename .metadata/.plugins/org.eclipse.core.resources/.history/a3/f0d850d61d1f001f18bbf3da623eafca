///*
// * pidControl.c
// *
// *  Created on: May 31, 2024
// *      Author: Phatt
// */
//
//
//void changeUnit(){
//	QEI_mm = (QEI_raw/8192.0)*25.326*pi;
//}
//
//void HomemadePID(){
////	Now Lastime error errorsum kp ki kd Iterm dinput Lasterror
//	set_point = traj[0];
//	static uint32_t timestamp = 0;
//	if (timestamp < __HAL_TIM_GET_COUNTER(&htim2)) {
//		timestamp = __HAL_TIM_GET_COUNTER(&htim2) + 1000;
//		Now = __HAL_TIM_GET_COUNTER(&htim2);
//		error = set_point - QEI_mm;
//
//		if(error > 32768)
//			error -= 65536;
//		if(error < -32768)
//			error += 65536;
//
//		if(error > 0){
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,1);
//			errorsum = errorsum + (error*(Now-Lastime)/10000);
//			Iterm = ki*errorsum;
//			if(Iterm < -65535 || Iterm > 65535){
//				errorsum = (Iterm/ki) - (error*(Now-Lastime));
//			}
//			dinput = (error-Lasterror)/(Now-Lastime);
//			Vfeedback = (kp*error)+(ki*errorsum)+(kd*dinput);
//			if(Vfeedback > 65536){
//				Vfeedback = 65536;
//			}
//
//			PWMset = (Vfeedback/65536.0)*30000;
//		}
//		else if(error < 0){
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,1);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
//			error = error*(-1);
//
//			if(temp_check == 3){
//				if(t < Time_acc){
//					PWMset = 6000;
//				}
//				else if(t < Time_const+Time_acc){
//					PWMset = 7000;
//				}
//				else if(t < Time_const+Time_acc+Time_dec){
//					PWMset = 4000;
//				}
//			}
//			else if(temp_check == 4){
//				if(t < Time_acc_tri*1.4){
//					PWMset = 7000;
//				}
//				else if(t < Time_acc_tri*2){
//					PWMset = 3700;
//				}
//			}
//		}
//		else if(error == 0){
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,0);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,0);
//		}
//
//		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, PWMset);
//
//		Lastime = Now;
//		Lasterror = error;
//	}
//}
//
//void Trajectory(){
//	Distance = trajec_target - QEI_start;
//	Time_acc = Vmax / Amax;
//	Time_dec = Time_acc;
//
//
//	time_now = __HAL_TIM_GET_COUNTER(&htim2);
//
//	if(trajec_target >= 0 && trajec_state == 0){
//		trajec_state = 1;
//		Timestamp = time_now;
//		QEI_start = QEI_mm;
//		pos = QEI_start;
//	}
//	else if(Distance > 0 && trajec_state == 1){	//Run Up
//		kp = 520;
//		ki = 10;
//		kd = 1;
//		Distance_Velo_Max = -(Vmax*Time_acc) + Distance ;
//		t = (time_now - Timestamp)/1000000.0;  //s
//		if(Distance_Velo_Max > 0){						//Trapezoi
//			temp_check = 1;
//			Time_const = Distance_Velo_Max/Vmax;
//			if(t < Time_acc){
//				traj[2] = Amax;
//				traj[1] = Amax*t;
//				traj[0] = (Amax/2.0)*t*t + pos;
//				temp_pos_acc = traj[0];
//			}
//			else if(t < Time_const+Time_acc){
//				traj[2] = 0;
//				traj[1] = Vmax;
//				traj[0] = (Vmax*(t-Time_acc)) + temp_pos_acc;
//				temp_pos_const = traj[0];
//			}
//			else if(t < Time_const+Time_acc+Time_dec){
//				traj[2] = -Amax;
//				traj[1] = (traj[2]*(t-Time_const-Time_acc)) + Vmax;
//				traj[0] = ((Amax/2)*(t-Time_const-Time_acc)*(t-Time_const-Time_acc))+(traj[1]*(t-Time_const-Time_acc))+temp_pos_const;
//			}
//			else{
//				trajec_state = 0;
//				trajec_target = -10;
//				traj[2] = 0;
//				temp_pos_acc = 0;
//				temp_pos_const = 0;
//			}
//		}
//		else if(Distance_Velo_Max <= 0){				//Triangle
//			temp_check = 2;
//			Time_acc_tri = sqrt(Distance/Amax);
//			if(t < Time_acc_tri){
//				traj[2] = Amax;
//				traj[1] = Amax*t;
//				traj[0] = (Amax/2.0)*t*t + pos;
//				temp_pos_acc = traj[0];
//				temp_v_acc = traj[1];
//			}
//			else if(t < Time_acc_tri*2){
//				traj[2] = -Amax;
//				traj[1] = temp_v_acc - (Amax*(t-Time_acc_tri));
//				traj[0] = ((Amax/2.0)*(t-Time_acc_tri)*(t-Time_acc_tri))+(traj[1]*(t-Time_acc_tri))+temp_pos_acc;
//			}
//			else{
//				trajec_state = 0;
//				trajec_target = -10;
//				traj[2] = 0;
//				Time_acc_tri = 0;
//				temp_pos_acc = 0;
//				temp_v_acc = 0;
//			}
//		}
//	}
//	else if(Distance < 0 && trajec_state == 1){        		// Run Down
//		kp = 200;
//		ki = 10;
//		kd = 8;
//		Distance_Velo_Max = (Vmax*Time_acc) + Distance ;
//		t = (time_now - Timestamp)/1000000.0;  //s
//		if(Distance_Velo_Max < 0){							//Trapezoi
//			temp_check = 3;
//			Time_const = Distance_Velo_Max/Vmax;
//			if(t < Time_acc){
//				traj[2] = -Amax;
//				traj[1] = -Amax*t;
//				traj[0] = (-Amax/2.0)*t*t + pos;
//				temp_pos_acc = traj[0];
//			}
//			else if(t < Time_const+Time_acc){
//				traj[2] = 0;
//				traj[1] = -Vmax;
//				traj[0] = (-Vmax*(t-Time_acc)) + temp_pos_acc;
//				temp_pos_const = traj[0];
//			}
//			else if(t < Time_const+Time_acc+Time_dec){
//				traj[2] = Amax;
//				traj[1] = (traj[2]*(t-Time_const-Time_acc)) - Vmax;
//				traj[0] = ((Amax/2)*(t-Time_const-Time_acc)*(t-Time_const-Time_acc))+(traj[1]*(t-Time_const-Time_acc))+temp_pos_const;
//			}
//			else{
//				trajec_state = 0;
//				trajec_target = -10;
//				traj[2] = 0;
//				temp_pos_acc = 0;
//				temp_pos_const = 0;
//			}
//		}
//		else if(Distance_Velo_Max >= 0){					//Triangle
//			temp_check = 4;
//			Time_acc_tri = sqrt(-Distance/Amax);
//			if(t < Time_acc_tri){
//				traj[2] = -Amax;
//				traj[1] = -Amax*t;
//				traj[0] = (-Amax/2.0)*t*t + pos;
//				temp_pos_acc = traj[0];
//				temp_v_acc = traj[1];
//			}
//			else if(t < Time_acc_tri*2){
//				traj[2] = Amax;
//				traj[1] = temp_v_acc + (Amax*(t-Time_acc_tri));
//				traj[0] = ((-Amax/2.0)*(t-Time_acc_tri)*(t-Time_acc_tri))+(traj[1]*(t-Time_acc_tri))+temp_pos_acc;
//			}
//			else{
//				trajec_state = 0;
//				trajec_target = -10;
//				traj[2] = 0;
//				Time_acc_tri = 0;
//				temp_pos_acc = 0;
//				temp_v_acc = 0;
//			}
//		}
//	}
//}
